
sx1262dvk1das.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d768  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  0800d8f0  0800d8f0  0000e8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4d0  0800e4d0  000100e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e4d0  0800e4d0  0000f4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4d8  0800e4d8  000100e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e4d8  0800e4d8  0000f4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e4e0  0800e4e0  0000f4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800e4e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001778  200000e0  0800e5c8  000100e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20001858  0800e5c8  00010858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046cad  00000000  00000000  00010110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b3de  00000000  00000000  00056dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  000621a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002a02  00000000  00000000  00064808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000317fb  00000000  00000000  0006720a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00044e56  00000000  00000000  00098a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f30c  00000000  00000000  000dd85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fcb67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e8  00000000  00000000  001fcbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0001351f  00000000  00000000  00203494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000124  00000000  00000000  002169b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e0 	.word	0x200000e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d8d8 	.word	0x0800d8d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e4 	.word	0x200000e4
 80001c4:	0800d8d8 	.word	0x0800d8d8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_d2iz>:
 8000660:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000664:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000668:	d215      	bcs.n	8000696 <__aeabi_d2iz+0x36>
 800066a:	d511      	bpl.n	8000690 <__aeabi_d2iz+0x30>
 800066c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000670:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000674:	d912      	bls.n	800069c <__aeabi_d2iz+0x3c>
 8000676:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800067e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000682:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000686:	fa23 f002 	lsr.w	r0, r3, r2
 800068a:	bf18      	it	ne
 800068c:	4240      	negne	r0, r0
 800068e:	4770      	bx	lr
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	4770      	bx	lr
 8000696:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800069a:	d105      	bne.n	80006a8 <__aeabi_d2iz+0x48>
 800069c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80006a0:	bf08      	it	eq
 80006a2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006a6:	4770      	bx	lr
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <__aeabi_uldivmod>:
 80006b0:	b953      	cbnz	r3, 80006c8 <__aeabi_uldivmod+0x18>
 80006b2:	b94a      	cbnz	r2, 80006c8 <__aeabi_uldivmod+0x18>
 80006b4:	2900      	cmp	r1, #0
 80006b6:	bf08      	it	eq
 80006b8:	2800      	cmpeq	r0, #0
 80006ba:	bf1c      	itt	ne
 80006bc:	f04f 31ff 	movne.w	r1, #4294967295
 80006c0:	f04f 30ff 	movne.w	r0, #4294967295
 80006c4:	f000 b96a 	b.w	800099c <__aeabi_idiv0>
 80006c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d0:	f000 f806 	bl	80006e0 <__udivmoddi4>
 80006d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006dc:	b004      	add	sp, #16
 80006de:	4770      	bx	lr

080006e0 <__udivmoddi4>:
 80006e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006e4:	9d08      	ldr	r5, [sp, #32]
 80006e6:	460c      	mov	r4, r1
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d14e      	bne.n	800078a <__udivmoddi4+0xaa>
 80006ec:	4694      	mov	ip, r2
 80006ee:	458c      	cmp	ip, r1
 80006f0:	4686      	mov	lr, r0
 80006f2:	fab2 f282 	clz	r2, r2
 80006f6:	d962      	bls.n	80007be <__udivmoddi4+0xde>
 80006f8:	b14a      	cbz	r2, 800070e <__udivmoddi4+0x2e>
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	4091      	lsls	r1, r2
 8000700:	fa20 f303 	lsr.w	r3, r0, r3
 8000704:	fa0c fc02 	lsl.w	ip, ip, r2
 8000708:	4319      	orrs	r1, r3
 800070a:	fa00 fe02 	lsl.w	lr, r0, r2
 800070e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000712:	fa1f f68c 	uxth.w	r6, ip
 8000716:	fbb1 f4f7 	udiv	r4, r1, r7
 800071a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800071e:	fb07 1114 	mls	r1, r7, r4, r1
 8000722:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000726:	fb04 f106 	mul.w	r1, r4, r6
 800072a:	4299      	cmp	r1, r3
 800072c:	d90a      	bls.n	8000744 <__udivmoddi4+0x64>
 800072e:	eb1c 0303 	adds.w	r3, ip, r3
 8000732:	f104 30ff 	add.w	r0, r4, #4294967295
 8000736:	f080 8112 	bcs.w	800095e <__udivmoddi4+0x27e>
 800073a:	4299      	cmp	r1, r3
 800073c:	f240 810f 	bls.w	800095e <__udivmoddi4+0x27e>
 8000740:	3c02      	subs	r4, #2
 8000742:	4463      	add	r3, ip
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	fa1f f38e 	uxth.w	r3, lr
 800074a:	fbb1 f0f7 	udiv	r0, r1, r7
 800074e:	fb07 1110 	mls	r1, r7, r0, r1
 8000752:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000756:	fb00 f606 	mul.w	r6, r0, r6
 800075a:	429e      	cmp	r6, r3
 800075c:	d90a      	bls.n	8000774 <__udivmoddi4+0x94>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f100 31ff 	add.w	r1, r0, #4294967295
 8000766:	f080 80fc 	bcs.w	8000962 <__udivmoddi4+0x282>
 800076a:	429e      	cmp	r6, r3
 800076c:	f240 80f9 	bls.w	8000962 <__udivmoddi4+0x282>
 8000770:	4463      	add	r3, ip
 8000772:	3802      	subs	r0, #2
 8000774:	1b9b      	subs	r3, r3, r6
 8000776:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800077a:	2100      	movs	r1, #0
 800077c:	b11d      	cbz	r5, 8000786 <__udivmoddi4+0xa6>
 800077e:	40d3      	lsrs	r3, r2
 8000780:	2200      	movs	r2, #0
 8000782:	e9c5 3200 	strd	r3, r2, [r5]
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	428b      	cmp	r3, r1
 800078c:	d905      	bls.n	800079a <__udivmoddi4+0xba>
 800078e:	b10d      	cbz	r5, 8000794 <__udivmoddi4+0xb4>
 8000790:	e9c5 0100 	strd	r0, r1, [r5]
 8000794:	2100      	movs	r1, #0
 8000796:	4608      	mov	r0, r1
 8000798:	e7f5      	b.n	8000786 <__udivmoddi4+0xa6>
 800079a:	fab3 f183 	clz	r1, r3
 800079e:	2900      	cmp	r1, #0
 80007a0:	d146      	bne.n	8000830 <__udivmoddi4+0x150>
 80007a2:	42a3      	cmp	r3, r4
 80007a4:	d302      	bcc.n	80007ac <__udivmoddi4+0xcc>
 80007a6:	4290      	cmp	r0, r2
 80007a8:	f0c0 80f0 	bcc.w	800098c <__udivmoddi4+0x2ac>
 80007ac:	1a86      	subs	r6, r0, r2
 80007ae:	eb64 0303 	sbc.w	r3, r4, r3
 80007b2:	2001      	movs	r0, #1
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d0e6      	beq.n	8000786 <__udivmoddi4+0xa6>
 80007b8:	e9c5 6300 	strd	r6, r3, [r5]
 80007bc:	e7e3      	b.n	8000786 <__udivmoddi4+0xa6>
 80007be:	2a00      	cmp	r2, #0
 80007c0:	f040 8090 	bne.w	80008e4 <__udivmoddi4+0x204>
 80007c4:	eba1 040c 	sub.w	r4, r1, ip
 80007c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007cc:	fa1f f78c 	uxth.w	r7, ip
 80007d0:	2101      	movs	r1, #1
 80007d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80007d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007da:	fb08 4416 	mls	r4, r8, r6, r4
 80007de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007e2:	fb07 f006 	mul.w	r0, r7, r6
 80007e6:	4298      	cmp	r0, r3
 80007e8:	d908      	bls.n	80007fc <__udivmoddi4+0x11c>
 80007ea:	eb1c 0303 	adds.w	r3, ip, r3
 80007ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0x11a>
 80007f4:	4298      	cmp	r0, r3
 80007f6:	f200 80cd 	bhi.w	8000994 <__udivmoddi4+0x2b4>
 80007fa:	4626      	mov	r6, r4
 80007fc:	1a1c      	subs	r4, r3, r0
 80007fe:	fa1f f38e 	uxth.w	r3, lr
 8000802:	fbb4 f0f8 	udiv	r0, r4, r8
 8000806:	fb08 4410 	mls	r4, r8, r0, r4
 800080a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080e:	fb00 f707 	mul.w	r7, r0, r7
 8000812:	429f      	cmp	r7, r3
 8000814:	d908      	bls.n	8000828 <__udivmoddi4+0x148>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f100 34ff 	add.w	r4, r0, #4294967295
 800081e:	d202      	bcs.n	8000826 <__udivmoddi4+0x146>
 8000820:	429f      	cmp	r7, r3
 8000822:	f200 80b0 	bhi.w	8000986 <__udivmoddi4+0x2a6>
 8000826:	4620      	mov	r0, r4
 8000828:	1bdb      	subs	r3, r3, r7
 800082a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800082e:	e7a5      	b.n	800077c <__udivmoddi4+0x9c>
 8000830:	f1c1 0620 	rsb	r6, r1, #32
 8000834:	408b      	lsls	r3, r1
 8000836:	fa22 f706 	lsr.w	r7, r2, r6
 800083a:	431f      	orrs	r7, r3
 800083c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000840:	fa04 f301 	lsl.w	r3, r4, r1
 8000844:	ea43 030c 	orr.w	r3, r3, ip
 8000848:	40f4      	lsrs	r4, r6
 800084a:	fa00 f801 	lsl.w	r8, r0, r1
 800084e:	0c38      	lsrs	r0, r7, #16
 8000850:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000854:	fbb4 fef0 	udiv	lr, r4, r0
 8000858:	fa1f fc87 	uxth.w	ip, r7
 800085c:	fb00 441e 	mls	r4, r0, lr, r4
 8000860:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000864:	fb0e f90c 	mul.w	r9, lr, ip
 8000868:	45a1      	cmp	r9, r4
 800086a:	fa02 f201 	lsl.w	r2, r2, r1
 800086e:	d90a      	bls.n	8000886 <__udivmoddi4+0x1a6>
 8000870:	193c      	adds	r4, r7, r4
 8000872:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000876:	f080 8084 	bcs.w	8000982 <__udivmoddi4+0x2a2>
 800087a:	45a1      	cmp	r9, r4
 800087c:	f240 8081 	bls.w	8000982 <__udivmoddi4+0x2a2>
 8000880:	f1ae 0e02 	sub.w	lr, lr, #2
 8000884:	443c      	add	r4, r7
 8000886:	eba4 0409 	sub.w	r4, r4, r9
 800088a:	fa1f f983 	uxth.w	r9, r3
 800088e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000892:	fb00 4413 	mls	r4, r0, r3, r4
 8000896:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800089a:	fb03 fc0c 	mul.w	ip, r3, ip
 800089e:	45a4      	cmp	ip, r4
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x1d2>
 80008a2:	193c      	adds	r4, r7, r4
 80008a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80008a8:	d267      	bcs.n	800097a <__udivmoddi4+0x29a>
 80008aa:	45a4      	cmp	ip, r4
 80008ac:	d965      	bls.n	800097a <__udivmoddi4+0x29a>
 80008ae:	3b02      	subs	r3, #2
 80008b0:	443c      	add	r4, r7
 80008b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008b6:	fba0 9302 	umull	r9, r3, r0, r2
 80008ba:	eba4 040c 	sub.w	r4, r4, ip
 80008be:	429c      	cmp	r4, r3
 80008c0:	46ce      	mov	lr, r9
 80008c2:	469c      	mov	ip, r3
 80008c4:	d351      	bcc.n	800096a <__udivmoddi4+0x28a>
 80008c6:	d04e      	beq.n	8000966 <__udivmoddi4+0x286>
 80008c8:	b155      	cbz	r5, 80008e0 <__udivmoddi4+0x200>
 80008ca:	ebb8 030e 	subs.w	r3, r8, lr
 80008ce:	eb64 040c 	sbc.w	r4, r4, ip
 80008d2:	fa04 f606 	lsl.w	r6, r4, r6
 80008d6:	40cb      	lsrs	r3, r1
 80008d8:	431e      	orrs	r6, r3
 80008da:	40cc      	lsrs	r4, r1
 80008dc:	e9c5 6400 	strd	r6, r4, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	e750      	b.n	8000786 <__udivmoddi4+0xa6>
 80008e4:	f1c2 0320 	rsb	r3, r2, #32
 80008e8:	fa20 f103 	lsr.w	r1, r0, r3
 80008ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f0:	fa24 f303 	lsr.w	r3, r4, r3
 80008f4:	4094      	lsls	r4, r2
 80008f6:	430c      	orrs	r4, r1
 80008f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000900:	fa1f f78c 	uxth.w	r7, ip
 8000904:	fbb3 f0f8 	udiv	r0, r3, r8
 8000908:	fb08 3110 	mls	r1, r8, r0, r3
 800090c:	0c23      	lsrs	r3, r4, #16
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb00 f107 	mul.w	r1, r0, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d908      	bls.n	800092c <__udivmoddi4+0x24c>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000922:	d22c      	bcs.n	800097e <__udivmoddi4+0x29e>
 8000924:	4299      	cmp	r1, r3
 8000926:	d92a      	bls.n	800097e <__udivmoddi4+0x29e>
 8000928:	3802      	subs	r0, #2
 800092a:	4463      	add	r3, ip
 800092c:	1a5b      	subs	r3, r3, r1
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb3 f1f8 	udiv	r1, r3, r8
 8000934:	fb08 3311 	mls	r3, r8, r1, r3
 8000938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800093c:	fb01 f307 	mul.w	r3, r1, r7
 8000940:	42a3      	cmp	r3, r4
 8000942:	d908      	bls.n	8000956 <__udivmoddi4+0x276>
 8000944:	eb1c 0404 	adds.w	r4, ip, r4
 8000948:	f101 36ff 	add.w	r6, r1, #4294967295
 800094c:	d213      	bcs.n	8000976 <__udivmoddi4+0x296>
 800094e:	42a3      	cmp	r3, r4
 8000950:	d911      	bls.n	8000976 <__udivmoddi4+0x296>
 8000952:	3902      	subs	r1, #2
 8000954:	4464      	add	r4, ip
 8000956:	1ae4      	subs	r4, r4, r3
 8000958:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800095c:	e739      	b.n	80007d2 <__udivmoddi4+0xf2>
 800095e:	4604      	mov	r4, r0
 8000960:	e6f0      	b.n	8000744 <__udivmoddi4+0x64>
 8000962:	4608      	mov	r0, r1
 8000964:	e706      	b.n	8000774 <__udivmoddi4+0x94>
 8000966:	45c8      	cmp	r8, r9
 8000968:	d2ae      	bcs.n	80008c8 <__udivmoddi4+0x1e8>
 800096a:	ebb9 0e02 	subs.w	lr, r9, r2
 800096e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000972:	3801      	subs	r0, #1
 8000974:	e7a8      	b.n	80008c8 <__udivmoddi4+0x1e8>
 8000976:	4631      	mov	r1, r6
 8000978:	e7ed      	b.n	8000956 <__udivmoddi4+0x276>
 800097a:	4603      	mov	r3, r0
 800097c:	e799      	b.n	80008b2 <__udivmoddi4+0x1d2>
 800097e:	4630      	mov	r0, r6
 8000980:	e7d4      	b.n	800092c <__udivmoddi4+0x24c>
 8000982:	46d6      	mov	lr, sl
 8000984:	e77f      	b.n	8000886 <__udivmoddi4+0x1a6>
 8000986:	4463      	add	r3, ip
 8000988:	3802      	subs	r0, #2
 800098a:	e74d      	b.n	8000828 <__udivmoddi4+0x148>
 800098c:	4606      	mov	r6, r0
 800098e:	4623      	mov	r3, r4
 8000990:	4608      	mov	r0, r1
 8000992:	e70f      	b.n	80007b4 <__udivmoddi4+0xd4>
 8000994:	3e02      	subs	r6, #2
 8000996:	4463      	add	r3, ip
 8000998:	e730      	b.n	80007fc <__udivmoddi4+0x11c>
 800099a:	bf00      	nop

0800099c <__aeabi_idiv0>:
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80009a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80009a2:	f000 fe63 	bl	800166c <SystemApp_Init>
  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80009a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LoRaWAN_Init();
 80009aa:	f000 b97b 	b.w	8000ca4 <LoRaWAN_Init>

080009ae <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80009ae:	f04f 30ff 	mov.w	r0, #4294967295
 80009b2:	f00c bb01 	b.w	800cfb8 <UTIL_SEQ_Run>

080009b6 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
  LED_Off(LED_RED2);
}
 80009b6:	4770      	bx	lr

080009b8 <OnTxTimerEvent>:
{
 80009b8:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80009ba:	2002      	movs	r0, #2
 80009bc:	2100      	movs	r1, #0
 80009be:	f00c fac5 	bl	800cf4c <UTIL_SEQ_SetTask>
}
 80009c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_TIMER_Start(&TxTimer);
 80009c6:	4801      	ldr	r0, [pc, #4]	@ (80009cc <OnTxTimerEvent+0x14>)
 80009c8:	f00c bd14 	b.w	800d3f4 <UTIL_TIMER_Start>
 80009cc:	200000fc 	.word	0x200000fc

080009d0 <OnMacProcessNotify>:
static void OnMacProcessNotify(void)
{
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80009d0:	2100      	movs	r1, #0
 80009d2:	2001      	movs	r0, #1
 80009d4:	f00c baba 	b.w	800cf4c <UTIL_SEQ_SetTask>

080009d8 <OnRxData>:
{
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	460d      	mov	r5, r1
 80009dc:	b086      	sub	sp, #24
  if ((appData != NULL) || (params != NULL))
 80009de:	4604      	mov	r4, r0
 80009e0:	b908      	cbnz	r0, 80009e6 <OnRxData+0xe>
 80009e2:	2900      	cmp	r1, #0
 80009e4:	d04c      	beq.n	8000a80 <OnRxData+0xa8>
    UTIL_TIMER_Start(&RxLedTimer);
 80009e6:	4e27      	ldr	r6, [pc, #156]	@ (8000a84 <OnRxData+0xac>)
 80009e8:	f106 0018 	add.w	r0, r6, #24
 80009ec:	f00c fd02 	bl	800d3f4 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 80009f0:	2200      	movs	r2, #0
 80009f2:	4611      	mov	r1, r2
 80009f4:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <OnRxData+0xb0>)
 80009f6:	2002      	movs	r0, #2
 80009f8:	f00c f986 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 80009fc:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8000a00:	9305      	str	r3, [sp, #20]
 8000a02:	f995 3003 	ldrsb.w	r3, [r5, #3]
 8000a06:	9304      	str	r3, [sp, #16]
 8000a08:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8000a0c:	9303      	str	r3, [sp, #12]
 8000a0e:	7823      	ldrb	r3, [r4, #0]
 8000a10:	9302      	str	r3, [sp, #8]
 8000a12:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8000a16:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <OnRxData+0xb4>)
 8000a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	68ab      	ldr	r3, [r5, #8]
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <OnRxData+0xb8>)
 8000a26:	4611      	mov	r1, r2
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f00c f96d 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8000a2e:	7823      	ldrb	r3, [r4, #0]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d010      	beq.n	8000a56 <OnRxData+0x7e>
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d123      	bne.n	8000a80 <OnRxData+0xa8>
        if (appData->BufferSize == 1)
 8000a38:	7863      	ldrb	r3, [r4, #1]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d120      	bne.n	8000a80 <OnRxData+0xa8>
          switch (appData->Buffer[0])
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	7818      	ldrb	r0, [r3, #0]
 8000a42:	2801      	cmp	r0, #1
 8000a44:	d002      	beq.n	8000a4c <OnRxData+0x74>
 8000a46:	2802      	cmp	r0, #2
 8000a48:	d000      	beq.n	8000a4c <OnRxData+0x74>
 8000a4a:	b9c8      	cbnz	r0, 8000a80 <OnRxData+0xa8>
}
 8000a4c:	b006      	add	sp, #24
 8000a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              LmHandlerRequestClass(CLASS_C);
 8000a52:	f005 be55 	b.w	8006700 <LmHandlerRequestClass>
        if (appData->BufferSize == 1)
 8000a56:	7863      	ldrb	r3, [r4, #1]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d111      	bne.n	8000a80 <OnRxData+0xa8>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8000a5c:	6863      	ldr	r3, [r4, #4]
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	f002 0201 	and.w	r2, r2, #1
 8000a64:	f886 2030 	strb.w	r2, [r6, #48]	@ 0x30
          if (AppLedStateOn == RESET)
 8000a68:	b93a      	cbnz	r2, 8000a7a <OnRxData+0xa2>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <OnRxData+0xbc>)
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	2003      	movs	r0, #3
}
 8000a70:	b006      	add	sp, #24
 8000a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8000a76:	f00c b947 	b.w	800cd08 <UTIL_ADV_TRACE_COND_FSend>
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <OnRxData+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	e7f5      	b.n	8000a6c <OnRxData+0x94>
}
 8000a80:	b006      	add	sp, #24
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	200000fc 	.word	0x200000fc
 8000a88:	0800df11 	.word	0x0800df11
 8000a8c:	0800d8f0 	.word	0x0800d8f0
 8000a90:	0800df42 	.word	0x0800df42
 8000a94:	0800df89 	.word	0x0800df89
 8000a98:	0800df93 	.word	0x0800df93

08000a9c <SendTxData>:
{
 8000a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa0:	b08a      	sub	sp, #40	@ 0x28
  UTIL_TIMER_Time_t nextTxIn = 0;
 8000aa2:	2600      	movs	r6, #0
  EnvSensors_Read(&sensor_data);
 8000aa4:	a804      	add	r0, sp, #16
  UTIL_TIMER_Time_t nextTxIn = 0;
 8000aa6:	9603      	str	r6, [sp, #12]
  EnvSensors_Read(&sensor_data);
 8000aa8:	f000 fef4 	bl	8001894 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8000aac:	f000 fa52 	bl	8000f54 <SYS_GetTemperatureLevel>
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8000ab0:	ed9d 7a04 	vldr	s14, [sp, #16]
 8000ab4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8000b98 <SendTxData+0xfc>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8000ab8:	4c38      	ldr	r4, [pc, #224]	@ (8000b9c <SendTxData+0x100>)
  AppData.Buffer[i++] = AppLedStateOn;
 8000aba:	4d39      	ldr	r5, [pc, #228]	@ (8000ba0 <SendTxData+0x104>)
 8000abc:	6861      	ldr	r1, [r4, #4]
 8000abe:	f895 5030 	ldrb.w	r5, [r5, #48]	@ 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8000ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ac6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
  AppData.Port = LORAWAN_USER_APP_PORT;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	7023      	strb	r3, [r4, #0]
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8000ad2:	1200      	asrs	r0, r0, #8
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8000ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad8:	ee17 2a90 	vmov	r2, s15
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8000adc:	eddd 7a06 	vldr	s15, [sp, #24]
  AppData.Buffer[i++] = AppLedStateOn;
 8000ae0:	700d      	strb	r5, [r1, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8000ae2:	6861      	ldr	r1, [r4, #4]
 8000ae4:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8000ae8:	704d      	strb	r5, [r1, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8000aea:	6861      	ldr	r1, [r4, #4]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8000aec:	ee67 7aa6 	vmul.f32	s15, s15, s13
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8000af0:	708a      	strb	r2, [r1, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8000af2:	6862      	ldr	r2, [r4, #4]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8000af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8000af8:	70d0      	strb	r0, [r2, #3]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8000afa:	ee17 3a90 	vmov	r3, s15
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8000afe:	6862      	ldr	r2, [r4, #4]
 8000b00:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8000b04:	7111      	strb	r1, [r2, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8000b06:	6862      	ldr	r2, [r4, #4]
 8000b08:	7153      	strb	r3, [r2, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8000b0a:	7a23      	ldrb	r3, [r4, #8]
 8000b0c:	2b08      	cmp	r3, #8
 8000b0e:	d001      	beq.n	8000b14 <SendTxData+0x78>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d819      	bhi.n	8000b48 <SendTxData+0xac>
    AppData.Buffer[i++] = 0;
 8000b14:	6862      	ldr	r2, [r4, #4]
 8000b16:	2300      	movs	r3, #0
 8000b18:	7193      	strb	r3, [r2, #6]
    AppData.Buffer[i++] = 0;
 8000b1a:	6862      	ldr	r2, [r4, #4]
 8000b1c:	71d3      	strb	r3, [r2, #7]
    AppData.Buffer[i++] = 0;
 8000b1e:	6862      	ldr	r2, [r4, #4]
 8000b20:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8000b22:	7253      	strb	r3, [r2, #9]
 8000b24:	230a      	movs	r3, #10
  AppData.BufferSize = i;
 8000b26:	7063      	strb	r3, [r4, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8000b28:	2300      	movs	r3, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481b      	ldr	r0, [pc, #108]	@ (8000b9c <SendTxData+0x100>)
 8000b2e:	aa03      	add	r2, sp, #12
 8000b30:	f005 fe82 	bl	8006838 <LmHandlerSend>
 8000b34:	4601      	mov	r1, r0
 8000b36:	b9f8      	cbnz	r0, 8000b78 <SendTxData+0xdc>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <SendTxData+0x108>)
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	f00c f8e3 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
}
 8000b42:	b00a      	add	sp, #40	@ 0x28
 8000b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    longitude = sensor_data.longitude;
 8000b48:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8000b4c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000b50:	f000 fe10 	bl	8001774 <GetBatteryLevel>
 8000b54:	f888 0006 	strb.w	r0, [r8, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8000b58:	6863      	ldr	r3, [r4, #4]
 8000b5a:	142a      	asrs	r2, r5, #16
 8000b5c:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8000b5e:	6863      	ldr	r3, [r4, #4]
 8000b60:	122a      	asrs	r2, r5, #8
 8000b62:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8000b64:	143a      	asrs	r2, r7, #16
 8000b66:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8000b68:	123a      	asrs	r2, r7, #8
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8000b6a:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8000b6c:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8000b6e:	731f      	strb	r7, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8000b70:	735e      	strb	r6, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8000b72:	739e      	strb	r6, [r3, #14]
 8000b74:	230f      	movs	r3, #15
 8000b76:	e7d6      	b.n	8000b26 <SendTxData+0x8a>
  else if (nextTxIn > 0)
 8000b78:	9b03      	ldr	r3, [sp, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0e1      	beq.n	8000b42 <SendTxData+0xa6>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8000b7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b86:	2201      	movs	r2, #1
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <SendTxData+0x10c>)
 8000b8e:	4610      	mov	r0, r2
 8000b90:	f00c f8ba 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
}
 8000b94:	e7d5      	b.n	8000b42 <SendTxData+0xa6>
 8000b96:	bf00      	nop
 8000b98:	42c80000 	.word	0x42c80000
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200000fc 	.word	0x200000fc
 8000ba4:	0800df9c 	.word	0x0800df9c
 8000ba8:	0800dfab 	.word	0x0800dfab

08000bac <OnTxData>:
{
 8000bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if ((params != NULL))
 8000bae:	4604      	mov	r4, r0
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d031      	beq.n	8000c18 <OnTxData+0x6c>
    if (params->IsMcpsConfirm != 0)
 8000bb4:	7803      	ldrb	r3, [r0, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d02e      	beq.n	8000c18 <OnTxData+0x6c>
      UTIL_TIMER_Start(&TxLedTimer);
 8000bba:	481d      	ldr	r0, [pc, #116]	@ (8000c30 <OnTxData+0x84>)
 8000bbc:	f00c fc1a 	bl	800d3f4 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <OnTxData+0x88>)
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f00c f89e 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8000bcc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8000bd0:	9303      	str	r3, [sp, #12]
 8000bd2:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8000bd6:	9302      	str	r3, [sp, #8]
 8000bd8:	7b23      	ldrb	r3, [r4, #12]
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	68a3      	ldr	r3, [r4, #8]
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2200      	movs	r2, #0
 8000be2:	4611      	mov	r1, r2
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <OnTxData+0x8c>)
 8000be6:	2003      	movs	r0, #3
 8000be8:	f00c f88e 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8000bec:	2200      	movs	r2, #0
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <OnTxData+0x90>)
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f00c f888 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8000bf8:	78a3      	ldrb	r3, [r4, #2]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d10e      	bne.n	8000c1c <OnTxData+0x70>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8000bfe:	78e1      	ldrb	r1, [r4, #3]
 8000c00:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <OnTxData+0x94>)
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <OnTxData+0x98>)
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf18      	it	ne
 8000c08:	4613      	movne	r3, r2
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <OnTxData+0x9c>)
 8000c12:	2003      	movs	r0, #3
 8000c14:	f00c f878 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
}
 8000c18:	b004      	add	sp, #16
 8000c1a:	bd10      	pop	{r4, pc}
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <OnTxData+0xa0>)
 8000c20:	4611      	mov	r1, r2
 8000c22:	2003      	movs	r0, #3
}
 8000c24:	b004      	add	sp, #16
 8000c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8000c2a:	f00c b86d 	b.w	800cd08 <UTIL_ADV_TRACE_COND_FSend>
 8000c2e:	bf00      	nop
 8000c30:	20000130 	.word	0x20000130
 8000c34:	0800dfce 	.word	0x0800dfce
 8000c38:	0800dfff 	.word	0x0800dfff
 8000c3c:	0800e030 	.word	0x0800e030
 8000c40:	0800dfca 	.word	0x0800dfca
 8000c44:	0800dfc9 	.word	0x0800dfc9
 8000c48:	0800e03d 	.word	0x0800e03d
 8000c4c:	0800e04e 	.word	0x0800e04e

08000c50 <OnJoinRequest>:
{
 8000c50:	b570      	push	{r4, r5, r6, lr}
  if (joinParams != NULL)
 8000c52:	4605      	mov	r5, r0
 8000c54:	b1c8      	cbz	r0, 8000c8a <OnJoinRequest+0x3a>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8000c56:	f990 4001 	ldrsb.w	r4, [r0, #1]
 8000c5a:	b9a4      	cbnz	r4, 8000c86 <OnJoinRequest+0x36>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <OnJoinRequest+0x3c>)
 8000c5e:	f00c fb7b 	bl	800d358 <UTIL_TIMER_Stop>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <OnJoinRequest+0x40>)
 8000c64:	4622      	mov	r2, r4
 8000c66:	4621      	mov	r1, r4
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f00c f84d 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8000c6e:	78ab      	ldrb	r3, [r5, #2]
 8000c70:	2b01      	cmp	r3, #1
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8000c72:	bf0c      	ite	eq
 8000c74:	4b07      	ldreq	r3, [pc, #28]	@ (8000c94 <OnJoinRequest+0x44>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8000c76:	4b08      	ldrne	r3, [pc, #32]	@ (8000c98 <OnJoinRequest+0x48>)
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8000c78:	2200      	movs	r2, #0
}
 8000c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8000c7e:	4611      	mov	r1, r2
 8000c80:	2002      	movs	r0, #2
 8000c82:	f00c b841 	b.w	800cd08 <UTIL_ADV_TRACE_COND_FSend>
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <OnJoinRequest+0x4c>)
 8000c88:	e7f6      	b.n	8000c78 <OnJoinRequest+0x28>
}
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}
 8000c8c:	20000148 	.word	0x20000148
 8000c90:	0800e05c 	.word	0x0800e05c
 8000c94:	0800e071 	.word	0x0800e071
 8000c98:	0800e08e 	.word	0x0800e08e
 8000c9c:	0800e0ab 	.word	0x0800e0ab

08000ca0 <OnJoinTimerLedEvent>:
static void OnJoinTimerLedEvent(void *context)
 8000ca0:	4770      	bx	lr

08000ca2 <OnRxTimerLedEvent>:
static void OnRxTimerLedEvent(void *context)
 8000ca2:	4770      	bx	lr

08000ca4 <LoRaWAN_Init>:
{
 8000ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8000ca8:	2400      	movs	r4, #0
 8000caa:	2601      	movs	r6, #1
 8000cac:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8000cb0:	9600      	str	r6, [sp, #0]
 8000cb2:	4622      	mov	r2, r4
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000da0 <LoRaWAN_Init+0xfc>)
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8000cb8:	4d3a      	ldr	r5, [pc, #232]	@ (8000da4 <LoRaWAN_Init+0x100>)
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f00c f824 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8000cc0:	2702      	movs	r7, #2
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e9cd 7300 	strd	r7, r3, [sp]
 8000cc8:	4622      	mov	r2, r4
 8000cca:	4621      	mov	r1, r4
 8000ccc:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <LoRaWAN_Init+0x104>)
 8000cce:	9402      	str	r4, [sp, #8]
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	f00c f819 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8000cd6:	f105 0a34 	add.w	sl, r5, #52	@ 0x34
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8000cda:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8000cde:	9600      	str	r6, [sp, #0]
 8000ce0:	4622      	mov	r2, r4
 8000ce2:	4621      	mov	r1, r4
 8000ce4:	4b31      	ldr	r3, [pc, #196]	@ (8000dac <LoRaWAN_Init+0x108>)
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	f00c f80e 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8000cec:	f105 0918 	add.w	r9, r5, #24
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8000cf0:	4622      	mov	r2, r4
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <LoRaWAN_Init+0x10c>)
 8000cf4:	9400      	str	r4, [sp, #0]
 8000cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfa:	4650      	mov	r0, sl
 8000cfc:	f00c face 	bl	800d29c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8000d00:	f105 084c 	add.w	r8, r5, #76	@ 0x4c
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8000d04:	4622      	mov	r2, r4
 8000d06:	4b2b      	ldr	r3, [pc, #172]	@ (8000db4 <LoRaWAN_Init+0x110>)
 8000d08:	9400      	str	r4, [sp, #0]
 8000d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0e:	4648      	mov	r0, r9
 8000d10:	f00c fac4 	bl	800d29c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8000d14:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <LoRaWAN_Init+0x114>)
 8000d16:	9400      	str	r4, [sp, #0]
 8000d18:	4632      	mov	r2, r6
 8000d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1e:	4640      	mov	r0, r8
 8000d20:	f00c fabc 	bl	800d29c <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8000d24:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d28:	4650      	mov	r0, sl
 8000d2a:	f00c fb9d 	bl	800d468 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8000d2e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d32:	4648      	mov	r0, r9
 8000d34:	f00c fb98 	bl	800d468 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8000d38:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	f00c fb93 	bl	800d468 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8000d42:	4621      	mov	r1, r4
 8000d44:	4630      	mov	r0, r6
 8000d46:	4a1d      	ldr	r2, [pc, #116]	@ (8000dbc <LoRaWAN_Init+0x118>)
  LmHandlerInit(&LmHandlerCallbacks);
 8000d48:	4e1d      	ldr	r6, [pc, #116]	@ (8000dc0 <LoRaWAN_Init+0x11c>)
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8000d4a:	f00c f9a7 	bl	800d09c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8000d4e:	4621      	mov	r1, r4
 8000d50:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc4 <LoRaWAN_Init+0x120>)
 8000d52:	4638      	mov	r0, r7
 8000d54:	f00c f9a2 	bl	800d09c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8000d58:	f000 f840 	bl	8000ddc <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8000d5c:	f106 0018 	add.w	r0, r6, #24
 8000d60:	f005 ff3c 	bl	8006bdc <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8000d64:	f106 0008 	add.w	r0, r6, #8
 8000d68:	f005 fbc8 	bl	80064fc <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	f00c fb41 	bl	800d3f4 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8000d72:	4638      	mov	r0, r7
 8000d74:	f005 fd1e 	bl	80067b4 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <LoRaWAN_Init+0x124>)
 8000d7a:	9400      	str	r4, [sp, #0]
 8000d7c:	4622      	mov	r2, r4
 8000d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d82:	4628      	mov	r0, r5
 8000d84:	f00c fa8a 	bl	800d29c <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8000d88:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	f00c fb6b 	bl	800d468 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8000d92:	4628      	mov	r0, r5
}
 8000d94:	b004      	add	sp, #16
 8000d96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UTIL_TIMER_Start(&TxTimer);
 8000d9a:	f00c bb2b 	b.w	800d3f4 <UTIL_TIMER_Start>
 8000d9e:	bf00      	nop
 8000da0:	0800e0c4 	.word	0x0800e0c4
 8000da4:	200000fc 	.word	0x200000fc
 8000da8:	0800e0e4 	.word	0x0800e0e4
 8000dac:	0800e104 	.word	0x0800e104
 8000db0:	080009b7 	.word	0x080009b7
 8000db4:	08000ca3 	.word	0x08000ca3
 8000db8:	08000ca1 	.word	0x08000ca1
 8000dbc:	080066a1 	.word	0x080066a1
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	08000a9d 	.word	0x08000a9d
 8000dc8:	080009b9 	.word	0x080009b9

08000dcc <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8000dcc:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000dd0:	d103      	bne.n	8000dda <HAL_GPIO_EXTI_Callback+0xe>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f00c b8b9 	b.w	800cf4c <UTIL_SEQ_SetTask>
}
 8000dda:	4770      	bx	lr

08000ddc <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8000ddc:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <LoraInfo_Init+0x14>)
 8000dde:	2200      	movs	r2, #0
  loraInfo.Kms = 0;
 8000de0:	e9c3 2202 	strd	r2, r2, [r3, #8]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8000de4:	2120      	movs	r1, #32
 8000de6:	2203      	movs	r2, #3
 8000de8:	e9c3 2100 	strd	r2, r1, [r3]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000254 	.word	0x20000254

08000df4 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8000df4:	4800      	ldr	r0, [pc, #0]	@ (8000df8 <LoraInfo_GetPtr+0x4>)
 8000df6:	4770      	bx	lr
 8000df8:	20000254 	.word	0x20000254

08000dfc <MX_ADC_Init>:
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance  = ADC1;

  hadc.Init.OversamplingMode      = DISABLE;
 8000dfc:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <MX_ADC_Init+0x48>)

  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000dfe:	4912      	ldr	r1, [pc, #72]	@ (8000e48 <MX_ADC_Init+0x4c>)
 8000e00:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
{
 8000e04:	b508      	push	{r3, lr}
  hadc.Init.OversamplingMode      = DISABLE;
 8000e06:	2300      	movs	r3, #0
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000e08:	e9c0 1200 	strd	r1, r2, [r0]
  hadc.Init.ScanConvMode          = ADC_SCAN_DISABLE;
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode    = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8000e0c:	2204      	movs	r2, #4
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8000e0e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc.Init.OversamplingMode      = DISABLE;
 8000e12:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e16:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc.Init.ScanConvMode          = ADC_SCAN_DISABLE;
 8000e1c:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8000e1e:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait      = DISABLE;
 8000e20:	8303      	strh	r3, [r0, #24]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e22:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e26:	f001 f963 	bl	80020f0 <HAL_ADC_Init>
 8000e2a:	b108      	cbz	r0, 8000e30 <MX_ADC_Init+0x34>
  {
    Error_Handler();
 8000e2c:	f000 f915 	bl	800105a <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <MX_ADC_Init+0x48>)
 8000e32:	217f      	movs	r1, #127	@ 0x7f
 8000e34:	f001 fe97 	bl	8002b66 <HAL_ADCEx_Calibration_Start>
 8000e38:	b118      	cbz	r0, 8000e42 <MX_ADC_Init+0x46>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000e3e:	f000 b90c 	b.w	800105a <Error_Handler>
}
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	20000264 	.word	0x20000264
 8000e48:	50040000 	.word	0x50040000

08000e4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8000e4c:	6802      	ldr	r2, [r0, #0]
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <HAL_ADC_MspInit+0x28>)
 8000e50:	429a      	cmp	r2, r3
{
 8000e52:	b082      	sub	sp, #8
  if (adcHandle->Instance == ADC1)
 8000e54:	d10c      	bne.n	8000e70 <HAL_ADC_MspInit+0x24>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e56:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8000e5a:	f5a3 33f8 	sub.w	r3, r3, #126976	@ 0x1f000
 8000e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000e64:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	9b01      	ldr	r3, [sp, #4]
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8000e70:	b002      	add	sp, #8
 8000e72:	4770      	bx	lr
 8000e74:	50040000 	.word	0x50040000

08000e78 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8000e78:	6802      	ldr	r2, [r0, #0]
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <HAL_ADC_MspDeInit+0x14>)
 8000e7c:	429a      	cmp	r2, r3
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000e7e:	bf01      	itttt	eq
 8000e80:	4a03      	ldreq	r2, [pc, #12]	@ (8000e90 <HAL_ADC_MspDeInit+0x18>)
 8000e82:	6cd3      	ldreq	r3, [r2, #76]	@ 0x4c
 8000e84:	f423 5300 	biceq.w	r3, r3, #8192	@ 0x2000
 8000e88:	64d3      	streq	r3, [r2, #76]	@ 0x4c
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000e8a:	4770      	bx	lr
 8000e8c:	50040000 	.word	0x50040000
 8000e90:	40021000 	.word	0x40021000

08000e94 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000e94:	b530      	push	{r4, r5, lr}
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};

  MX_ADC_Init();

  __HAL_RCC_ADC_CLK_ENABLE();
 8000e96:	4c1f      	ldr	r4, [pc, #124]	@ (8000f14 <ADC_ReadChannels+0x80>)
{
 8000e98:	b089      	sub	sp, #36	@ 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	2218      	movs	r2, #24
 8000e9c:	2100      	movs	r1, #0
{
 8000e9e:	4605      	mov	r5, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea0:	a802      	add	r0, sp, #8
 8000ea2:	f00c fc61 	bl	800d768 <memset>
  MX_ADC_Init();
 8000ea6:	f7ff ffa9 	bl	8000dfc <MX_ADC_Init>
  __HAL_RCC_ADC_CLK_ENABLE();
 8000eaa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000eac:	481a      	ldr	r0, [pc, #104]	@ (8000f18 <ADC_ReadChannels+0x84>)
  __HAL_RCC_ADC_CLK_ENABLE();
 8000eae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eb2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000eb4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eba:	9301      	str	r3, [sp, #4]
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000ebc:	217f      	movs	r1, #127	@ 0x7f
  __HAL_RCC_ADC_CLK_ENABLE();
 8000ebe:	9b01      	ldr	r3, [sp, #4]
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000ec0:	f001 fe51 	bl	8002b66 <HAL_ADCEx_Calibration_Start>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000ec4:	2206      	movs	r2, #6
 8000ec6:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ec8:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <ADC_ReadChannels+0x84>)
  sConfig.Channel = channel;
 8000eca:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ecc:	a902      	add	r1, sp, #8
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000ece:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ed2:	f001 fa65 	bl	80023a0 <HAL_ADC_ConfigChannel>
 8000ed6:	b108      	cbz	r0, 8000edc <ADC_ReadChannels+0x48>
  {
    Error_Handler();
 8000ed8:	f000 f8bf 	bl	800105a <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000edc:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <ADC_ReadChannels+0x84>)
 8000ede:	f001 fcc3 	bl	8002868 <HAL_ADC_Start>
 8000ee2:	b108      	cbz	r0, 8000ee8 <ADC_ReadChannels+0x54>
  {
    /* Start Error */
    Error_Handler();
 8000ee4:	f000 f8b9 	bl	800105a <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	480a      	ldr	r0, [pc, #40]	@ (8000f18 <ADC_ReadChannels+0x84>)
 8000eee:	f001 f9e1 	bl	80022b4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000ef2:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <ADC_ReadChannels+0x84>)
 8000ef4:	f001 fe18 	bl	8002b28 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000ef8:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <ADC_ReadChannels+0x84>)
 8000efa:	f001 fa4d 	bl	8002398 <HAL_ADC_GetValue>
 8000efe:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <ADC_ReadChannels+0x84>)
 8000f02:	f001 fd59 	bl	80029b8 <HAL_ADC_DeInit>

  __HAL_RCC_ADC_CLK_DISABLE();
 8000f06:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000f08:	4628      	mov	r0, r5
  __HAL_RCC_ADC_CLK_DISABLE();
 8000f0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f0e:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8000f10:	b009      	add	sp, #36	@ 0x24
 8000f12:	bd30      	pop	{r4, r5, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	20000264 	.word	0x20000264

08000f1c <SYS_InitMeasurement>:
  hadc.Instance = ADC1;
 8000f1c:	4b01      	ldr	r3, [pc, #4]	@ (8000f24 <SYS_InitMeasurement+0x8>)
 8000f1e:	4a02      	ldr	r2, [pc, #8]	@ (8000f28 <SYS_InitMeasurement+0xc>)
 8000f20:	601a      	str	r2, [r3, #0]
}
 8000f22:	4770      	bx	lr
 8000f24:	20000264 	.word	0x20000264
 8000f28:	50040000 	.word	0x50040000

08000f2c <SYS_GetBatteryLevel>:
{
 8000f2c:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000f2e:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <SYS_GetBatteryLevel+0x20>)
 8000f30:	f7ff ffb0 	bl	8000e94 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000f34:	b140      	cbz	r0, 8000f48 <SYS_GetBatteryLevel+0x1c>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <SYS_GetBatteryLevel+0x24>)
 8000f38:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8000f3c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000f40:	4353      	muls	r3, r2
 8000f42:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f46:	b298      	uxth	r0, r3
}
 8000f48:	bd08      	pop	{r3, pc}
 8000f4a:	bf00      	nop
 8000f4c:	80000001 	.word	0x80000001
 8000f50:	1fff7500 	.word	0x1fff7500

08000f54 <SYS_GetTemperatureLevel>:
{
 8000f54:	b513      	push	{r0, r1, r4, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000f56:	f7ff ffe9 	bl	8000f2c <SYS_GetBatteryLevel>
 8000f5a:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000f5c:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <SYS_GetTemperatureLevel+0x50>)
 8000f5e:	f7ff ff99 	bl	8000e94 <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8000f62:	4a11      	ldr	r2, [pc, #68]	@ (8000fa8 <SYS_GetTemperatureLevel+0x54>)
 8000f64:	f8b2 10a8 	ldrh.w	r1, [r2, #168]	@ 0xa8
 8000f68:	f8b2 20ca 	ldrh.w	r2, [r2, #202]	@ 0xca
 8000f6c:	fb00 f304 	mul.w	r3, r0, r4
 8000f70:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f74:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f78:	2050      	movs	r0, #80	@ 0x50
 8000f7a:	1a5b      	subs	r3, r3, r1
 8000f7c:	4343      	muls	r3, r0
 8000f7e:	1a52      	subs	r2, r2, r1
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f86:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8000f8a:	b21c      	sxth	r4, r3
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f343 2307 	sbfx	r3, r3, #8, #8
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2100      	movs	r1, #0
 8000f96:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <SYS_GetTemperatureLevel+0x58>)
 8000f98:	4610      	mov	r0, r2
 8000f9a:	f00b feb5 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
}
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd10      	pop	{r4, pc}
 8000fa4:	c7520000 	.word	0xc7520000
 8000fa8:	1fff7500 	.word	0x1fff7500
 8000fac:	0800e156 	.word	0x0800e156

08000fb0 <MX_DMA_Init>:
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_DMA_Init+0x2c>)
{
 8000fb2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	649a      	str	r2, [r3, #72]	@ 0x48
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000fcc:	f001 fe26 	bl	8002c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000fd0:	2011      	movs	r0, #17

}
 8000fd2:	b003      	add	sp, #12
 8000fd4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000fd8:	f001 be52 	b.w	8002c80 <HAL_NVIC_EnableIRQ>
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	b096      	sub	sp, #88	@ 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe4:	2224      	movs	r2, #36	@ 0x24
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	a806      	add	r0, sp, #24
 8000fea:	f00c fbbd 	bl	800d768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fee:	2214      	movs	r2, #20
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4668      	mov	r0, sp
 8000ff4:	f00c fbb8 	bl	800d768 <memset>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ff8:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ffa:	2260      	movs	r2, #96	@ 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ffc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ffe:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001000:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001004:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001008:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800100a:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800100c:	2328      	movs	r3, #40	@ 0x28
 800100e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001010:	2404      	movs	r4, #4
 8001012:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001016:	e9cd 3413 	strd	r3, r4, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101a:	9215      	str	r2, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f002 fa94 	bl	8003548 <HAL_RCC_OscConfig>
 8001020:	b108      	cbz	r0, 8001026 <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001022:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <SystemClock_Config+0x44>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001026:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	220f      	movs	r2, #15
 800102c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001030:	4621      	mov	r1, r4
 8001032:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001038:	f002 fd0c 	bl	8003a54 <HAL_RCC_ClockConfig>
 800103c:	b108      	cbz	r0, 8001042 <SystemClock_Config+0x62>
 800103e:	b672      	cpsid	i
  while (1)
 8001040:	e7fe      	b.n	8001040 <SystemClock_Config+0x60>
}
 8001042:	b016      	add	sp, #88	@ 0x58
 8001044:	bd10      	pop	{r4, pc}

08001046 <main>:
{
 8001046:	b508      	push	{r3, lr}
  HAL_Init();
 8001048:	f000 fff4 	bl	8002034 <HAL_Init>
  SystemClock_Config();
 800104c:	f7ff ffc8 	bl	8000fe0 <SystemClock_Config>
  MX_LoRaWAN_Init();
 8001050:	f7ff fca6 	bl	80009a0 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 8001054:	f7ff fcab 	bl	80009ae <MX_LoRaWAN_Process>
  while (1)
 8001058:	e7fc      	b.n	8001054 <main+0xe>

0800105a <Error_Handler>:
 800105a:	b672      	cpsid	i
  while (1)
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x2>
	...

08001060 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001060:	b510      	push	{r4, lr}
 8001062:	b092      	sub	sp, #72	@ 0x48
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8001064:	2400      	movs	r4, #0
  RTC_TimeTypeDef sTime = {0};
 8001066:	2214      	movs	r2, #20
 8001068:	2100      	movs	r1, #0
 800106a:	a802      	add	r0, sp, #8
 800106c:	f00c fb7c 	bl	800d768 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001070:	222c      	movs	r2, #44	@ 0x2c
 8001072:	4621      	mov	r1, r4
 8001074:	a807      	add	r0, sp, #28
  RTC_DateTypeDef sDate = {0};
 8001076:	9401      	str	r4, [sp, #4]
  RTC_AlarmTypeDef sAlarm = {0};
 8001078:	f00c fb76 	bl	800d768 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800107c:	4822      	ldr	r0, [pc, #136]	@ (8001108 <MX_RTC_Init+0xa8>)
 800107e:	4b23      	ldr	r3, [pc, #140]	@ (800110c <MX_RTC_Init+0xac>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001080:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001082:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8001086:	221f      	movs	r2, #31
 8001088:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800108c:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001090:	e9c0 4406 	strd	r4, r4, [r0, #24]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001094:	f003 f9e2 	bl	800445c <HAL_RTC_Init>
 8001098:	b108      	cbz	r0, 800109e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800109a:	f7ff ffde 	bl	800105a <Error_Handler>
  sTime.Hours = 0;
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800109e:	481a      	ldr	r0, [pc, #104]	@ (8001108 <MX_RTC_Init+0xa8>)
  sTime.Hours = 0;
 80010a0:	f8ad 4008 	strh.w	r4, [sp, #8]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010a4:	2200      	movs	r2, #0
 80010a6:	a902      	add	r1, sp, #8
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010a8:	e9cd 4405 	strd	r4, r4, [sp, #20]
  sTime.Seconds = 0;
 80010ac:	f88d 400a 	strb.w	r4, [sp, #10]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010b0:	f003 fa25 	bl	80044fe <HAL_RTC_SetTime>
 80010b4:	b108      	cbz	r0, 80010ba <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80010b6:	f7ff ffd0 	bl	800105a <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <MX_RTC_Init+0xb0>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010bc:	4812      	ldr	r0, [pc, #72]	@ (8001108 <MX_RTC_Init+0xa8>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010be:	9301      	str	r3, [sp, #4]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010c0:	2200      	movs	r2, #0
 80010c2:	a901      	add	r1, sp, #4
 80010c4:	f003 fa7c 	bl	80045c0 <HAL_RTC_SetDate>
 80010c8:	b108      	cbz	r0, 80010ce <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f7ff ffc6 	bl	800105a <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80010ce:	2200      	movs	r2, #0
  sAlarm.AlarmTime.Seconds = 0;
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 80010d0:	f04f 6320 	mov.w	r3, #167772160	@ 0xa000000
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80010d4:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
  sAlarm.AlarmDateWeekDay = 30;
 80010d8:	231e      	movs	r3, #30
 80010da:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
  sAlarm.Alarm = RTC_ALARM_A;
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80010de:	480a      	ldr	r0, [pc, #40]	@ (8001108 <MX_RTC_Init+0xa8>)
  sAlarm.AlarmTime.Hours = 0;
 80010e0:	f8ad 201c 	strh.w	r2, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80010e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80010e8:	a907      	add	r1, sp, #28
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ea:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
  sAlarm.AlarmTime.Seconds = 0;
 80010ee:	f88d 201e 	strb.w	r2, [sp, #30]
  sAlarm.AlarmTime.SubSeconds = 0;
 80010f2:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80010f4:	920c      	str	r2, [sp, #48]	@ 0x30
  sAlarm.Alarm = RTC_ALARM_A;
 80010f6:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80010f8:	f003 faae 	bl	8004658 <HAL_RTC_SetAlarm_IT>
 80010fc:	b108      	cbz	r0, 8001102 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80010fe:	f7ff ffac 	bl	800105a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001102:	b012      	add	sp, #72	@ 0x48
 8001104:	bd10      	pop	{r4, pc}
 8001106:	bf00      	nop
 8001108:	200002c8 	.word	0x200002c8
 800110c:	40002800 	.word	0x40002800
 8001110:	00010101 	.word	0x00010101

08001114 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8001114:	b510      	push	{r4, lr}
 8001116:	4604      	mov	r4, r0
 8001118:	b092      	sub	sp, #72	@ 0x48

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	2244      	movs	r2, #68	@ 0x44
 800111c:	2100      	movs	r1, #0
 800111e:	a801      	add	r0, sp, #4
 8001120:	f00c fb22 	bl	800d768 <memset>
  if (rtcHandle->Instance == RTC)
 8001124:	6822      	ldr	r2, [r4, #0]
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_RTC_MspInit+0x50>)
 8001128:	429a      	cmp	r2, r3
 800112a:	d118      	bne.n	800115e <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800112c:	2304      	movs	r3, #4
 800112e:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	a801      	add	r0, sp, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001132:	2301      	movs	r3, #1
 8001134:	9303      	str	r3, [sp, #12]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001136:	f002 fa07 	bl	8003548 <HAL_RCC_OscConfig>
 800113a:	b108      	cbz	r0, 8001140 <HAL_RTC_MspInit+0x2c>
    {
      Error_Handler();
 800113c:	f7ff ff8d 	bl	800105a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001140:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <HAL_RTC_MspInit+0x54>)
 8001142:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2029      	movs	r0, #41	@ 0x29
 8001152:	4611      	mov	r1, r2
 8001154:	f001 fd62 	bl	8002c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001158:	2029      	movs	r0, #41	@ 0x29
 800115a:	f001 fd91 	bl	8002c80 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 800115e:	b012      	add	sp, #72	@ 0x48
 8001160:	bd10      	pop	{r4, pc}
 8001162:	bf00      	nop
 8001164:	40002800 	.word	0x40002800
 8001168:	40021000 	.word	0x40021000

0800116c <RTC_IF_GetTimerContext>:
uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
}
 800116c:	4b01      	ldr	r3, [pc, #4]	@ (8001174 <RTC_IF_GetTimerContext+0x8>)
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200002ec 	.word	0x200002ec

08001178 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8001178:	2003      	movs	r0, #3
 800117a:	4770      	bx	lr

0800117c <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800117c:	b508      	push	{r3, lr}
 800117e:	4601      	mov	r1, r0
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8001180:	227d      	movs	r2, #125	@ 0x7d
 8001182:	2300      	movs	r3, #0
 8001184:	01c0      	lsls	r0, r0, #7
 8001186:	0e49      	lsrs	r1, r1, #25
 8001188:	f7ff fa92 	bl	80006b0 <__aeabi_uldivmod>
}
 800118c:	bd08      	pop	{r3, pc}

0800118e <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800118e:	237d      	movs	r3, #125	@ 0x7d
 8001190:	fba0 0303 	umull	r0, r3, r0, r3
 8001194:	09c0      	lsrs	r0, r0, #7
}
 8001196:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800119a:	4770      	bx	lr

0800119c <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800119c:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <RTC_IF_StopTimer+0x1c>)
 800119e:	6802      	ldr	r2, [r0, #0]
{
 80011a0:	b508      	push	{r3, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80011a2:	68d3      	ldr	r3, [r2, #12]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f463 73c0 	orn	r3, r3, #384	@ 0x180
 80011aa:	60d3      	str	r3, [r2, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80011ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b0:	f003 f878 	bl	80042a4 <HAL_RTC_DeactivateAlarm>
}
 80011b4:	2000      	movs	r0, #0
 80011b6:	bd08      	pop	{r3, pc}
 80011b8:	200002c8 	.word	0x200002c8

080011bc <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 80011bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80011c0:	2200      	movs	r2, #0
{
 80011c2:	4607      	mov	r7, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80011c4:	4826      	ldr	r0, [pc, #152]	@ (8001260 <RTC_GetCalendarValue+0xa4>)
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80011c6:	4d27      	ldr	r5, [pc, #156]	@ (8001264 <RTC_GetCalendarValue+0xa8>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 80011c8:	4e25      	ldr	r6, [pc, #148]	@ (8001260 <RTC_GetCalendarValue+0xa4>)
{
 80011ca:	460c      	mov	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80011cc:	f003 fb07 	bl	80047de <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 80011d0:	2200      	movs	r2, #0
 80011d2:	4639      	mov	r1, r7
 80011d4:	4630      	mov	r0, r6
 80011d6:	f8d5 8028 	ldr.w	r8, [r5, #40]	@ 0x28
 80011da:	f003 fb23 	bl	8004824 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80011de:	2200      	movs	r2, #0
 80011e0:	4621      	mov	r1, r4
 80011e2:	4630      	mov	r0, r6
 80011e4:	f003 fafb 	bl	80047de <HAL_RTC_GetTime>
 80011e8:	6aab      	ldr	r3, [r5, #40]	@ 0x28

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 80011ea:	ea83 0308 	eor.w	r3, r3, r8
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1ed      	bne.n	80011d0 <RTC_GetCalendarValue+0x14>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80011f4:	78fb      	ldrb	r3, [r7, #3]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80011f6:	787d      	ldrb	r5, [r7, #1]
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80011f8:	4e1b      	ldr	r6, [pc, #108]	@ (8001268 <RTC_GetCalendarValue+0xac>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

  calendarValue += (RTC_DateStruct->Date - 1);
 80011fa:	78ba      	ldrb	r2, [r7, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80011fc:	f240 51b5 	movw	r1, #1461	@ 0x5b5
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8001200:	f013 0f03 	tst.w	r3, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8001204:	fb03 f101 	mul.w	r1, r3, r1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <RTC_GetCalendarValue+0xb0>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800120a:	f105 35ff 	add.w	r5, r5, #4294967295
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800120e:	bf18      	it	ne
 8001210:	461e      	movne	r6, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8001212:	233d      	movs	r3, #61	@ 0x3d
 8001214:	436b      	muls	r3, r5
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8001216:	3103      	adds	r1, #3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8001218:	3301      	adds	r3, #1
 800121a:	3a01      	subs	r2, #1
 800121c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001220:	eb02 0291 	add.w	r2, r2, r1, lsr #2
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8001224:	006d      	lsls	r5, r5, #1
 8001226:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800122a:	fa26 f305 	lsr.w	r3, r6, r5
 800122e:	f003 0303 	and.w	r3, r3, #3
  calendarValue += (RTC_DateStruct->Date - 1);
 8001232:	1ad2      	subs	r2, r2, r3

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8001234:	7863      	ldrb	r3, [r4, #1]
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8001236:	7821      	ldrb	r1, [r4, #0]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8001238:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800123c:	f44f 6061 	mov.w	r0, #3600	@ 0xe10
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	fb00 3301 	mla	r3, r0, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8001246:	78a1      	ldrb	r1, [r4, #2]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8001248:	6860      	ldr	r0, [r4, #4]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800124a:	440b      	add	r3, r1
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800124c:	4908      	ldr	r1, [pc, #32]	@ (8001270 <RTC_GetCalendarValue+0xb4>)
  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 800124e:	f5c0 707f 	rsb	r0, r0, #1020	@ 0x3fc
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8001252:	fb01 3302 	mla	r3, r1, r2, r3
  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8001256:	3003      	adds	r0, #3

  return (calendarValue);
}
 8001258:	eb00 2083 	add.w	r0, r0, r3, lsl #10
 800125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001260:	200002c8 	.word	0x200002c8
 8001264:	40002800 	.word	0x40002800
 8001268:	00445550 	.word	0x00445550
 800126c:	0099aaa0 	.word	0x0099aaa0
 8001270:	00015180 	.word	0x00015180

08001274 <RTC_IF_SetTimerContext>:
{
 8001274:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8001276:	4c04      	ldr	r4, [pc, #16]	@ (8001288 <RTC_IF_SetTimerContext+0x14>)
 8001278:	1d21      	adds	r1, r4, #4
 800127a:	f104 0018 	add.w	r0, r4, #24
 800127e:	f7ff ff9d 	bl	80011bc <RTC_GetCalendarValue>
 8001282:	6020      	str	r0, [r4, #0]
}
 8001284:	bd10      	pop	{r4, pc}
 8001286:	bf00      	nop
 8001288:	200002ec 	.word	0x200002ec

0800128c <RTC_IF_GetTimerElapsedTime>:
{
 800128c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800128e:	a901      	add	r1, sp, #4
 8001290:	4668      	mov	r0, sp
 8001292:	f7ff ff93 	bl	80011bc <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8001296:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <RTC_IF_GetTimerElapsedTime+0x18>)
 8001298:	681b      	ldr	r3, [r3, #0]
}
 800129a:	1ac0      	subs	r0, r0, r3
 800129c:	b007      	add	sp, #28
 800129e:	f85d fb04 	ldr.w	pc, [sp], #4
 80012a2:	bf00      	nop
 80012a4:	200002ec 	.word	0x200002ec

080012a8 <RTC_IF_StartTimer>:
{
 80012a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ac:	4606      	mov	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80012ae:	f7ff ffed 	bl	800128c <RTC_IF_GetTimerElapsedTime>
 80012b2:	1a30      	subs	r0, r6, r0
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80012b4:	4c49      	ldr	r4, [pc, #292]	@ (80013dc <RTC_IF_StartTimer+0x134>)
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80012b6:	2803      	cmp	r0, #3
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 80012b8:	bf8c      	ite	hi
 80012ba:	2100      	movhi	r1, #0
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 80012bc:	2101      	movls	r1, #1
 80012be:	2002      	movs	r0, #2
 80012c0:	f00b fddc 	bl	800ce7c <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 80012c4:	f00b fe06 	bl	800ced4 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80012c8:	79a2      	ldrb	r2, [r4, #6]
 80012ca:	68a3      	ldr	r3, [r4, #8]
 80012cc:	9201      	str	r2, [sp, #4]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	7927      	ldrb	r7, [r4, #4]
 80012d2:	f894 8005 	ldrb.w	r8, [r4, #5]
 80012d6:	f894 a007 	ldrb.w	sl, [r4, #7]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80012da:	f894 9019 	ldrb.w	r9, [r4, #25]
 80012de:	7ea5      	ldrb	r5, [r4, #26]
 80012e0:	f894 b01b 	ldrb.w	fp, [r4, #27]
  RTC_IF_StopTimer();
 80012e4:	f7ff ff5a 	bl	800119c <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80012e8:	9b00      	ldr	r3, [sp, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80012ea:	9a01      	ldr	r2, [sp, #4]
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80012ec:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80012f0:	f3c6 0109 	ubfx	r1, r6, #0, #10
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80012f4:	3303      	adds	r3, #3
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80012f6:	fa11 f383 	uxtah	r3, r1, r3
  while (timeoutValue >= SECONDS_IN_1DAY)
 80012fa:	4939      	ldr	r1, [pc, #228]	@ (80013e0 <RTC_IF_StartTimer+0x138>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80012fc:	b29b      	uxth	r3, r3
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 80012fe:	0ab6      	lsrs	r6, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8001300:	428e      	cmp	r6, r1
 8001302:	d845      	bhi.n	8001390 <RTC_IF_StartTimer+0xe8>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8001304:	f5b6 6f61 	cmp.w	r6, #3600	@ 0xe10
 8001308:	d249      	bcs.n	800139e <RTC_IF_StartTimer+0xf6>
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800130a:	2e3b      	cmp	r6, #59	@ 0x3b
 800130c:	d84c      	bhi.n	80013a8 <RTC_IF_StartTimer+0x100>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 800130e:	0a99      	lsrs	r1, r3, #10
 8001310:	ebc1 1081 	rsb	r0, r1, r1, lsl #6
 8001314:	eb03 2380 	add.w	r3, r3, r0, lsl #10
 8001318:	1850      	adds	r0, r2, r1
 800131a:	4430      	add	r0, r6
 800131c:	b29b      	uxth	r3, r3
 800131e:	b280      	uxth	r0, r0
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8001320:	283b      	cmp	r0, #59	@ 0x3b
 8001322:	d847      	bhi.n	80013b4 <RTC_IF_StartTimer+0x10c>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8001324:	f1b8 0f3b 	cmp.w	r8, #59	@ 0x3b
 8001328:	d84b      	bhi.n	80013c2 <RTC_IF_StartTimer+0x11a>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800132a:	2f17      	cmp	r7, #23
 800132c:	d850      	bhi.n	80013d0 <RTC_IF_StartTimer+0x128>
  if (RTC_DateStruct.Year % 4 == 0)
 800132e:	4a2d      	ldr	r2, [pc, #180]	@ (80013e4 <RTC_IF_StartTimer+0x13c>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8001330:	77a0      	strb	r0, [r4, #30]
  if (RTC_DateStruct.Year % 4 == 0)
 8001332:	f01b 0f03 	tst.w	fp, #3
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8001336:	f109 39ff 	add.w	r9, r9, #4294967295
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800133a:	bf16      	itet	ne
 800133c:	444a      	addne	r2, r9
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800133e:	f812 1009 	ldrbeq.w	r1, [r2, r9]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8001342:	7b11      	ldrbne	r1, [r2, #12]
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8001344:	4828      	ldr	r0, [pc, #160]	@ (80013e8 <RTC_IF_StartTimer+0x140>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8001346:	f884 801d 	strb.w	r8, [r4, #29]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800134a:	428d      	cmp	r5, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800134c:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8001350:	bf82      	ittt	hi
 8001352:	fbb5 f2f1 	udivhi	r2, r5, r1
 8001356:	fb01 5212 	mlshi	r2, r1, r2, r5
 800135a:	b295      	uxthhi	r5, r2
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800135c:	3303      	adds	r3, #3
 800135e:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8001360:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8001364:	f04f 6320 	mov.w	r3, #167772160	@ 0xa000000
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001368:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 800136a:	63a3      	str	r3, [r4, #56]	@ 0x38
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800136c:	491f      	ldr	r1, [pc, #124]	@ (80013ec <RTC_IF_StartTimer+0x144>)
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800136e:	7727      	strb	r7, [r4, #28]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8001370:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8001374:	462a      	mov	r2, r5
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001376:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800137a:	f884 a01f 	strb.w	sl, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800137e:	63e5      	str	r5, [r4, #60]	@ 0x3c
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8001380:	6325      	str	r5, [r4, #48]	@ 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8001382:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8001384:	f003 f968 	bl	8004658 <HAL_RTC_SetAlarm_IT>
}
 8001388:	4628      	mov	r0, r5
 800138a:	b003      	add	sp, #12
 800138c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8001390:	f5a6 36a8 	sub.w	r6, r6, #86016	@ 0x15000
    rtcAlarmDays++;
 8001394:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8001396:	f5a6 76c0 	sub.w	r6, r6, #384	@ 0x180
    rtcAlarmDays++;
 800139a:	b2ad      	uxth	r5, r5
 800139c:	e7b0      	b.n	8001300 <RTC_IF_StartTimer+0x58>
    rtcAlarmHours++;
 800139e:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 80013a0:	f5a6 6661 	sub.w	r6, r6, #3600	@ 0xe10
    rtcAlarmHours++;
 80013a4:	b2bf      	uxth	r7, r7
 80013a6:	e7ad      	b.n	8001304 <RTC_IF_StartTimer+0x5c>
    rtcAlarmMinutes++;
 80013a8:	f108 0801 	add.w	r8, r8, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 80013ac:	3e3c      	subs	r6, #60	@ 0x3c
    rtcAlarmMinutes++;
 80013ae:	fa1f f888 	uxth.w	r8, r8
 80013b2:	e7aa      	b.n	800130a <RTC_IF_StartTimer+0x62>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80013b4:	383c      	subs	r0, #60	@ 0x3c
    rtcAlarmMinutes++;
 80013b6:	f108 0801 	add.w	r8, r8, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80013ba:	b280      	uxth	r0, r0
    rtcAlarmMinutes++;
 80013bc:	fa1f f888 	uxth.w	r8, r8
 80013c0:	e7ae      	b.n	8001320 <RTC_IF_StartTimer+0x78>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80013c2:	f1a8 083c 	sub.w	r8, r8, #60	@ 0x3c
    rtcAlarmHours++;
 80013c6:	3701      	adds	r7, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80013c8:	fa1f f888 	uxth.w	r8, r8
    rtcAlarmHours++;
 80013cc:	b2bf      	uxth	r7, r7
 80013ce:	e7a9      	b.n	8001324 <RTC_IF_StartTimer+0x7c>
    rtcAlarmHours -= HOURS_IN_1DAY;
 80013d0:	3f18      	subs	r7, #24
    rtcAlarmDays++;
 80013d2:	3501      	adds	r5, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 80013d4:	b2bf      	uxth	r7, r7
    rtcAlarmDays++;
 80013d6:	b2ad      	uxth	r5, r5
 80013d8:	e7a7      	b.n	800132a <RTC_IF_StartTimer+0x82>
 80013da:	bf00      	nop
 80013dc:	200002ec 	.word	0x200002ec
 80013e0:	0001517f 	.word	0x0001517f
 80013e4:	0800d908 	.word	0x0800d908
 80013e8:	200002c8 	.word	0x200002c8
 80013ec:	20000308 	.word	0x20000308

080013f0 <RTC_IF_GetTime>:
{
 80013f0:	b510      	push	{r4, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	4604      	mov	r4, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80013f6:	a901      	add	r1, sp, #4
 80013f8:	4668      	mov	r0, sp
 80013fa:	f7ff fedf 	bl	80011bc <RTC_GetCalendarValue>
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80013fe:	227d      	movs	r2, #125	@ 0x7d
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8001400:	f3c0 0309 	ubfx	r3, r0, #0, #10
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8001404:	fba3 3202 	umull	r3, r2, r3, r2
 8001408:	09db      	lsrs	r3, r3, #7
}
 800140a:	0a80      	lsrs	r0, r0, #10
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 800140c:	8023      	strh	r3, [r4, #0]
}
 800140e:	b006      	add	sp, #24
 8001410:	bd10      	pop	{r4, pc}
	...

08001414 <RTC_IF_BkUp_Write_Seconds>:
{
 8001414:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001416:	2100      	movs	r1, #0
 8001418:	4801      	ldr	r0, [pc, #4]	@ (8001420 <RTC_IF_BkUp_Write_Seconds+0xc>)
 800141a:	f003 ba3c 	b.w	8004896 <HAL_RTCEx_BKUPWrite>
 800141e:	bf00      	nop
 8001420:	200002c8 	.word	0x200002c8

08001424 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8001424:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001426:	2101      	movs	r1, #1
 8001428:	4801      	ldr	r0, [pc, #4]	@ (8001430 <RTC_IF_BkUp_Write_SubSeconds+0xc>)
 800142a:	f003 ba34 	b.w	8004896 <HAL_RTCEx_BKUPWrite>
 800142e:	bf00      	nop
 8001430:	200002c8 	.word	0x200002c8

08001434 <RTC_IF_BkUp_Read_Seconds>:
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001434:	4801      	ldr	r0, [pc, #4]	@ (800143c <RTC_IF_BkUp_Read_Seconds+0x8>)
 8001436:	2100      	movs	r1, #0
 8001438:	f003 ba39 	b.w	80048ae <HAL_RTCEx_BKUPRead>
 800143c:	200002c8 	.word	0x200002c8

08001440 <RTC_IF_BkUp_Read_SubSeconds>:
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001440:	4801      	ldr	r0, [pc, #4]	@ (8001448 <RTC_IF_BkUp_Read_SubSeconds+0x8>)
 8001442:	2101      	movs	r1, #1
 8001444:	f003 ba33 	b.w	80048ae <HAL_RTCEx_BKUPRead>
 8001448:	200002c8 	.word	0x200002c8

0800144c <RTC_IF_Init>:
{
 800144c:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 800144e:	4c10      	ldr	r4, [pc, #64]	@ (8001490 <RTC_IF_Init+0x44>)
 8001450:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
{
 8001454:	b0a3      	sub	sp, #140	@ 0x8c
  if (RTC_Initalized == false)
 8001456:	b9c3      	cbnz	r3, 800148a <RTC_IF_Init+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001458:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800145c:	f44f 7580 	mov.w	r5, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001460:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001462:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001464:	9521      	str	r5, [sp, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001466:	f002 fd27 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 800146a:	b100      	cbz	r0, 800146e <RTC_IF_Init+0x22>
      while (1);
 800146c:	e7fe      	b.n	800146c <RTC_IF_Init+0x20>
    MX_RTC_Init();
 800146e:	f7ff fdf7 	bl	8001060 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001472:	4629      	mov	r1, r5
 8001474:	4807      	ldr	r0, [pc, #28]	@ (8001494 <RTC_IF_Init+0x48>)
 8001476:	f002 ff15 	bl	80042a4 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800147a:	4806      	ldr	r0, [pc, #24]	@ (8001494 <RTC_IF_Init+0x48>)
 800147c:	f003 f9ef 	bl	800485e <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8001480:	f7ff fef8 	bl	8001274 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8001484:	2301      	movs	r3, #1
 8001486:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
}
 800148a:	2000      	movs	r0, #0
 800148c:	b023      	add	sp, #140	@ 0x8c
 800148e:	bd30      	pop	{r4, r5, pc}
 8001490:	200002ec 	.word	0x200002ec
 8001494:	200002c8 	.word	0x200002c8

08001498 <RTC_IF_GetTimerValue>:
{
 8001498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (RTC_Initalized == true)
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <RTC_IF_GetTimerValue+0x18>)
 800149c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80014a0:	b118      	cbz	r0, 80014aa <RTC_IF_GetTimerValue+0x12>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80014a2:	a901      	add	r1, sp, #4
 80014a4:	4668      	mov	r0, sp
 80014a6:	f7ff fe89 	bl	80011bc <RTC_GetCalendarValue>
}
 80014aa:	b007      	add	sp, #28
 80014ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80014b0:	200002ec 	.word	0x200002ec

080014b4 <RTC_IF_DelayMs>:
{
 80014b4:	4601      	mov	r1, r0
 80014b6:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80014b8:	227d      	movs	r2, #125	@ 0x7d
 80014ba:	2300      	movs	r3, #0
 80014bc:	01c0      	lsls	r0, r0, #7
 80014be:	0e49      	lsrs	r1, r1, #25
 80014c0:	f7ff f8f6 	bl	80006b0 <__aeabi_uldivmod>
 80014c4:	4604      	mov	r4, r0
  timeout = RTC_IF_GetTimerValue();
 80014c6:	f7ff ffe7 	bl	8001498 <RTC_IF_GetTimerValue>
 80014ca:	4605      	mov	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 80014cc:	f7ff ffe4 	bl	8001498 <RTC_IF_GetTimerValue>
 80014d0:	1b43      	subs	r3, r0, r5
 80014d2:	42a3      	cmp	r3, r4
 80014d4:	d300      	bcc.n	80014d8 <RTC_IF_DelayMs+0x24>
}
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
    __NOP();
 80014d8:	bf00      	nop
 80014da:	e7f7      	b.n	80014cc <RTC_IF_DelayMs+0x18>

080014dc <HAL_RTC_AlarmAEventCallback>:
  UTIL_TIMER_IRQ_Handler();
 80014dc:	f00b bfdc 	b.w	800d498 <UTIL_TIMER_IRQ_Handler>

080014e0 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80014e0:	4770      	bx	lr
	...

080014e4 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 80014e4:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014e6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80014ea:	b672      	cpsid	i
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 80014ec:	f000 fc8c 	bl	8001e08 <SX1262DVK1DAS_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc);
 80014f0:	4805      	ldr	r0, [pc, #20]	@ (8001508 <PWR_EnterStopMode+0x24>)
 80014f2:	f7ff fcc1 	bl	8000e78 <HAL_ADC_MspDeInit>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014f6:	f384 8810 	msr	PRIMASK, r4
  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80014fa:	2101      	movs	r1, #1
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80014fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001500:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001504:	f001 bf20 	b.w	8003348 <HAL_PWR_EnterSTOPMode>
 8001508:	20000264 	.word	0x20000264

0800150c <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800150c:	b530      	push	{r4, r5, lr}
 800150e:	b099      	sub	sp, #100	@ 0x64
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Disable IRQ while the MCU is not running on PLL */

  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	2214      	movs	r2, #20
 8001512:	2100      	movs	r1, #0
 8001514:	a802      	add	r0, sp, #8
 8001516:	f00c f927 	bl	800d768 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  uint32_t pFLatency = 0;
 800151a:	2500      	movs	r5, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151c:	2244      	movs	r2, #68	@ 0x44
 800151e:	2100      	movs	r1, #0
 8001520:	a807      	add	r0, sp, #28
 8001522:	f00c f921 	bl	800d768 <memset>
  uint32_t pFLatency = 0;
 8001526:	9500      	str	r5, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001528:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  /* In case nvic had a pending IT, the arm doesn't enter stop mode
   * Hence the pll is not switched off and will cause HAL_RCC_OscConfig return
    an error*/
  if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <PWR_ExitStopMode+0x80>)
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	f002 020c 	and.w	r2, r2, #12
 8001536:	2a0c      	cmp	r2, #12
 8001538:	d021      	beq.n	800157e <PWR_ExitStopMode+0x72>
  {
    /* Enable Power Control clock */
    __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800153c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001540:	659a      	str	r2, [r3, #88]	@ 0x58
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001548:	9301      	str	r3, [sp, #4]

    /* Get the Oscillators configuration according to the internal RCC registers */
    HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 800154a:	a807      	add	r0, sp, #28
    __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	9b01      	ldr	r3, [sp, #4]
    HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 800154e:	f002 fb39 	bl	8003bc4 <HAL_RCC_GetOscConfig>

    /* Enable PLL */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001552:	2302      	movs	r3, #2
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	a807      	add	r0, sp, #28
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 8001556:	9507      	str	r5, [sp, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001558:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155a:	f001 fff5 	bl	8003548 <HAL_RCC_OscConfig>
 800155e:	b100      	cbz	r0, 8001562 <PWR_ExitStopMode+0x56>
    {
      while (1);
 8001560:	e7fe      	b.n	8001560 <PWR_ExitStopMode+0x54>
    }

    /* Get the Clocks configuration according to the internal RCC registers */
    HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &pFLatency);
 8001562:	4669      	mov	r1, sp
 8001564:	a802      	add	r0, sp, #8
 8001566:	f002 fb89 	bl	8003c7c <HAL_RCC_GetClockConfig>

    /* Select PLL as system clock source and keep HCLK, PCLK1 and PCLK2 clocks dividers as before */
    RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_SYSCLK;
    RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2201      	movs	r2, #1
 800156c:	2303      	movs	r3, #3
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, pFLatency) != HAL_OK)
 800156e:	9900      	ldr	r1, [sp, #0]
 8001570:	a802      	add	r0, sp, #8
    RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, pFLatency) != HAL_OK)
 8001576:	f002 fa6d 	bl	8003a54 <HAL_RCC_ClockConfig>
 800157a:	b100      	cbz	r0, 800157e <PWR_ExitStopMode+0x72>
    {
      while (1);
 800157c:	e7fe      	b.n	800157c <PWR_ExitStopMode+0x70>
  {
    /*mcu did not enter stop mode because NVIC had a pending IT*/
  }

  /* initializes the peripherals */
  Sx_Board_IoInit();
 800157e:	f000 fb97 	bl	8001cb0 <SX1262DVK1DAS_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001582:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001586:	b019      	add	sp, #100	@ 0x64
 8001588:	bd30      	pop	{r4, r5, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <PWR_EnterSleepMode>:

  /* USER CODE END EnterSleepMode_1 */
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001590:	2101      	movs	r1, #1
 8001592:	2000      	movs	r0, #0
 8001594:	f001 beb8 	b.w	8003308 <HAL_PWR_EnterSLEEPMode>

08001598 <PWR_ExitSleepMode>:
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
 8001598:	4770      	bx	lr

0800159a <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
 800159a:	4770      	bx	lr

0800159c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_MspInit+0x24>)
 800159e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80015a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80015a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
{
 80015a8:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80015ae:	9201      	str	r2, [sp, #4]
 80015b0:	9a01      	ldr	r2, [sp, #4]

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	b002      	add	sp, #8
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler>

080015c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler>

080015c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler>

080015ca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler>

080015cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler>

080015ce <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	4770      	bx	lr

080015d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80015d0:	4770      	bx	lr

080015d2 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 bd3e 	b.w	8002054 <HAL_IncTick>

080015d8 <EXTI0_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_IRQHandler(void)
 80015d8:	4770      	bx	lr

080015da <EXTI1_IRQHandler>:
{
}

void EXTI1_IRQHandler(void)
 80015da:	4770      	bx	lr

080015dc <EXTI2_IRQHandler>:
{
}

void EXTI2_IRQHandler(void)
 80015dc:	4770      	bx	lr

080015de <EXTI3_IRQHandler>:
{
}

void EXTI3_IRQHandler(void)
 80015de:	4770      	bx	lr

080015e0 <EXTI4_IRQHandler>:
#endif
}

void EXTI4_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 80015e0:	4801      	ldr	r0, [pc, #4]	@ (80015e8 <EXTI4_IRQHandler+0x8>)
 80015e2:	f001 bcfd 	b.w	8002fe0 <HAL_EXTI_IRQHandler>
 80015e6:	bf00      	nop
 80015e8:	200004c4 	.word	0x200004c4

080015ec <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
 80015ec:	4770      	bx	lr

080015ee <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015ee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015f2:	f001 be7d 	b.w	80032f0 <HAL_GPIO_EXTI_IRQHandler>
	...

080015f8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015f8:	4801      	ldr	r0, [pc, #4]	@ (8001600 <DMA1_Channel7_IRQHandler+0x8>)
 80015fa:	f001 bc9a 	b.w	8002f32 <HAL_DMA_IRQHandler>
 80015fe:	bf00      	nop
 8001600:	200003bc 	.word	0x200003bc

08001604 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001604:	4801      	ldr	r0, [pc, #4]	@ (800160c <USART2_IRQHandler+0x8>)
 8001606:	f003 bd17 	b.w	8005038 <HAL_UART_IRQHandler>
 800160a:	bf00      	nop
 800160c:	20000338 	.word	0x20000338

08001610 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001610:	4801      	ldr	r0, [pc, #4]	@ (8001618 <RTC_Alarm_IRQHandler+0x8>)
 8001612:	f002 be9b 	b.w	800434c <HAL_RTC_AlarmIRQHandler>
 8001616:	bf00      	nop
 8001618:	200002c8 	.word	0x200002c8

0800161c <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 800161c:	b40c      	push	{r2, r3}
 800161e:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001620:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <tiny_snprintf_like.constprop.0+0x1c>)
  va_start(vaArgs, strFormat);
 8001622:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001624:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8001626:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001628:	f00b ff7a 	bl	800d520 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800162c:	b003      	add	sp, #12
 800162e:	f85d eb04 	ldr.w	lr, [sp], #4
 8001632:	b002      	add	sp, #8
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	0800e161 	.word	0x0800e161

0800163c <TimestampNow>:
{
 800163c:	b530      	push	{r4, r5, lr}
 800163e:	b085      	sub	sp, #20
 8001640:	4604      	mov	r4, r0
  SysTime_t curtime = SysTimeGet();
 8001642:	a802      	add	r0, sp, #8
{
 8001644:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001646:	f00b fd97 	bl	800d178 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800164a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800164e:	4a06      	ldr	r2, [pc, #24]	@ (8001668 <TimestampNow+0x2c>)
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2110      	movs	r1, #16
 8001654:	9b02      	ldr	r3, [sp, #8]
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff ffe0 	bl	800161c <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 800165c:	4620      	mov	r0, r4
 800165e:	f7fe fdb3 	bl	80001c8 <strlen>
 8001662:	8028      	strh	r0, [r5, #0]
}
 8001664:	b005      	add	sp, #20
 8001666:	bd30      	pop	{r4, r5, pc}
 8001668:	0800e161 	.word	0x0800e161

0800166c <SystemApp_Init>:
{
 800166c:	b510      	push	{r4, lr}
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800166e:	4c3b      	ldr	r4, [pc, #236]	@ (800175c <SystemApp_Init+0xf0>)
 8001670:	68a3      	ldr	r3, [r4, #8]
 8001672:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
{
 8001676:	b08a      	sub	sp, #40	@ 0x28
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001678:	60a3      	str	r3, [r4, #8]
  UTIL_TIMER_Init();
 800167a:	f00b fe05 	bl	800d288 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	2300      	movs	r3, #0
 8001680:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8001684:	9309      	str	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800168e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80016a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	9302      	str	r3, [sp, #8]
 80016a8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80016b2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	9303      	str	r3, [sp, #12]
 80016ba:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016bc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80016c4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ca:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 80016cc:	2203      	movs	r2, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 80016d2:	f649 73ff 	movw	r3, #40959	@ 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 80016da:	e9cd 3205 	strd	r3, r2, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f001 fc97 	bl	8003010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80016e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	a905      	add	r1, sp, #20
 80016e8:	481d      	ldr	r0, [pc, #116]	@ (8001760 <SystemApp_Init+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80016ea:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f001 fc90 	bl	8003010 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	a905      	add	r1, sp, #20
 80016f2:	481c      	ldr	r0, [pc, #112]	@ (8001764 <SystemApp_Init+0xf8>)
 80016f4:	f001 fc8c 	bl	8003010 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016f8:	a905      	add	r1, sp, #20
 80016fa:	481b      	ldr	r0, [pc, #108]	@ (8001768 <SystemApp_Init+0xfc>)
 80016fc:	f001 fc88 	bl	8003010 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8001700:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	64e3      	str	r3, [r4, #76]	@ 0x4c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001708:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800170a:	f023 0302 	bic.w	r3, r3, #2
 800170e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8001710:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001712:	f023 0304 	bic.w	r3, r3, #4
 8001716:	64e3      	str	r3, [r4, #76]	@ 0x4c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8001718:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800171a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800171e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  DBG_Disable();
 8001720:	f000 f894 	bl	800184c <DBG_Disable>
  DBG_ProbesInit();
 8001724:	f000 f8b4 	bl	8001890 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8001728:	f00b fa84 	bl	800cc34 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800172c:	480f      	ldr	r0, [pc, #60]	@ (800176c <SystemApp_Init+0x100>)
 800172e:	f00b fa9b 	bl	800cc68 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001732:	2002      	movs	r0, #2
 8001734:	f00b fa9e 	bl	800cc74 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001738:	f7ff fbf0 	bl	8000f1c <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 800173c:	f000 fc2c 	bl	8001f98 <SX1262DVK1DAS_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8001740:	f000 fab6 	bl	8001cb0 <SX1262DVK1DAS_RADIO_IoInit>
  EnvSensors_Init();
 8001744:	f000 f8bc 	bl	80018c0 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001748:	f00b fb90 	bl	800ce6c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800174c:	2101      	movs	r1, #1
 800174e:	4608      	mov	r0, r1
}
 8001750:	b00a      	add	sp, #40	@ 0x28
 8001752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001756:	f00b bba7 	b.w	800cea8 <UTIL_LPM_SetOffMode>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	48000400 	.word	0x48000400
 8001764:	48000800 	.word	0x48000800
 8001768:	48001c00 	.word	0x48001c00
 800176c:	0800163d 	.word	0x0800163d

08001770 <UTIL_SEQ_Idle>:
  UTIL_LPM_EnterLowPower();
 8001770:	f00b bbc2 	b.w	800cef8 <UTIL_LPM_EnterLowPower>

08001774 <GetBatteryLevel>:
{
 8001774:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001776:	f7ff fbd9 	bl	8000f2c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800177a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800177e:	4298      	cmp	r0, r3
 8001780:	d815      	bhi.n	80017ae <GetBatteryLevel+0x3a>
  else if (batteryLevelmV < VDD_MIN)
 8001782:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8001786:	d314      	bcc.n	80017b2 <GetBatteryLevel+0x3e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001788:	23fe      	movs	r3, #254	@ 0xfe
 800178a:	f5a0 64e1 	sub.w	r4, r0, #1800	@ 0x708
 800178e:	435c      	muls	r4, r3
 8001790:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8001794:	fbb4 f4f3 	udiv	r4, r4, r3
 8001798:	b2e4      	uxtb	r4, r4
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <GetBatteryLevel+0x44>)
 800179c:	9400      	str	r4, [sp, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	2100      	movs	r1, #0
 80017a2:	2002      	movs	r0, #2
 80017a4:	f00b fab0 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
}
 80017a8:	4620      	mov	r0, r4
 80017aa:	b002      	add	sp, #8
 80017ac:	bd10      	pop	{r4, pc}
    batteryLevel = LORAWAN_MAX_BAT;
 80017ae:	24fe      	movs	r4, #254	@ 0xfe
 80017b0:	e7f3      	b.n	800179a <GetBatteryLevel+0x26>
    batteryLevel = 0;
 80017b2:	2400      	movs	r4, #0
 80017b4:	e7f1      	b.n	800179a <GetBatteryLevel+0x26>
 80017b6:	bf00      	nop
 80017b8:	0800e16a 	.word	0x0800e16a

080017bc <GetTemperatureLevel>:
{
 80017bc:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80017be:	f7ff fbc9 	bl	8000f54 <SYS_GetTemperatureLevel>
 80017c2:	2800      	cmp	r0, #0
 80017c4:	bfb8      	it	lt
 80017c6:	30ff      	addlt	r0, #255	@ 0xff
}
 80017c8:	f3c0 200f 	ubfx	r0, r0, #8, #16
 80017cc:	bd08      	pop	{r3, pc}

080017ce <GetUniqueId>:
{
 80017ce:	b538      	push	{r3, r4, r5, lr}
 80017d0:	4604      	mov	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80017d2:	f000 fc4b 	bl	800206c <HAL_GetUIDw0>
 80017d6:	4605      	mov	r5, r0
 80017d8:	f000 fc54 	bl	8002084 <HAL_GetUIDw2>
 80017dc:	4405      	add	r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 80017de:	f000 fc4b 	bl	8002078 <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 80017e2:	0e2b      	lsrs	r3, r5, #24
 80017e4:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 80017e6:	0c2b      	lsrs	r3, r5, #16
 80017e8:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 80017ea:	0a2b      	lsrs	r3, r5, #8
 80017ec:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 80017ee:	0e03      	lsrs	r3, r0, #24
 80017f0:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 80017f2:	0c03      	lsrs	r3, r0, #16
 80017f4:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 80017f6:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 80017f8:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 80017fa:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 80017fc:	7020      	strb	r0, [r4, #0]
}
 80017fe:	bd38      	pop	{r3, r4, r5, pc}

08001800 <GetDevAddr>:
{
 8001800:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001802:	f000 fc33 	bl	800206c <HAL_GetUIDw0>
 8001806:	4604      	mov	r4, r0
 8001808:	f000 fc36 	bl	8002078 <HAL_GetUIDw1>
 800180c:	4044      	eors	r4, r0
 800180e:	f000 fc39 	bl	8002084 <HAL_GetUIDw2>
}
 8001812:	4060      	eors	r0, r4
 8001814:	bd10      	pop	{r4, pc}

08001816 <UTIL_ADV_TRACE_PreSendHook>:
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001816:	2101      	movs	r1, #1
 8001818:	2004      	movs	r0, #4
 800181a:	f00b bb2f 	b.w	800ce7c <UTIL_LPM_SetStopMode>

0800181e <UTIL_ADV_TRACE_PostSendHook>:
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800181e:	2100      	movs	r1, #0
 8001820:	2004      	movs	r0, #4
 8001822:	f00b bb2b 	b.w	800ce7c <UTIL_LPM_SetStopMode>

08001826 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001826:	2000      	movs	r0, #0
 8001828:	4770      	bx	lr

0800182a <HAL_GetTick>:
uint32_t HAL_GetTick(void)
{
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 800182a:	f7ff be35 	b.w	8001498 <RTC_IF_GetTimerValue>

0800182e <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800182e:	b082      	sub	sp, #8
 8001830:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8001832:	9801      	ldr	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001834:	b002      	add	sp, #8
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8001836:	f7ff be3d 	b.w	80014b4 <RTC_IF_DelayMs>

0800183a <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 800183a:	b508      	push	{r3, lr}
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 800183c:	f000 fc28 	bl	8002090 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8001840:	f000 fc2e 	bl	80020a0 <HAL_DBGMCU_DisableDBGStopMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8001844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001848:	f000 bc32 	b.w	80020b0 <HAL_DBGMCU_DisableDBGStandbyMode>

0800184c <DBG_Disable>:
{
 800184c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	2300      	movs	r3, #0
 8001850:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001854:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8001856:	2203      	movs	r2, #3
 8001858:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800185c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001864:	f503 33d8 	add.w	r3, r3, #110592	@ 0x1b000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 800186a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 800187e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f001 fbc6 	bl	8003010 <HAL_GPIO_Init>
  DBG_ConfigForLpm(1);
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff ffd8 	bl	800183a <DBG_ConfigForLpm>
}
 800188a:	b007      	add	sp, #28
 800188c:	f85d fb04 	ldr.w	pc, [sp], #4

08001890 <DBG_ProbesInit>:
#endif /* PROBE_PINS_ENABLED */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001890:	4770      	bx	lr
	...

08001894 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <EnvSensors_Read+0x18>)
 8001896:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <EnvSensors_Read+0x1c>)
 800189a:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <EnvSensors_Read+0x20>)
 800189e:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80018a0:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <EnvSensors_Read+0x24>)
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <EnvSensors_Read+0x28>)
 80018a4:	e9c0 2303 	strd	r2, r3, [r0, #12]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 80018a8:	2000      	movs	r0, #0
 80018aa:	4770      	bx	lr
 80018ac:	42480000 	.word	0x42480000
 80018b0:	41900000 	.word	0x41900000
 80018b4:	447a0000 	.word	0x447a0000
 80018b8:	003e090d 	.word	0x003e090d
 80018bc:	000503ab 	.word	0x000503ab

080018c0 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 80018c0:	2000      	movs	r0, #0
 80018c2:	4770      	bx	lr

080018c4 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance        = USART2;
 80018c4:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate   = USART_BAUDRATE;
 80018c6:	4a0b      	ldr	r2, [pc, #44]	@ (80018f4 <MX_USART2_UART_Init+0x30>)
{
 80018c8:	b508      	push	{r3, lr}
  huart2.Init.BaudRate   = USART_BAUDRATE;
 80018ca:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80018ce:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	2300      	movs	r3, #0
  huart2.Init.StopBits   = UART_STOPBITS_1;
  huart2.Init.Parity     = UART_PARITY_NONE;
  huart2.Init.Mode       = UART_MODE_TX;
 80018d4:	2208      	movs	r2, #8
  huart2.Init.StopBits   = UART_STOPBITS_1;
 80018d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80018da:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity     = UART_PARITY_NONE;
 80018de:	6103      	str	r3, [r0, #16]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e0:	f003 ff19 	bl	8005716 <HAL_UART_Init>
 80018e4:	b118      	cbz	r0, 80018ee <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80018ea:	f7ff bbb6 	b.w	800105a <Error_Handler>
}
 80018ee:	bd08      	pop	{r3, pc}
 80018f0:	20000338 	.word	0x20000338
 80018f4:	40004400 	.word	0x40004400

080018f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80018f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	2214      	movs	r2, #20
{
 80018fe:	b0ac      	sub	sp, #176	@ 0xb0
 8001900:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	2100      	movs	r1, #0
 8001904:	eb0d 0002 	add.w	r0, sp, r2
 8001908:	f00b ff2e 	bl	800d768 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800190c:	2288      	movs	r2, #136	@ 0x88
 800190e:	2100      	movs	r1, #0
 8001910:	a80a      	add	r0, sp, #40	@ 0x28
 8001912:	f00b ff29 	bl	800d768 <memset>

  if (uartHandle->Instance == USART2)
 8001916:	6832      	ldr	r2, [r6, #0]
 8001918:	4b40      	ldr	r3, [pc, #256]	@ (8001a1c <HAL_UART_MspInit+0x124>)
 800191a:	429a      	cmp	r2, r3
 800191c:	d17b      	bne.n	8001a16 <HAL_UART_MspInit+0x11e>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 800191e:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001922:	2702      	movs	r7, #2
    USARTx_TX_GPIO_CLK_ENABLE();
 8001924:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800192c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800192e:	f002 0201 	and.w	r2, r2, #1
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	9a00      	ldr	r2, [sp, #0]
    USARTx_RX_GPIO_CLK_ENABLE();
 8001936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001938:	f042 0201 	orr.w	r2, r2, #1
 800193c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800193e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001940:	f002 0201 	and.w	r2, r2, #1
 8001944:	9201      	str	r2, [sp, #4]
 8001946:	9a01      	ldr	r2, [sp, #4]
    __USART2_CLK_ENABLE();
 8001948:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800194a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800194e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001950:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001952:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001956:	9202      	str	r2, [sp, #8]
 8001958:	9a02      	ldr	r2, [sp, #8]
    DMAx_CLK_ENABLE();
 800195a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	649a      	str	r2, [r3, #72]	@ 0x48
 8001962:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001964:	f002 0201 	and.w	r2, r2, #1
 8001968:	9203      	str	r2, [sp, #12]
 800196a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800196c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800196e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001972:	659a      	str	r2, [r3, #88]	@ 0x58
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001976:	970a      	str	r7, [sp, #40]	@ 0x28
    __HAL_RCC_USART2_CLK_ENABLE();
 8001978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197c:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800197e:	2404      	movs	r4, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001980:	a80a      	add	r0, sp, #40	@ 0x28
    __HAL_RCC_USART2_CLK_ENABLE();
 8001982:	9b04      	ldr	r3, [sp, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001984:	9419      	str	r4, [sp, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001986:	f002 fa97 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 800198a:	b108      	cbz	r0, 8001990 <HAL_UART_MspInit+0x98>
    {
      Error_Handler();
 800198c:	f7ff fb65 	bl	800105a <Error_Handler>
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001990:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	e9cd 4705 	strd	r4, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001996:	f04f 0803 	mov.w	r8, #3
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800199a:	2407      	movs	r4, #7
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800199c:	a905      	add	r1, sp, #20
 800199e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80019a2:	e9cd 5807 	strd	r5, r8, [sp, #28]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80019a6:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f001 fb32 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80019ac:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80019ae:	a905      	add	r1, sp, #20
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80019b8:	e9cd 5807 	strd	r5, r8, [sp, #28]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80019bc:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80019be:	f001 fb27 	bl	8003010 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80019c2:	4c17      	ldr	r4, [pc, #92]	@ (8001a20 <HAL_UART_MspInit+0x128>)
 80019c4:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <HAL_UART_MspInit+0x12c>)
    hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80019c6:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
    hdma_usart2_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 80019ca:	e9c4 3721 	strd	r3, r7, [r4, #132]	@ 0x84
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80019ce:	2310      	movs	r3, #16
    hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80019d0:	e9c4 3523 	strd	r3, r5, [r4, #140]	@ 0x8c

    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019d4:	f104 0084 	add.w	r0, r4, #132	@ 0x84
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80019d8:	2380      	movs	r3, #128	@ 0x80
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019da:	e9c4 3525 	strd	r3, r5, [r4, #148]	@ 0x94
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
 80019de:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019e2:	f001 f96d 	bl	8002cc0 <HAL_DMA_Init>
 80019e6:	f104 0584 	add.w	r5, r4, #132	@ 0x84
 80019ea:	b108      	cbz	r0, 80019f0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80019ec:	f7ff fb35 	bl	800105a <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2100      	movs	r1, #0
 80019f4:	2011      	movs	r0, #17
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 80019f6:	66f5      	str	r5, [r6, #108]	@ 0x6c
 80019f8:	f8c4 60ac 	str.w	r6, [r4, #172]	@ 0xac
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80019fc:	f001 f90e 	bl	8002c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8001a00:	2011      	movs	r0, #17
 8001a02:	f001 f93d 	bl	8002c80 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8001a06:	2026      	movs	r0, #38	@ 0x26
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f001 f906 	bl	8002c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8001a10:	2026      	movs	r0, #38	@ 0x26
 8001a12:	f001 f935 	bl	8002c80 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a16:	b02c      	add	sp, #176	@ 0xb0
 8001a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a1c:	40004400 	.word	0x40004400
 8001a20:	20000338 	.word	0x20000338
 8001a24:	40020080 	.word	0x40020080

08001a28 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8001a28:	6802      	ldr	r2, [r0, #0]
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <HAL_UART_MspDeInit+0x34>)
 8001a2c:	429a      	cmp	r2, r3
{
 8001a2e:	b510      	push	{r4, lr}
 8001a30:	4604      	mov	r4, r0
  if (uartHandle->Instance == USART2)
 8001a32:	d111      	bne.n	8001a58 <HAL_UART_MspDeInit+0x30>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001a34:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <HAL_UART_MspDeInit+0x38>)
 8001a36:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001a38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001a3c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8001a3e:	210c      	movs	r1, #12
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a44:	f001 fbbc 	bl	80031c0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001a48:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8001a4a:	f001 f9a1 	bl	8002d90 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001a52:	2026      	movs	r0, #38	@ 0x26
 8001a54:	f001 b922 	b.w	8002c9c <HAL_NVIC_DisableIRQ>
}
 8001a58:	bd10      	pop	{r4, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40004400 	.word	0x40004400
 8001a60:	40021000 	.word	0x40021000

08001a64 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <vcom_Init+0x14>)
 8001a68:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001a6a:	f7ff faa1 	bl	8000fb0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a6e:	f7ff ff29 	bl	80018c4 <MX_USART2_UART_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001a72:	2000      	movs	r0, #0
 8001a74:	bd08      	pop	{r3, pc}
 8001a76:	bf00      	nop
 8001a78:	20000404 	.word	0x20000404

08001a7c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001a7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001a7e:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <vcom_DeInit+0x24>)
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001a80:	4808      	ldr	r0, [pc, #32]	@ (8001aa4 <vcom_DeInit+0x28>)
  __HAL_RCC_USART2_FORCE_RESET();
 8001a82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a84:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001a88:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_USART2_RELEASE_RESET();
 8001a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a8c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001a90:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_UART_MspDeInit(&huart2);
 8001a92:	f7ff ffc9 	bl	8001a28 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel7_IRQn);
 8001a96:	2011      	movs	r0, #17
 8001a98:	f001 f900 	bl	8002c9c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	bd08      	pop	{r3, pc}
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	20000338 	.word	0x20000338

08001aa8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001aa8:	b508      	push	{r3, lr}
 8001aaa:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001aac:	4601      	mov	r1, r0
 8001aae:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <vcom_Trace_DMA+0x10>)
 8001ab0:	f003 fa30 	bl	8004f14 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	bd08      	pop	{r3, pc}
 8001ab8:	20000338 	.word	0x20000338

08001abc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001abc:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <vcom_ReceiveInit+0x48>)

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001ac0:	4c11      	ldr	r4, [pc, #68]	@ (8001b08 <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 8001ac2:	6058      	str	r0, [r3, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001ac4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ac8:	9300      	str	r3, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001aca:	ab02      	add	r3, sp, #8
 8001acc:	e913 0006 	ldmdb	r3, {r1, r2}
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f003 febe 	bl	8005852 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	03d1      	lsls	r1, r2, #15
 8001adc:	d4fc      	bmi.n	8001ad8 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001ade:	69da      	ldr	r2, [r3, #28]
 8001ae0:	0252      	lsls	r2, r2, #9
 8001ae2:	d5fc      	bpl.n	8001ade <vcom_ReceiveInit+0x22>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001ae4:	689a      	ldr	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001ae6:	4808      	ldr	r0, [pc, #32]	@ (8001b08 <vcom_ReceiveInit+0x4c>)
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001ae8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001aec:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&huart2);
 8001aee:	f003 fef4 	bl	80058da <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001af2:	4906      	ldr	r1, [pc, #24]	@ (8001b0c <vcom_ReceiveInit+0x50>)
 8001af4:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <vcom_ReceiveInit+0x4c>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	f003 fe84 	bl	8005804 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001afc:	2000      	movs	r0, #0
 8001afe:	b002      	add	sp, #8
 8001b00:	bd10      	pop	{r4, pc}
 8001b02:	bf00      	nop
 8001b04:	20000404 	.word	0x20000404
 8001b08:	20000338 	.word	0x20000338
 8001b0c:	2000040c 	.word	0x2000040c

08001b10 <HAL_UART_TxCpltCallback>:
{
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8001b10:	4b01      	ldr	r3, [pc, #4]	@ (8001b18 <HAL_UART_TxCpltCallback+0x8>)
 8001b12:	2000      	movs	r0, #0
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4718      	bx	r3
 8001b18:	20000404 	.word	0x20000404

08001b1c <HAL_UART_RxCpltCallback>:

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8001b20:	4807      	ldr	r0, [pc, #28]	@ (8001b40 <HAL_UART_RxCpltCallback+0x24>)
 8001b22:	6843      	ldr	r3, [r0, #4]
 8001b24:	b12b      	cbz	r3, 8001b32 <HAL_UART_RxCpltCallback+0x16>
 8001b26:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8001b2a:	b912      	cbnz	r2, 8001b32 <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	3008      	adds	r0, #8
 8001b30:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8001b32:	4620      	mov	r0, r4
 8001b34:	4903      	ldr	r1, [pc, #12]	@ (8001b44 <HAL_UART_RxCpltCallback+0x28>)
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f003 be62 	b.w	8005804 <HAL_UART_Receive_IT>
 8001b40:	20000404 	.word	0x20000404
 8001b44:	2000040c 	.word	0x2000040c

08001b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b4c:	f000 fa4e 	bl	8001fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b52:	e003      	b.n	8001b5c <LoopCopyDataInit>

08001b54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b5a:	3104      	adds	r1, #4

08001b5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b5c:	480a      	ldr	r0, [pc, #40]	@ (8001b88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b64:	d3f6      	bcc.n	8001b54 <CopyDataInit>
	ldr	r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b68:	e002      	b.n	8001b70 <LoopFillZerobss>

08001b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b6c:	f842 3b04 	str.w	r3, [r2], #4

08001b70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <LoopForever+0x16>)
	cmp	r2, r3
 8001b72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b74:	d3f9      	bcc.n	8001b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f00b fdff 	bl	800d778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7a:	f7ff fa64 	bl	8001046 <main>

08001b7e <LoopForever>:

LoopForever:
    b LoopForever
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b84:	0800e4e8 	.word	0x0800e4e8
	ldr	r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b8c:	200000e0 	.word	0x200000e0
	ldr	r2, =_sbss
 8001b90:	200000e0 	.word	0x200000e0
	ldr	r3, = _ebss
 8001b94:	20001858 	.word	0x20001858

08001b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_2_IRQHandler>
	...

08001b9c <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8001b9c:	b513      	push	{r0, r1, r4, lr}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8001b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8001ba2:	4614      	mov	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	460a      	mov	r2, r1
 8001baa:	4601      	mov	r1, r0
 8001bac:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <BSP_SPI1_SendRecv+0x24>)
 8001bae:	f002 ffec 	bl	8004b8a <HAL_SPI_TransmitReceive>
  {
    ret = len;
 8001bb2:	2800      	cmp	r0, #0
  }
  return ret;
}
 8001bb4:	bf0c      	ite	eq
 8001bb6:	4620      	moveq	r0, r4
 8001bb8:	f06f 0005 	mvnne.w	r0, #5
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd10      	pop	{r4, pc}
 8001bc0:	20000410 	.word	0x20000410

08001bc4 <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001bc4:	4a16      	ldr	r2, [pc, #88]	@ (8001c20 <MX_SPI1_Init+0x5c>)
{
 8001bc6:	b538      	push	{r3, r4, r5, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001bc8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001bcc:	e9c0 2300 	strd	r2, r3, [r0]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001bd6:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001bda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bde:	6183      	str	r3, [r0, #24]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be0:	e9c0 5504 	strd	r5, r5, [r0, #16]
{
 8001be4:	4604      	mov	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8001be6:	f001 ffdb 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
 8001bea:	4a0e      	ldr	r2, [pc, #56]	@ (8001c24 <MX_SPI1_Init+0x60>)
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8001bec:	490e      	ldr	r1, [pc, #56]	@ (8001c28 <MX_SPI1_Init+0x64>)
  uint32_t divisor = 0;
 8001bee:	462b      	mov	r3, r5
  while (spi_clk > baudrate_mbps)
 8001bf0:	4288      	cmp	r0, r1
 8001bf2:	d80d      	bhi.n	8001c10 <MX_SPI1_Init+0x4c>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf4:	2300      	movs	r3, #0
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf6:	e9c4 3308 	strd	r3, r3, [r4, #32]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfa:	62a3      	str	r3, [r4, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8001bfc:	2307      	movs	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8001bfe:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8001c00:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001c02:	4620      	mov	r0, r4
 8001c04:	f002 ff40 	bl	8004a88 <HAL_SPI_Init>
}
 8001c08:	3800      	subs	r0, #0
 8001c0a:	bf18      	it	ne
 8001c0c:	2001      	movne	r0, #1
 8001c0e:	bd38      	pop	{r3, r4, r5, pc}
  {
    presc = baudrate[divisor];
    if (++divisor > 7)
 8001c10:	3301      	adds	r3, #1
 8001c12:	2b08      	cmp	r3, #8
    presc = baudrate[divisor];
 8001c14:	f852 5b04 	ldr.w	r5, [r2], #4
    if (++divisor > 7)
 8001c18:	d0ec      	beq.n	8001bf4 <MX_SPI1_Init+0x30>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8001c1a:	0840      	lsrs	r0, r0, #1
 8001c1c:	e7e8      	b.n	8001bf0 <MX_SPI1_Init+0x2c>
 8001c1e:	bf00      	nop
 8001c20:	40013000 	.word	0x40013000
 8001c24:	0800d988 	.word	0x0800d988
 8001c28:	00989680 	.word	0x00989680

08001c2c <BSP_SPI1_Init>:
{
 8001c2c:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8001c2e:	4c1d      	ldr	r4, [pc, #116]	@ (8001ca4 <BSP_SPI1_Init+0x78>)
 8001c30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <BSP_SPI1_Init+0x7c>)
 8001c32:	6023      	str	r3, [r4, #0]
{
 8001c34:	b087      	sub	sp, #28
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001c36:	4620      	mov	r0, r4
 8001c38:	f003 f953 	bl	8004ee2 <HAL_SPI_GetState>
 8001c3c:	b110      	cbz	r0, 8001c44 <BSP_SPI1_Init+0x18>
  int32_t ret = BSP_ERROR_NONE;
 8001c3e:	2000      	movs	r0, #0
}
 8001c40:	b007      	add	sp, #28
 8001c42:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8001c44:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <BSP_SPI1_Init+0x80>)
 8001c46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	e9cd 3002 	strd	r3, r0, [sp, #8]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001c5e:	2505      	movs	r5, #5
 8001c60:	2303      	movs	r3, #3
 8001c62:	e9cd 3504 	strd	r3, r5, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001c66:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001c68:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001c6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001c6e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001c70:	f001 f9ce 	bl	8003010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001c74:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001c76:	a901      	add	r1, sp, #4
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001c7c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001c7e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001c80:	f001 f9c6 	bl	8003010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001c84:	2320      	movs	r3, #32
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001c8c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001c8e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001c90:	f001 f9be 	bl	8003010 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff ff95 	bl	8001bc4 <MX_SPI1_Init>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d0cf      	beq.n	8001c3e <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 8001c9e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8001ca2:	e7cd      	b.n	8001c40 <BSP_SPI1_Init+0x14>
 8001ca4:	20000410 	.word	0x20000410
 8001ca8:	40013000 	.word	0x40013000
 8001cac:	40021000 	.word	0x40021000

08001cb0 <SX1262DVK1DAS_RADIO_IoInit>:
static void SX1262DVK1DAS_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void SX1262DVK1DAS_RADIO_SPI_IoDeInit(void);
/* Exported functions --------------------------------------------------------*/

void SX1262DVK1DAS_RADIO_IoInit(void)
{
 8001cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef initStruct = {0};
 8001cb4:	2500      	movs	r5, #0
{
 8001cb6:	b092      	sub	sp, #72	@ 0x48
  GPIO_InitTypeDef initStruct = {0};
 8001cb8:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
  SPI_HandleTypeDef dummy_hspi;

  /* DIO IO Init */

//   Set DioIrqHandler port in IT_RISING mode
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8001cbc:	4c4f      	ldr	r4, [pc, #316]	@ (8001dfc <SX1262DVK1DAS_RADIO_IoInit+0x14c>)
  GPIO_InitTypeDef initStruct = {0};
 8001cbe:	950c      	str	r5, [sp, #48]	@ 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8001cc0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  initStruct.Mode = GPIO_MODE_IT_RISING;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Pin = RADIO_DIO_1_PIN;
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8001cc2:	4e4f      	ldr	r6, [pc, #316]	@ (8001e00 <SX1262DVK1DAS_RADIO_IoInit+0x150>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001cca:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	9b01      	ldr	r3, [sp, #4]
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e04 <SX1262DVK1DAS_RADIO_IoInit+0x154>)
 8001cd6:	9309      	str	r3, [sp, #36]	@ 0x24
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001cd8:	2703      	movs	r7, #3
  initStruct.Pin = RADIO_DIO_1_PIN;
 8001cda:	f04f 0810 	mov.w	r8, #16
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8001cde:	a908      	add	r1, sp, #32
 8001ce0:	4630      	mov	r0, r6
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001ce2:	970b      	str	r7, [sp, #44]	@ 0x2c
  initStruct.Pin = RADIO_DIO_1_PIN;
 8001ce4:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8001ce8:	f001 f992 	bl	8003010 <HAL_GPIO_Init>

  /* Radio IO Init */
  RADIO_DEV_SEL_CLK_ENABLE();
 8001cec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001cf4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	9b02      	ldr	r3, [sp, #8]
  RADIO_BUSY_CLK_ENABLE();
 8001cfe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001d06:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  initStruct.Mode = GPIO_MODE_INPUT;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Pin = DEVICE_SEL_PIN;
 8001d08:	f8cd 8020 	str.w	r8, [sp, #32]
  RADIO_BUSY_CLK_ENABLE();
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(DEVICE_SEL_PORT, &initStruct);
 8001d12:	a908      	add	r1, sp, #32
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  RADIO_BUSY_CLK_ENABLE();
 8001d18:	9b03      	ldr	r3, [sp, #12]
  initStruct.Pull = GPIO_NOPULL;
 8001d1a:	e9cd 5509 	strd	r5, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(DEVICE_SEL_PORT, &initStruct);
 8001d1e:	f001 f977 	bl	8003010 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_BUSY_PIN;
 8001d22:	2308      	movs	r3, #8
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8001d24:	a908      	add	r1, sp, #32
 8001d26:	4630      	mov	r0, r6
  initStruct.Pin = RADIO_BUSY_PIN;
 8001d28:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8001d2a:	f001 f971 	bl	8003010 <HAL_GPIO_Init>

  /* Antenna IO Init */
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8001d2e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001d36:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  initStruct.Pull = GPIO_NOPULL;
 8001d38:	950a      	str	r5, [sp, #40]	@ 0x28
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8001d3a:	f003 0301 	and.w	r3, r3, #1
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 8001d3e:	2601      	movs	r6, #1
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8001d40:	9304      	str	r3, [sp, #16]
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 8001d42:	f44f 7800 	mov.w	r8, #512	@ 0x200
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8001d46:	a908      	add	r1, sp, #32
 8001d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8001d4c:	9b04      	ldr	r3, [sp, #16]
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 8001d4e:	e9cd 8608 	strd	r8, r6, [sp, #32]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8001d52:	f001 f95d 	bl	8003010 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8001d56:	462a      	mov	r2, r5
 8001d58:	4641      	mov	r1, r8
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d5e:	f001 fac1 	bl	80032e4 <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8001d62:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d64:	4333      	orrs	r3, r6
 8001d66:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001d68:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d6a:	4033      	ands	r3, r6
 8001d6c:	9305      	str	r3, [sp, #20]
 8001d6e:	9b05      	ldr	r3, [sp, #20]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8001d70:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d72:	4333      	orrs	r3, r6
 8001d74:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001d76:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d78:	4033      	ands	r3, r6
 8001d7a:	9306      	str	r3, [sp, #24]
 8001d7c:	9b06      	ldr	r3, [sp, #24]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8001d7e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d80:	4333      	orrs	r3, r6
 8001d82:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001d84:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	9710      	str	r7, [sp, #64]	@ 0x40
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8001d88:	4033      	ands	r3, r6
 8001d8a:	9307      	str	r3, [sp, #28]
 8001d8c:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8001d90:	2705      	movs	r7, #5
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d92:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001d96:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001d98:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001d9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001d9e:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8001da0:	9711      	str	r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001da2:	f001 f935 	bl	8003010 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001da6:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001da8:	a90d      	add	r1, sp, #52	@ 0x34
 8001daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001dae:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8001db0:	9711      	str	r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001db2:	f001 f92d 	bl	8003010 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8001db6:	2320      	movs	r3, #32
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001db8:	a90d      	add	r1, sp, #52	@ 0x34
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8001dbe:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8001dc0:	9711      	str	r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001dc2:	f001 f925 	bl	8003010 <HAL_GPIO_Init>
  RADIO_NSS_CLK_ENABLE();
 8001dc6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001dc8:	4333      	orrs	r3, r6
 8001dca:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001dcc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001dce:	4033      	ands	r3, r6
 8001dd0:	930d      	str	r3, [sp, #52]	@ 0x34
  initStruct.Pin = RADIO_NSS_PIN;
 8001dd2:	f44f 7480 	mov.w	r4, #256	@ 0x100
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8001dd6:	a908      	add	r1, sp, #32
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  RADIO_NSS_CLK_ENABLE();
 8001ddc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  initStruct.Pin = RADIO_NSS_PIN;
 8001dde:	9408      	str	r4, [sp, #32]
  initStruct.Pull = GPIO_NOPULL;
 8001de0:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8001de4:	f001 f914 	bl	8003010 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN,  GPIO_PIN_SET);
 8001de8:	4632      	mov	r2, r6
 8001dea:	4621      	mov	r1, r4
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df0:	f001 fa78 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001df4:	b012      	add	sp, #72	@ 0x48
 8001df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000400 	.word	0x48000400
 8001e04:	10110000 	.word	0x10110000

08001e08 <SX1262DVK1DAS_RADIO_IoDeInit>:
{
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	b086      	sub	sp, #24
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001e10:	2680      	movs	r6, #128	@ 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001e12:	a901      	add	r1, sp, #4
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e18:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001e1c:	2540      	movs	r5, #64	@ 0x40
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001e1e:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001e20:	f001 f8f6 	bl	8003010 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001e24:	a901      	add	r1, sp, #4
 8001e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8001e2a:	2420      	movs	r4, #32
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001e2c:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001e2e:	f001 f8ef 	bl	8003010 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001e32:	a901      	add	r1, sp, #4
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8001e38:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001e3a:	f001 f8e9 	bl	8003010 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8001e3e:	4631      	mov	r1, r6
 8001e40:	2200      	movs	r2, #0
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e46:	f001 fa4d 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e52:	f001 fa47 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	4621      	mov	r1, r4
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e5e:	f001 fa41 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001e62:	b006      	add	sp, #24
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e68 <SX1262DVK1DAS_RADIO_IoIrqInit>:
{
 8001e68:	b538      	push	{r3, r4, r5, lr}
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 8001e6a:	4d0a      	ldr	r5, [pc, #40]	@ (8001e94 <SX1262DVK1DAS_RADIO_IoIrqInit+0x2c>)
 8001e6c:	490a      	ldr	r1, [pc, #40]	@ (8001e98 <SX1262DVK1DAS_RADIO_IoIrqInit+0x30>)
{
 8001e6e:	4604      	mov	r4, r0
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 8001e70:	4628      	mov	r0, r5
 8001e72:	f001 f8af 	bl	8002fd4 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[0], HAL_EXTI_COMMON_CB_ID, irqHandlers[0]);
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f001 f8a3 	bl	8002fc6 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(RADIO_DIO_1_IRQn, RADIO_DIO_1_IT_PRIO, 0x00);
 8001e80:	2200      	movs	r2, #0
 8001e82:	200a      	movs	r0, #10
 8001e84:	4611      	mov	r1, r2
 8001e86:	f000 fec9 	bl	8002c1c <HAL_NVIC_SetPriority>
}
 8001e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_NVIC_EnableIRQ(RADIO_DIO_1_IRQn);
 8001e8e:	200a      	movs	r0, #10
 8001e90:	f000 bef6 	b.w	8002c80 <HAL_NVIC_EnableIRQ>
 8001e94:	200004c4 	.word	0x200004c4
 8001e98:	16000004 	.word	0x16000004

08001e9c <SX1262DVK1DAS_RADIO_GetWakeUpTime>:
}
 8001e9c:	2005      	movs	r0, #5
 8001e9e:	4770      	bx	lr

08001ea0 <SX1262DVK1DAS_RADIO_Reset>:
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef initStruct = { 0 };
 8001ea2:	2614      	movs	r6, #20
{
 8001ea4:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct = { 0 };
 8001ea6:	4632      	mov	r2, r6
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	a801      	add	r0, sp, #4
 8001eac:	f00b fc5c 	bl	800d768 <memset>
  RADIO_RESET_CLK_ENABLE();
 8001eb0:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <SX1262DVK1DAS_RADIO_Reset+0x74>)
 8001eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebc:	f003 0301 	and.w	r3, r3, #1
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2401      	movs	r4, #1
  RADIO_RESET_CLK_ENABLE();
 8001ec2:	9300      	str	r3, [sp, #0]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001ec4:	2503      	movs	r5, #3
  HAL_Delay(10);
 8001ec6:	200a      	movs	r0, #10
  RADIO_RESET_CLK_ENABLE();
 8001ec8:	9b00      	ldr	r3, [sp, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	9402      	str	r4, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001ecc:	9504      	str	r5, [sp, #16]
  HAL_Delay(10);
 8001ece:	f7ff fcae 	bl	800182e <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001ed2:	a901      	add	r1, sp, #4
 8001ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  initStruct.Pin = RADIO_RESET_PIN;
 8001ed8:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001eda:	f001 f899 	bl	8003010 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee6:	f001 f9fd 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001eea:	4630      	mov	r0, r6
 8001eec:	f7ff fc9f 	bl	800182e <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001ef0:	a901      	add	r1, sp, #4
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  initStruct.Pin = RADIO_RESET_PIN;
 8001ef6:	e9cd 4501 	strd	r4, r5, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001efa:	f001 f889 	bl	8003010 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);  // internal pull-up
 8001efe:	2200      	movs	r2, #0
 8001f00:	4621      	mov	r1, r4
 8001f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f06:	f001 f9ed 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001f0a:	200a      	movs	r0, #10
 8001f0c:	f7ff fc8f 	bl	800182e <HAL_Delay>
}
 8001f10:	b006      	add	sp, #24
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
 8001f14:	40021000 	.word	0x40021000

08001f18 <SX1262DVK1DAS_RADIO_WaitOnBusy>:
{
 8001f18:	b510      	push	{r4, lr}
  while (HAL_GPIO_ReadPin(RADIO_BUSY_PORT, RADIO_BUSY_PIN) == 1);
 8001f1a:	4c04      	ldr	r4, [pc, #16]	@ (8001f2c <SX1262DVK1DAS_RADIO_WaitOnBusy+0x14>)
 8001f1c:	2108      	movs	r1, #8
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f001 f9da 	bl	80032d8 <HAL_GPIO_ReadPin>
 8001f24:	2801      	cmp	r0, #1
 8001f26:	d0f9      	beq.n	8001f1c <SX1262DVK1DAS_RADIO_WaitOnBusy+0x4>
}
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	bf00      	nop
 8001f2c:	48000400 	.word	0x48000400

08001f30 <SX1262DVK1DAS_RADIO_ChipSelect>:
  if (state == 0)
 8001f30:	4602      	mov	r2, r0
 8001f32:	b928      	cbnz	r0, 8001f40 <SX1262DVK1DAS_RADIO_ChipSelect+0x10>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f3c:	f001 b9d2 	b.w	80032e4 <HAL_GPIO_WritePin>
 8001f40:	2201      	movs	r2, #1
 8001f42:	e7f7      	b.n	8001f34 <SX1262DVK1DAS_RADIO_ChipSelect+0x4>

08001f44 <SX1262DVK1DAS_RADIO_GetPaSelect>:
{
 8001f44:	b508      	push	{r3, lr}
  if (HAL_GPIO_ReadPin(DEVICE_SEL_PORT, DEVICE_SEL_PIN) ==  GPIO_PIN_SET)
 8001f46:	2110      	movs	r1, #16
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4c:	f001 f9c4 	bl	80032d8 <HAL_GPIO_ReadPin>
    return SX1262;
 8001f50:	2801      	cmp	r0, #1
}
 8001f52:	bf18      	it	ne
 8001f54:	2002      	movne	r0, #2
 8001f56:	bd08      	pop	{r3, pc}

08001f58 <SX1262DVK1DAS_RADIO_SetAntSw>:
  switch (state)
 8001f58:	4602      	mov	r2, r0
 8001f5a:	b928      	cbnz	r0, 8001f68 <SX1262DVK1DAS_RADIO_SetAntSw+0x10>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_SET);
 8001f5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f64:	f001 b9be 	b.w	80032e4 <HAL_GPIO_WritePin>
 8001f68:	2201      	movs	r2, #1
 8001f6a:	e7f7      	b.n	8001f5c <SX1262DVK1DAS_RADIO_SetAntSw+0x4>

08001f6c <SX1262DVK1DAS_RADIO_BoardIsTcxo>:
}
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	4770      	bx	lr

08001f70 <SX1262DVK1DAS_RADIO_BoardSetLedTx>:
  if (state == false)
 8001f70:	4602      	mov	r2, r0
 8001f72:	b918      	cbnz	r0, 8001f7c <SX1262DVK1DAS_RADIO_BoardSetLedTx+0xc>
    HAL_GPIO_WritePin(RADIO_LEDTX_PORT, RADIO_LEDTX_PIN, GPIO_PIN_SET);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <SX1262DVK1DAS_RADIO_BoardSetLedTx+0x10>)
 8001f76:	2102      	movs	r1, #2
 8001f78:	f001 b9b4 	b.w	80032e4 <HAL_GPIO_WritePin>
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	e7f9      	b.n	8001f74 <SX1262DVK1DAS_RADIO_BoardSetLedTx+0x4>
 8001f80:	48000800 	.word	0x48000800

08001f84 <SX1262DVK1DAS_RADIO_BoardSetLedRx>:
  if (state == false)
 8001f84:	4602      	mov	r2, r0
 8001f86:	b918      	cbnz	r0, 8001f90 <SX1262DVK1DAS_RADIO_BoardSetLedRx+0xc>
    HAL_GPIO_WritePin(RADIO_LEDRX_PORT, RADIO_LEDRX_PIN, GPIO_PIN_RESET);
 8001f88:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <SX1262DVK1DAS_RADIO_BoardSetLedRx+0x10>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	f001 b9aa 	b.w	80032e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RADIO_LEDRX_PORT, RADIO_LEDRX_PIN, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	e7f9      	b.n	8001f88 <SX1262DVK1DAS_RADIO_BoardSetLedRx+0x4>
 8001f94:	48000800 	.word	0x48000800

08001f98 <SX1262DVK1DAS_RADIO_Bus_Init>:
  RADIO_SPI_Init();
 8001f98:	f7ff be48 	b.w	8001c2c <BSP_SPI1_Init>

08001f9c <SX1262DVK1DAS_RADIO_SendRecv>:
{
 8001f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001f9e:	2201      	movs	r2, #1
{
 8001fa0:	f8ad 0006 	strh.w	r0, [sp, #6]
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001fa4:	f10d 010e 	add.w	r1, sp, #14
 8001fa8:	f10d 0006 	add.w	r0, sp, #6
 8001fac:	f7ff fdf6 	bl	8001b9c <BSP_SPI1_SendRecv>
}
 8001fb0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001fb4:	b005      	add	sp, #20
 8001fb6:	f85d fb04 	ldr.w	pc, [sp], #4

08001fba <SX1262DVK1DAS_RADIO_WakeUp>:
{
 8001fba:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc6:	f001 f98d 	bl	80032e4 <HAL_GPIO_WritePin>
  SX1262DVK1DAS_RADIO_SendRecv(RADIO_GET_STATUS);
 8001fca:	20c0      	movs	r0, #192	@ 0xc0
 8001fcc:	f7ff ffe6 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
  SX1262DVK1DAS_RADIO_SendRecv(0);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff ffe3 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe0:	f001 f980 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SX1262DVK1DAS_RADIO_WaitOnBusy();
 8001fe8:	f7ff bf96 	b.w	8001f18 <SX1262DVK1DAS_RADIO_WaitOnBusy>

08001fec <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001fec:	490f      	ldr	r1, [pc, #60]	@ (800202c <SystemInit+0x40>)
 8001fee:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001ff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <SystemInit+0x44>)
 8001ffc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ffe:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002006:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 800200e:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8002012:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002014:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002018:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002020:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002022:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002024:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002028:	608b      	str	r3, [r1, #8]
#endif
}
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002034:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002036:	2003      	movs	r0, #3
 8002038:	f000 fdde 	bl	8002bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203c:	200f      	movs	r0, #15
 800203e:	f7ff fbf2 	bl	8001826 <HAL_InitTick>
 8002042:	4604      	mov	r4, r0
 8002044:	b918      	cbnz	r0, 800204e <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002046:	f7ff faa9 	bl	800159c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800204a:	4620      	mov	r0, r4
 800204c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800204e:	2401      	movs	r4, #1
 8002050:	e7fb      	b.n	800204a <HAL_Init+0x16>
	...

08002054 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002054:	4a03      	ldr	r2, [pc, #12]	@ (8002064 <HAL_IncTick+0x10>)
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <HAL_IncTick+0x14>)
 8002058:	6811      	ldr	r1, [r2, #0]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	440b      	add	r3, r1
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	200004cc 	.word	0x200004cc
 8002068:	20000050 	.word	0x20000050

0800206c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
}
 800206c:	4b01      	ldr	r3, [pc, #4]	@ (8002074 <HAL_GetUIDw0+0x8>)
 800206e:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
 8002072:	4770      	bx	lr
 8002074:	1fff7000 	.word	0x1fff7000

08002078 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002078:	4b01      	ldr	r3, [pc, #4]	@ (8002080 <HAL_GetUIDw1+0x8>)
 800207a:	f8d3 0594 	ldr.w	r0, [r3, #1428]	@ 0x594
 800207e:	4770      	bx	lr
 8002080:	1fff7000 	.word	0x1fff7000

08002084 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002084:	4b01      	ldr	r3, [pc, #4]	@ (800208c <HAL_GetUIDw2+0x8>)
 8002086:	f8d3 0598 	ldr.w	r0, [r3, #1432]	@ 0x598
 800208a:	4770      	bx	lr
 800208c:	1fff7000 	.word	0x1fff7000

08002090 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002090:	4a02      	ldr	r2, [pc, #8]	@ (800209c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002092:	6853      	ldr	r3, [r2, #4]
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6053      	str	r3, [r2, #4]
}
 800209a:	4770      	bx	lr
 800209c:	e0042000 	.word	0xe0042000

080020a0 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80020a0:	4a02      	ldr	r2, [pc, #8]	@ (80020ac <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80020a2:	6853      	ldr	r3, [r2, #4]
 80020a4:	f023 0302 	bic.w	r3, r3, #2
 80020a8:	6053      	str	r3, [r2, #4]
}
 80020aa:	4770      	bx	lr
 80020ac:	e0042000 	.word	0xe0042000

080020b0 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80020b0:	4a02      	ldr	r2, [pc, #8]	@ (80020bc <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80020b2:	6853      	ldr	r3, [r2, #4]
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6053      	str	r3, [r2, #4]
}
 80020ba:	4770      	bx	lr
 80020bc:	e0042000 	.word	0xe0042000

080020c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020c0:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020c2:	0dcc      	lsrs	r4, r1, #23
 80020c4:	f004 0404 	and.w	r4, r4, #4
 80020c8:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 80020ca:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80020ce:	5903      	ldr	r3, [r0, r4]
 80020d0:	2507      	movs	r5, #7
 80020d2:	408d      	lsls	r5, r1
 80020d4:	ea23 0305 	bic.w	r3, r3, r5
 80020d8:	408a      	lsls	r2, r1
 80020da:	4313      	orrs	r3, r2
 80020dc:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020de:	bd30      	pop	{r4, r5, pc}

080020e0 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	6880      	ldr	r0, [r0, #8]
}
 80020e2:	f000 0001 	and.w	r0, r0, #1
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020e8:	6880      	ldr	r0, [r0, #8]
}
 80020ea:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020f6:	4604      	mov	r4, r0
 80020f8:	2800      	cmp	r0, #0
 80020fa:	f000 80ca 	beq.w	8002292 <HAL_ADC_Init+0x1a2>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020fe:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8002100:	b925      	cbnz	r5, 800210c <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002102:	f7fe fea3 	bl	8000e4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002106:	65a5      	str	r5, [r4, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002108:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800210c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002112:	bf41      	itttt	mi
 8002114:	689a      	ldrmi	r2, [r3, #8]
 8002116:	f022 4220 	bicmi.w	r2, r2, #2684354560	@ 0xa0000000
 800211a:	f022 023f 	bicmi.w	r2, r2, #63	@ 0x3f
 800211e:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	00d1      	lsls	r1, r2, #3
 8002124:	f140 8094 	bpl.w	8002250 <HAL_ADC_Init+0x160>
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	00d2      	lsls	r2, r2, #3
 800212c:	f100 80a7 	bmi.w	800227e <HAL_ADC_Init+0x18e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002130:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002132:	f042 0210 	orr.w	r2, r2, #16
 8002136:	6562      	str	r2, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002138:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	65a2      	str	r2, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002140:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ffd0 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002148:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800214a:	f002 0210 	and.w	r2, r2, #16
 800214e:	4302      	orrs	r2, r0
 8002150:	f040 809b 	bne.w	800228a <HAL_ADC_Init+0x19a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002156:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 800215a:	f042 0202 	orr.w	r2, r2, #2
 800215e:	6562      	str	r2, [r4, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ffbd 	bl	80020e0 <LL_ADC_IsEnabled>
 8002166:	b998      	cbnz	r0, 8002190 <HAL_ADC_Init+0xa0>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002168:	484b      	ldr	r0, [pc, #300]	@ (8002298 <HAL_ADC_Init+0x1a8>)
 800216a:	f7ff ffb9 	bl	80020e0 <LL_ADC_IsEnabled>
 800216e:	4602      	mov	r2, r0
 8002170:	484a      	ldr	r0, [pc, #296]	@ (800229c <HAL_ADC_Init+0x1ac>)
 8002172:	f7ff ffb5 	bl	80020e0 <LL_ADC_IsEnabled>
 8002176:	4302      	orrs	r2, r0
 8002178:	4849      	ldr	r0, [pc, #292]	@ (80022a0 <HAL_ADC_Init+0x1b0>)
 800217a:	f7ff ffb1 	bl	80020e0 <LL_ADC_IsEnabled>
 800217e:	4302      	orrs	r2, r0
 8002180:	d106      	bne.n	8002190 <HAL_ADC_Init+0xa0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002182:	4848      	ldr	r0, [pc, #288]	@ (80022a4 <HAL_ADC_Init+0x1b4>)
 8002184:	6865      	ldr	r5, [r4, #4]
 8002186:	6882      	ldr	r2, [r0, #8]
 8002188:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 800218c:	432a      	orrs	r2, r5
 800218e:	6082      	str	r2, [r0, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8002190:	68e5      	ldr	r5, [r4, #12]
 8002192:	6b62      	ldr	r2, [r4, #52]	@ 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002194:	f894 0020 	ldrb.w	r0, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8002198:	432a      	orrs	r2, r5
 800219a:	68a5      	ldr	r5, [r4, #8]
 800219c:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800219e:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021a0:	2801      	cmp	r0, #1
                hadc->Init.DataAlign                                                   |
 80021a2:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021aa:	bf02      	ittt	eq
 80021ac:	6a60      	ldreq	r0, [r4, #36]	@ 0x24
 80021ae:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80021b2:	ea42 4240 	orreq.w	r2, r2, r0, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80021b8:	b120      	cbz	r0, 80021c4 <HAL_ADC_Init+0xd4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80021ba:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021bc:	f400 7070 	and.w	r0, r0, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021c0:	4328      	orrs	r0, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c2:	4302      	orrs	r2, r0
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021c4:	68dd      	ldr	r5, [r3, #12]
 80021c6:	4838      	ldr	r0, [pc, #224]	@ (80022a8 <HAL_ADC_Init+0x1b8>)
 80021c8:	4028      	ands	r0, r5
 80021ca:	4310      	orrs	r0, r2
 80021cc:	60d8      	str	r0, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff8a 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	f002 0208 	and.w	r2, r2, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021da:	4302      	orrs	r2, r0
 80021dc:	d120      	bne.n	8002220 <HAL_ADC_Init+0x130>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021de:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021e0:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021e4:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021e6:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021e8:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021ec:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021f0:	f020 0002 	bic.w	r0, r0, #2
 80021f4:	4302      	orrs	r2, r0
 80021f6:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021f8:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80021fc:	2a01      	cmp	r2, #1
 80021fe:	d140      	bne.n	8002282 <HAL_ADC_Init+0x192>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002200:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	@ 0x3c
 8002204:	6918      	ldr	r0, [r3, #16]
 8002206:	f420 60ff 	bic.w	r0, r0, #2040	@ 0x7f8
 800220a:	f020 0004 	bic.w	r0, r0, #4
 800220e:	432a      	orrs	r2, r5
 8002210:	4302      	orrs	r2, r0
 8002212:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002214:	4302      	orrs	r2, r0
 8002216:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002218:	4302      	orrs	r2, r0
 800221a:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800221e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002220:	6922      	ldr	r2, [r4, #16]
 8002222:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002224:	bf05      	ittet	eq
 8002226:	6b18      	ldreq	r0, [r3, #48]	@ 0x30
 8002228:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800222a:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800222c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002230:	bf06      	itte	eq
 8002232:	f020 000f 	biceq.w	r0, r0, #15
 8002236:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002238:	f022 020f 	bicne.w	r2, r2, #15
 800223c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800223e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002240:	f023 0303 	bic.w	r3, r3, #3
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800224a:	4608      	mov	r0, r1
 800224c:	b003      	add	sp, #12
 800224e:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002250:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002252:	4916      	ldr	r1, [pc, #88]	@ (80022ac <HAL_ADC_Init+0x1bc>)
 8002254:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8002258:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800225c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	4a13      	ldr	r2, [pc, #76]	@ (80022b0 <HAL_ADC_Init+0x1c0>)
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	fbb2 f2f1 	udiv	r2, r2, r1
 800226a:	3201      	adds	r2, #1
 800226c:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 800226e:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8002270:	9a01      	ldr	r2, [sp, #4]
 8002272:	2a00      	cmp	r2, #0
 8002274:	f43f af58 	beq.w	8002128 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8002278:	9a01      	ldr	r2, [sp, #4]
 800227a:	3a01      	subs	r2, #1
 800227c:	e7f7      	b.n	800226e <HAL_ADC_Init+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227e:	2100      	movs	r1, #0
 8002280:	e75f      	b.n	8002142 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	e7c9      	b.n	800221e <HAL_ADC_Init+0x12e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8002292:	2101      	movs	r1, #1
 8002294:	e7d9      	b.n	800224a <HAL_ADC_Init+0x15a>
 8002296:	bf00      	nop
 8002298:	50040000 	.word	0x50040000
 800229c:	50040100 	.word	0x50040100
 80022a0:	50040200 	.word	0x50040200
 80022a4:	50040300 	.word	0x50040300
 80022a8:	fff0c007 	.word	0xfff0c007
 80022ac:	00030d40 	.word	0x00030d40
 80022b0:	2000004c 	.word	0x2000004c

080022b4 <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022b4:	4a35      	ldr	r2, [pc, #212]	@ (800238c <HAL_ADC_PollForConversion+0xd8>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022ba:	6945      	ldr	r5, [r0, #20]
 80022bc:	6897      	ldr	r7, [r2, #8]
 80022be:	2d08      	cmp	r5, #8
{
 80022c0:	4604      	mov	r4, r0
 80022c2:	460e      	mov	r6, r1
 80022c4:	f007 071f 	and.w	r7, r7, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022c8:	d015      	beq.n	80022f6 <HAL_ADC_PollForConversion+0x42>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ca:	f240 2321 	movw	r3, #545	@ 0x221
 80022ce:	40fb      	lsrs	r3, r7
 80022d0:	07d9      	lsls	r1, r3, #31
 80022d2:	d50b      	bpl.n	80022ec <HAL_ADC_PollForConversion+0x38>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022d4:	6803      	ldr	r3, [r0, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022dc:	d00a      	beq.n	80022f4 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022de:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80022e0:	f043 0320 	orr.w	r3, r3, #32
 80022e4:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 80022e6:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80022e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022ec:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022ee:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 80022f2:	e7f3      	b.n	80022dc <HAL_ADC_PollForConversion+0x28>
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022f4:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 80022f6:	f7ff fa98 	bl	800182a <HAL_GetTick>
 80022fa:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	422a      	tst	r2, r5
 8002302:	d025      	beq.n	8002350 <HAL_ADC_PollForConversion+0x9c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230a:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8002312:	d10f      	bne.n	8002334 <HAL_ADC_PollForConversion+0x80>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002314:	7e62      	ldrb	r2, [r4, #25]
 8002316:	b96a      	cbnz	r2, 8002334 <HAL_ADC_PollForConversion+0x80>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	0716      	lsls	r6, r2, #28
 800231c:	d50a      	bpl.n	8002334 <HAL_ADC_PollForConversion+0x80>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800231e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002320:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002324:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002326:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002328:	04d0      	lsls	r0, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800232a:	bf5e      	ittt	pl
 800232c:	6d62      	ldrpl	r2, [r4, #84]	@ 0x54
 800232e:	f042 0201 	orrpl.w	r2, r2, #1
 8002332:	6562      	strpl	r2, [r4, #84]	@ 0x54
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002334:	4a16      	ldr	r2, [pc, #88]	@ (8002390 <HAL_ADC_PollForConversion+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d104      	bne.n	8002344 <HAL_ADC_PollForConversion+0x90>
 800233a:	f240 2221 	movw	r2, #545	@ 0x221
 800233e:	40fa      	lsrs	r2, r7
 8002340:	07d1      	lsls	r1, r2, #31
 8002342:	d51b      	bpl.n	800237c <HAL_ADC_PollForConversion+0xc8>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002344:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002346:	2d08      	cmp	r5, #8
 8002348:	d11b      	bne.n	8002382 <HAL_ADC_PollForConversion+0xce>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800234a:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800234c:	2000      	movs	r0, #0
 800234e:	e7cb      	b.n	80022e8 <HAL_ADC_PollForConversion+0x34>
    if (Timeout != HAL_MAX_DELAY)
 8002350:	1c72      	adds	r2, r6, #1
 8002352:	d0d4      	beq.n	80022fe <HAL_ADC_PollForConversion+0x4a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002354:	f7ff fa69 	bl	800182a <HAL_GetTick>
 8002358:	eba0 0008 	sub.w	r0, r0, r8
 800235c:	42b0      	cmp	r0, r6
 800235e:	d801      	bhi.n	8002364 <HAL_ADC_PollForConversion+0xb0>
 8002360:	2e00      	cmp	r6, #0
 8002362:	d1cb      	bne.n	80022fc <HAL_ADC_PollForConversion+0x48>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	402b      	ands	r3, r5
 800236a:	d1c7      	bne.n	80022fc <HAL_ADC_PollForConversion+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800236c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 800236e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002372:	f042 0204 	orr.w	r2, r2, #4
 8002376:	6562      	str	r2, [r4, #84]	@ 0x54
          return HAL_TIMEOUT;
 8002378:	2003      	movs	r0, #3
 800237a:	e7b5      	b.n	80022e8 <HAL_ADC_PollForConversion+0x34>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800237c:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <HAL_ADC_PollForConversion+0xe0>)
 800237e:	68d2      	ldr	r2, [r2, #12]
 8002380:	e7e1      	b.n	8002346 <HAL_ADC_PollForConversion+0x92>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002382:	0452      	lsls	r2, r2, #17
 8002384:	d4e2      	bmi.n	800234c <HAL_ADC_PollForConversion+0x98>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002386:	220c      	movs	r2, #12
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e7df      	b.n	800234c <HAL_ADC_PollForConversion+0x98>
 800238c:	50040300 	.word	0x50040300
 8002390:	50040100 	.word	0x50040100
 8002394:	50040000 	.word	0x50040000

08002398 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002398:	6803      	ldr	r3, [r0, #0]
 800239a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a6:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80023aa:	2b01      	cmp	r3, #1
{
 80023ac:	4605      	mov	r5, r0
 80023ae:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80023b0:	f000 81a0 	beq.w	80026f4 <HAL_ADC_ConfigChannel+0x354>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b4:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 80023b6:	2301      	movs	r3, #1
 80023b8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023bc:	4630      	mov	r0, r6
 80023be:	f7ff fe93 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	f040 8190 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x348>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80023c8:	684b      	ldr	r3, [r1, #4]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d809      	bhi.n	80023e2 <HAL_ADC_ConfigChannel+0x42>
    {
      switch (sConfig->Rank)
 80023ce:	3b02      	subs	r3, #2
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	f200 8086 	bhi.w	80024e2 <HAL_ADC_ConfigChannel+0x142>
 80023d6:	e8df f003 	tbb	[pc, r3]
 80023da:	7d02      	.short	0x7d02
 80023dc:	817f      	.short	0x817f
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80023de:	230c      	movs	r3, #12
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
          break;
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023e0:	6063      	str	r3, [r4, #4]
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023e2:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(*preg,
 80023e4:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023e6:	0991      	lsrs	r1, r2, #6
 80023e8:	f001 010c 	and.w	r1, r1, #12
 80023ec:	f106 0730 	add.w	r7, r6, #48	@ 0x30
  MODIFY_REG(*preg,
 80023f0:	f002 021f 	and.w	r2, r2, #31
 80023f4:	5878      	ldr	r0, [r7, r1]
 80023f6:	f04f 0c1f 	mov.w	ip, #31
 80023fa:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80023fe:	4093      	lsls	r3, r2
 8002400:	fa0c f202 	lsl.w	r2, ip, r2
 8002404:	ea20 0202 	bic.w	r2, r0, r2
 8002408:	4313      	orrs	r3, r2
 800240a:	507b      	str	r3, [r7, r1]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800240c:	4630      	mov	r0, r6
 800240e:	f7ff fe6b 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002412:	68b3      	ldr	r3, [r6, #8]
 8002414:	f003 0308 	and.w	r3, r3, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002418:	4303      	orrs	r3, r0
 800241a:	d120      	bne.n	800245e <HAL_ADC_ConfigChannel+0xbe>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800241c:	68a2      	ldr	r2, [r4, #8]
 800241e:	6821      	ldr	r1, [r4, #0]
 8002420:	4630      	mov	r0, r6
 8002422:	f7ff fe4d 	bl	80020c0 <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002426:	6920      	ldr	r0, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002428:	6967      	ldr	r7, [r4, #20]
 800242a:	68f1      	ldr	r1, [r6, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	2804      	cmp	r0, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002430:	f106 0260 	add.w	r2, r6, #96	@ 0x60
 8002434:	d057      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x146>
  MODIFY_REG(*preg,
 8002436:	f852 e020 	ldr.w	lr, [r2, r0, lsl #2]
 800243a:	f8df c2e4 	ldr.w	ip, [pc, #740]	@ 8002720 <HAL_ADC_ConfigChannel+0x380>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800243e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002442:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8002446:	ea0e 0c0c 	and.w	ip, lr, ip
 800244a:	0049      	lsls	r1, r1, #1
 800244c:	ea43 030c 	orr.w	r3, r3, ip
 8002450:	fa07 f101 	lsl.w	r1, r7, r1
 8002454:	430b      	orrs	r3, r1
 8002456:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800245a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245e:	4630      	mov	r0, r6
 8002460:	f7ff fe3e 	bl	80020e0 <LL_ADC_IsEnabled>
 8002464:	2800      	cmp	r0, #0
 8002466:	f040 80c9 	bne.w	80025fc <HAL_ADC_ConfigChannel+0x25c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800246a:	68e7      	ldr	r7, [r4, #12]
 800246c:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800246e:	4aa2      	ldr	r2, [pc, #648]	@ (80026f8 <HAL_ADC_ConfigChannel+0x358>)
 8002470:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8002474:	f007 0c18 	and.w	ip, r7, #24
 8002478:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800247c:	fa22 f20c 	lsr.w	r2, r2, ip
 8002480:	401a      	ands	r2, r3
 8002482:	ea21 0100 	bic.w	r1, r1, r0
 8002486:	430a      	orrs	r2, r1
 8002488:	f8c6 20b0 	str.w	r2, [r6, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800248c:	4a9b      	ldr	r2, [pc, #620]	@ (80026fc <HAL_ADC_ConfigChannel+0x35c>)
 800248e:	4297      	cmp	r7, r2
 8002490:	f040 80b4 	bne.w	80025fc <HAL_ADC_ConfigChannel+0x25c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002494:	2800      	cmp	r0, #0
 8002496:	f040 8085 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0x204>
 800249a:	0e9a      	lsrs	r2, r3, #26
 800249c:	3201      	adds	r2, #1
 800249e:	f002 071f 	and.w	r7, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a2:	2f09      	cmp	r7, #9
 80024a4:	f04f 0101 	mov.w	r1, #1
 80024a8:	ea4f 6282 	mov.w	r2, r2, lsl #26
 80024ac:	f240 8095 	bls.w	80025da <HAL_ADC_ConfigChannel+0x23a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b0:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80024b4:	40b9      	lsls	r1, r7
 80024b6:	4311      	orrs	r1, r2
 80024b8:	2800      	cmp	r0, #0
 80024ba:	f040 80bf 	bne.w	800263c <HAL_ADC_ConfigChannel+0x29c>
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80024ca:	3b1e      	subs	r3, #30
 80024cc:	051b      	lsls	r3, r3, #20
 80024ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024d2:	e08e      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x252>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80024d4:	2312      	movs	r3, #18
 80024d6:	e783      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x40>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80024d8:	2318      	movs	r3, #24
 80024da:	e781      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x40>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024e0:	e77e      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x40>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024e2:	2306      	movs	r3, #6
 80024e4:	e77c      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x40>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024e6:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80024e8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024ea:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ee:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d139      	bne.n	800256a <HAL_ADC_ConfigChannel+0x1ca>
 80024f6:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024fa:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 80024fc:	bf02      	ittt	eq
 80024fe:	6e33      	ldreq	r3, [r6, #96]	@ 0x60
 8002500:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8002504:	6633      	streq	r3, [r6, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002506:	6853      	ldr	r3, [r2, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	6851      	ldr	r1, [r2, #4]
 800250c:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002510:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002514:	2800      	cmp	r0, #0
 8002516:	d12f      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x1d8>
 8002518:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800251c:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 800251e:	bf02      	ittt	eq
 8002520:	6853      	ldreq	r3, [r2, #4]
 8002522:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8002526:	6053      	streq	r3, [r2, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002528:	6893      	ldr	r3, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	6891      	ldr	r1, [r2, #8]
 800252e:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002532:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002536:	bb30      	cbnz	r0, 8002586 <HAL_ADC_ConfigChannel+0x1e6>
 8002538:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800253c:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 800253e:	bf02      	ittt	eq
 8002540:	6893      	ldreq	r3, [r2, #8]
 8002542:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8002546:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002548:	68d3      	ldr	r3, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	68d1      	ldr	r1, [r2, #12]
 800254e:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002552:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002556:	b9e8      	cbnz	r0, 8002594 <HAL_ADC_ConfigChannel+0x1f4>
 8002558:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800255c:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 800255e:	bf02      	ittt	eq
 8002560:	68d3      	ldreq	r3, [r2, #12]
 8002562:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8002566:	60d3      	streq	r3, [r2, #12]
}
 8002568:	e779      	b.n	800245e <HAL_ADC_ConfigChannel+0xbe>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0c9      	beq.n	8002506 <HAL_ADC_ConfigChannel+0x166>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	e7c0      	b.n	80024fa <HAL_ADC_ConfigChannel+0x15a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0d3      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x188>
  return __builtin_clz(value);
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	e7ca      	b.n	800251c <HAL_ADC_ConfigChannel+0x17c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0dc      	beq.n	8002548 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	e7d3      	b.n	800253c <HAL_ADC_ConfigChannel+0x19c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002598:	2b00      	cmp	r3, #0
 800259a:	f43f af60 	beq.w	800245e <HAL_ADC_ConfigChannel+0xbe>
  return __builtin_clz(value);
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	e7db      	b.n	800255c <HAL_ADC_ConfigChannel+0x1bc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80025a8:	b132      	cbz	r2, 80025b8 <HAL_ADC_ConfigChannel+0x218>
  return __builtin_clz(value);
 80025aa:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ae:	3201      	adds	r2, #1
 80025b0:	f002 021f 	and.w	r2, r2, #31
 80025b4:	2a09      	cmp	r2, #9
 80025b6:	d830      	bhi.n	800261a <HAL_ADC_ConfigChannel+0x27a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80025bc:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025c0:	3201      	adds	r2, #1
 80025c2:	0692      	lsls	r2, r2, #26
 80025c4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 80025cc:	fab7 f787 	clz	r7, r7
 80025d0:	3701      	adds	r7, #1
 80025d2:	f007 071f 	and.w	r7, r7, #31
 80025d6:	2101      	movs	r1, #1
 80025d8:	e001      	b.n	80025de <HAL_ADC_ConfigChannel+0x23e>
 80025da:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80025de:	40b9      	lsls	r1, r7
 80025e0:	4311      	orrs	r1, r2
 80025e2:	b9a8      	cbnz	r0, 8002610 <HAL_ADC_ConfigChannel+0x270>
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f2:	68a2      	ldr	r2, [r4, #8]
 80025f4:	4319      	orrs	r1, r3
 80025f6:	4630      	mov	r0, r6
 80025f8:	f7ff fd62 	bl	80020c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025fc:	6821      	ldr	r1, [r4, #0]
 80025fe:	4b40      	ldr	r3, [pc, #256]	@ (8002700 <HAL_ADC_ConfigChannel+0x360>)
 8002600:	4219      	tst	r1, r3
 8002602:	d128      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x2b6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002604:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002606:	2300      	movs	r3, #0
 8002608:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800260c:	b003      	add	sp, #12
 800260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	e7e5      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800261e:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002622:	3201      	adds	r2, #1
 8002624:	0692      	lsls	r2, r2, #26
 8002626:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 800262e:	fab7 f787 	clz	r7, r7
 8002632:	3701      	adds	r7, #1
 8002634:	f007 071f 	and.w	r7, r7, #31
 8002638:	2101      	movs	r1, #1
 800263a:	e73b      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002640:	fab2 f282 	clz	r2, r2
 8002644:	3201      	adds	r2, #1
 8002646:	f002 021f 	and.w	r2, r2, #31
 800264a:	2303      	movs	r3, #3
 800264c:	f06f 001d 	mvn.w	r0, #29
 8002650:	fb13 0302 	smlabb	r3, r3, r2, r0
 8002654:	e73a      	b.n	80024cc <HAL_ADC_ConfigChannel+0x12c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002656:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <HAL_ADC_ConfigChannel+0x364>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002658:	4c2b      	ldr	r4, [pc, #172]	@ (8002708 <HAL_ADC_ConfigChannel+0x368>)
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	42a1      	cmp	r1, r4
 800265e:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
 8002662:	d11e      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x302>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002664:	0214      	lsls	r4, r2, #8
 8002666:	d4cd      	bmi.n	8002604 <HAL_ADC_ConfigChannel+0x264>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002668:	4a28      	ldr	r2, [pc, #160]	@ (800270c <HAL_ADC_ConfigChannel+0x36c>)
 800266a:	4296      	cmp	r6, r2
 800266c:	d003      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x2d6>
 800266e:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8002672:	4296      	cmp	r6, r2
 8002674:	d1c6      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x264>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800267c:	4302      	orrs	r2, r0
 800267e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002682:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002684:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <HAL_ADC_ConfigChannel+0x370>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <HAL_ADC_ConfigChannel+0x374>)
 800268a:	fbb2 f2f3 	udiv	r2, r2, r3
 800268e:	230c      	movs	r3, #12
 8002690:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8002694:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002696:	9b01      	ldr	r3, [sp, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0b3      	beq.n	8002604 <HAL_ADC_ConfigChannel+0x264>
            wait_loop_index--;
 800269c:	9b01      	ldr	r3, [sp, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	e7f8      	b.n	8002694 <HAL_ADC_ConfigChannel+0x2f4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026a2:	4c1d      	ldr	r4, [pc, #116]	@ (8002718 <HAL_ADC_ConfigChannel+0x378>)
 80026a4:	42a1      	cmp	r1, r4
 80026a6:	d110      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x32a>
 80026a8:	01d1      	lsls	r1, r2, #7
 80026aa:	d4ab      	bmi.n	8002604 <HAL_ADC_ConfigChannel+0x264>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ac:	4a17      	ldr	r2, [pc, #92]	@ (800270c <HAL_ADC_ConfigChannel+0x36c>)
 80026ae:	4296      	cmp	r6, r2
 80026b0:	d003      	beq.n	80026ba <HAL_ADC_ConfigChannel+0x31a>
 80026b2:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80026b6:	4296      	cmp	r6, r2
 80026b8:	d1a4      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x264>
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80026c0:	4302      	orrs	r2, r0
 80026c2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80026c6:	609a      	str	r2, [r3, #8]
}
 80026c8:	e79c      	b.n	8002604 <HAL_ADC_ConfigChannel+0x264>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026ca:	4c14      	ldr	r4, [pc, #80]	@ (800271c <HAL_ADC_ConfigChannel+0x37c>)
 80026cc:	42a1      	cmp	r1, r4
 80026ce:	d199      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x264>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026d0:	0252      	lsls	r2, r2, #9
 80026d2:	d497      	bmi.n	8002604 <HAL_ADC_ConfigChannel+0x264>
        if (ADC_VREFINT_INSTANCE(hadc))
 80026d4:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <HAL_ADC_ConfigChannel+0x36c>)
 80026d6:	4296      	cmp	r6, r2
 80026d8:	d194      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x264>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80026e0:	4302      	orrs	r2, r0
 80026e2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80026e6:	e7ee      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x326>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80026ea:	f042 0220 	orr.w	r2, r2, #32
 80026ee:	656a      	str	r2, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80026f0:	4618      	mov	r0, r3
 80026f2:	e788      	b.n	8002606 <HAL_ADC_ConfigChannel+0x266>
  __HAL_LOCK(hadc);
 80026f4:	2002      	movs	r0, #2
 80026f6:	e789      	b.n	800260c <HAL_ADC_ConfigChannel+0x26c>
 80026f8:	0007ffff 	.word	0x0007ffff
 80026fc:	407f0000 	.word	0x407f0000
 8002700:	80080000 	.word	0x80080000
 8002704:	50040300 	.word	0x50040300
 8002708:	c7520000 	.word	0xc7520000
 800270c:	50040000 	.word	0x50040000
 8002710:	2000004c 	.word	0x2000004c
 8002714:	00030d40 	.word	0x00030d40
 8002718:	cb840000 	.word	0xcb840000
 800271c:	80000001 	.word	0x80000001
 8002720:	03fff000 	.word	0x03fff000

08002724 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002724:	6803      	ldr	r3, [r0, #0]
{
 8002726:	b570      	push	{r4, r5, r6, lr}
 8002728:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fcdc 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	f002 0208 	and.w	r2, r2, #8
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002736:	4302      	orrs	r2, r0
 8002738:	d101      	bne.n	800273e <ADC_ConversionStop+0x1a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800273a:	2000      	movs	r0, #0
}
 800273c:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	0192      	lsls	r2, r2, #6
 8002742:	d53a      	bpl.n	80027ba <ADC_ConversionStop+0x96>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002744:	8b20      	ldrh	r0, [r4, #24]
 8002746:	f240 1201 	movw	r2, #257	@ 0x101
 800274a:	4290      	cmp	r0, r2
 800274c:	d135      	bne.n	80027ba <ADC_ConversionStop+0x96>
 800274e:	4a27      	ldr	r2, [pc, #156]	@ (80027ec <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002750:	6819      	ldr	r1, [r3, #0]
 8002752:	064e      	lsls	r6, r1, #25
 8002754:	d525      	bpl.n	80027a2 <ADC_ConversionStop+0x7e>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002756:	2240      	movs	r2, #64	@ 0x40
 8002758:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800275a:	2101      	movs	r1, #1
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fcc3 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
 8002762:	b150      	cbz	r0, 800277a <ADC_ConversionStop+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	0795      	lsls	r5, r2, #30
 8002768:	d407      	bmi.n	800277a <ADC_ConversionStop+0x56>
  MODIFY_REG(ADCx->CR,
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002770:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002774:	f042 0210 	orr.w	r2, r2, #16
 8002778:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800277a:	2901      	cmp	r1, #1
 800277c:	d11f      	bne.n	80027be <ADC_ConversionStop+0x9a>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800277e:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8002780:	f7ff f853 	bl	800182a <HAL_GetTick>
 8002784:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	422b      	tst	r3, r5
 800278c:	d0d5      	beq.n	800273a <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800278e:	f7ff f84c 	bl	800182a <HAL_GetTick>
 8002792:	1b80      	subs	r0, r0, r6
 8002794:	2805      	cmp	r0, #5
 8002796:	d9f6      	bls.n	8002786 <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	422b      	tst	r3, r5
 800279e:	d0f2      	beq.n	8002786 <ADC_ConversionStop+0x62>
 80027a0:	e001      	b.n	80027a6 <ADC_ConversionStop+0x82>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80027a2:	3a01      	subs	r2, #1
 80027a4:	d1d4      	bne.n	8002750 <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027a8:	f043 0310 	orr.w	r3, r3, #16
 80027ac:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 80027b6:	2001      	movs	r0, #1
 80027b8:	e7c0      	b.n	800273c <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80027ba:	2902      	cmp	r1, #2
 80027bc:	d1ce      	bne.n	800275c <ADC_ConversionStop+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	0710      	lsls	r0, r2, #28
 80027c2:	d50a      	bpl.n	80027da <ADC_ConversionStop+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	0792      	lsls	r2, r2, #30
 80027c8:	d407      	bmi.n	80027da <ADC_ConversionStop+0xb6>
  MODIFY_REG(ADCx->CR,
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027d0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 80027da:	2902      	cmp	r1, #2
 80027dc:	d003      	beq.n	80027e6 <ADC_ConversionStop+0xc2>
 80027de:	2903      	cmp	r1, #3
 80027e0:	d1cd      	bne.n	800277e <ADC_ConversionStop+0x5a>
 80027e2:	250c      	movs	r5, #12
 80027e4:	e7cc      	b.n	8002780 <ADC_ConversionStop+0x5c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80027e6:	2508      	movs	r5, #8
 80027e8:	e7ca      	b.n	8002780 <ADC_ConversionStop+0x5c>
 80027ea:	bf00      	nop
 80027ec:	a3400001 	.word	0xa3400001

080027f0 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f0:	6802      	ldr	r2, [r0, #0]
{
 80027f2:	b570      	push	{r4, r5, r6, lr}
 80027f4:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f6:	4610      	mov	r0, r2
 80027f8:	f7ff fc72 	bl	80020e0 <LL_ADC_IsEnabled>
 80027fc:	b108      	cbz	r0, 8002802 <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027fe:	2000      	movs	r0, #0
}
 8002800:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002802:	6891      	ldr	r1, [r2, #8]
 8002804:	4b16      	ldr	r3, [pc, #88]	@ (8002860 <ADC_Enable+0x70>)
 8002806:	4219      	tst	r1, r3
 8002808:	d009      	beq.n	800281e <ADC_Enable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800280c:	f043 0310 	orr.w	r3, r3, #16
 8002810:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002812:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e7f0      	b.n	8002800 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 800281e:	6893      	ldr	r3, [r2, #8]
 8002820:	4d10      	ldr	r5, [pc, #64]	@ (8002864 <ADC_Enable+0x74>)
 8002822:	402b      	ands	r3, r5
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800282a:	f7fe fffe 	bl	800182a <HAL_GetTick>
 800282e:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	6813      	ldr	r3, [r2, #0]
 8002834:	07db      	lsls	r3, r3, #31
 8002836:	d4e2      	bmi.n	80027fe <ADC_Enable+0xe>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002838:	4610      	mov	r0, r2
 800283a:	f7ff fc51 	bl	80020e0 <LL_ADC_IsEnabled>
 800283e:	b920      	cbnz	r0, 800284a <ADC_Enable+0x5a>
 8002840:	6893      	ldr	r3, [r2, #8]
 8002842:	402b      	ands	r3, r5
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800284a:	f7fe ffee 	bl	800182a <HAL_GetTick>
 800284e:	1b80      	subs	r0, r0, r6
 8002850:	2802      	cmp	r0, #2
 8002852:	d9ed      	bls.n	8002830 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	07da      	lsls	r2, r3, #31
 800285a:	d4e9      	bmi.n	8002830 <ADC_Enable+0x40>
 800285c:	e7d5      	b.n	800280a <ADC_Enable+0x1a>
 800285e:	bf00      	nop
 8002860:	8000003f 	.word	0x8000003f
 8002864:	7fffffc0 	.word	0x7fffffc0

08002868 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002868:	4b35      	ldr	r3, [pc, #212]	@ (8002940 <HAL_ADC_Start+0xd8>)
{
 800286a:	b570      	push	{r4, r5, r6, lr}
 800286c:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800286e:	6800      	ldr	r0, [r0, #0]
 8002870:	689e      	ldr	r6, [r3, #8]
 8002872:	f7ff fc39 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
 8002876:	4605      	mov	r5, r0
 8002878:	2800      	cmp	r0, #0
 800287a:	d15e      	bne.n	800293a <HAL_ADC_Start+0xd2>
    __HAL_LOCK(hadc);
 800287c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002880:	2b01      	cmp	r3, #1
 8002882:	d05a      	beq.n	800293a <HAL_ADC_Start+0xd2>
 8002884:	2301      	movs	r3, #1
 8002886:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff ffb0 	bl	80027f0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002890:	2800      	cmp	r0, #0
 8002892:	d14f      	bne.n	8002934 <HAL_ADC_Start+0xcc>
      ADC_STATE_CLR_SET(hadc->State,
 8002894:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002896:	4a2b      	ldr	r2, [pc, #172]	@ (8002944 <HAL_ADC_Start+0xdc>)
      ADC_STATE_CLR_SET(hadc->State,
 8002898:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a4:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	4293      	cmp	r3, r2
 80028aa:	f006 011f 	and.w	r1, r6, #31
 80028ae:	d12f      	bne.n	8002910 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028b0:	2900      	cmp	r1, #0
 80028b2:	d12f      	bne.n	8002914 <HAL_ADC_Start+0xac>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b4:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028b8:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 80028ba:	f425 1580 	bic.w	r5, r5, #1048576	@ 0x100000
 80028be:	6565      	str	r5, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c0:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 80028c2:	f415 5580 	ands.w	r5, r5, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028c6:	bf1c      	itt	ne
 80028c8:	6da5      	ldrne	r5, [r4, #88]	@ 0x58
 80028ca:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80028ce:	65a5      	str	r5, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028d0:	251c      	movs	r5, #28
 80028d2:	601d      	str	r5, [r3, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028d4:	4293      	cmp	r3, r2
      __HAL_UNLOCK(hadc);
 80028d6:	f04f 0500 	mov.w	r5, #0
 80028da:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028de:	d005      	beq.n	80028ec <HAL_ADC_Start+0x84>
 80028e0:	f240 2521 	movw	r5, #545	@ 0x221
 80028e4:	fa25 f101 	lsr.w	r1, r5, r1
 80028e8:	07c9      	lsls	r1, r1, #31
 80028ea:	d515      	bpl.n	8002918 <HAL_ADC_Start+0xb0>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028f0:	bf41      	itttt	mi
 80028f2:	6d62      	ldrmi	r2, [r4, #84]	@ 0x54
 80028f4:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 80028f8:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80028fc:	6562      	strmi	r2, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002904:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002908:	f042 0204 	orr.w	r2, r2, #4
 800290c:	609a      	str	r2, [r3, #8]
}
 800290e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002910:	461a      	mov	r2, r3
 8002912:	e7d1      	b.n	80028b8 <HAL_ADC_Start+0x50>
 8002914:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <HAL_ADC_Start+0xe0>)
 8002916:	e7d3      	b.n	80028c0 <HAL_ADC_Start+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002918:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800291a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800291e:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002920:	68d3      	ldr	r3, [r2, #12]
 8002922:	019b      	lsls	r3, r3, #6
 8002924:	d5f3      	bpl.n	800290e <HAL_ADC_Start+0xa6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002926:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002928:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800292c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002930:	6563      	str	r3, [r4, #84]	@ 0x54
 8002932:	e7ec      	b.n	800290e <HAL_ADC_Start+0xa6>
      __HAL_UNLOCK(hadc);
 8002934:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8002938:	e7e9      	b.n	800290e <HAL_ADC_Start+0xa6>
    __HAL_LOCK(hadc);
 800293a:	2002      	movs	r0, #2
 800293c:	e7e7      	b.n	800290e <HAL_ADC_Start+0xa6>
 800293e:	bf00      	nop
 8002940:	50040300 	.word	0x50040300
 8002944:	50040100 	.word	0x50040100
 8002948:	50040000 	.word	0x50040000

0800294c <ADC_Disable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800294c:	6802      	ldr	r2, [r0, #0]
{
 800294e:	b538      	push	{r3, r4, r5, lr}
 8002950:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002952:	4610      	mov	r0, r2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002954:	6893      	ldr	r3, [r2, #8]
 8002956:	f7ff fbc3 	bl	80020e0 <LL_ADC_IsEnabled>
 800295a:	b908      	cbnz	r0, 8002960 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800295c:	2000      	movs	r0, #0
}
 800295e:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8002960:	0799      	lsls	r1, r3, #30
 8002962:	d4fb      	bmi.n	800295c <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002964:	6893      	ldr	r3, [r2, #8]
 8002966:	f003 030d 	and.w	r3, r3, #13
 800296a:	2b01      	cmp	r3, #1
 800296c:	d119      	bne.n	80029a2 <ADC_Disable+0x56>
  MODIFY_REG(ADCx->CR,
 800296e:	6893      	ldr	r3, [r2, #8]
 8002970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800297e:	2303      	movs	r3, #3
 8002980:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002982:	f7fe ff52 	bl	800182a <HAL_GetTick>
 8002986:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	07db      	lsls	r3, r3, #31
 800298e:	d5e5      	bpl.n	800295c <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002990:	f7fe ff4b 	bl	800182a <HAL_GetTick>
 8002994:	1b40      	subs	r0, r0, r5
 8002996:	2802      	cmp	r0, #2
 8002998:	d9f6      	bls.n	8002988 <ADC_Disable+0x3c>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	07da      	lsls	r2, r3, #31
 80029a0:	d5f2      	bpl.n	8002988 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80029b2:	2001      	movs	r0, #1
 80029b4:	e7d3      	b.n	800295e <ADC_Disable+0x12>
	...

080029b8 <HAL_ADC_DeInit>:
{
 80029b8:	b538      	push	{r3, r4, r5, lr}
  if (hadc == NULL)
 80029ba:	4604      	mov	r4, r0
 80029bc:	2800      	cmp	r0, #0
 80029be:	f000 809c 	beq.w	8002afa <HAL_ADC_DeInit+0x142>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80029c2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6543      	str	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80029ca:	2103      	movs	r1, #3
 80029cc:	f7ff feaa 	bl	8002724 <ADC_ConversionStop>
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	68d3      	ldr	r3, [r2, #12]
 80029d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029d8:	60d3      	str	r3, [r2, #12]
  if (tmp_hal_status == HAL_OK)
 80029da:	4605      	mov	r5, r0
 80029dc:	b930      	cbnz	r0, 80029ec <HAL_ADC_DeInit+0x34>
    tmp_hal_status = ADC_Disable(hadc);
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff ffb4 	bl	800294c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80029e4:	4605      	mov	r5, r0
 80029e6:	b908      	cbnz	r0, 80029ec <HAL_ADC_DeInit+0x34>
      hadc->State = HAL_ADC_STATE_READY;
 80029e8:	2301      	movs	r3, #1
 80029ea:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	4944      	ldr	r1, [pc, #272]	@ (8002b00 <HAL_ADC_DeInit+0x148>)
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	400a      	ands	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80029f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80029fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8002a02:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002a0a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8002a0c:	68d8      	ldr	r0, [r3, #12]
 8002a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b04 <HAL_ADC_DeInit+0x14c>)
 8002a10:	4002      	ands	r2, r0
 8002a12:	60da      	str	r2, [r3, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002a14:	68da      	ldr	r2, [r3, #12]
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a16:	483c      	ldr	r0, [pc, #240]	@ (8002b08 <HAL_ADC_DeInit+0x150>)
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002a18:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a1c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	400a      	ands	r2, r1
 8002a22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002a2a:	615a      	str	r2, [r3, #20]
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 8002a32:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8002a3a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8002a3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a3e:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8002a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a46:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 8002a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8002a4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b0c <HAL_ADC_DeInit+0x154>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8002a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a56:	492e      	ldr	r1, [pc, #184]	@ (8002b10 <HAL_ADC_DeInit+0x158>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	635a      	str	r2, [r3, #52]	@ 0x34
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8002a5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a5e:	400a      	ands	r2, r1
 8002a60:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8002a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a64:	f422 62fb 	bic.w	r2, r2, #2008	@ 0x7d8
 8002a68:	f022 0207 	bic.w	r2, r2, #7
 8002a6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8002a6e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8002a70:	4a28      	ldr	r2, [pc, #160]	@ (8002b14 <HAL_ADC_DeInit+0x15c>)
 8002a72:	4011      	ands	r1, r2
 8002a74:	6619      	str	r1, [r3, #96]	@ 0x60
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8002a76:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8002a78:	4011      	ands	r1, r2
 8002a7a:	6659      	str	r1, [r3, #100]	@ 0x64
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8002a7c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002a7e:	4011      	ands	r1, r2
 8002a80:	6699      	str	r1, [r3, #104]	@ 0x68
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8002a82:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8002a84:	400a      	ands	r2, r1
 8002a86:	66da      	str	r2, [r3, #108]	@ 0x6c
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8002a88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002a8c:	4922      	ldr	r1, [pc, #136]	@ (8002b18 <HAL_ADC_DeInit+0x160>)
 8002a8e:	400a      	ands	r2, r1
 8002a90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8002a94:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002a98:	400a      	ands	r2, r1
 8002a9a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8002a9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8002aa8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8002aac:	f022 127f 	bic.w	r2, r2, #8323199	@ 0x7f007f
 8002ab0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab4:	f7ff fb14 	bl	80020e0 <LL_ADC_IsEnabled>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4818      	ldr	r0, [pc, #96]	@ (8002b1c <HAL_ADC_DeInit+0x164>)
 8002abc:	f7ff fb10 	bl	80020e0 <LL_ADC_IsEnabled>
 8002ac0:	4303      	orrs	r3, r0
 8002ac2:	4817      	ldr	r0, [pc, #92]	@ (8002b20 <HAL_ADC_DeInit+0x168>)
 8002ac4:	f7ff fb0c 	bl	80020e0 <LL_ADC_IsEnabled>
 8002ac8:	4303      	orrs	r3, r0
 8002aca:	d10d      	bne.n	8002ae8 <HAL_ADC_DeInit+0x130>
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8002acc:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <HAL_ADC_DeInit+0x16c>)
 8002ace:	6893      	ldr	r3, [r2, #8]
 8002ad0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002ad4:	f423 33f7 	bic.w	r3, r3, #126464	@ 0x1ee00
 8002ad8:	f423 738f 	bic.w	r3, r3, #286	@ 0x11e
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	6093      	str	r3, [r2, #8]
    HAL_ADC_MspDeInit(hadc);
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7fe f9c8 	bl	8000e78 <HAL_ADC_MspDeInit>
  ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	2300      	movs	r3, #0
  hadc->InjectionConfig.ChannelCount = 0;
 8002aea:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(hadc);
 8002aee:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8002af0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hadc->State = HAL_ADC_STATE_RESET;
 8002af4:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8002af6:	4628      	mov	r0, r5
 8002af8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002afa:	2501      	movs	r5, #1
 8002afc:	e7fb      	b.n	8002af6 <HAL_ADC_DeInit+0x13e>
 8002afe:	bf00      	nop
 8002b00:	fffff800 	.word	0xfffff800
 8002b04:	80008004 	.word	0x80008004
 8002b08:	50040000 	.word	0x50040000
 8002b0c:	e0820830 	.word	0xe0820830
 8002b10:	e0820820 	.word	0xe0820820
 8002b14:	03fff000 	.word	0x03fff000
 8002b18:	fff80000 	.word	0xfff80000
 8002b1c:	50040100 	.word	0x50040100
 8002b20:	50040200 	.word	0x50040200
 8002b24:	50040300 	.word	0x50040300

08002b28 <HAL_ADC_Stop>:
{
 8002b28:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002b2a:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8002b2e:	2b01      	cmp	r3, #1
{
 8002b30:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002b32:	d016      	beq.n	8002b62 <HAL_ADC_Stop+0x3a>
 8002b34:	2301      	movs	r3, #1
 8002b36:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	f7ff fdf2 	bl	8002724 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002b40:	b958      	cbnz	r0, 8002b5a <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8002b42:	4620      	mov	r0, r4
 8002b44:	f7ff ff02 	bl	800294c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002b48:	b938      	cbnz	r0, 8002b5a <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8002b4a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8002b60:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002b62:	2002      	movs	r0, #2
 8002b64:	e7fc      	b.n	8002b60 <HAL_ADC_Stop+0x38>

08002b66 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002b66:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8002b70:	2b01      	cmp	r3, #1
{
 8002b72:	4604      	mov	r4, r0
 8002b74:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8002b76:	d03c      	beq.n	8002bf2 <HAL_ADCEx_Calibration_Start+0x8c>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b7e:	f7ff fee5 	bl	800294c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b82:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  if (tmp_hal_status == HAL_OK)
 8002b84:	bb90      	cbnz	r0, 8002bec <HAL_ADCEx_Calibration_Start+0x86>
    ADC_STATE_CLR_SET(hadc->State,
 8002b86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b8a:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b8e:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8002b96:	6893      	ldr	r3, [r2, #8]
 8002b98:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ba0:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 8002ba4:	432b      	orrs	r3, r5
 8002ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002baa:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002bac:	6893      	ldr	r3, [r2, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	da12      	bge.n	8002bd8 <HAL_ADCEx_Calibration_Start+0x72>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 8002bb2:	9b01      	ldr	r3, [sp, #4]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002bb8:	9b01      	ldr	r3, [sp, #4]
 8002bba:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002bbe:	d3f5      	bcc.n	8002bac <HAL_ADCEx_Calibration_Start+0x46>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002bc0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002bc2:	f023 0312 	bic.w	r3, r3, #18
 8002bc6:	f043 0310 	orr.w	r3, r3, #16
 8002bca:	6563      	str	r3, [r4, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

        return HAL_ERROR;
 8002bd2:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002bd4:	b003      	add	sp, #12
 8002bd6:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002bd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be2:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8002be4:	2300      	movs	r3, #0
 8002be6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return tmp_hal_status;
 8002bea:	e7f3      	b.n	8002bd4 <HAL_ADCEx_Calibration_Start+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bec:	f043 0310 	orr.w	r3, r3, #16
 8002bf0:	e7f7      	b.n	8002be2 <HAL_ADCEx_Calibration_Start+0x7c>
  __HAL_LOCK(hadc);
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	e7ee      	b.n	8002bd4 <HAL_ADCEx_Calibration_Start+0x6e>
	...

08002bf8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4907      	ldr	r1, [pc, #28]	@ (8002c18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002bfa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c00:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c02:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c08:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002c14:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c1c:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c1e:	b530      	push	{r4, r5, lr}
 8002c20:	68dc      	ldr	r4, [r3, #12]
 8002c22:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c26:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	bf28      	it	cs
 8002c30:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c32:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c38:	bf8c      	ite	hi
 8002c3a:	3c03      	subhi	r4, #3
 8002c3c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3e:	fa05 f303 	lsl.w	r3, r5, r3
 8002c42:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c46:	40a5      	lsls	r5, r4
 8002c48:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002c4e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c54:	bfac      	ite	ge
 8002c56:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	4a08      	ldrlt	r2, [pc, #32]	@ (8002c7c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c60:	bfb8      	it	lt
 8002c62:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	bfaa      	itet	ge
 8002c6a:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c74:	bd30      	pop	{r4, r5, pc}
 8002c76:	bf00      	nop
 8002c78:	e000ed00 	.word	0xe000ed00
 8002c7c:	e000ed14 	.word	0xe000ed14

08002c80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c80:	2800      	cmp	r0, #0
 8002c82:	db07      	blt.n	8002c94 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c84:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_NVIC_EnableIRQ+0x18>)
 8002c86:	0941      	lsrs	r1, r0, #5
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f000 001f 	and.w	r0, r0, #31
 8002c8e:	4083      	lsls	r3, r0
 8002c90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	db0c      	blt.n	8002cba <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca0:	0943      	lsrs	r3, r0, #5
 8002ca2:	4906      	ldr	r1, [pc, #24]	@ (8002cbc <HAL_NVIC_DisableIRQ+0x20>)
 8002ca4:	f000 001f 	and.w	r0, r0, #31
 8002ca8:	3320      	adds	r3, #32
 8002caa:	2201      	movs	r2, #1
 8002cac:	4082      	lsls	r2, r0
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cb6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002cba:	4770      	bx	lr
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d056      	beq.n	8002d76 <HAL_DMA_Init+0xb6>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cc8:	6805      	ldr	r5, [r0, #0]
 8002cca:	4a2c      	ldr	r2, [pc, #176]	@ (8002d7c <HAL_DMA_Init+0xbc>)
 8002ccc:	4295      	cmp	r5, r2
 8002cce:	f04f 0114 	mov.w	r1, #20
 8002cd2:	d83e      	bhi.n	8002d52 <HAL_DMA_Init+0x92>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002d80 <HAL_DMA_Init+0xc0>)
 8002cd6:	482b      	ldr	r0, [pc, #172]	@ (8002d84 <HAL_DMA_Init+0xc4>)
 8002cd8:	442a      	add	r2, r5
 8002cda:	fbb2 f2f1 	udiv	r2, r2, r1
 8002cde:	0092      	lsls	r2, r2, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ce6:	e9d3 6102 	ldrd	r6, r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cea:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 8002cec:	682c      	ldr	r4, [r5, #0]
  tmp |=  hdma->Init.Direction        |
 8002cee:	4331      	orrs	r1, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf0:	4339      	orrs	r1, r7
 8002cf2:	695f      	ldr	r7, [r3, #20]
 8002cf4:	4339      	orrs	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf6:	699f      	ldr	r7, [r3, #24]
 8002cf8:	4339      	orrs	r1, r7
 8002cfa:	69df      	ldr	r7, [r3, #28]
 8002cfc:	4339      	orrs	r1, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfe:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d00:	f424 44ff 	bic.w	r4, r4, #32640	@ 0x7f80
 8002d04:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d08:	4339      	orrs	r1, r7
  tmp |=  hdma->Init.Direction        |
 8002d0a:	4321      	orrs	r1, r4
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d0c:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
    hdma->DmaBaseAddress = DMA1;
 8002d10:	e9c3 0210 	strd	r0, r2, [r3, #64]	@ 0x40
  hdma->Instance->CCR = tmp;
 8002d14:	6029      	str	r1, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d16:	d014      	beq.n	8002d42 <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d18:	685c      	ldr	r4, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d1a:	f002 021c 	and.w	r2, r2, #28
 8002d1e:	210f      	movs	r1, #15
 8002d20:	4091      	lsls	r1, r2
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d22:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8002d24:	4a17      	ldr	r2, [pc, #92]	@ (8002d84 <HAL_DMA_Init+0xc4>)
 8002d26:	4290      	cmp	r0, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d28:	ea6f 0101 	mvn.w	r1, r1
    if (DMA1 == hdma->DmaBaseAddress)
 8002d2c:	d118      	bne.n	8002d60 <HAL_DMA_Init+0xa0>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d2e:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 8002d32:	400a      	ands	r2, r1
 8002d34:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d38:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 8002d3c:	4322      	orrs	r2, r4
 8002d3e:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d42:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d44:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d46:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d48:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 8002d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d52:	4a0d      	ldr	r2, [pc, #52]	@ (8002d88 <HAL_DMA_Init+0xc8>)
 8002d54:	480d      	ldr	r0, [pc, #52]	@ (8002d8c <HAL_DMA_Init+0xcc>)
 8002d56:	442a      	add	r2, r5
 8002d58:	fbb2 f2f1 	udiv	r2, r2, r1
 8002d5c:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 8002d5e:	e7bf      	b.n	8002ce0 <HAL_DMA_Init+0x20>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d60:	f8d2 04a8 	ldr.w	r0, [r2, #1192]	@ 0x4a8
 8002d64:	4001      	ands	r1, r0
 8002d66:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d6a:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	@ 0x4a8
 8002d6e:	4321      	orrs	r1, r4
 8002d70:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
 8002d74:	e7e5      	b.n	8002d42 <HAL_DMA_Init+0x82>
    return HAL_ERROR;
 8002d76:	2001      	movs	r0, #1
 8002d78:	e7ea      	b.n	8002d50 <HAL_DMA_Init+0x90>
 8002d7a:	bf00      	nop
 8002d7c:	40020407 	.word	0x40020407
 8002d80:	bffdfff8 	.word	0xbffdfff8
 8002d84:	40020000 	.word	0x40020000
 8002d88:	bffdfbf8 	.word	0xbffdfbf8
 8002d8c:	40020400 	.word	0x40020400

08002d90 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002d90:	b510      	push	{r4, lr}

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d03d      	beq.n	8002e12 <HAL_DMA_DeInit+0x82>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002d96:	6801      	ldr	r1, [r0, #0]
 8002d98:	680b      	ldr	r3, [r1, #0]
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	600b      	str	r3, [r1, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002da0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <HAL_DMA_DeInit+0x88>)
 8002da2:	4299      	cmp	r1, r3
 8002da4:	f04f 0214 	mov.w	r2, #20
 8002da8:	d82c      	bhi.n	8002e04 <HAL_DMA_DeInit+0x74>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002daa:	4b1c      	ldr	r3, [pc, #112]	@ (8002e1c <HAL_DMA_DeInit+0x8c>)
 8002dac:	4c1c      	ldr	r4, [pc, #112]	@ (8002e20 <HAL_DMA_DeInit+0x90>)
 8002dae:	440b      	add	r3, r1
 8002db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002db6:	2200      	movs	r2, #0
    hdma->DmaBaseAddress = DMA1;
 8002db8:	e9c0 4310 	strd	r4, r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8002dbc:	600a      	str	r2, [r1, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dbe:	f003 031c 	and.w	r3, r3, #28
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4099      	lsls	r1, r3
 8002dc6:	6061      	str	r1, [r4, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dc8:	210f      	movs	r1, #15
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
  if (DMA1 == hdma->DmaBaseAddress)
 8002dce:	4914      	ldr	r1, [pc, #80]	@ (8002e20 <HAL_DMA_DeInit+0x90>)
 8002dd0:	428c      	cmp	r4, r1
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dd2:	bf0c      	ite	eq
 8002dd4:	f8d4 10a8 	ldreq.w	r1, [r4, #168]	@ 0xa8
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dd8:	f8d1 44a8 	ldrne.w	r4, [r1, #1192]	@ 0x4a8
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ddc:	ea6f 0303 	mvn.w	r3, r3
 8002de0:	bf0b      	itete	eq
 8002de2:	400b      	andeq	r3, r1
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002de4:	4023      	andne	r3, r4
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002de6:	f8c4 30a8 	streq.w	r3, [r4, #168]	@ 0xa8
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dea:	f8c1 34a8 	strne.w	r3, [r1, #1192]	@ 0x4a8
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dee:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002df0:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
  hdma->XferAbortCallback = NULL;
 8002df4:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002df8:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002dfc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24

  return HAL_OK;
 8002e00:	2000      	movs	r0, #0
}
 8002e02:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e04:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <HAL_DMA_DeInit+0x94>)
 8002e06:	4c08      	ldr	r4, [pc, #32]	@ (8002e28 <HAL_DMA_DeInit+0x98>)
 8002e08:	440b      	add	r3, r1
 8002e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8002e10:	e7d1      	b.n	8002db6 <HAL_DMA_DeInit+0x26>
    return HAL_ERROR;
 8002e12:	2001      	movs	r0, #1
 8002e14:	e7f5      	b.n	8002e02 <HAL_DMA_DeInit+0x72>
 8002e16:	bf00      	nop
 8002e18:	40020407 	.word	0x40020407
 8002e1c:	bffdfff8 	.word	0xbffdfff8
 8002e20:	40020000 	.word	0x40020000
 8002e24:	bffdfbf8 	.word	0xbffdfbf8
 8002e28:	40020400 	.word	0x40020400

08002e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e2c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e2e:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8002e32:	2c01      	cmp	r4, #1
 8002e34:	d036      	beq.n	8002ea4 <HAL_DMA_Start_IT+0x78>
 8002e36:	2401      	movs	r4, #1
 8002e38:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e3c:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8002e40:	2c01      	cmp	r4, #1
 8002e42:	b2e5      	uxtb	r5, r4
 8002e44:	f04f 0400 	mov.w	r4, #0
 8002e48:	d12a      	bne.n	8002ea0 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e4a:	2602      	movs	r6, #2
 8002e4c:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e50:	63c4      	str	r4, [r0, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e52:	6804      	ldr	r4, [r0, #0]
 8002e54:	6826      	ldr	r6, [r4, #0]
 8002e56:	f026 0601 	bic.w	r6, r6, #1
 8002e5a:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e5c:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	@ 0x40
 8002e60:	f007 071c 	and.w	r7, r7, #28
 8002e64:	40bd      	lsls	r5, r7
 8002e66:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e68:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e6a:	6883      	ldr	r3, [r0, #8]
 8002e6c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8002e6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e70:	bf0b      	itete	eq
 8002e72:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002e74:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002e76:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002e78:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002e7a:	b14b      	cbz	r3, 8002e90 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e82:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2000      	movs	r0, #0
}
 8002e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	f023 0304 	bic.w	r3, r3, #4
 8002e96:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	f043 030a 	orr.w	r3, r3, #10
 8002e9e:	e7f0      	b.n	8002e82 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma);
 8002ea0:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8002ea4:	2002      	movs	r0, #2
 8002ea6:	e7f2      	b.n	8002e8e <HAL_DMA_Start_IT+0x62>

08002ea8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea8:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002eac:	2a02      	cmp	r2, #2
{
 8002eae:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb0:	d006      	beq.n	8002ec0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8002eb6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002ebe:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec0:	6802      	ldr	r2, [r0, #0]
 8002ec2:	6811      	ldr	r1, [r2, #0]
 8002ec4:	f021 010e 	bic.w	r1, r1, #14
 8002ec8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002eca:	6811      	ldr	r1, [r2, #0]
 8002ecc:	f021 0101 	bic.w	r1, r1, #1
 8002ed0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ed2:	e9d0 0210 	ldrd	r0, r2, [r0, #64]	@ 0x40
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	f002 021c 	and.w	r2, r2, #28
 8002edc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee0:	6042      	str	r2, [r0, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
    return status;
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	e7e6      	b.n	8002eb8 <HAL_DMA_Abort+0x10>

08002eea <HAL_DMA_Abort_IT>:
{
 8002eea:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002eec:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002ef0:	2a02      	cmp	r2, #2
 8002ef2:	d003      	beq.n	8002efc <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8002ef8:	2001      	movs	r0, #1
}
 8002efa:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002efc:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8002efe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f00:	6811      	ldr	r1, [r2, #0]
 8002f02:	f021 010e 	bic.w	r1, r1, #14
 8002f06:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f08:	6811      	ldr	r1, [r2, #0]
 8002f0a:	f021 0101 	bic.w	r1, r1, #1
 8002f0e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f10:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	@ 0x40
 8002f14:	2101      	movs	r1, #1
 8002f16:	f002 021c 	and.w	r2, r2, #28
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002f20:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002f22:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002f26:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if(hdma->XferAbortCallback != NULL)
 8002f2a:	b103      	cbz	r3, 8002f2e <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8002f2c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2000      	movs	r0, #0
 8002f30:	e7e3      	b.n	8002efa <HAL_DMA_Abort_IT+0x10>

08002f32 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f32:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f34:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8002f36:	6803      	ldr	r3, [r0, #0]
{
 8002f38:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f3a:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f3e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002f40:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f42:	2404      	movs	r4, #4
 8002f44:	4094      	lsls	r4, r2
 8002f46:	4234      	tst	r4, r6
 8002f48:	d00e      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x36>
 8002f4a:	f015 0f04 	tst.w	r5, #4
 8002f4e:	d00b      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f54:	bf5e      	ittt	pl
 8002f56:	681a      	ldrpl	r2, [r3, #0]
 8002f58:	f022 0204 	bicpl.w	r2, r2, #4
 8002f5c:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002f5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f60:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8002f62:	b373      	cbz	r3, 8002fc2 <HAL_DMA_IRQHandler+0x90>
}
 8002f64:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002f66:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f68:	2402      	movs	r4, #2
 8002f6a:	4094      	lsls	r4, r2
 8002f6c:	4234      	tst	r4, r6
 8002f6e:	d012      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x64>
 8002f70:	f015 0f02 	tst.w	r5, #2
 8002f74:	d00f      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	0695      	lsls	r5, r2, #26
 8002f7a:	d406      	bmi.n	8002f8a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	f022 020a 	bic.w	r2, r2, #10
 8002f82:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002f8a:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f8c:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002f8e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if(hdma->XferCpltCallback != NULL)
 8002f92:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002f94:	e7e5      	b.n	8002f62 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f96:	2408      	movs	r4, #8
 8002f98:	4094      	lsls	r4, r2
 8002f9a:	4234      	tst	r4, r6
 8002f9c:	d011      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x90>
 8002f9e:	072c      	lsls	r4, r5, #28
 8002fa0:	d50f      	bpl.n	8002fc2 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa2:	681c      	ldr	r4, [r3, #0]
 8002fa4:	f024 040e 	bic.w	r4, r4, #14
 8002fa8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002faa:	2301      	movs	r3, #1
 8002fac:	fa03 f202 	lsl.w	r2, r3, r2
 8002fb0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fb2:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8002fbe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002fc0:	e7cf      	b.n	8002f62 <HAL_DMA_IRQHandler+0x30>
}
 8002fc2:	bc70      	pop	{r4, r5, r6}
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002fc6:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002fc8:	4608      	mov	r0, r1
 8002fca:	b909      	cbnz	r1, 8002fd0 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002fcc:	605a      	str	r2, [r3, #4]
      break;
 8002fce:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8002fd0:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002fd4:	b110      	cbz	r0, 8002fdc <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002fd6:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8002fd8:	2000      	movs	r0, #0
 8002fda:	4770      	bx	lr
    return HAL_ERROR;
 8002fdc:	2001      	movs	r0, #1
  }
}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002fe0:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002fe8:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002fec:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002fee:	015b      	lsls	r3, r3, #5
 8002ff0:	4906      	ldr	r1, [pc, #24]	@ (800300c <HAL_EXTI_IRQHandler+0x2c>)
{
 8002ff2:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 8002ff4:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8002ff6:	4214      	tst	r4, r2
 8002ff8:	d005      	beq.n	8003006 <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002ffa:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002ffc:	6843      	ldr	r3, [r0, #4]
 8002ffe:	b113      	cbz	r3, 8003006 <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 8003000:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8003004:	4718      	bx	r3
}
 8003006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40010414 	.word	0x40010414

08003010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003014:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 80031bc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003018:	4d66      	ldr	r5, [pc, #408]	@ (80031b4 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 800301a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800301c:	680a      	ldr	r2, [r1, #0]
 800301e:	fa32 f403 	lsrs.w	r4, r2, r3
 8003022:	d102      	bne.n	800302a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003024:	b003      	add	sp, #12
 8003026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800302a:	2401      	movs	r4, #1
 800302c:	fa04 fb03 	lsl.w	fp, r4, r3
    if (iocurrent != 0x00u)
 8003030:	ea1b 0202 	ands.w	r2, fp, r2
 8003034:	f000 80b0 	beq.w	8003198 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003038:	684c      	ldr	r4, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800303a:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800303c:	f024 0810 	bic.w	r8, r4, #16
 8003040:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003044:	fa06 fc0e 	lsl.w	ip, r6, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003048:	f108 36ff 	add.w	r6, r8, #4294967295
 800304c:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800304e:	ea6f 0c0c 	mvn.w	ip, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003052:	d80e      	bhi.n	8003072 <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR;
 8003054:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003056:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003058:	ea06 060c 	and.w	r6, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800305c:	fa07 f70e 	lsl.w	r7, r7, lr
 8003060:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8003062:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003064:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003066:	0926      	lsrs	r6, r4, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003068:	ea27 070b 	bic.w	r7, r7, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800306c:	409e      	lsls	r6, r3
 800306e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8003070:	6046      	str	r6, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003072:	f004 0603 	and.w	r6, r4, #3
 8003076:	2e03      	cmp	r6, #3
 8003078:	d108      	bne.n	800308c <HAL_GPIO_Init+0x7c>
        temp = GPIOx->ASCR;
 800307a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800307c:	ea27 0a0b 	bic.w	sl, r7, fp
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003080:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8003084:	409f      	lsls	r7, r3
 8003086:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 800308a:	62c7      	str	r7, [r0, #44]	@ 0x2c
      temp = GPIOx->PUPDR;
 800308c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800308e:	ea07 0a0c 	and.w	sl, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003092:	688f      	ldr	r7, [r1, #8]
 8003094:	fa07 f70e 	lsl.w	r7, r7, lr
 8003098:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800309c:	f1b8 0f02 	cmp.w	r8, #2
      GPIOx->PUPDR = temp;
 80030a0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a2:	d116      	bne.n	80030d2 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->AFR[position >> 3u];
 80030a4:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80030a8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030ac:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80030b0:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030b4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80030b8:	f04f 0b0f 	mov.w	fp, #15
 80030bc:	fa0b fb0a 	lsl.w	fp, fp, sl
 80030c0:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030c4:	690f      	ldr	r7, [r1, #16]
 80030c6:	fa07 f70a 	lsl.w	r7, r7, sl
 80030ca:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 80030ce:	f8c8 7020 	str.w	r7, [r8, #32]
      temp = GPIOx->MODER;
 80030d2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030d4:	fa06 f60e 	lsl.w	r6, r6, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030d8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030dc:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80030de:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e0:	00e6      	lsls	r6, r4, #3
 80030e2:	d559      	bpl.n	8003198 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e4:	f8d9 6060 	ldr.w	r6, [r9, #96]	@ 0x60
 80030e8:	f046 0601 	orr.w	r6, r6, #1
 80030ec:	f8c9 6060 	str.w	r6, [r9, #96]	@ 0x60
 80030f0:	f8d9 6060 	ldr.w	r6, [r9, #96]	@ 0x60
 80030f4:	f023 0703 	bic.w	r7, r3, #3
 80030f8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80030fc:	f006 0601 	and.w	r6, r6, #1
 8003100:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8003104:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003106:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800310c:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800310e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003112:	f04f 0e0f 	mov.w	lr, #15
 8003116:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800311a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800311e:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003122:	d03b      	beq.n	800319c <HAL_GPIO_Init+0x18c>
 8003124:	4e24      	ldr	r6, [pc, #144]	@ (80031b8 <HAL_GPIO_Init+0x1a8>)
 8003126:	42b0      	cmp	r0, r6
 8003128:	d03a      	beq.n	80031a0 <HAL_GPIO_Init+0x190>
 800312a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800312e:	42b0      	cmp	r0, r6
 8003130:	d038      	beq.n	80031a4 <HAL_GPIO_Init+0x194>
 8003132:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003136:	42b0      	cmp	r0, r6
 8003138:	d036      	beq.n	80031a8 <HAL_GPIO_Init+0x198>
 800313a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800313e:	42b0      	cmp	r0, r6
 8003140:	d034      	beq.n	80031ac <HAL_GPIO_Init+0x19c>
 8003142:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003146:	42b0      	cmp	r0, r6
 8003148:	d032      	beq.n	80031b0 <HAL_GPIO_Init+0x1a0>
 800314a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800314e:	42b0      	cmp	r0, r6
 8003150:	bf14      	ite	ne
 8003152:	2607      	movne	r6, #7
 8003154:	2606      	moveq	r6, #6
 8003156:	fa06 f60c 	lsl.w	r6, r6, ip
 800315a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800315e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8003160:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8003162:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003164:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
        temp &= ~(iocurrent);
 8003168:	bf0c      	ite	eq
 800316a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800316c:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 800316e:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8003170:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003172:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8003176:	bf0c      	ite	eq
 8003178:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800317a:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800317c:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 800317e:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003180:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8003184:	bf0c      	ite	eq
 8003186:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003188:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 800318a:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 800318c:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800318e:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8003190:	bf54      	ite	pl
 8003192:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8003194:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8003196:	60ee      	str	r6, [r5, #12]
    position++;
 8003198:	3301      	adds	r3, #1
 800319a:	e73f      	b.n	800301c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800319c:	2600      	movs	r6, #0
 800319e:	e7da      	b.n	8003156 <HAL_GPIO_Init+0x146>
 80031a0:	2601      	movs	r6, #1
 80031a2:	e7d8      	b.n	8003156 <HAL_GPIO_Init+0x146>
 80031a4:	2602      	movs	r6, #2
 80031a6:	e7d6      	b.n	8003156 <HAL_GPIO_Init+0x146>
 80031a8:	2603      	movs	r6, #3
 80031aa:	e7d4      	b.n	8003156 <HAL_GPIO_Init+0x146>
 80031ac:	2604      	movs	r6, #4
 80031ae:	e7d2      	b.n	8003156 <HAL_GPIO_Init+0x146>
 80031b0:	2605      	movs	r6, #5
 80031b2:	e7d0      	b.n	8003156 <HAL_GPIO_Init+0x146>
 80031b4:	40010400 	.word	0x40010400
 80031b8:	48000400 	.word	0x48000400
 80031bc:	40021000 	.word	0x40021000

080031c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80031c4:	4c42      	ldr	r4, [pc, #264]	@ (80032d0 <HAL_GPIO_DeInit+0x110>)
  uint32_t position = 0x00u;
 80031c6:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80031c8:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80031cc:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80031d0:	f04f 0b03 	mov.w	fp, #3
  while ((GPIO_Pin >> position) != 0x00u)
 80031d4:	fa31 f302 	lsrs.w	r3, r1, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 80031da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80031de:	fa0a f602 	lsl.w	r6, sl, r2
    if (iocurrent != 0x00u)
 80031e2:	ea16 0701 	ands.w	r7, r6, r1
 80031e6:	d065      	beq.n	80032b4 <HAL_GPIO_DeInit+0xf4>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80031e8:	f022 0503 	bic.w	r5, r2, #3
 80031ec:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 80031f0:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80031f4:	f002 0c03 	and.w	ip, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 80031f8:	68ab      	ldr	r3, [r5, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80031fa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80031fe:	fa08 f90c 	lsl.w	r9, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003202:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003206:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800320a:	d055      	beq.n	80032b8 <HAL_GPIO_DeInit+0xf8>
 800320c:	4b31      	ldr	r3, [pc, #196]	@ (80032d4 <HAL_GPIO_DeInit+0x114>)
 800320e:	4298      	cmp	r0, r3
 8003210:	d054      	beq.n	80032bc <HAL_GPIO_DeInit+0xfc>
 8003212:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003216:	4298      	cmp	r0, r3
 8003218:	d052      	beq.n	80032c0 <HAL_GPIO_DeInit+0x100>
 800321a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800321e:	4298      	cmp	r0, r3
 8003220:	d050      	beq.n	80032c4 <HAL_GPIO_DeInit+0x104>
 8003222:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003226:	4298      	cmp	r0, r3
 8003228:	d04e      	beq.n	80032c8 <HAL_GPIO_DeInit+0x108>
 800322a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800322e:	4298      	cmp	r0, r3
 8003230:	d04c      	beq.n	80032cc <HAL_GPIO_DeInit+0x10c>
 8003232:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003236:	4298      	cmp	r0, r3
 8003238:	bf0c      	ite	eq
 800323a:	2306      	moveq	r3, #6
 800323c:	2307      	movne	r3, #7
 800323e:	fa03 f30c 	lsl.w	r3, r3, ip
 8003242:	4573      	cmp	r3, lr
 8003244:	d113      	bne.n	800326e <HAL_GPIO_DeInit+0xae>
        EXTI->IMR1 &= ~(iocurrent);
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	ea23 0307 	bic.w	r3, r3, r7
 800324c:	6023      	str	r3, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800324e:	6863      	ldr	r3, [r4, #4]
 8003250:	ea23 0307 	bic.w	r3, r3, r7
 8003254:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003256:	68a3      	ldr	r3, [r4, #8]
 8003258:	ea23 0307 	bic.w	r3, r3, r7
 800325c:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800325e:	68e3      	ldr	r3, [r4, #12]
 8003260:	ea23 0307 	bic.w	r3, r3, r7
 8003264:	60e3      	str	r3, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003266:	68ab      	ldr	r3, [r5, #8]
 8003268:	ea23 0309 	bic.w	r3, r3, r9
 800326c:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800326e:	6805      	ldr	r5, [r0, #0]
 8003270:	0053      	lsls	r3, r2, #1
 8003272:	fa0b f303 	lsl.w	r3, fp, r3
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003276:	08d7      	lsrs	r7, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003278:	431d      	orrs	r5, r3
 800327a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800327e:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003280:	f002 0507 	and.w	r5, r2, #7
 8003284:	f8d7 c020 	ldr.w	ip, [r7, #32]
 8003288:	00ad      	lsls	r5, r5, #2
 800328a:	fa08 f505 	lsl.w	r5, r8, r5
 800328e:	ea2c 0505 	bic.w	r5, ip, r5
 8003292:	623d      	str	r5, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003294:	6885      	ldr	r5, [r0, #8]
 8003296:	ea25 0503 	bic.w	r5, r5, r3
 800329a:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800329c:	6845      	ldr	r5, [r0, #4]
 800329e:	ea25 0506 	bic.w	r5, r5, r6
 80032a2:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032a4:	68c5      	ldr	r5, [r0, #12]
 80032a6:	ea25 0303 	bic.w	r3, r5, r3
 80032aa:	60c3      	str	r3, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80032ac:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80032ae:	ea23 0306 	bic.w	r3, r3, r6
 80032b2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    position++;
 80032b4:	3201      	adds	r2, #1
 80032b6:	e78d      	b.n	80031d4 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032b8:	2300      	movs	r3, #0
 80032ba:	e7c0      	b.n	800323e <HAL_GPIO_DeInit+0x7e>
 80032bc:	2301      	movs	r3, #1
 80032be:	e7be      	b.n	800323e <HAL_GPIO_DeInit+0x7e>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e7bc      	b.n	800323e <HAL_GPIO_DeInit+0x7e>
 80032c4:	2303      	movs	r3, #3
 80032c6:	e7ba      	b.n	800323e <HAL_GPIO_DeInit+0x7e>
 80032c8:	2304      	movs	r3, #4
 80032ca:	e7b8      	b.n	800323e <HAL_GPIO_DeInit+0x7e>
 80032cc:	2305      	movs	r3, #5
 80032ce:	e7b6      	b.n	800323e <HAL_GPIO_DeInit+0x7e>
 80032d0:	40010400 	.word	0x40010400
 80032d4:	48000400 	.word	0x48000400

080032d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80032d8:	6903      	ldr	r3, [r0, #16]
 80032da:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80032dc:	bf14      	ite	ne
 80032de:	2001      	movne	r0, #1
 80032e0:	2000      	moveq	r0, #0
 80032e2:	4770      	bx	lr

080032e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e4:	b10a      	cbz	r2, 80032ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032e6:	6181      	str	r1, [r0, #24]
 80032e8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ea:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032f0:	4a04      	ldr	r2, [pc, #16]	@ (8003304 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80032f2:	6951      	ldr	r1, [r2, #20]
 80032f4:	4201      	tst	r1, r0
{
 80032f6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032f8:	d002      	beq.n	8003300 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032fa:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032fc:	f7fd fd66 	bl	8000dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8003300:	bd08      	pop	{r3, pc}
 8003302:	bf00      	nop
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003308:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <HAL_PWR_EnterSLEEPMode+0x38>)
{
 800330a:	b510      	push	{r4, lr}
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800330c:	695b      	ldr	r3, [r3, #20]
{
 800330e:	460c      	mov	r4, r1
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003310:	b928      	cbnz	r0, 800331e <HAL_PWR_EnterSLEEPMode+0x16>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003312:	059a      	lsls	r2, r3, #22
 8003314:	d507      	bpl.n	8003326 <HAL_PWR_EnterSLEEPMode+0x1e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003316:	f000 f831 	bl	800337c <HAL_PWREx_DisableLowPowerRunMode>
 800331a:	b120      	cbz	r0, 8003326 <HAL_PWR_EnterSLEEPMode+0x1e>
    __SEV();
    __WFE();
    __WFE();
  }

}
 800331c:	bd10      	pop	{r4, pc}
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800331e:	059b      	lsls	r3, r3, #22
 8003320:	d401      	bmi.n	8003326 <HAL_PWR_EnterSLEEPMode+0x1e>
      HAL_PWREx_EnableLowPowerRunMode();
 8003322:	f000 f823 	bl	800336c <HAL_PWREx_EnableLowPowerRunMode>
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003326:	4a07      	ldr	r2, [pc, #28]	@ (8003344 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8003328:	6913      	ldr	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800332a:	2c01      	cmp	r4, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003332:	d101      	bne.n	8003338 <HAL_PWR_EnterSLEEPMode+0x30>
    __WFI();
 8003334:	bf30      	wfi
 8003336:	e7f1      	b.n	800331c <HAL_PWR_EnterSLEEPMode+0x14>
    __SEV();
 8003338:	bf40      	sev
    __WFE();
 800333a:	bf20      	wfe
    __WFE();
 800333c:	bf20      	wfe
 800333e:	e7ed      	b.n	800331c <HAL_PWR_EnterSLEEPMode+0x14>
 8003340:	40007000 	.word	0x40007000
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003348:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 800334a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
{
 800334e:	4608      	mov	r0, r1
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8003350:	d101      	bne.n	8003356 <HAL_PWR_EnterSTOPMode+0xe>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8003352:	f000 b84d 	b.w	80033f0 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8003356:	f000 b831 	b.w	80033bc <HAL_PWREx_EnterSTOP0Mode>
	...

0800335c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800335c:	4b02      	ldr	r3, [pc, #8]	@ (8003368 <HAL_PWREx_GetVoltageRange+0xc>)
 800335e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003360:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40007000 	.word	0x40007000

0800336c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800336c:	4a02      	ldr	r2, [pc, #8]	@ (8003378 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800336e:	6813      	ldr	r3, [r2, #0]
 8003370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003374:	6013      	str	r3, [r2, #0]
}
 8003376:	4770      	bx	lr
 8003378:	40007000 	.word	0x40007000

0800337c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800337c:	4a0c      	ldr	r2, [pc, #48]	@ (80033b0 <HAL_PWREx_DisableLowPowerRunMode+0x34>)
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003384:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003386:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <HAL_PWREx_DisableLowPowerRunMode+0x38>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2132      	movs	r1, #50	@ 0x32
 800338c:	434b      	muls	r3, r1
 800338e:	490a      	ldr	r1, [pc, #40]	@ (80033b8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>)
 8003390:	fbb3 f3f1 	udiv	r3, r3, r1
 8003394:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003396:	6951      	ldr	r1, [r2, #20]
 8003398:	0589      	lsls	r1, r1, #22
 800339a:	d500      	bpl.n	800339e <HAL_PWREx_DisableLowPowerRunMode+0x22>
 800339c:	b933      	cbnz	r3, 80033ac <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800339e:	6953      	ldr	r3, [r2, #20]
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80033a0:	f413 7f00 	tst.w	r3, #512	@ 0x200
}
 80033a4:	bf14      	ite	ne
 80033a6:	2003      	movne	r0, #3
 80033a8:	2000      	moveq	r0, #0
 80033aa:	4770      	bx	lr
    wait_loop_index--;
 80033ac:	3b01      	subs	r3, #1
 80033ae:	e7f2      	b.n	8003396 <HAL_PWREx_DisableLowPowerRunMode+0x1a>
 80033b0:	40007000 	.word	0x40007000
 80033b4:	2000004c 	.word	0x2000004c
 80033b8:	000f4240 	.word	0x000f4240

080033bc <HAL_PWREx_EnterSTOP0Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 80033bc:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <HAL_PWREx_EnterSTOP0Mode+0x2c>)
 80033be:	6813      	ldr	r3, [r2, #0]
 80033c0:	f023 0307 	bic.w	r3, r3, #7
 80033c4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_PWREx_EnterSTOP0Mode+0x30>)
 80033c8:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80033ca:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80033cc:	f042 0204 	orr.w	r2, r2, #4
 80033d0:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80033d2:	d105      	bne.n	80033e0 <HAL_PWREx_EnterSTOP0Mode+0x24>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80033d4:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	f022 0204 	bic.w	r2, r2, #4
 80033dc:	611a      	str	r2, [r3, #16]
}
 80033de:	4770      	bx	lr
    __SEV();
 80033e0:	bf40      	sev
    __WFE();
 80033e2:	bf20      	wfe
    __WFE();
 80033e4:	bf20      	wfe
 80033e6:	e7f6      	b.n	80033d6 <HAL_PWREx_EnterSTOP0Mode+0x1a>
 80033e8:	40007000 	.word	0x40007000
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80033f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003420 <HAL_PWREx_EnterSTOP1Mode+0x30>)
 80033f2:	6813      	ldr	r3, [r2, #0]
 80033f4:	f023 0307 	bic.w	r3, r3, #7
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80033fe:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <HAL_PWREx_EnterSTOP1Mode+0x34>)
 8003400:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003402:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003404:	f042 0204 	orr.w	r2, r2, #4
 8003408:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800340a:	d105      	bne.n	8003418 <HAL_PWREx_EnterSTOP1Mode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800340c:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	f022 0204 	bic.w	r2, r2, #4
 8003414:	611a      	str	r2, [r3, #16]
}
 8003416:	4770      	bx	lr
    __SEV();
 8003418:	bf40      	sev
    __WFE();
 800341a:	bf20      	wfe
    __WFE();
 800341c:	bf20      	wfe
 800341e:	e7f6      	b.n	800340e <HAL_PWREx_EnterSTOP1Mode+0x1e>
 8003420:	40007000 	.word	0x40007000
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003428:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800342a:	4d1e      	ldr	r5, [pc, #120]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800342c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800342e:	00da      	lsls	r2, r3, #3
{
 8003430:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003432:	d518      	bpl.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003434:	f7ff ff92 	bl	800335c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003438:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800343c:	d123      	bne.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800343e:	2c80      	cmp	r4, #128	@ 0x80
 8003440:	d929      	bls.n	8003496 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003442:	2ca1      	cmp	r4, #161	@ 0xa1
 8003444:	bf34      	ite	cc
 8003446:	2401      	movcc	r4, #1
 8003448:	2402      	movcs	r4, #2
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800344a:	4917      	ldr	r1, [pc, #92]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800344c:	680a      	ldr	r2, [r1, #0]
 800344e:	f022 0207 	bic.w	r2, r2, #7
 8003452:	4322      	orrs	r2, r4
 8003454:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003456:	6808      	ldr	r0, [r1, #0]
 8003458:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800345c:	1b00      	subs	r0, r0, r4
 800345e:	bf18      	it	ne
 8003460:	2001      	movne	r0, #1
 8003462:	b003      	add	sp, #12
 8003464:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800346e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003478:	f7ff ff70 	bl	800335c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800347c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003482:	65ab      	str	r3, [r5, #88]	@ 0x58
 8003484:	e7d8      	b.n	8003438 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003486:	2c80      	cmp	r4, #128	@ 0x80
 8003488:	d807      	bhi.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800348a:	d008      	beq.n	800349e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800348c:	f1a4 0370 	sub.w	r3, r4, #112	@ 0x70
 8003490:	425c      	negs	r4, r3
 8003492:	415c      	adcs	r4, r3
 8003494:	e7d9      	b.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003496:	2400      	movs	r4, #0
 8003498:	e7d7      	b.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800349a:	2403      	movs	r4, #3
 800349c:	e7d5      	b.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800349e:	2402      	movs	r4, #2
 80034a0:	e7d3      	b.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40022000 	.word	0x40022000

080034ac <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ac:	4b22      	ldr	r3, [pc, #136]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x8c>)
 80034ae:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034b2:	f012 020c 	ands.w	r2, r2, #12
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x18>
 80034b8:	2a0c      	cmp	r2, #12
 80034ba:	d115      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034bc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034c0:	2901      	cmp	r1, #1
 80034c2:	d118      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034c4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80034c6:	481d      	ldr	r0, [pc, #116]	@ (800353c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034c8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034ca:	bf55      	itete	pl
 80034cc:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034d0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034d2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034d6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80034da:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034de:	b34a      	cbz	r2, 8003534 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034e0:	2a0c      	cmp	r2, #12
 80034e2:	d009      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x4c>
 80034e4:	2000      	movs	r0, #0
  return sysclockfreq;
 80034e6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034e8:	2a04      	cmp	r2, #4
 80034ea:	d022      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034ec:	2a08      	cmp	r2, #8
 80034ee:	4814      	ldr	r0, [pc, #80]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x94>)
 80034f0:	bf18      	it	ne
 80034f2:	2000      	movne	r0, #0
 80034f4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034f6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80034fe:	2a02      	cmp	r2, #2
 8003500:	d015      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x82>
 8003502:	490f      	ldr	r1, [pc, #60]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x94>)
 8003504:	2a03      	cmp	r2, #3
 8003506:	bf08      	it	eq
 8003508:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800350a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003512:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003514:	68d8      	ldr	r0, [r3, #12]
 8003516:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800351a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800351e:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003520:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003522:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003524:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003528:	fbb2 f0f0 	udiv	r0, r2, r0
 800352c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800352e:	4805      	ldr	r0, [pc, #20]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
 8003530:	e7eb      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003532:	4804      	ldr	r0, [pc, #16]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	0800d9a8 	.word	0x0800d9a8
 8003540:	007a1200 	.word	0x007a1200
 8003544:	00f42400 	.word	0x00f42400

08003548 <HAL_RCC_OscConfig>:
{
 8003548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800354c:	4605      	mov	r5, r0
 800354e:	b918      	cbnz	r0, 8003558 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003550:	2001      	movs	r0, #1
}
 8003552:	b003      	add	sp, #12
 8003554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003558:	4c92      	ldr	r4, [pc, #584]	@ (80037a4 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800355a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800355e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003560:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003562:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003566:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800356a:	d53d      	bpl.n	80035e8 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800356c:	b11e      	cbz	r6, 8003576 <HAL_RCC_OscConfig+0x2e>
 800356e:	2e0c      	cmp	r6, #12
 8003570:	d166      	bne.n	8003640 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003572:	2f01      	cmp	r7, #1
 8003574:	d164      	bne.n	8003640 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	0799      	lsls	r1, r3, #30
 800357a:	d502      	bpl.n	8003582 <HAL_RCC_OscConfig+0x3a>
 800357c:	69ab      	ldr	r3, [r5, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0e6      	beq.n	8003550 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	6a28      	ldr	r0, [r5, #32]
 8003586:	071a      	lsls	r2, r3, #28
 8003588:	bf56      	itet	pl
 800358a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	@ 0x94
 800358e:	6823      	ldrmi	r3, [r4, #0]
 8003590:	091b      	lsrpl	r3, r3, #4
 8003592:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003596:	4298      	cmp	r0, r3
 8003598:	d93b      	bls.n	8003612 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800359a:	f7ff ff45 	bl	8003428 <RCC_SetFlashLatencyFromMSIRange>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d1d6      	bne.n	8003550 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	f043 0308 	orr.w	r3, r3, #8
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	6a2a      	ldr	r2, [r5, #32]
 80035ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035b2:	4313      	orrs	r3, r2
 80035b4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	69ea      	ldr	r2, [r5, #28]
 80035ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80035c2:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c4:	f7ff ff72 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 80035c8:	68a3      	ldr	r3, [r4, #8]
 80035ca:	4a77      	ldr	r2, [pc, #476]	@ (80037a8 <HAL_RCC_OscConfig+0x260>)
 80035cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80035d0:	5cd3      	ldrb	r3, [r2, r3]
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	40d8      	lsrs	r0, r3
 80035d8:	4b74      	ldr	r3, [pc, #464]	@ (80037ac <HAL_RCC_OscConfig+0x264>)
 80035da:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80035dc:	4b74      	ldr	r3, [pc, #464]	@ (80037b0 <HAL_RCC_OscConfig+0x268>)
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	f7fe f921 	bl	8001826 <HAL_InitTick>
        if(status != HAL_OK)
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d1b4      	bne.n	8003552 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	07d9      	lsls	r1, r3, #31
 80035ec:	d45f      	bmi.n	80036ae <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	682b      	ldr	r3, [r5, #0]
 80035f0:	079a      	lsls	r2, r3, #30
 80035f2:	f100 809e 	bmi.w	8003732 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	0719      	lsls	r1, r3, #28
 80035fa:	f100 80db 	bmi.w	80037b4 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	075a      	lsls	r2, r3, #29
 8003602:	f100 8101 	bmi.w	8003808 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003606:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 816a 	bne.w	80038e2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800360e:	2000      	movs	r0, #0
 8003610:	e79f      	b.n	8003552 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	f043 0308 	orr.w	r3, r3, #8
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003620:	4303      	orrs	r3, r0
 8003622:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003624:	6863      	ldr	r3, [r4, #4]
 8003626:	69ea      	ldr	r2, [r5, #28]
 8003628:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800362c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003630:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003632:	2e00      	cmp	r6, #0
 8003634:	d1c6      	bne.n	80035c4 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003636:	f7ff fef7 	bl	8003428 <RCC_SetFlashLatencyFromMSIRange>
 800363a:	2800      	cmp	r0, #0
 800363c:	d0c2      	beq.n	80035c4 <HAL_RCC_OscConfig+0x7c>
 800363e:	e787      	b.n	8003550 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003640:	69ab      	ldr	r3, [r5, #24]
 8003642:	b31b      	cbz	r3, 800368c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800364c:	f7fe f8ed 	bl	800182a <HAL_GetTick>
 8003650:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	079b      	lsls	r3, r3, #30
 8003656:	d511      	bpl.n	800367c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	f043 0308 	orr.w	r3, r3, #8
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	6a2a      	ldr	r2, [r5, #32]
 8003664:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003668:	4313      	orrs	r3, r2
 800366a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800366c:	6863      	ldr	r3, [r4, #4]
 800366e:	69ea      	ldr	r2, [r5, #28]
 8003670:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003674:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003678:	6063      	str	r3, [r4, #4]
 800367a:	e7b5      	b.n	80035e8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367c:	f7fe f8d5 	bl	800182a <HAL_GetTick>
 8003680:	eba0 0008 	sub.w	r0, r0, r8
 8003684:	2802      	cmp	r0, #2
 8003686:	d9e4      	bls.n	8003652 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003688:	2003      	movs	r0, #3
 800368a:	e762      	b.n	8003552 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003694:	f7fe f8c9 	bl	800182a <HAL_GetTick>
 8003698:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	0798      	lsls	r0, r3, #30
 800369e:	d5a3      	bpl.n	80035e8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a0:	f7fe f8c3 	bl	800182a <HAL_GetTick>
 80036a4:	eba0 0008 	sub.w	r0, r0, r8
 80036a8:	2802      	cmp	r0, #2
 80036aa:	d9f6      	bls.n	800369a <HAL_RCC_OscConfig+0x152>
 80036ac:	e7ec      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036ae:	2e08      	cmp	r6, #8
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_OscConfig+0x172>
 80036b2:	2e0c      	cmp	r6, #12
 80036b4:	d108      	bne.n	80036c8 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036b6:	2f03      	cmp	r7, #3
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	039b      	lsls	r3, r3, #14
 80036be:	d596      	bpl.n	80035ee <HAL_RCC_OscConfig+0xa6>
 80036c0:	686b      	ldr	r3, [r5, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d193      	bne.n	80035ee <HAL_RCC_OscConfig+0xa6>
 80036c6:	e743      	b.n	8003550 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c8:	686b      	ldr	r3, [r5, #4]
 80036ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ce:	d110      	bne.n	80036f2 <HAL_RCC_OscConfig+0x1aa>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80036d8:	f7fe f8a7 	bl	800182a <HAL_GetTick>
 80036dc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	0398      	lsls	r0, r3, #14
 80036e2:	d484      	bmi.n	80035ee <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fe f8a1 	bl	800182a <HAL_GetTick>
 80036e8:	eba0 0008 	sub.w	r0, r0, r8
 80036ec:	2864      	cmp	r0, #100	@ 0x64
 80036ee:	d9f6      	bls.n	80036de <HAL_RCC_OscConfig+0x196>
 80036f0:	e7ca      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f6:	d104      	bne.n	8003702 <HAL_RCC_OscConfig+0x1ba>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	e7e6      	b.n	80036d0 <HAL_RCC_OscConfig+0x188>
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003708:	6022      	str	r2, [r4, #0]
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003710:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8003716:	f7fe f888 	bl	800182a <HAL_GetTick>
 800371a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	0399      	lsls	r1, r3, #14
 8003720:	f57f af65 	bpl.w	80035ee <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe f881 	bl	800182a <HAL_GetTick>
 8003728:	eba0 0008 	sub.w	r0, r0, r8
 800372c:	2864      	cmp	r0, #100	@ 0x64
 800372e:	d9f5      	bls.n	800371c <HAL_RCC_OscConfig+0x1d4>
 8003730:	e7aa      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003732:	2e04      	cmp	r6, #4
 8003734:	d003      	beq.n	800373e <HAL_RCC_OscConfig+0x1f6>
 8003736:	2e0c      	cmp	r6, #12
 8003738:	d110      	bne.n	800375c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800373a:	2f02      	cmp	r7, #2
 800373c:	d10e      	bne.n	800375c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	055a      	lsls	r2, r3, #21
 8003742:	d503      	bpl.n	800374c <HAL_RCC_OscConfig+0x204>
 8003744:	68eb      	ldr	r3, [r5, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f43f af02 	beq.w	8003550 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374c:	6863      	ldr	r3, [r4, #4]
 800374e:	692a      	ldr	r2, [r5, #16]
 8003750:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8003754:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003758:	6063      	str	r3, [r4, #4]
 800375a:	e74c      	b.n	80035f6 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800375c:	68eb      	ldr	r3, [r5, #12]
 800375e:	b17b      	cbz	r3, 8003780 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003766:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003768:	f7fe f85f 	bl	800182a <HAL_GetTick>
 800376c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	055b      	lsls	r3, r3, #21
 8003772:	d4eb      	bmi.n	800374c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003774:	f7fe f859 	bl	800182a <HAL_GetTick>
 8003778:	1bc0      	subs	r0, r0, r7
 800377a:	2802      	cmp	r0, #2
 800377c:	d9f7      	bls.n	800376e <HAL_RCC_OscConfig+0x226>
 800377e:	e783      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003786:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003788:	f7fe f84f 	bl	800182a <HAL_GetTick>
 800378c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	0558      	lsls	r0, r3, #21
 8003792:	f57f af30 	bpl.w	80035f6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003796:	f7fe f848 	bl	800182a <HAL_GetTick>
 800379a:	1bc0      	subs	r0, r0, r7
 800379c:	2802      	cmp	r0, #2
 800379e:	d9f6      	bls.n	800378e <HAL_RCC_OscConfig+0x246>
 80037a0:	e772      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	0800d9d8 	.word	0x0800d9d8
 80037ac:	2000004c 	.word	0x2000004c
 80037b0:	20000054 	.word	0x20000054
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b4:	696b      	ldr	r3, [r5, #20]
 80037b6:	b19b      	cbz	r3, 80037e0 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80037b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80037c4:	f7fe f831 	bl	800182a <HAL_GetTick>
 80037c8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80037ce:	079b      	lsls	r3, r3, #30
 80037d0:	f53f af15 	bmi.w	80035fe <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d4:	f7fe f829 	bl	800182a <HAL_GetTick>
 80037d8:	1bc0      	subs	r0, r0, r7
 80037da:	2802      	cmp	r0, #2
 80037dc:	d9f5      	bls.n	80037ca <HAL_RCC_OscConfig+0x282>
 80037de:	e753      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 80037e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80037ec:	f7fe f81d 	bl	800182a <HAL_GetTick>
 80037f0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80037f6:	0798      	lsls	r0, r3, #30
 80037f8:	f57f af01 	bpl.w	80035fe <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fc:	f7fe f815 	bl	800182a <HAL_GetTick>
 8003800:	1bc0      	subs	r0, r0, r7
 8003802:	2802      	cmp	r0, #2
 8003804:	d9f5      	bls.n	80037f2 <HAL_RCC_OscConfig+0x2aa>
 8003806:	e73f      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003808:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800380a:	00d9      	lsls	r1, r3, #3
 800380c:	d429      	bmi.n	8003862 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003814:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003816:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003820:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003824:	4f89      	ldr	r7, [pc, #548]	@ (8003a4c <HAL_RCC_OscConfig+0x504>)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	05da      	lsls	r2, r3, #23
 800382a:	d51d      	bpl.n	8003868 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	68ab      	ldr	r3, [r5, #8]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d12b      	bne.n	800388a <HAL_RCC_OscConfig+0x342>
 8003832:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800383e:	f7fd fff4 	bl	800182a <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003846:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003848:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800384c:	0798      	lsls	r0, r3, #30
 800384e:	d542      	bpl.n	80038d6 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8003850:	f1b8 0f00 	cmp.w	r8, #0
 8003854:	f43f aed7 	beq.w	8003606 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003858:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800385a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003860:	e6d1      	b.n	8003606 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8003862:	f04f 0800 	mov.w	r8, #0
 8003866:	e7dd      	b.n	8003824 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800386e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003870:	f7fd ffdb 	bl	800182a <HAL_GetTick>
 8003874:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	05db      	lsls	r3, r3, #23
 800387a:	d4d7      	bmi.n	800382c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387c:	f7fd ffd5 	bl	800182a <HAL_GetTick>
 8003880:	eba0 0009 	sub.w	r0, r0, r9
 8003884:	2802      	cmp	r0, #2
 8003886:	d9f6      	bls.n	8003876 <HAL_RCC_OscConfig+0x32e>
 8003888:	e6fe      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388a:	2b05      	cmp	r3, #5
 800388c:	d106      	bne.n	800389c <HAL_RCC_OscConfig+0x354>
 800388e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8003892:	f043 0304 	orr.w	r3, r3, #4
 8003896:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800389a:	e7ca      	b.n	8003832 <HAL_RCC_OscConfig+0x2ea>
 800389c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
 80038a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80038ac:	f022 0204 	bic.w	r2, r2, #4
 80038b0:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1c2      	bne.n	800383e <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 80038b8:	f7fd ffb7 	bl	800182a <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80038c0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80038c6:	0799      	lsls	r1, r3, #30
 80038c8:	d5c2      	bpl.n	8003850 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fd ffae 	bl	800182a <HAL_GetTick>
 80038ce:	1bc0      	subs	r0, r0, r7
 80038d0:	4548      	cmp	r0, r9
 80038d2:	d9f6      	bls.n	80038c2 <HAL_RCC_OscConfig+0x37a>
 80038d4:	e6d8      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fd ffa8 	bl	800182a <HAL_GetTick>
 80038da:	1bc0      	subs	r0, r0, r7
 80038dc:	4548      	cmp	r0, r9
 80038de:	d9b3      	bls.n	8003848 <HAL_RCC_OscConfig+0x300>
 80038e0:	e6d2      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	f040 808f 	bne.w	8003a06 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 80038e8:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80038ec:	f003 0103 	and.w	r1, r3, #3
 80038f0:	4291      	cmp	r1, r2
 80038f2:	d124      	bne.n	800393e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f4:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 80038f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038fa:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003900:	d11d      	bne.n	800393e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003902:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8003904:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003908:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800390c:	d117      	bne.n	800393e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800390e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003910:	3a07      	subs	r2, #7
 8003912:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 8003916:	bf18      	it	ne
 8003918:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800391a:	4291      	cmp	r1, r2
 800391c:	d10f      	bne.n	800393e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800391e:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8003920:	0852      	lsrs	r2, r2, #1
 8003922:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8003926:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003928:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800392c:	d107      	bne.n	800393e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800392e:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8003930:	0852      	lsrs	r2, r2, #1
 8003932:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8003936:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003938:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800393c:	d04a      	beq.n	80039d4 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393e:	2e0c      	cmp	r6, #12
 8003940:	f43f ae06 	beq.w	8003550 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	f53f ae02 	bmi.w	8003550 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	f53f adfe 	bmi.w	8003550 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800395a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800395c:	f7fd ff65 	bl	800182a <HAL_GetTick>
 8003960:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	019f      	lsls	r7, r3, #6
 8003966:	d42f      	bmi.n	80039c8 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003968:	68e2      	ldr	r2, [r4, #12]
 800396a:	4b39      	ldr	r3, [pc, #228]	@ (8003a50 <HAL_RCC_OscConfig+0x508>)
 800396c:	4013      	ands	r3, r2
 800396e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8003970:	4313      	orrs	r3, r2
 8003972:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003974:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003978:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800397a:	3a01      	subs	r2, #1
 800397c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003980:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003982:	0912      	lsrs	r2, r2, #4
 8003984:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003988:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 800398a:	0852      	lsrs	r2, r2, #1
 800398c:	3a01      	subs	r2, #1
 800398e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003992:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8003994:	0852      	lsrs	r2, r2, #1
 8003996:	3a01      	subs	r2, #1
 8003998:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800399c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039a4:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a6:	68e3      	ldr	r3, [r4, #12]
 80039a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ac:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80039ae:	f7fd ff3c 	bl	800182a <HAL_GetTick>
 80039b2:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	0198      	lsls	r0, r3, #6
 80039b8:	f53f ae29 	bmi.w	800360e <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd ff35 	bl	800182a <HAL_GetTick>
 80039c0:	1b40      	subs	r0, r0, r5
 80039c2:	2802      	cmp	r0, #2
 80039c4:	d9f6      	bls.n	80039b4 <HAL_RCC_OscConfig+0x46c>
 80039c6:	e65f      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd ff2f 	bl	800182a <HAL_GetTick>
 80039cc:	1b80      	subs	r0, r0, r6
 80039ce:	2802      	cmp	r0, #2
 80039d0:	d9c7      	bls.n	8003962 <HAL_RCC_OscConfig+0x41a>
 80039d2:	e659      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	0199      	lsls	r1, r3, #6
 80039d8:	f53f ae19 	bmi.w	800360e <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039e2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e4:	68e3      	ldr	r3, [r4, #12]
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ea:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80039ec:	f7fd ff1d 	bl	800182a <HAL_GetTick>
 80039f0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	019a      	lsls	r2, r3, #6
 80039f6:	f53f ae0a 	bmi.w	800360e <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fd ff16 	bl	800182a <HAL_GetTick>
 80039fe:	1b40      	subs	r0, r0, r5
 8003a00:	2802      	cmp	r0, #2
 8003a02:	d9f6      	bls.n	80039f2 <HAL_RCC_OscConfig+0x4aa>
 8003a04:	e640      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a06:	2e0c      	cmp	r6, #12
 8003a08:	f43f ada2 	beq.w	8003550 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f013 5f20 	tst.w	r3, #671088640	@ 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a1a:	bf02      	ittt	eq
 8003a1c:	68e3      	ldreq	r3, [r4, #12]
 8003a1e:	f023 0303 	biceq.w	r3, r3, #3
 8003a22:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a24:	68e3      	ldr	r3, [r4, #12]
 8003a26:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8003a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003a30:	f7fd fefb 	bl	800182a <HAL_GetTick>
 8003a34:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	f57f ade8 	bpl.w	800360e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd fef4 	bl	800182a <HAL_GetTick>
 8003a42:	1b40      	subs	r0, r0, r5
 8003a44:	2802      	cmp	r0, #2
 8003a46:	d9f6      	bls.n	8003a36 <HAL_RCC_OscConfig+0x4ee>
 8003a48:	e61e      	b.n	8003688 <HAL_RCC_OscConfig+0x140>
 8003a4a:	bf00      	nop
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	f99d808c 	.word	0xf99d808c

08003a54 <HAL_RCC_ClockConfig>:
{
 8003a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a58:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	b910      	cbnz	r0, 8003a64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003a5e:	2001      	movs	r0, #1
}
 8003a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4a40      	ldr	r2, [pc, #256]	@ (8003b68 <HAL_RCC_ClockConfig+0x114>)
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	d32a      	bcc.n	8003ac6 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	07d9      	lsls	r1, r3, #31
 8003a74:	d432      	bmi.n	8003adc <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a76:	6821      	ldr	r1, [r4, #0]
 8003a78:	078a      	lsls	r2, r1, #30
 8003a7a:	d45b      	bmi.n	8003b34 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b68 <HAL_RCC_ClockConfig+0x114>)
 8003a7e:	6813      	ldr	r3, [r2, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	42ab      	cmp	r3, r5
 8003a86:	d85d      	bhi.n	8003b44 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	f011 0f04 	tst.w	r1, #4
 8003a8c:	4d37      	ldr	r5, [pc, #220]	@ (8003b6c <HAL_RCC_ClockConfig+0x118>)
 8003a8e:	d164      	bne.n	8003b5a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	070b      	lsls	r3, r1, #28
 8003a92:	d506      	bpl.n	8003aa2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a94:	68ab      	ldr	r3, [r5, #8]
 8003a96:	6922      	ldr	r2, [r4, #16]
 8003a98:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003a9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003aa0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aa2:	f7ff fd03 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8003aa6:	68ab      	ldr	r3, [r5, #8]
 8003aa8:	4a31      	ldr	r2, [pc, #196]	@ (8003b70 <HAL_RCC_ClockConfig+0x11c>)
 8003aaa:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8003aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	40d8      	lsrs	r0, r3
 8003aba:	4b2e      	ldr	r3, [pc, #184]	@ (8003b74 <HAL_RCC_ClockConfig+0x120>)
 8003abc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003abe:	4b2e      	ldr	r3, [pc, #184]	@ (8003b78 <HAL_RCC_ClockConfig+0x124>)
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	f7fd beb0 	b.w	8001826 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	f023 0307 	bic.w	r3, r3, #7
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad0:	6813      	ldr	r3, [r2, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	428b      	cmp	r3, r1
 8003ad8:	d1c1      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xa>
 8003ada:	e7c9      	b.n	8003a70 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003adc:	6862      	ldr	r2, [r4, #4]
 8003ade:	4e23      	ldr	r6, [pc, #140]	@ (8003b6c <HAL_RCC_ClockConfig+0x118>)
 8003ae0:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae4:	d11a      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aea:	d0b8      	beq.n	8003a5e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aec:	68b3      	ldr	r3, [r6, #8]
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003af6:	f7fd fe98 	bl	800182a <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afa:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003afe:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b00:	68b3      	ldr	r3, [r6, #8]
 8003b02:	6862      	ldr	r2, [r4, #4]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b0c:	d0b3      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0e:	f7fd fe8c 	bl	800182a <HAL_GetTick>
 8003b12:	1bc0      	subs	r0, r0, r7
 8003b14:	4540      	cmp	r0, r8
 8003b16:	d9f3      	bls.n	8003b00 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8003b18:	2003      	movs	r0, #3
 8003b1a:	e7a1      	b.n	8003a60 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1c:	2a02      	cmp	r2, #2
 8003b1e:	d102      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b20:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003b24:	e7e1      	b.n	8003aea <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b26:	b912      	cbnz	r2, 8003b2e <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b28:	f013 0f02 	tst.w	r3, #2
 8003b2c:	e7dd      	b.n	8003aea <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b2e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003b32:	e7da      	b.n	8003aea <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4a0d      	ldr	r2, [pc, #52]	@ (8003b6c <HAL_RCC_ClockConfig+0x118>)
 8003b36:	68a0      	ldr	r0, [r4, #8]
 8003b38:	6893      	ldr	r3, [r2, #8]
 8003b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b3e:	4303      	orrs	r3, r0
 8003b40:	6093      	str	r3, [r2, #8]
 8003b42:	e79b      	b.n	8003a7c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b44:	6813      	ldr	r3, [r2, #0]
 8003b46:	f023 0307 	bic.w	r3, r3, #7
 8003b4a:	432b      	orrs	r3, r5
 8003b4c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	6813      	ldr	r3, [r2, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	42ab      	cmp	r3, r5
 8003b56:	d182      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xa>
 8003b58:	e796      	b.n	8003a88 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5a:	68ab      	ldr	r3, [r5, #8]
 8003b5c:	68e2      	ldr	r2, [r4, #12]
 8003b5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60ab      	str	r3, [r5, #8]
 8003b66:	e793      	b.n	8003a90 <HAL_RCC_ClockConfig+0x3c>
 8003b68:	40022000 	.word	0x40022000
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	0800d9d8 	.word	0x0800d9d8
 8003b74:	2000004c 	.word	0x2000004c
 8003b78:	20000054 	.word	0x20000054

08003b7c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003b7e:	4a06      	ldr	r2, [pc, #24]	@ (8003b98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	4a04      	ldr	r2, [pc, #16]	@ (8003b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8a:	6810      	ldr	r0, [r2, #0]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
}
 8003b90:	40d8      	lsrs	r0, r3
 8003b92:	4770      	bx	lr
 8003b94:	40021000 	.word	0x40021000
 8003b98:	0800d9e8 	.word	0x0800d9e8
 8003b9c:	2000004c 	.word	0x2000004c

08003ba0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ba0:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003ba2:	4a06      	ldr	r2, [pc, #24]	@ (8003bbc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003baa:	5cd3      	ldrb	r3, [r2, r3]
 8003bac:	4a04      	ldr	r2, [pc, #16]	@ (8003bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bae:	6810      	ldr	r0, [r2, #0]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
}
 8003bb4:	40d8      	lsrs	r0, r3
 8003bb6:	4770      	bx	lr
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	0800d9e8 	.word	0x0800d9e8
 8003bc0:	2000004c 	.word	0x2000004c

08003bc4 <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8003bc4:	231f      	movs	r3, #31
 8003bc6:	6003      	str	r3, [r0, #0]
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <HAL_RCC_GetOscConfig+0xb4>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	0351      	lsls	r1, r2, #13
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 8003bce:	bf56      	itet	pl
 8003bd0:	681a      	ldrpl	r2, [r3, #0]
 8003bd2:	f44f 22a0 	movmi.w	r2, #327680	@ 0x50000
 8003bd6:	f402 3280 	andpl.w	r2, r2, #65536	@ 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8003bda:	6042      	str	r2, [r0, #4]
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	f002 0201 	and.w	r2, r2, #1
 8003be2:	6182      	str	r2, [r0, #24]
  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003bea:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003bf2:	6202      	str	r2, [r0, #32]
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8003bfa:	60c2      	str	r2, [r0, #12]
  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	f3c2 6204 	ubfx	r2, r2, #24, #5
 8003c02:	6102      	str	r2, [r0, #16]
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8003c04:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003c08:	0752      	lsls	r2, r2, #29
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8003c0a:	bf56      	itet	pl
 8003c0c:	f8d3 2090 	ldrpl.w	r2, [r3, #144]	@ 0x90
 8003c10:	2205      	movmi	r2, #5
 8003c12:	f002 0201 	andpl.w	r2, r2, #1
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8003c16:	6082      	str	r2, [r0, #8]
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 8003c18:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003c1c:	f002 0201 	and.w	r2, r2, #1
 8003c20:	6142      	str	r2, [r0, #20]
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 8003c22:	2200      	movs	r2, #0
 8003c24:	6242      	str	r2, [r0, #36]	@ 0x24
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 8003c26:	681a      	ldr	r2, [r3, #0]
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8003c28:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2201      	moveq	r2, #1
 8003c30:	2202      	movne	r2, #2
 8003c32:	6282      	str	r2, [r0, #40]	@ 0x28
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	f002 0203 	and.w	r2, r2, #3
 8003c3a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003c42:	3201      	adds	r2, #1
 8003c44:	6302      	str	r2, [r0, #48]	@ 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003c4c:	6342      	str	r2, [r0, #52]	@ 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	f3c2 5241 	ubfx	r2, r2, #21, #2
 8003c54:	3201      	adds	r2, #1
 8003c56:	0052      	lsls	r2, r2, #1
 8003c58:	63c2      	str	r2, [r0, #60]	@ 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8003c60:	3201      	adds	r2, #1
 8003c62:	0052      	lsls	r2, r2, #1
 8003c64:	6402      	str	r2, [r0, #64]	@ 0x40
  if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003c66:	68db      	ldr	r3, [r3, #12]
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 8003c68:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2307      	moveq	r3, #7
 8003c70:	2311      	movne	r3, #17
 8003c72:	6383      	str	r3, [r0, #56]	@ 0x38
}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c7c:	230f      	movs	r3, #15
 8003c7e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <HAL_RCC_GetClockConfig+0x34>)
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	f002 0203 	and.w	r2, r2, #3
 8003c88:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003c90:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003c98:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	08db      	lsrs	r3, r3, #3
 8003c9e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ca2:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ca4:	4b03      	ldr	r3, [pc, #12]	@ (8003cb4 <HAL_RCC_GetClockConfig+0x38>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	600b      	str	r3, [r1, #0]
}
 8003cae:	4770      	bx	lr
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40022000 	.word	0x40022000

08003cb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cba:	4c41      	ldr	r4, [pc, #260]	@ (8003dc0 <RCCEx_PLLSAI1_Config+0x108>)
 8003cbc:	68e3      	ldr	r3, [r4, #12]
 8003cbe:	079b      	lsls	r3, r3, #30
{
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cc4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cc6:	d028      	beq.n	8003d1a <RCCEx_PLLSAI1_Config+0x62>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cc8:	68e3      	ldr	r3, [r4, #12]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	4283      	cmp	r3, r0
 8003cd0:	d13a      	bne.n	8003d48 <RCCEx_PLLSAI1_Config+0x90>
       ||
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d038      	beq.n	8003d48 <RCCEx_PLLSAI1_Config+0x90>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cd6:	68e3      	ldr	r3, [r4, #12]
       ||
 8003cd8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cda:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003cde:	3301      	adds	r3, #1
       ||
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d131      	bne.n	8003d48 <RCCEx_PLLSAI1_Config+0x90>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cea:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fd fd9d 	bl	800182a <HAL_GetTick>
 8003cf0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	011a      	lsls	r2, r3, #4
 8003cf6:	d430      	bmi.n	8003d5a <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf8:	68aa      	ldr	r2, [r5, #8]
 8003cfa:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003cfc:	b3a6      	cbz	r6, 8003d68 <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cfe:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d00:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d02:	d14c      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d04:	6929      	ldr	r1, [r5, #16]
 8003d06:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003d0a:	0849      	lsrs	r1, r1, #1
 8003d0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d10:	3901      	subs	r1, #1
 8003d12:	4313      	orrs	r3, r2
 8003d14:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003d18:	e030      	b.n	8003d7c <RCCEx_PLLSAI1_Config+0xc4>
    switch(PllSai1->PLLSAI1Source)
 8003d1a:	2802      	cmp	r0, #2
 8003d1c:	d010      	beq.n	8003d40 <RCCEx_PLLSAI1_Config+0x88>
 8003d1e:	2803      	cmp	r0, #3
 8003d20:	d014      	beq.n	8003d4c <RCCEx_PLLSAI1_Config+0x94>
 8003d22:	2801      	cmp	r0, #1
 8003d24:	d110      	bne.n	8003d48 <RCCEx_PLLSAI1_Config+0x90>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	079f      	lsls	r7, r3, #30
 8003d2a:	d51c      	bpl.n	8003d66 <RCCEx_PLLSAI1_Config+0xae>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d2c:	68e3      	ldr	r3, [r4, #12]
 8003d2e:	686a      	ldr	r2, [r5, #4]
 8003d30:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8003d34:	3a01      	subs	r2, #1
 8003d36:	4303      	orrs	r3, r0
 8003d38:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003d3c:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8003d3e:	e7d1      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d46:	d1f1      	bne.n	8003d2c <RCCEx_PLLSAI1_Config+0x74>
 8003d48:	2001      	movs	r0, #1
 8003d4a:	e00c      	b.n	8003d66 <RCCEx_PLLSAI1_Config+0xae>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	0399      	lsls	r1, r3, #14
 8003d50:	d4ec      	bmi.n	8003d2c <RCCEx_PLLSAI1_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8003d58:	e7f5      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0x8e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d5a:	f7fd fd66 	bl	800182a <HAL_GetTick>
 8003d5e:	1bc0      	subs	r0, r0, r7
 8003d60:	2802      	cmp	r0, #2
 8003d62:	d9c6      	bls.n	8003cf2 <RCCEx_PLLSAI1_Config+0x3a>
 8003d64:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8003d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d68:	6923      	ldr	r3, [r4, #16]
 8003d6a:	68e9      	ldr	r1, [r5, #12]
 8003d6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d74:	0909      	lsrs	r1, r1, #4
 8003d76:	4313      	orrs	r3, r2
 8003d78:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d7c:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d84:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003d86:	f7fd fd50 	bl	800182a <HAL_GetTick>
 8003d8a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	d510      	bpl.n	8003db4 <RCCEx_PLLSAI1_Config+0xfc>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d92:	6923      	ldr	r3, [r4, #16]
 8003d94:	69aa      	ldr	r2, [r5, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	6123      	str	r3, [r4, #16]
 8003d9a:	2000      	movs	r0, #0
  return status;
 8003d9c:	e7e3      	b.n	8003d66 <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d9e:	6969      	ldr	r1, [r5, #20]
 8003da0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003da4:	0849      	lsrs	r1, r1, #1
 8003da6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003daa:	3901      	subs	r1, #1
 8003dac:	4313      	orrs	r3, r2
 8003dae:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003db2:	e7e3      	b.n	8003d7c <RCCEx_PLLSAI1_Config+0xc4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003db4:	f7fd fd39 	bl	800182a <HAL_GetTick>
 8003db8:	1b80      	subs	r0, r0, r6
 8003dba:	2802      	cmp	r0, #2
 8003dbc:	d9e6      	bls.n	8003d8c <RCCEx_PLLSAI1_Config+0xd4>
 8003dbe:	e7d1      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0xac>
 8003dc0:	40021000 	.word	0x40021000

08003dc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dc6:	4c3b      	ldr	r4, [pc, #236]	@ (8003eb4 <RCCEx_PLLSAI2_Config+0xf0>)
 8003dc8:	68e3      	ldr	r3, [r4, #12]
 8003dca:	079b      	lsls	r3, r3, #30
{
 8003dcc:	4605      	mov	r5, r0
 8003dce:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dd0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dd2:	d026      	beq.n	8003e22 <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dd4:	68e3      	ldr	r3, [r4, #12]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	4283      	cmp	r3, r0
 8003ddc:	d138      	bne.n	8003e50 <RCCEx_PLLSAI2_Config+0x8c>
       ||
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d036      	beq.n	8003e50 <RCCEx_PLLSAI2_Config+0x8c>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003de2:	68e3      	ldr	r3, [r4, #12]
       ||
 8003de4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003de6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003dea:	3301      	adds	r3, #1
       ||
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d12f      	bne.n	8003e50 <RCCEx_PLLSAI2_Config+0x8c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df8:	f7fd fd17 	bl	800182a <HAL_GetTick>
 8003dfc:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	009a      	lsls	r2, r3, #2
 8003e02:	d42e      	bmi.n	8003e62 <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e04:	68a9      	ldr	r1, [r5, #8]
 8003e06:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003e08:	b396      	cbz	r6, 8003e70 <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e0a:	6963      	ldr	r3, [r4, #20]
 8003e0c:	692a      	ldr	r2, [r5, #16]
 8003e0e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e12:	0852      	lsrs	r2, r2, #1
 8003e14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003e20:	e030      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xc0>
    switch(PllSai2->PLLSAI2Source)
 8003e22:	2802      	cmp	r0, #2
 8003e24:	d010      	beq.n	8003e48 <RCCEx_PLLSAI2_Config+0x84>
 8003e26:	2803      	cmp	r0, #3
 8003e28:	d014      	beq.n	8003e54 <RCCEx_PLLSAI2_Config+0x90>
 8003e2a:	2801      	cmp	r0, #1
 8003e2c:	d110      	bne.n	8003e50 <RCCEx_PLLSAI2_Config+0x8c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	079f      	lsls	r7, r3, #30
 8003e32:	d51c      	bpl.n	8003e6e <RCCEx_PLLSAI2_Config+0xaa>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e34:	68e3      	ldr	r3, [r4, #12]
 8003e36:	686a      	ldr	r2, [r5, #4]
 8003e38:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8003e3c:	3a01      	subs	r2, #1
 8003e3e:	4303      	orrs	r3, r0
 8003e40:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003e44:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8003e46:	e7d3      	b.n	8003df0 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e4e:	d1f1      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x70>
 8003e50:	2001      	movs	r0, #1
 8003e52:	e00c      	b.n	8003e6e <RCCEx_PLLSAI2_Config+0xaa>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	0399      	lsls	r1, r3, #14
 8003e58:	d4ec      	bmi.n	8003e34 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8003e60:	e7f5      	b.n	8003e4e <RCCEx_PLLSAI2_Config+0x8a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e62:	f7fd fce2 	bl	800182a <HAL_GetTick>
 8003e66:	1bc0      	subs	r0, r0, r7
 8003e68:	2802      	cmp	r0, #2
 8003e6a:	d9c8      	bls.n	8003dfe <RCCEx_PLLSAI2_Config+0x3a>
 8003e6c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8003e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e70:	6963      	ldr	r3, [r4, #20]
 8003e72:	68ea      	ldr	r2, [r5, #12]
 8003e74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e7c:	0912      	lsrs	r2, r2, #4
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e84:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003e8e:	f7fd fccc 	bl	800182a <HAL_GetTick>
 8003e92:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	d505      	bpl.n	8003ea6 <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e9a:	6963      	ldr	r3, [r4, #20]
 8003e9c:	696a      	ldr	r2, [r5, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	6163      	str	r3, [r4, #20]
 8003ea2:	2000      	movs	r0, #0
  return status;
 8003ea4:	e7e3      	b.n	8003e6e <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ea6:	f7fd fcc0 	bl	800182a <HAL_GetTick>
 8003eaa:	1b80      	subs	r0, r0, r6
 8003eac:	2802      	cmp	r0, #2
 8003eae:	d9f1      	bls.n	8003e94 <RCCEx_PLLSAI2_Config+0xd0>
 8003eb0:	e7dc      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0xa8>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003eb8:	6803      	ldr	r3, [r0, #0]
{
 8003eba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ebe:	051d      	lsls	r5, r3, #20
{
 8003ec0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ec2:	d528      	bpl.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ec4:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8003ec6:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8003eca:	d026      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003ecc:	d817      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x46>
 8003ece:	b351      	cbz	r1, 8003f26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003ed0:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8003ed4:	d02e      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ed6:	2501      	movs	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	04d8      	lsls	r0, r3, #19
 8003edc:	d50d      	bpl.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x42>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003ede:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003ee0:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003ee4:	f000 8147 	beq.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8003ee8:	d829      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8003eea:	2900      	cmp	r1, #0
 8003eec:	f000 8149 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ef0:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8003ef4:	f000 814a 	beq.w	800418c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003ef8:	2501      	movs	r5, #1
 8003efa:	462f      	mov	r7, r5
 8003efc:	e02f      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003efe:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8003f02:	d1e8      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f04:	4aab      	ldr	r2, [pc, #684]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f06:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003f08:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003f0c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003f10:	430b      	orrs	r3, r1
 8003f12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f16:	2500      	movs	r5, #0
 8003f18:	e7de      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f1a:	4aa6      	ldr	r2, [pc, #664]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f1c:	68d3      	ldr	r3, [r2, #12]
 8003f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f22:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8003f24:	e7ee      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f26:	3004      	adds	r0, #4
 8003f28:	f7ff fec6 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f2c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d1d2      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8003f32:	e7e7      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f34:	2100      	movs	r1, #0
 8003f36:	3020      	adds	r0, #32
 8003f38:	f7ff ff44 	bl	8003dc4 <RCCEx_PLLSAI2_Config>
 8003f3c:	e7f6      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003f3e:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8003f42:	d1d9      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f44:	462f      	mov	r7, r5
    if(ret == HAL_OK)
 8003f46:	2f00      	cmp	r7, #0
 8003f48:	f040 8126 	bne.w	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f4c:	4a99      	ldr	r2, [pc, #612]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f4e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003f50:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003f54:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	0399      	lsls	r1, r3, #14
 8003f62:	d53a      	bpl.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x122>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f64:	4e93      	ldr	r6, [pc, #588]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f66:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8003f68:	00da      	lsls	r2, r3, #3
 8003f6a:	f100 8117 	bmi.w	800419c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	65b3      	str	r3, [r6, #88]	@ 0x58
 8003f76:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003f80:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f84:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 80041b8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003f88:	f8d9 3000 	ldr.w	r3, [r9]
 8003f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f90:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8003f94:	f7fd fc49 	bl	800182a <HAL_GetTick>
 8003f98:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f9a:	f8d9 3000 	ldr.w	r3, [r9]
 8003f9e:	05db      	lsls	r3, r3, #23
 8003fa0:	f140 80ff 	bpl.w	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    if(ret == HAL_OK)
 8003fa4:	b98f      	cbnz	r7, 8003fca <HAL_RCCEx_PeriphCLKConfig+0x112>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fa6:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003faa:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8003fae:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8003fb2:	f040 8103 	bne.w	80041bc <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb6:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8003fba:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
 8003fc8:	462f      	mov	r7, r5
    if(pwrclkchanged == SET)
 8003fca:	f1b8 0f00 	cmp.w	r8, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd0:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8003fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	65b3      	str	r3, [r6, #88]	@ 0x58
 8003fd8:	463d      	mov	r5, r7
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	07da      	lsls	r2, r3, #31
 8003fde:	d508      	bpl.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fe0:	4974      	ldr	r1, [pc, #464]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003fe2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003fe4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003fe8:	f022 0203 	bic.w	r2, r2, #3
 8003fec:	4302      	orrs	r2, r0
 8003fee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ff2:	079f      	lsls	r7, r3, #30
 8003ff4:	d508      	bpl.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff6:	496f      	ldr	r1, [pc, #444]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ff8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003ffa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003ffe:	f022 020c 	bic.w	r2, r2, #12
 8004002:	4302      	orrs	r2, r0
 8004004:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004008:	075e      	lsls	r6, r3, #29
 800400a:	d508      	bpl.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800400c:	4969      	ldr	r1, [pc, #420]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800400e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004010:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004014:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8004018:	4302      	orrs	r2, r0
 800401a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800401e:	0718      	lsls	r0, r3, #28
 8004020:	d508      	bpl.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004022:	4964      	ldr	r1, [pc, #400]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004024:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004026:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800402a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800402e:	4302      	orrs	r2, r0
 8004030:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004034:	06d9      	lsls	r1, r3, #27
 8004036:	d508      	bpl.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004038:	495e      	ldr	r1, [pc, #376]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800403a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800403c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004040:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004044:	4302      	orrs	r2, r0
 8004046:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800404a:	069a      	lsls	r2, r3, #26
 800404c:	d508      	bpl.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800404e:	4959      	ldr	r1, [pc, #356]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004050:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004052:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004056:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800405a:	4302      	orrs	r2, r0
 800405c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004060:	059f      	lsls	r7, r3, #22
 8004062:	d508      	bpl.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004064:	4953      	ldr	r1, [pc, #332]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004066:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004068:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800406c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004070:	4302      	orrs	r2, r0
 8004072:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004076:	055e      	lsls	r6, r3, #21
 8004078:	d508      	bpl.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800407a:	494e      	ldr	r1, [pc, #312]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800407c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800407e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004082:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004086:	4302      	orrs	r2, r0
 8004088:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800408c:	0658      	lsls	r0, r3, #25
 800408e:	d508      	bpl.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004090:	4948      	ldr	r1, [pc, #288]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004092:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004094:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004098:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800409c:	4302      	orrs	r2, r0
 800409e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a2:	0619      	lsls	r1, r3, #24
 80040a4:	d508      	bpl.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040a6:	4943      	ldr	r1, [pc, #268]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80040a8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80040aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80040ae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80040b2:	4302      	orrs	r2, r0
 80040b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040b8:	05da      	lsls	r2, r3, #23
 80040ba:	d508      	bpl.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040bc:	493d      	ldr	r1, [pc, #244]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80040be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80040c4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80040c8:	4302      	orrs	r2, r0
 80040ca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040ce:	049f      	lsls	r7, r3, #18
 80040d0:	d510      	bpl.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040d2:	4a38      	ldr	r2, [pc, #224]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80040d4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80040d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80040da:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80040de:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040e0:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040e8:	f040 808f 	bne.w	800420a <HAL_RCCEx_PeriphCLKConfig+0x352>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ec:	68d3      	ldr	r3, [r2, #12]
 80040ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040f2:	60d3      	str	r3, [r2, #12]
 80040f4:	462f      	mov	r7, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	031e      	lsls	r6, r3, #12
 80040fa:	d510      	bpl.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040fc:	4a2d      	ldr	r2, [pc, #180]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80040fe:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8004100:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004104:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004108:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800410a:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800410e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004112:	f040 8087 	bne.w	8004224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004116:	68d3      	ldr	r3, [r2, #12]
 8004118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800411c:	60d3      	str	r3, [r2, #12]
 800411e:	463e      	mov	r6, r7
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	035d      	lsls	r5, r3, #13
 8004124:	d50f      	bpl.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004126:	4a23      	ldr	r2, [pc, #140]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004128:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800412a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800412e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004132:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004134:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800413c:	d17f      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800413e:	68d3      	ldr	r3, [r2, #12]
 8004140:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004144:	60d3      	str	r3, [r2, #12]
 8004146:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	0458      	lsls	r0, r3, #17
 800414c:	f140 8086 	bpl.w	800425c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004150:	4918      	ldr	r1, [pc, #96]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004152:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8004154:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004158:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800415c:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800415e:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004166:	d176      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004168:	2102      	movs	r1, #2
 800416a:	1d20      	adds	r0, r4, #4
 800416c:	f7ff fda4 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004170:	2800      	cmp	r0, #0
 8004172:	d073      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004174:	e073      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004176:	4a0f      	ldr	r2, [pc, #60]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004178:	68d3      	ldr	r3, [r2, #12]
 800417a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417e:	60d3      	str	r3, [r2, #12]
      break;
 8004180:	e6e0      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004182:	1d20      	adds	r0, r4, #4
 8004184:	f7ff fd98 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004188:	4607      	mov	r7, r0
      break;
 800418a:	e6dc      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800418c:	2100      	movs	r1, #0
 800418e:	f104 0020 	add.w	r0, r4, #32
 8004192:	f7ff fe17 	bl	8003dc4 <RCCEx_PLLSAI2_Config>
 8004196:	e7f7      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004198:	463d      	mov	r5, r7
 800419a:	e6e0      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    FlagStatus       pwrclkchanged = RESET;
 800419c:	f04f 0800 	mov.w	r8, #0
 80041a0:	e6f0      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a2:	f7fd fb42 	bl	800182a <HAL_GetTick>
 80041a6:	eba0 000a 	sub.w	r0, r0, sl
 80041aa:	2802      	cmp	r0, #2
 80041ac:	f67f aef5 	bls.w	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 80041b0:	2703      	movs	r7, #3
 80041b2:	e70a      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x112>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041bc:	429a      	cmp	r2, r3
 80041be:	d011      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041c0:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80041c4:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 80041c8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80041cc:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041d0:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041d8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80041dc:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 80041e0:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041e4:	07d8      	lsls	r0, r3, #31
 80041e6:	f57f aee6 	bpl.w	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        tickstart = HAL_GetTick();
 80041ea:	f7fd fb1e 	bl	800182a <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80041f2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f4:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 80041f8:	0799      	lsls	r1, r3, #30
 80041fa:	f53f aedc 	bmi.w	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fd fb14 	bl	800182a <HAL_GetTick>
 8004202:	1bc0      	subs	r0, r0, r7
 8004204:	4548      	cmp	r0, r9
 8004206:	d9f5      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004208:	e7d2      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800420a:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 800420e:	f47f af71 	bne.w	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004212:	2101      	movs	r1, #1
 8004214:	1d20      	adds	r0, r4, #4
 8004216:	f7ff fd4f 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800421a:	4607      	mov	r7, r0
 800421c:	2800      	cmp	r0, #0
 800421e:	f43f af69 	beq.w	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8004222:	e768      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004224:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8004228:	f47f af79 	bne.w	800411e <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800422c:	2101      	movs	r1, #1
 800422e:	1d20      	adds	r0, r4, #4
 8004230:	f7ff fd42 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004234:	4606      	mov	r6, r0
 8004236:	2800      	cmp	r0, #0
 8004238:	f43f af71 	beq.w	800411e <HAL_RCCEx_PeriphCLKConfig+0x266>
 800423c:	e770      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800423e:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8004242:	d180      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004244:	2101      	movs	r1, #1
 8004246:	1d20      	adds	r0, r4, #4
 8004248:	f7ff fd36 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800424c:	4605      	mov	r5, r0
 800424e:	2800      	cmp	r0, #0
 8004250:	f43f af79 	beq.w	8004146 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004254:	e778      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x290>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004256:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800425a:	d01b      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 800425c:	4628      	mov	r0, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	0411      	lsls	r1, r2, #16
 8004262:	d508      	bpl.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004264:	490e      	ldr	r1, [pc, #56]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004266:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 8004268:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800426c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004270:	432b      	orrs	r3, r5
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004276:	03d3      	lsls	r3, r2, #15
 8004278:	d509      	bpl.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800427a:	4a09      	ldr	r2, [pc, #36]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8004280:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004288:	430b      	orrs	r3, r1
 800428a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800428e:	b002      	add	sp, #8
 8004290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004294:	2102      	movs	r1, #2
 8004296:	f104 0020 	add.w	r0, r4, #32
 800429a:	f7ff fd93 	bl	8003dc4 <RCCEx_PLLSAI2_Config>
 800429e:	e767      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80042a0:	40021000 	.word	0x40021000

080042a4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80042a4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80042aa:	2b01      	cmp	r3, #1
{
 80042ac:	4604      	mov	r4, r0
 80042ae:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80042b2:	d024      	beq.n	80042fe <HAL_RTC_DeactivateAlarm+0x5a>
 80042b4:	2301      	movs	r3, #1
 80042b6:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042ba:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042bc:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042c0:	22ca      	movs	r2, #202	@ 0xca
 80042c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80042c4:	2253      	movs	r2, #83	@ 0x53
 80042c6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80042c8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80042cc:	689a      	ldr	r2, [r3, #8]
  if (Alarm == RTC_ALARM_A)
 80042ce:	d128      	bne.n	8004322 <HAL_RTC_DeactivateAlarm+0x7e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80042d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d4:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042dc:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80042de:	f7fd faa4 	bl	800182a <HAL_GetTick>
 80042e2:	4605      	mov	r5, r0
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	07da      	lsls	r2, r3, #31
 80042ea:	d509      	bpl.n	8004300 <HAL_RTC_DeactivateAlarm+0x5c>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	22ff      	movs	r2, #255	@ 0xff
 80042f0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042f2:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  __HAL_UNLOCK(hrtc);
 80042fa:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004300:	f7fd fa93 	bl	800182a <HAL_GetTick>
 8004304:	1b40      	subs	r0, r0, r5
 8004306:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800430a:	d9eb      	bls.n	80042e4 <HAL_RTC_DeactivateAlarm+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	22ff      	movs	r2, #255	@ 0xff
 8004310:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
        __HAL_UNLOCK(hrtc);
 8004318:	2300      	movs	r3, #0
 800431a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 800431e:	2003      	movs	r0, #3
 8004320:	e7ed      	b.n	80042fe <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004322:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004326:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800432e:	609a      	str	r2, [r3, #8]
    uint32_t tickstart = HAL_GetTick();
 8004330:	f7fd fa7b 	bl	800182a <HAL_GetTick>
 8004334:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	079b      	lsls	r3, r3, #30
 800433c:	d4d6      	bmi.n	80042ec <HAL_RTC_DeactivateAlarm+0x48>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800433e:	f7fd fa74 	bl	800182a <HAL_GetTick>
 8004342:	1b40      	subs	r0, r0, r5
 8004344:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004348:	d9f5      	bls.n	8004336 <HAL_RTC_DeactivateAlarm+0x92>
 800434a:	e7df      	b.n	800430c <HAL_RTC_DeactivateAlarm+0x68>

0800434c <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800434c:	4b13      	ldr	r3, [pc, #76]	@ (800439c <HAL_RTC_AlarmIRQHandler+0x50>)
 800434e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
{
 8004352:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004354:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004356:	6802      	ldr	r2, [r0, #0]
 8004358:	6893      	ldr	r3, [r2, #8]
 800435a:	04d9      	lsls	r1, r3, #19
{
 800435c:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800435e:	d509      	bpl.n	8004374 <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004360:	68d3      	ldr	r3, [r2, #12]
 8004362:	05db      	lsls	r3, r3, #23
 8004364:	d506      	bpl.n	8004374 <HAL_RTC_AlarmIRQHandler+0x28>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004366:	68d3      	ldr	r3, [r2, #12]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f463 73c0 	orn	r3, r3, #384	@ 0x180
 800436e:	60d3      	str	r3, [r2, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004370:	f7fd f8b4 	bl	80014dc <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004374:	6822      	ldr	r2, [r4, #0]
 8004376:	6893      	ldr	r3, [r2, #8]
 8004378:	0499      	lsls	r1, r3, #18
 800437a:	d50a      	bpl.n	8004392 <HAL_RTC_AlarmIRQHandler+0x46>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800437c:	68d3      	ldr	r3, [r2, #12]
 800437e:	059b      	lsls	r3, r3, #22
 8004380:	d507      	bpl.n	8004392 <HAL_RTC_AlarmIRQHandler+0x46>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004382:	68d3      	ldr	r3, [r2, #12]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f463 7320 	orn	r3, r3, #640	@ 0x280
 800438a:	60d3      	str	r3, [r2, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800438c:	4620      	mov	r0, r4
 800438e:	f000 fa81 	bl	8004894 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004392:	2301      	movs	r3, #1
 8004394:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 8004398:	bd10      	pop	{r4, pc}
 800439a:	bf00      	nop
 800439c:	40010400 	.word	0x40010400

080043a0 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043a0:	6802      	ldr	r2, [r0, #0]
{
 80043a2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043a4:	68d3      	ldr	r3, [r2, #12]
 80043a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043aa:	60d3      	str	r3, [r2, #12]
{
 80043ac:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 80043ae:	f7fd fa3c 	bl	800182a <HAL_GetTick>
 80043b2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	069b      	lsls	r3, r3, #26
 80043ba:	d501      	bpl.n	80043c0 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80043bc:	2000      	movs	r0, #0
}
 80043be:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043c0:	f7fd fa33 	bl	800182a <HAL_GetTick>
 80043c4:	1b40      	subs	r0, r0, r5
 80043c6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80043ca:	d9f3      	bls.n	80043b4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80043cc:	2003      	movs	r0, #3
 80043ce:	e7f6      	b.n	80043be <HAL_RTC_WaitForSynchro+0x1e>

080043d0 <RTC_EnterInitMode>:
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043d0:	6802      	ldr	r2, [r0, #0]
{
 80043d2:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043d4:	68d4      	ldr	r4, [r2, #12]
 80043d6:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 80043da:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043dc:	d11a      	bne.n	8004414 <RTC_EnterInitMode+0x44>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80043e4:	f7fd fa21 	bl	800182a <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	4623      	mov	r3, r4
    tickstart = HAL_GetTick();
 80043ea:	4606      	mov	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80043ec:	682a      	ldr	r2, [r5, #0]
 80043ee:	68d4      	ldr	r4, [r2, #12]
 80043f0:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 80043f4:	d101      	bne.n	80043fa <RTC_EnterInitMode+0x2a>
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d101      	bne.n	80043fe <RTC_EnterInitMode+0x2e>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043fe:	f7fd fa14 	bl	800182a <HAL_GetTick>
 8004402:	1b80      	subs	r0, r0, r6
 8004404:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004408:	4623      	mov	r3, r4
 800440a:	bf84      	itt	hi
 800440c:	2303      	movhi	r3, #3
 800440e:	f885 3021 	strbhi.w	r3, [r5, #33]	@ 0x21
 8004412:	e7eb      	b.n	80043ec <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e7f0      	b.n	80043fa <RTC_EnterInitMode+0x2a>

08004418 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004418:	b538      	push	{r3, r4, r5, lr}
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800441a:	4c0f      	ldr	r4, [pc, #60]	@ (8004458 <RTC_ExitInitMode+0x40>)
 800441c:	68e3      	ldr	r3, [r4, #12]
 800441e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004422:	60e3      	str	r3, [r4, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004424:	68a3      	ldr	r3, [r4, #8]
 8004426:	069b      	lsls	r3, r3, #26
{
 8004428:	4605      	mov	r5, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800442a:	d406      	bmi.n	800443a <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800442c:	f7ff ffb8 	bl	80043a0 <HAL_RTC_WaitForSynchro>
 8004430:	b110      	cbz	r0, 8004438 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004432:	2003      	movs	r0, #3
 8004434:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8004438:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800443a:	68a3      	ldr	r3, [r4, #8]
 800443c:	f023 0320 	bic.w	r3, r3, #32
 8004440:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004442:	f7ff ffad 	bl	80043a0 <HAL_RTC_WaitForSynchro>
 8004446:	b110      	cbz	r0, 800444e <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004448:	2003      	movs	r0, #3
 800444a:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800444e:	68a3      	ldr	r3, [r4, #8]
 8004450:	f043 0320 	orr.w	r3, r3, #32
 8004454:	60a3      	str	r3, [r4, #8]
  return status;
 8004456:	e7ef      	b.n	8004438 <RTC_ExitInitMode+0x20>
 8004458:	40002800 	.word	0x40002800

0800445c <HAL_RTC_Init>:
{
 800445c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 800445e:	4604      	mov	r4, r0
 8004460:	2800      	cmp	r0, #0
 8004462:	d03f      	beq.n	80044e4 <HAL_RTC_Init+0x88>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004464:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8004468:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800446c:	b91b      	cbnz	r3, 8004476 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 800446e:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004472:	f7fc fe4f 	bl	8001114 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004476:	2302      	movs	r3, #2
 8004478:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	22ca      	movs	r2, #202	@ 0xca
 8004480:	625a      	str	r2, [r3, #36]	@ 0x24
 8004482:	2253      	movs	r2, #83	@ 0x53
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8004486:	4620      	mov	r0, r4
 8004488:	f7ff ffa2 	bl	80043d0 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800448c:	bb48      	cbnz	r0, 80044e2 <HAL_RTC_Init+0x86>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800448e:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004490:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8004498:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800449c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800449e:	6862      	ldr	r2, [r4, #4]
 80044a0:	6899      	ldr	r1, [r3, #8]
 80044a2:	4302      	orrs	r2, r0
 80044a4:	69a0      	ldr	r0, [r4, #24]
 80044a6:	4302      	orrs	r2, r0
 80044a8:	430a      	orrs	r2, r1
 80044aa:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80044ac:	68e2      	ldr	r2, [r4, #12]
 80044ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68a1      	ldr	r1, [r4, #8]
 80044b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80044b8:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80044ba:	4620      	mov	r0, r4
 80044bc:	f7ff ffac 	bl	8004418 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80044c0:	b978      	cbnz	r0, 80044e2 <HAL_RTC_Init+0x86>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80044c2:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044c4:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80044c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044c8:	f022 0203 	bic.w	r2, r2, #3
 80044cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044ce:	69e2      	ldr	r2, [r4, #28]
 80044d0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80044d2:	432a      	orrs	r2, r5
 80044d4:	430a      	orrs	r2, r1
 80044d6:	64da      	str	r2, [r3, #76]	@ 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d8:	22ff      	movs	r2, #255	@ 0xff
 80044da:	625a      	str	r2, [r3, #36]	@ 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 80044dc:	2301      	movs	r3, #1
 80044de:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 80044e4:	2001      	movs	r0, #1
 80044e6:	e7fc      	b.n	80044e2 <HAL_RTC_Init+0x86>

080044e8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80044e8:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 80044ea:	2809      	cmp	r0, #9
 80044ec:	d803      	bhi.n	80044f6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80044ee:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80044f2:	b2c0      	uxtb	r0, r0
 80044f4:	4770      	bx	lr
    temp -= 10U;
 80044f6:	380a      	subs	r0, #10
    bcdhigh++;
 80044f8:	3301      	adds	r3, #1
    temp -= 10U;
 80044fa:	b2c0      	uxtb	r0, r0
 80044fc:	e7f5      	b.n	80044ea <RTC_ByteToBcd2+0x2>

080044fe <HAL_RTC_SetTime>:
{
 80044fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8004502:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004506:	2b01      	cmp	r3, #1
{
 8004508:	4605      	mov	r5, r0
 800450a:	460e      	mov	r6, r1
 800450c:	4690      	mov	r8, r2
 800450e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8004512:	d053      	beq.n	80045bc <HAL_RTC_SetTime+0xbe>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004514:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
  __HAL_LOCK(hrtc);
 8004518:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800451a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 800451c:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004520:	22ca      	movs	r2, #202	@ 0xca
 8004522:	625a      	str	r2, [r3, #36]	@ 0x24
 8004524:	2253      	movs	r2, #83	@ 0x53
 8004526:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8004528:	f7ff ff52 	bl	80043d0 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800452c:	bb70      	cbnz	r0, 800458c <HAL_RTC_SetTime+0x8e>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800452e:	6829      	ldr	r1, [r5, #0]
 8004530:	7830      	ldrb	r0, [r6, #0]
 8004532:	7874      	ldrb	r4, [r6, #1]
 8004534:	78b7      	ldrb	r7, [r6, #2]
 8004536:	688b      	ldr	r3, [r1, #8]
    if (Format == RTC_FORMAT_BIN)
 8004538:	f1b8 0f00 	cmp.w	r8, #0
 800453c:	d132      	bne.n	80045a4 <HAL_RTC_SetTime+0xa6>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800453e:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
        sTime->TimeFormat = 0x00U;
 8004542:	bf08      	it	eq
 8004544:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004546:	f7ff ffcf 	bl	80044e8 <RTC_ByteToBcd2>
 800454a:	4680      	mov	r8, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800454c:	4620      	mov	r0, r4
 800454e:	f7ff ffcb 	bl	80044e8 <RTC_ByteToBcd2>
 8004552:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004554:	4638      	mov	r0, r7
 8004556:	f7ff ffc7 	bl	80044e8 <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800455a:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800455c:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8004560:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004564:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004568:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800456c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004570:	600b      	str	r3, [r1, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004572:	688b      	ldr	r3, [r1, #8]
 8004574:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004578:	608b      	str	r3, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800457a:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 800457e:	688a      	ldr	r2, [r1, #8]
 8004580:	4303      	orrs	r3, r0
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8004586:	4628      	mov	r0, r5
 8004588:	f7ff ff46 	bl	8004418 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	22ff      	movs	r2, #255	@ 0xff
 8004590:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8004592:	b910      	cbnz	r0, 800459a <HAL_RTC_SetTime+0x9c>
    hrtc->State = HAL_RTC_STATE_READY;
 8004594:	2301      	movs	r3, #1
 8004596:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
  __HAL_UNLOCK(hrtc);
 800459a:	2300      	movs	r3, #0
 800459c:	f885 3020 	strb.w	r3, [r5, #32]
}
 80045a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045a4:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
        sTime->TimeFormat = 0x00U;
 80045a8:	bf08      	it	eq
 80045aa:	70f3      	strbeq	r3, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045ac:	0224      	lsls	r4, r4, #8
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045ae:	78f2      	ldrb	r2, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045b0:	ea44 4300 	orr.w	r3, r4, r0, lsl #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045b4:	433b      	orrs	r3, r7
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045b6:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80045ba:	e7d5      	b.n	8004568 <HAL_RTC_SetTime+0x6a>
  __HAL_LOCK(hrtc);
 80045bc:	4618      	mov	r0, r3
 80045be:	e7ef      	b.n	80045a0 <HAL_RTC_SetTime+0xa2>

080045c0 <HAL_RTC_SetDate>:
{
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80045c2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80045c6:	2b01      	cmp	r3, #1
{
 80045c8:	4605      	mov	r5, r0
 80045ca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80045ce:	d02b      	beq.n	8004628 <HAL_RTC_SetDate+0x68>
 80045d0:	2301      	movs	r3, #1
 80045d2:	f885 3020 	strb.w	r3, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045d6:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80045da:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80045dc:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80045de:	784c      	ldrb	r4, [r1, #1]
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80045e0:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80045e2:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045e4:	b30a      	cbz	r2, 800462a <HAL_RTC_SetDate+0x6a>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80045e6:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 80045ea:	433b      	orrs	r3, r7
 80045ec:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	22ca      	movs	r2, #202	@ 0xca
 80045f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80045f6:	2253      	movs	r2, #83	@ 0x53
 80045f8:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80045fa:	4628      	mov	r0, r5
 80045fc:	f7ff fee8 	bl	80043d0 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004600:	b940      	cbnz	r0, 8004614 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004602:	682a      	ldr	r2, [r5, #0]
 8004604:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8004608:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 800460c:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 800460e:	4628      	mov	r0, r5
 8004610:	f7ff ff02 	bl	8004418 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	22ff      	movs	r2, #255	@ 0xff
 8004618:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800461a:	b910      	cbnz	r0, 8004622 <HAL_RTC_SetDate+0x62>
    hrtc->State = HAL_RTC_STATE_READY ;
 800461c:	2301      	movs	r3, #1
 800461e:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
  __HAL_UNLOCK(hrtc);
 8004622:	2300      	movs	r3, #0
 8004624:	f885 3020 	strb.w	r3, [r5, #32]
}
 8004628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800462a:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800462c:	bf42      	ittt	mi
 800462e:	f024 0410 	bicmi.w	r4, r4, #16
 8004632:	340a      	addmi	r4, #10
 8004634:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004636:	f7ff ff57 	bl	80044e8 <RTC_ByteToBcd2>
 800463a:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800463c:	7848      	ldrb	r0, [r1, #1]
 800463e:	f7ff ff53 	bl	80044e8 <RTC_ByteToBcd2>
 8004642:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004644:	4638      	mov	r0, r7
 8004646:	f7ff ff4f 	bl	80044e8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800464a:	ea40 0306 	orr.w	r3, r0, r6
 800464e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004652:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8004656:	e7cb      	b.n	80045f0 <HAL_RTC_SetDate+0x30>

08004658 <HAL_RTC_SetAlarm_IT>:
{
 8004658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 800465c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004660:	2b01      	cmp	r3, #1
{
 8004662:	4604      	mov	r4, r0
 8004664:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004668:	f000 808c 	beq.w	8004784 <HAL_RTC_SetAlarm_IT+0x12c>
 800466c:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800466e:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hrtc);
 8004670:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004674:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
  if (Format == RTC_FORMAT_BIN)
 8004678:	6a0d      	ldr	r5, [r1, #32]
 800467a:	7808      	ldrb	r0, [r1, #0]
 800467c:	f891 8001 	ldrb.w	r8, [r1, #1]
 8004680:	f891 9002 	ldrb.w	r9, [r1, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004684:	68b3      	ldr	r3, [r6, #8]
  if (Format == RTC_FORMAT_BIN)
 8004686:	2a00      	cmp	r2, #0
 8004688:	d158      	bne.n	800473c <HAL_RTC_SetAlarm_IT+0xe4>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800468a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800468e:	bf08      	it	eq
 8004690:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004692:	f7ff ff29 	bl	80044e8 <RTC_ByteToBcd2>
 8004696:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004698:	4640      	mov	r0, r8
 800469a:	f7ff ff25 	bl	80044e8 <RTC_ByteToBcd2>
 800469e:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80046a0:	4648      	mov	r0, r9
 80046a2:	f7ff ff21 	bl	80044e8 <RTC_ByteToBcd2>
 80046a6:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80046a8:	f891 0024 	ldrb.w	r0, [r1, #36]	@ 0x24
 80046ac:	f7ff ff1c 	bl	80044e8 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046b0:	694b      	ldr	r3, [r1, #20]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80046b2:	f891 c003 	ldrb.w	ip, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046b6:	432b      	orrs	r3, r5
 80046b8:	ea43 538c 	orr.w	r3, r3, ip, lsl #22
 80046bc:	ea43 0308 	orr.w	r3, r3, r8
 80046c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80046c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80046c8:	ea43 6500 	orr.w	r5, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80046cc:	69cb      	ldr	r3, [r1, #28]
 80046ce:	684f      	ldr	r7, [r1, #4]
 80046d0:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046d2:	23ca      	movs	r3, #202	@ 0xca
 80046d4:	6273      	str	r3, [r6, #36]	@ 0x24
 80046d6:	2353      	movs	r3, #83	@ 0x53
 80046d8:	6273      	str	r3, [r6, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80046da:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80046e0:	68b3      	ldr	r3, [r6, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 80046e2:	d151      	bne.n	8004788 <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80046e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e8:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80046ea:	68f3      	ldr	r3, [r6, #12]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f463 73c0 	orn	r3, r3, #384	@ 0x180
 80046f2:	60f3      	str	r3, [r6, #12]
    uint32_t tickstart = HAL_GetTick();
 80046f4:	f7fd f899 	bl	800182a <HAL_GetTick>
 80046f8:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	07d1      	lsls	r1, r2, #31
 8004700:	d530      	bpl.n	8004764 <HAL_RTC_SetAlarm_IT+0x10c>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004702:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004704:	645f      	str	r7, [r3, #68]	@ 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800470c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004714:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004716:	4b2c      	ldr	r3, [pc, #176]	@ (80047c8 <HAL_RTC_SetAlarm_IT+0x170>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800471e:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004726:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	22ff      	movs	r2, #255	@ 0xff
 800472c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800472e:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8004730:	2301      	movs	r3, #1
 8004732:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  __HAL_UNLOCK(hrtc);
 8004736:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 800473a:	e023      	b.n	8004784 <HAL_RTC_SetAlarm_IT+0x12c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800473c:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004740:	bf08      	it	eq
 8004742:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004744:	694b      	ldr	r3, [r1, #20]
 8004746:	431d      	orrs	r5, r3
 8004748:	ea45 0509 	orr.w	r5, r5, r9
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800474c:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800474e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8004752:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004756:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800475a:	f891 3024 	ldrb.w	r3, [r1, #36]	@ 0x24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800475e:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8004762:	e7b3      	b.n	80046cc <HAL_RTC_SetAlarm_IT+0x74>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004764:	f7fd f861 	bl	800182a <HAL_GetTick>
 8004768:	1b80      	subs	r0, r0, r6
 800476a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800476e:	d9c4      	bls.n	80046fa <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	22ff      	movs	r2, #255	@ 0xff
 8004774:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
        __HAL_UNLOCK(hrtc);
 800477c:	2300      	movs	r3, #0
 800477e:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8004782:	2003      	movs	r0, #3
}
 8004784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800478c:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800478e:	68f3      	ldr	r3, [r6, #12]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f463 7320 	orn	r3, r3, #640	@ 0x280
 8004796:	60f3      	str	r3, [r6, #12]
    uint32_t tickstart = HAL_GetTick();
 8004798:	f7fd f847 	bl	800182a <HAL_GetTick>
 800479c:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	0792      	lsls	r2, r2, #30
 80047a4:	d509      	bpl.n	80047ba <HAL_RTC_SetAlarm_IT+0x162>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80047a6:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80047a8:	649f      	str	r7, [r3, #72]	@ 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047b8:	e7ac      	b.n	8004714 <HAL_RTC_SetAlarm_IT+0xbc>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047ba:	f7fd f836 	bl	800182a <HAL_GetTick>
 80047be:	1b80      	subs	r0, r0, r6
 80047c0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80047c4:	d9eb      	bls.n	800479e <HAL_RTC_SetAlarm_IT+0x146>
 80047c6:	e7d3      	b.n	8004770 <HAL_RTC_SetAlarm_IT+0x118>
 80047c8:	40010400 	.word	0x40010400

080047cc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80047cc:	0903      	lsrs	r3, r0, #4
 80047ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 80047d2:	f000 000f 	and.w	r0, r0, #15
 80047d6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80047da:	b2c0      	uxtb	r0, r0
 80047dc:	4770      	bx	lr

080047de <HAL_RTC_GetTime>:
{
 80047de:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047e0:	6803      	ldr	r3, [r0, #0]
 80047e2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80047e4:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047e6:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80047e8:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047ea:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80047ee:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80047f2:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047f6:	6088      	str	r0, [r1, #8]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80047f8:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80047fc:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004800:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004802:	704d      	strb	r5, [r1, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004804:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004806:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8004808:	b952      	cbnz	r2, 8004820 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800480a:	f7ff ffdf 	bl	80047cc <RTC_Bcd2ToByte>
 800480e:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004810:	4628      	mov	r0, r5
 8004812:	f7ff ffdb 	bl	80047cc <RTC_Bcd2ToByte>
 8004816:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004818:	4620      	mov	r0, r4
 800481a:	f7ff ffd7 	bl	80047cc <RTC_Bcd2ToByte>
 800481e:	7088      	strb	r0, [r1, #2]
}
 8004820:	2000      	movs	r0, #0
 8004822:	bd38      	pop	{r3, r4, r5, pc}

08004824 <HAL_RTC_GetDate>:
{
 8004824:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004826:	6803      	ldr	r3, [r0, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800482a:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800482e:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004832:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004836:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800483a:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800483c:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800483e:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004840:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8004842:	b952      	cbnz	r2, 800485a <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004844:	f7ff ffc2 	bl	80047cc <RTC_Bcd2ToByte>
 8004848:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800484a:	4628      	mov	r0, r5
 800484c:	f7ff ffbe 	bl	80047cc <RTC_Bcd2ToByte>
 8004850:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004852:	4620      	mov	r0, r4
 8004854:	f7ff ffba 	bl	80047cc <RTC_Bcd2ToByte>
 8004858:	7088      	strb	r0, [r1, #2]
}
 800485a:	2000      	movs	r0, #0
 800485c:	bd38      	pop	{r3, r4, r5, pc}

0800485e <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800485e:	f890 2020 	ldrb.w	r2, [r0, #32]
 8004862:	2a01      	cmp	r2, #1
{
 8004864:	4603      	mov	r3, r0
 8004866:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800486a:	d012      	beq.n	8004892 <HAL_RTCEx_EnableBypassShadow+0x34>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800486c:	681a      	ldr	r2, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800486e:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004872:	21ca      	movs	r1, #202	@ 0xca
 8004874:	6251      	str	r1, [r2, #36]	@ 0x24
 8004876:	2153      	movs	r1, #83	@ 0x53
 8004878:	6251      	str	r1, [r2, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800487a:	6891      	ldr	r1, [r2, #8]
 800487c:	f041 0120 	orr.w	r1, r1, #32
 8004880:	6091      	str	r1, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004882:	21ff      	movs	r1, #255	@ 0xff
 8004884:	6251      	str	r1, [r2, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004886:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hrtc);
 800488e:	f883 0020 	strb.w	r0, [r3, #32]

  return HAL_OK;
}
 8004892:	4770      	bx	lr

08004894 <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 8004894:	4770      	bx	lr

08004896 <HAL_RTCEx_BKUPWrite>:
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004896:	6803      	ldr	r3, [r0, #0]
{
 8004898:	b082      	sub	sp, #8
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800489a:	3350      	adds	r3, #80	@ 0x50
 800489c:	9301      	str	r3, [sp, #4]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 800489e:	9b01      	ldr	r3, [sp, #4]
 80048a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80048a4:	9301      	str	r3, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80048a6:	9b01      	ldr	r3, [sp, #4]
 80048a8:	601a      	str	r2, [r3, #0]
}
 80048aa:	b002      	add	sp, #8
 80048ac:	4770      	bx	lr

080048ae <HAL_RTCEx_BKUPRead>:
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80048ae:	6803      	ldr	r3, [r0, #0]
 80048b0:	3350      	adds	r3, #80	@ 0x50
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80048b2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80048b6:	4770      	bx	lr

080048b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	461f      	mov	r7, r3
 80048be:	4689      	mov	r9, r1
 80048c0:	4690      	mov	r8, r2
 80048c2:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048c4:	f7fc ffb1 	bl	800182a <HAL_GetTick>
 80048c8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80048ca:	443d      	add	r5, r7
 80048cc:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80048ce:	f7fc ffac 	bl	800182a <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048d2:	4b26      	ldr	r3, [pc, #152]	@ (800496c <SPI_WaitFlagStateUntilTimeout+0xb4>)
 80048d4:	681e      	ldr	r6, [r3, #0]
 80048d6:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 80048da:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 80048dc:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048de:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	6893      	ldr	r3, [r2, #8]
 80048e4:	ea39 0303 	bics.w	r3, r9, r3
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	4543      	cmp	r3, r8
 80048f0:	d101      	bne.n	80048f6 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 80048f2:	2000      	movs	r0, #0
 80048f4:	e02e      	b.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 80048f6:	1c7b      	adds	r3, r7, #1
 80048f8:	d0f3      	beq.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048fa:	f7fc ff96 	bl	800182a <HAL_GetTick>
 80048fe:	eba0 000a 	sub.w	r0, r0, sl
 8004902:	42a8      	cmp	r0, r5
 8004904:	d329      	bcc.n	800495a <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800490e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004910:	6862      	ldr	r2, [r4, #4]
 8004912:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004916:	d10a      	bne.n	800492e <SPI_WaitFlagStateUntilTimeout+0x76>
 8004918:	68a2      	ldr	r2, [r4, #8]
 800491a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800491e:	d002      	beq.n	8004926 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004920:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004924:	d103      	bne.n	800492e <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800492c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800492e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004930:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004934:	d107      	bne.n	8004946 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004944:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004946:	2301      	movs	r3, #1
 8004948:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800494c:	2300      	movs	r3, #0
 800494e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004952:	2003      	movs	r0, #3
}
 8004954:	b002      	add	sp, #8
 8004956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 800495a:	9a01      	ldr	r2, [sp, #4]
      count--;
 800495c:	9b01      	ldr	r3, [sp, #4]
      if(count == 0U)
 800495e:	2a00      	cmp	r2, #0
      count--;
 8004960:	f103 33ff 	add.w	r3, r3, #4294967295
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	bf08      	it	eq
 8004968:	4615      	moveq	r5, r2
 800496a:	e7b9      	b.n	80048e0 <SPI_WaitFlagStateUntilTimeout+0x28>
 800496c:	2000004c 	.word	0x2000004c

08004970 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	4699      	mov	r9, r3
 8004976:	4688      	mov	r8, r1
 8004978:	4617      	mov	r7, r2
 800497a:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800497c:	f7fc ff55 	bl	800182a <HAL_GetTick>
 8004980:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8004982:	444d      	add	r5, r9
 8004984:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004986:	f7fc ff50 	bl	800182a <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800498a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a34 <SPI_WaitFifoStateUntilTimeout+0xc4>)
 800498c:	681e      	ldr	r6, [r3, #0]
 800498e:	2323      	movs	r3, #35	@ 0x23
 8004990:	435e      	muls	r6, r3
 8004992:	0d36      	lsrs	r6, r6, #20
 8004994:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8004996:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004998:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800499a:	6822      	ldr	r2, [r4, #0]
 800499c:	6893      	ldr	r3, [r2, #8]
 800499e:	ea03 0308 	and.w	r3, r3, r8
 80049a2:	42bb      	cmp	r3, r7
 80049a4:	d101      	bne.n	80049aa <SPI_WaitFifoStateUntilTimeout+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 80049a6:	2000      	movs	r0, #0
 80049a8:	e037      	b.n	8004a1a <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049aa:	f5b8 6fc0 	cmp.w	r8, #1536	@ 0x600
 80049ae:	d104      	bne.n	80049ba <SPI_WaitFifoStateUntilTimeout+0x4a>
 80049b0:	b91f      	cbnz	r7, 80049ba <SPI_WaitFifoStateUntilTimeout+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80049b2:	7b13      	ldrb	r3, [r2, #12]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 80049b8:	9b00      	ldr	r3, [sp, #0]
    if (Timeout != HAL_MAX_DELAY)
 80049ba:	f1b9 3fff 	cmp.w	r9, #4294967295
 80049be:	d0ed      	beq.n	800499c <SPI_WaitFifoStateUntilTimeout+0x2c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049c0:	f7fc ff33 	bl	800182a <HAL_GetTick>
 80049c4:	eba0 000a 	sub.w	r0, r0, sl
 80049c8:	4285      	cmp	r5, r0
 80049ca:	d829      	bhi.n	8004a20 <SPI_WaitFifoStateUntilTimeout+0xb0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049d4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d6:	6862      	ldr	r2, [r4, #4]
 80049d8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80049dc:	d10a      	bne.n	80049f4 <SPI_WaitFifoStateUntilTimeout+0x84>
 80049de:	68a2      	ldr	r2, [r4, #8]
 80049e0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80049e4:	d002      	beq.n	80049ec <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049e6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80049ea:	d103      	bne.n	80049f4 <SPI_WaitFifoStateUntilTimeout+0x84>
          __HAL_SPI_DISABLE(hspi);
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049f2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049f4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80049f6:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80049fa:	d107      	bne.n	8004a0c <SPI_WaitFifoStateUntilTimeout+0x9c>
          SPI_RESET_CRC(hspi);
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a0a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004a12:	2300      	movs	r3, #0
 8004a14:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004a18:	2003      	movs	r0, #3
}
 8004a1a:	b002      	add	sp, #8
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8004a20:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004a22:	9b01      	ldr	r3, [sp, #4]
      if(count == 0U)
 8004a24:	2a00      	cmp	r2, #0
      count--;
 8004a26:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	bf08      	it	eq
 8004a2e:	4615      	moveq	r5, r2
 8004a30:	e7b3      	b.n	800499a <SPI_WaitFifoStateUntilTimeout+0x2a>
 8004a32:	bf00      	nop
 8004a34:	2000004c 	.word	0x2000004c

08004a38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	9200      	str	r2, [sp, #0]
{
 8004a3e:	460d      	mov	r5, r1
 8004a40:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a42:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a46:	2200      	movs	r2, #0
{
 8004a48:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a4a:	f7ff ff91 	bl	8004970 <SPI_WaitFifoStateUntilTimeout>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	b130      	cbz	r0, 8004a60 <SPI_EndRxTxTransaction+0x28>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a52:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004a54:	f043 0320 	orr.w	r3, r3, #32
 8004a58:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a5a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004a5c:	b002      	add	sp, #8
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a60:	9600      	str	r6, [sp, #0]
 8004a62:	462b      	mov	r3, r5
 8004a64:	2180      	movs	r1, #128	@ 0x80
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7ff ff26 	bl	80048b8 <SPI_WaitFlagStateUntilTimeout>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d1ef      	bne.n	8004a52 <SPI_EndRxTxTransaction+0x1a>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a72:	9600      	str	r6, [sp, #0]
 8004a74:	462b      	mov	r3, r5
 8004a76:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7ff ff78 	bl	8004970 <SPI_WaitFifoStateUntilTimeout>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d0eb      	beq.n	8004a5c <SPI_EndRxTxTransaction+0x24>
 8004a84:	e7e5      	b.n	8004a52 <SPI_EndRxTxTransaction+0x1a>

08004a86 <HAL_SPI_MspInit>:
}
 8004a86:	4770      	bx	lr

08004a88 <HAL_SPI_Init>:
{
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d07a      	beq.n	8004b86 <HAL_SPI_Init+0xfe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a90:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d150      	bne.n	8004b38 <HAL_SPI_Init+0xb0>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a96:	6842      	ldr	r2, [r0, #4]
 8004a98:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004a9c:	d000      	beq.n	8004aa0 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a9e:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aa0:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004aa4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004aa8:	b923      	cbnz	r3, 8004ab4 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8004aaa:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7ff ffe9 	bl	8004a86 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004ab4:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ab6:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004abe:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ac0:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8004ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ac8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	d937      	bls.n	8004b40 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ad0:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ad2:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad6:	bf18      	it	ne
 8004ad8:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ada:	68a7      	ldr	r7, [r4, #8]
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	69a1      	ldr	r1, [r4, #24]
 8004ae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ae2:	f407 4704 	and.w	r7, r7, #33792	@ 0x8400
 8004ae6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8004aea:	433b      	orrs	r3, r7
 8004aec:	6927      	ldr	r7, [r4, #16]
 8004aee:	f007 0702 	and.w	r7, r7, #2
 8004af2:	433b      	orrs	r3, r7
 8004af4:	6967      	ldr	r7, [r4, #20]
 8004af6:	f007 0701 	and.w	r7, r7, #1
 8004afa:	433b      	orrs	r3, r7
 8004afc:	f401 7700 	and.w	r7, r1, #512	@ 0x200
 8004b00:	433b      	orrs	r3, r7
 8004b02:	69e7      	ldr	r7, [r4, #28]
 8004b04:	f007 0738 	and.w	r7, r7, #56	@ 0x38
 8004b08:	433b      	orrs	r3, r7
 8004b0a:	6a27      	ldr	r7, [r4, #32]
 8004b0c:	f007 0780 	and.w	r7, r7, #128	@ 0x80
 8004b10:	433b      	orrs	r3, r7
 8004b12:	f406 5700 	and.w	r7, r6, #8192	@ 0x2000
 8004b16:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b18:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b1c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b1e:	d114      	bne.n	8004b4a <HAL_SPI_Init+0xc2>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004b20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004b22:	bb6b      	cbnz	r3, 8004b80 <HAL_SPI_Init+0xf8>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b24:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8004b28:	d90d      	bls.n	8004b46 <HAL_SPI_Init+0xbe>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	6323      	str	r3, [r4, #48]	@ 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e008      	b.n	8004b4a <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b38:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b3e:	e7af      	b.n	8004aa0 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b40:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8004b44:	e7c7      	b.n	8004ad6 <HAL_SPI_Init+0x4e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004b46:	2301      	movs	r3, #1
 8004b48:	6323      	str	r3, [r4, #48]	@ 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b4c:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	f007 0708 	and.w	r7, r7, #8
 8004b56:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8004b5a:	433b      	orrs	r3, r7
 8004b5c:	0c09      	lsrs	r1, r1, #16
 8004b5e:	4303      	orrs	r3, r0
 8004b60:	f001 0104 	and.w	r1, r1, #4
 8004b64:	430b      	orrs	r3, r1
 8004b66:	432b      	orrs	r3, r5
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b68:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b6c:	6053      	str	r3, [r2, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004b6e:	bf04      	itt	eq
 8004b70:	8da3      	ldrheq	r3, [r4, #44]	@ 0x2c
 8004b72:	6113      	streq	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b74:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004b76:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b78:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b7a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d1e2      	bne.n	8004b4a <HAL_SPI_Init+0xc2>
 8004b84:	e7d3      	b.n	8004b2e <HAL_SPI_Init+0xa6>
    return HAL_ERROR;
 8004b86:	2001      	movs	r0, #1
 8004b88:	e7f9      	b.n	8004b7e <HAL_SPI_Init+0xf6>

08004b8a <HAL_SPI_TransmitReceive>:
{
 8004b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	9305      	str	r3, [sp, #20]
  __HAL_LOCK(hspi);
 8004b96:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8004b9a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8004b9c:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 8004b9e:	2b01      	cmp	r3, #1
{
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	460e      	mov	r6, r1
  __HAL_LOCK(hspi);
 8004ba4:	f000 819b 	beq.w	8004ede <HAL_SPI_TransmitReceive+0x354>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004bae:	f7fc fe3c 	bl	800182a <HAL_GetTick>
  tmp_state           = hspi->State;
 8004bb2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bb6:	9a03      	ldr	r2, [sp, #12]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8004bb8:	e9d4 5100 	ldrd	r5, r1, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bbc:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8004bbe:	f8d5 a000 	ldr.w	sl, [r5]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8004bc2:	f8d5 b004 	ldr.w	fp, [r5, #4]
  tickstart = HAL_GetTick();
 8004bc6:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8004bc8:	b2d8      	uxtb	r0, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bca:	d00a      	beq.n	8004be2 <HAL_SPI_TransmitReceive+0x58>
 8004bcc:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8004bd0:	f040 8183 	bne.w	8004eda <HAL_SPI_TransmitReceive+0x350>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bd4:	68a3      	ldr	r3, [r4, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f040 817f 	bne.w	8004eda <HAL_SPI_TransmitReceive+0x350>
 8004bdc:	2804      	cmp	r0, #4
 8004bde:	f040 817c 	bne.w	8004eda <HAL_SPI_TransmitReceive+0x350>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004be2:	b106      	cbz	r6, 8004be6 <HAL_SPI_TransmitReceive+0x5c>
 8004be4:	b952      	cbnz	r2, 8004bfc <HAL_SPI_TransmitReceive+0x72>
    errorcode = HAL_ERROR;
 8004be6:	2501      	movs	r5, #1
  hspi->State = HAL_SPI_STATE_READY;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	b007      	add	sp, #28
 8004bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	d0f1      	beq.n	8004be6 <HAL_SPI_TransmitReceive+0x5c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c02:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c06:	6422      	str	r2, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c08:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c0a:	bf1c      	itt	ne
 8004c0c:	2305      	movne	r3, #5
 8004c0e:	f884 305d 	strbne.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxISR       = NULL;
 8004c16:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  hspi->RxXferCount = Size;
 8004c1c:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
  hspi->RxXferSize  = Size;
 8004c24:	f8a4 9044 	strh.w	r9, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c28:	63a6      	str	r6, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004c2a:	f8a4 903e 	strh.w	r9, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004c2e:	f8a4 903c 	strh.w	r9, [r4, #60]	@ 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c32:	d107      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0xba>
    SPI_RESET_CRC(hspi);
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004c42:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c44:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c46:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c48:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8004c4c:	d802      	bhi.n	8004c54 <HAL_SPI_TransmitReceive+0xca>
 8004c4e:	f1b9 0f01 	cmp.w	r9, #1
 8004c52:	d035      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x136>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c58:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c5a:	682b      	ldr	r3, [r5, #0]
 8004c5c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004c5e:	bf5e      	ittt	pl
 8004c60:	682b      	ldrpl	r3, [r5, #0]
 8004c62:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8004c66:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c68:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8004c6c:	d970      	bls.n	8004d50 <HAL_SPI_TransmitReceive+0x1c6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c6e:	b111      	cbz	r1, 8004c76 <HAL_SPI_TransmitReceive+0xec>
 8004c70:	f1b9 0f01 	cmp.w	r9, #1
 8004c74:	d107      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0xfc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c76:	f836 3b02 	ldrh.w	r3, [r6], #2
 8004c7a:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8004c7c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c7e:	63a6      	str	r6, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004c86:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c88:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	b9db      	cbnz	r3, 8004cc6 <HAL_SPI_TransmitReceive+0x13c>
 8004c8e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	b9bb      	cbnz	r3, 8004cc6 <HAL_SPI_TransmitReceive+0x13c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c9c:	f040 80ef 	bne.w	8004e7e <HAL_SPI_TransmitReceive+0x2f4>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f8cd 8000 	str.w	r8, [sp]
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff fe04 	bl	80048b8 <SPI_WaitFlagStateUntilTimeout>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	f000 80dc 	beq.w	8004e6e <HAL_SPI_TransmitReceive+0x2e4>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004cb6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004cb8:	f043 0302 	orr.w	r3, r3, #2
 8004cbc:	6623      	str	r3, [r4, #96]	@ 0x60
          goto error;
 8004cbe:	e045      	b.n	8004d4c <HAL_SPI_TransmitReceive+0x1c2>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cc4:	e7c8      	b.n	8004c58 <HAL_SPI_TransmitReceive+0xce>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	0790      	lsls	r0, r2, #30
 8004ccc:	d522      	bpl.n	8004d14 <HAL_SPI_TransmitReceive+0x18a>
 8004cce:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	b1fa      	cbz	r2, 8004d14 <HAL_SPI_TransmitReceive+0x18a>
 8004cd4:	b1ed      	cbz	r5, 8004d12 <HAL_SPI_TransmitReceive+0x188>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004cd8:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004cdc:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cde:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ce0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004ce2:	3a01      	subs	r2, #1
 8004ce4:	b292      	uxth	r2, r2
 8004ce6:	87e2      	strh	r2, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004ce8:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004cea:	b292      	uxth	r2, r2
 8004cec:	b98a      	cbnz	r2, 8004d12 <HAL_SPI_TransmitReceive+0x188>
 8004cee:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004cf0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004cf4:	d10d      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x188>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004cf6:	f01a 0f04 	tst.w	sl, #4
 8004cfa:	d106      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x180>
 8004cfc:	f01b 0f08 	tst.w	fp, #8
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004d00:	bf1e      	ittt	ne
 8004d02:	681a      	ldrne	r2, [r3, #0]
 8004d04:	f442 7200 	orrne.w	r2, r2, #512	@ 0x200
 8004d08:	601a      	strne	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d10:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 8004d12:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d14:	6899      	ldr	r1, [r3, #8]
 8004d16:	f011 0101 	ands.w	r1, r1, #1
 8004d1a:	d00f      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x1b2>
 8004d1c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8004d20:	b292      	uxth	r2, r2
 8004d22:	b15a      	cbz	r2, 8004d3c <HAL_SPI_TransmitReceive+0x1b2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d28:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d2c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004d2e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8004d3a:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d3c:	f7fc fd75 	bl	800182a <HAL_GetTick>
 8004d40:	eba0 0008 	sub.w	r0, r0, r8
 8004d44:	42b8      	cmp	r0, r7
 8004d46:	d39f      	bcc.n	8004c88 <HAL_SPI_TransmitReceive+0xfe>
 8004d48:	1c79      	adds	r1, r7, #1
 8004d4a:	d09d      	beq.n	8004c88 <HAL_SPI_TransmitReceive+0xfe>
        errorcode = HAL_TIMEOUT;
 8004d4c:	2503      	movs	r5, #3
 8004d4e:	e74b      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x5e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d50:	b111      	cbz	r1, 8004d58 <HAL_SPI_TransmitReceive+0x1ce>
 8004d52:	f1b9 0f01 	cmp.w	r9, #1
 8004d56:	d10b      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x1e6>
      if (hspi->TxXferCount > 1U)
 8004d58:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d909      	bls.n	8004d74 <HAL_SPI_TransmitReceive+0x1ea>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d60:	f836 3b02 	ldrh.w	r3, [r6], #2
 8004d64:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 8004d66:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d68:	63a6      	str	r6, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d6a:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004d70:	2501      	movs	r5, #1
 8004d72:	e05e      	b.n	8004e32 <HAL_SPI_TransmitReceive+0x2a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d74:	7833      	ldrb	r3, [r6, #0]
 8004d76:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 8004d78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d7e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004d80:	3b01      	subs	r3, #1
 8004d82:	e7f3      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x1e2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d84:	6821      	ldr	r1, [r4, #0]
 8004d86:	688b      	ldr	r3, [r1, #8]
 8004d88:	079a      	lsls	r2, r3, #30
 8004d8a:	d527      	bpl.n	8004ddc <HAL_SPI_TransmitReceive+0x252>
 8004d8c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	b323      	cbz	r3, 8004ddc <HAL_SPI_TransmitReceive+0x252>
 8004d92:	b315      	cbz	r5, 8004dda <HAL_SPI_TransmitReceive+0x250>
        if (hspi->TxXferCount > 1U)
 8004d94:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d96:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8004d98:	b292      	uxth	r2, r2
 8004d9a:	2a01      	cmp	r2, #1
 8004d9c:	d953      	bls.n	8004e46 <HAL_SPI_TransmitReceive+0x2bc>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d9e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004da2:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da4:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004da6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004da8:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004dae:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004db0:	6823      	ldr	r3, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004db2:	b292      	uxth	r2, r2
 8004db4:	b98a      	cbnz	r2, 8004dda <HAL_SPI_TransmitReceive+0x250>
 8004db6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004db8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004dbc:	d10d      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x250>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004dbe:	f01a 0f04 	tst.w	sl, #4
 8004dc2:	d106      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x248>
 8004dc4:	f01b 0f08 	tst.w	fp, #8
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004dc8:	bf1e      	ittt	ne
 8004dca:	681a      	ldrne	r2, [r3, #0]
 8004dcc:	f442 7200 	orrne.w	r2, r2, #512	@ 0x200
 8004dd0:	601a      	strne	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004dd8:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 8004dda:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ddc:	6822      	ldr	r2, [r4, #0]
 8004dde:	6891      	ldr	r1, [r2, #8]
 8004de0:	f011 0101 	ands.w	r1, r1, #1
 8004de4:	d01d      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x298>
 8004de6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	b1cb      	cbz	r3, 8004e22 <HAL_SPI_TransmitReceive+0x298>
        if (hspi->RxXferCount > 1U)
 8004dee:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004df2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8004df4:	b280      	uxth	r0, r0
 8004df6:	2801      	cmp	r0, #1
 8004df8:	d92d      	bls.n	8004e56 <HAL_SPI_TransmitReceive+0x2cc>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dfa:	68d0      	ldr	r0, [r2, #12]
 8004dfc:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e00:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004e02:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004e06:	3b02      	subs	r3, #2
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004e0e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e16:	bf9e      	ittt	ls
 8004e18:	6853      	ldrls	r3, [r2, #4]
 8004e1a:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 8004e1e:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8004e20:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e22:	f7fc fd02 	bl	800182a <HAL_GetTick>
 8004e26:	eba0 0008 	sub.w	r0, r0, r8
 8004e2a:	42b8      	cmp	r0, r7
 8004e2c:	d301      	bcc.n	8004e32 <HAL_SPI_TransmitReceive+0x2a8>
 8004e2e:	1c7b      	adds	r3, r7, #1
 8004e30:	d18c      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x1c2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e32:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1a4      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x1fa>
 8004e3a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d19f      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x1fa>
 8004e44:	e727      	b.n	8004c96 <HAL_SPI_TransmitReceive+0x10c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 8004e4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004e50:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e52:	3b01      	subs	r3, #1
 8004e54:	e7a9      	b.n	8004daa <HAL_SPI_TransmitReceive+0x220>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e56:	7b12      	ldrb	r2, [r2, #12]
 8004e58:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8004e60:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8004e6c:	e7d8      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x296>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e6e:	68e2      	ldr	r2, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 8004e70:	6823      	ldr	r3, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e72:	f5b2 6f70 	cmp.w	r2, #3840	@ 0xf00
 8004e76:	d11a      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x324>
      tmpreg = READ_REG(hspi->Instance->DR);
 8004e78:	68db      	ldr	r3, [r3, #12]
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8004e7a:	9305      	str	r3, [sp, #20]
        UNUSED(tmpreg);
 8004e7c:	9b05      	ldr	r3, [sp, #20]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004e7e:	6822      	ldr	r2, [r4, #0]
 8004e80:	6895      	ldr	r5, [r2, #8]
 8004e82:	f015 0510 	ands.w	r5, r5, #16
 8004e86:	d007      	beq.n	8004e98 <HAL_SPI_TransmitReceive+0x30e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e88:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004e8a:	f043 0302 	orr.w	r3, r3, #2
 8004e8e:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004e90:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8004e94:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8004e96:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e98:	4642      	mov	r2, r8
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f7ff fdcb 	bl	8004a38 <SPI_EndRxTxTransaction>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	f43f aea0 	beq.w	8004be8 <HAL_SPI_TransmitReceive+0x5e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	6623      	str	r3, [r4, #96]	@ 0x60
 8004eac:	e69b      	b.n	8004be6 <HAL_SPI_TransmitReceive+0x5c>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8004eae:	7b1b      	ldrb	r3, [r3, #12]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	9305      	str	r3, [sp, #20]
      UNUSED(tmpreg);
 8004eb4:	9b05      	ldr	r3, [sp, #20]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004eb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d1e0      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x2f4>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f8cd 8000 	str.w	r8, [sp]
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff fcf6 	bl	80048b8 <SPI_WaitFlagStateUntilTimeout>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	f47f aef2 	bne.w	8004cb6 <HAL_SPI_TransmitReceive+0x12c>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	7b1b      	ldrb	r3, [r3, #12]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e7cf      	b.n	8004e7a <HAL_SPI_TransmitReceive+0x2f0>
    errorcode = HAL_BUSY;
 8004eda:	2502      	movs	r5, #2
 8004edc:	e684      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x5e>
  __HAL_LOCK(hspi);
 8004ede:	2502      	movs	r5, #2
 8004ee0:	e688      	b.n	8004bf4 <HAL_SPI_TransmitReceive+0x6a>

08004ee2 <HAL_SPI_GetState>:
  return hspi->State;
 8004ee2:	f890 005d 	ldrb.w	r0, [r0, #93]	@ 0x5d
}
 8004ee6:	4770      	bx	lr

08004ee8 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee8:	6803      	ldr	r3, [r0, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8004ef0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efa:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8004efc:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efe:	bf02      	ittt	eq
 8004f00:	681a      	ldreq	r2, [r3, #0]
 8004f02:	f022 0210 	biceq.w	r2, r2, #16
 8004f06:	601a      	streq	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f08:	2320      	movs	r3, #32
 8004f0a:	67c3      	str	r3, [r0, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f10:	6643      	str	r3, [r0, #100]	@ 0x64
}
 8004f12:	4770      	bx	lr

08004f14 <HAL_UART_Transmit_DMA>:
{
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	4604      	mov	r4, r0
 8004f18:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004f1a:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 8004f1c:	2e20      	cmp	r6, #32
 8004f1e:	d133      	bne.n	8004f88 <HAL_UART_Transmit_DMA+0x74>
    if ((pData == NULL) || (Size == 0U))
 8004f20:	b329      	cbz	r1, 8004f6e <HAL_UART_Transmit_DMA+0x5a>
 8004f22:	b322      	cbz	r2, 8004f6e <HAL_UART_Transmit_DMA+0x5a>
    __HAL_LOCK(huart);
 8004f24:	f894 2074 	ldrb.w	r2, [r4, #116]	@ 0x74
 8004f28:	2a01      	cmp	r2, #1
 8004f2a:	d02d      	beq.n	8004f88 <HAL_UART_Transmit_DMA+0x74>
 8004f2c:	2201      	movs	r2, #1
    if (huart->hdmatx != NULL)
 8004f2e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    __HAL_LOCK(huart);
 8004f30:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f34:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f36:	2221      	movs	r2, #33	@ 0x21
    huart->TxXferCount = Size;
 8004f38:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    huart->pTxBuffPtr  = pData;
 8004f3c:	64e1      	str	r1, [r4, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3e:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    huart->TxXferSize  = Size;
 8004f42:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f46:	67a2      	str	r2, [r4, #120]	@ 0x78
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004f48:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 8004f4a:	b190      	cbz	r0, 8004f72 <HAL_UART_Transmit_DMA+0x5e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f4c:	4f0f      	ldr	r7, [pc, #60]	@ (8004f8c <HAL_UART_Transmit_DMA+0x78>)
 8004f4e:	62c7      	str	r7, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f50:	4f0f      	ldr	r7, [pc, #60]	@ (8004f90 <HAL_UART_Transmit_DMA+0x7c>)
 8004f52:	6307      	str	r7, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f54:	4f0f      	ldr	r7, [pc, #60]	@ (8004f94 <HAL_UART_Transmit_DMA+0x80>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004f56:	3228      	adds	r2, #40	@ 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8004f58:	e9c0 750d 	strd	r7, r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004f5c:	f7fd ff66 	bl	8002e2c <HAL_DMA_Start_IT>
 8004f60:	b138      	cbz	r0, 8004f72 <HAL_UART_Transmit_DMA+0x5e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f62:	2310      	movs	r3, #16
 8004f64:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        __HAL_UNLOCK(huart);
 8004f68:	f884 5074 	strb.w	r5, [r4, #116]	@ 0x74
        huart->gState = HAL_UART_STATE_READY;
 8004f6c:	67a6      	str	r6, [r4, #120]	@ 0x78
      return HAL_ERROR;
 8004f6e:	2001      	movs	r0, #1
}
 8004f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	2240      	movs	r2, #64	@ 0x40
    __HAL_UNLOCK(huart);
 8004f76:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004f78:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8004f7a:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f84:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8004f86:	e7f3      	b.n	8004f70 <HAL_UART_Transmit_DMA+0x5c>
    __HAL_LOCK(huart);
 8004f88:	2002      	movs	r0, #2
 8004f8a:	e7f1      	b.n	8004f70 <HAL_UART_Transmit_DMA+0x5c>
 8004f8c:	08004f99 	.word	0x08004f99
 8004f90:	08004fc9 	.word	0x08004fc9
 8004f94:	08004fd5 	.word	0x08004fd5

08004f98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f98:	b508      	push	{r3, lr}
 8004f9a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f9c:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f013 0320 	ands.w	r3, r3, #32
 8004fa6:	d10b      	bne.n	8004fc0 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8004fa8:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fac:	6803      	ldr	r3, [r0, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fb4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fbc:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fbe:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004fc0:	f7fc fda6 	bl	8001b10 <HAL_UART_TxCpltCallback>
}
 8004fc4:	e7fb      	b.n	8004fbe <UART_DMATransmitCplt+0x26>

08004fc6 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8004fc6:	4770      	bx	lr

08004fc8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004fca:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004fcc:	f7ff fffb 	bl	8004fc6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd0:	bd08      	pop	{r3, pc}

08004fd2 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004fd2:	4770      	bx	lr

08004fd4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fd4:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004fd6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004fd8:	6f82      	ldr	r2, [r0, #120]	@ 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004fda:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
{
 8004fdc:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004fde:	689c      	ldr	r4, [r3, #8]
 8004fe0:	0624      	lsls	r4, r4, #24
 8004fe2:	d50a      	bpl.n	8004ffa <UART_DMAError+0x26>
 8004fe4:	2a21      	cmp	r2, #33	@ 0x21
 8004fe6:	d108      	bne.n	8004ffa <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004ff4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	6782      	str	r2, [r0, #120]	@ 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	065b      	lsls	r3, r3, #25
 8004ffe:	d506      	bpl.n	800500e <UART_DMAError+0x3a>
 8005000:	2922      	cmp	r1, #34	@ 0x22
 8005002:	d104      	bne.n	800500e <UART_DMAError+0x3a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800500a:	f7ff ff6d 	bl	8004ee8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800500e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8005012:	f043 0310 	orr.w	r3, r3, #16
 8005016:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800501a:	f7ff ffda 	bl	8004fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800501e:	bd10      	pop	{r4, pc}

08005020 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005020:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005022:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800502a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800502e:	f7ff ffd0 	bl	8004fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005032:	bd08      	pop	{r3, pc}

08005034 <HAL_UARTEx_RxEventCallback>:
}
 8005034:	4770      	bx	lr
	...

08005038 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005038:	6803      	ldr	r3, [r0, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800503c:	6819      	ldr	r1, [r3, #0]
{
 800503e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8005040:	f640 060f 	movw	r6, #2063	@ 0x80f
 8005044:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005046:	689d      	ldr	r5, [r3, #8]
{
 8005048:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800504a:	d109      	bne.n	8005060 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800504c:	0696      	lsls	r6, r2, #26
 800504e:	d57d      	bpl.n	800514c <HAL_UART_IRQHandler+0x114>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005050:	068e      	lsls	r6, r1, #26
 8005052:	d57b      	bpl.n	800514c <HAL_UART_IRQHandler+0x114>
      if (huart->RxISR != NULL)
 8005054:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8005056:	2b00      	cmp	r3, #0
 8005058:	d072      	beq.n	8005140 <HAL_UART_IRQHandler+0x108>
}
 800505a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800505e:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005060:	487a      	ldr	r0, [pc, #488]	@ (800524c <HAL_UART_IRQHandler+0x214>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005062:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005066:	4008      	ands	r0, r1
 8005068:	4330      	orrs	r0, r6
 800506a:	d06f      	beq.n	800514c <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800506c:	07d0      	lsls	r0, r2, #31
 800506e:	d509      	bpl.n	8005084 <HAL_UART_IRQHandler+0x4c>
 8005070:	05cd      	lsls	r5, r1, #23
 8005072:	d507      	bpl.n	8005084 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005074:	2001      	movs	r0, #1
 8005076:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005078:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800507c:	f040 0001 	orr.w	r0, r0, #1
 8005080:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005084:	0790      	lsls	r0, r2, #30
 8005086:	d508      	bpl.n	800509a <HAL_UART_IRQHandler+0x62>
 8005088:	b13e      	cbz	r6, 800509a <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800508a:	2002      	movs	r0, #2
 800508c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800508e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005092:	f040 0004 	orr.w	r0, r0, #4
 8005096:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800509a:	0755      	lsls	r5, r2, #29
 800509c:	d508      	bpl.n	80050b0 <HAL_UART_IRQHandler+0x78>
 800509e:	b13e      	cbz	r6, 80050b0 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050a0:	2004      	movs	r0, #4
 80050a2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050a4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80050a8:	f040 0002 	orr.w	r0, r0, #2
 80050ac:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050b0:	0710      	lsls	r0, r2, #28
 80050b2:	d50b      	bpl.n	80050cc <HAL_UART_IRQHandler+0x94>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050b4:	f001 0020 	and.w	r0, r1, #32
 80050b8:	4330      	orrs	r0, r6
 80050ba:	d007      	beq.n	80050cc <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050bc:	2008      	movs	r0, #8
 80050be:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050c0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80050c4:	f040 0008 	orr.w	r0, r0, #8
 80050c8:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050cc:	0516      	lsls	r6, r2, #20
 80050ce:	d50a      	bpl.n	80050e6 <HAL_UART_IRQHandler+0xae>
 80050d0:	014d      	lsls	r5, r1, #5
 80050d2:	d508      	bpl.n	80050e6 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80050d8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050da:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80050de:	f043 0320 	orr.w	r3, r3, #32
 80050e2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050e6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80050ea:	b34b      	cbz	r3, 8005140 <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050ec:	0690      	lsls	r0, r2, #26
 80050ee:	d505      	bpl.n	80050fc <HAL_UART_IRQHandler+0xc4>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050f0:	068a      	lsls	r2, r1, #26
 80050f2:	d503      	bpl.n	80050fc <HAL_UART_IRQHandler+0xc4>
        if (huart->RxISR != NULL)
 80050f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050f6:	b10b      	cbz	r3, 80050fc <HAL_UART_IRQHandler+0xc4>
          huart->RxISR(huart);
 80050f8:	4620      	mov	r0, r4
 80050fa:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050fc:	6821      	ldr	r1, [r4, #0]
      errorcode = huart->ErrorCode;
 80050fe:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005102:	688b      	ldr	r3, [r1, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005104:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510c:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8005110:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005112:	d016      	beq.n	8005142 <HAL_UART_IRQHandler+0x10a>
        UART_EndRxTransfer(huart);
 8005114:	f7ff fee8 	bl	8004ee8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	688b      	ldr	r3, [r1, #8]
 800511a:	065b      	lsls	r3, r3, #25
 800511c:	d50d      	bpl.n	800513a <HAL_UART_IRQHandler+0x102>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511e:	688b      	ldr	r3, [r1, #8]
          if (huart->hdmarx != NULL)
 8005120:	6f20      	ldr	r0, [r4, #112]	@ 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005126:	608b      	str	r3, [r1, #8]
          if (huart->hdmarx != NULL)
 8005128:	b138      	cbz	r0, 800513a <HAL_UART_IRQHandler+0x102>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800512a:	4b49      	ldr	r3, [pc, #292]	@ (8005250 <HAL_UART_IRQHandler+0x218>)
 800512c:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800512e:	f7fd fedc 	bl	8002eea <HAL_DMA_Abort_IT>
 8005132:	b128      	cbz	r0, 8005140 <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005134:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005136:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005138:	e78f      	b.n	800505a <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 800513a:	4620      	mov	r0, r4
 800513c:	f7ff ff49 	bl	8004fd2 <HAL_UART_ErrorCallback>
}
 8005140:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005142:	f7ff ff46 	bl	8004fd2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 800514a:	e7f9      	b.n	8005140 <HAL_UART_IRQHandler+0x108>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800514e:	2801      	cmp	r0, #1
 8005150:	d157      	bne.n	8005202 <HAL_UART_IRQHandler+0x1ca>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005152:	06d6      	lsls	r6, r2, #27
 8005154:	d555      	bpl.n	8005202 <HAL_UART_IRQHandler+0x1ca>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005156:	06c8      	lsls	r0, r1, #27
 8005158:	d553      	bpl.n	8005202 <HAL_UART_IRQHandler+0x1ca>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800515a:	2210      	movs	r2, #16
 800515c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 8005164:	d02e      	beq.n	80051c4 <HAL_UART_IRQHandler+0x18c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005166:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005168:	6801      	ldr	r1, [r0, #0]
 800516a:	684a      	ldr	r2, [r1, #4]
 800516c:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800516e:	2a00      	cmp	r2, #0
 8005170:	d0e6      	beq.n	8005140 <HAL_UART_IRQHandler+0x108>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005172:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 8005176:	4295      	cmp	r5, r2
 8005178:	d9e2      	bls.n	8005140 <HAL_UART_IRQHandler+0x108>
        huart->RxXferCount = nb_remaining_rx_data;
 800517a:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800517e:	680a      	ldr	r2, [r1, #0]
 8005180:	f012 0220 	ands.w	r2, r2, #32
 8005184:	d114      	bne.n	80051b0 <HAL_UART_IRQHandler+0x178>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005186:	6819      	ldr	r1, [r3, #0]
 8005188:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800518c:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518e:	6899      	ldr	r1, [r3, #8]
 8005190:	f021 0101 	bic.w	r1, r1, #1
 8005194:	6099      	str	r1, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005196:	6899      	ldr	r1, [r3, #8]
 8005198:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800519c:	6099      	str	r1, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 800519e:	2120      	movs	r1, #32
 80051a0:	67e1      	str	r1, [r4, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a2:	6622      	str	r2, [r4, #96]	@ 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	f022 0210 	bic.w	r2, r2, #16
 80051aa:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ac:	f7fd fe7c 	bl	8002ea8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051b0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80051b4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 80051b8:	1ac9      	subs	r1, r1, r3
 80051ba:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051bc:	4620      	mov	r0, r4
 80051be:	f7ff ff39 	bl	8005034 <HAL_UARTEx_RxEventCallback>
 80051c2:	e7bd      	b.n	8005140 <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051c4:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
      if (  (huart->RxXferCount > 0U)
 80051c8:	f8b4 505a 	ldrh.w	r5, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051cc:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
      if (  (huart->RxXferCount > 0U)
 80051d0:	b2ad      	uxth	r5, r5
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051d2:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80051d4:	2d00      	cmp	r5, #0
 80051d6:	d0b3      	beq.n	8005140 <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051d8:	1a09      	subs	r1, r1, r0
 80051da:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80051dc:	2900      	cmp	r1, #0
 80051de:	d0af      	beq.n	8005140 <HAL_UART_IRQHandler+0x108>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	f420 7090 	bic.w	r0, r0, #288	@ 0x120
 80051e6:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	6898      	ldr	r0, [r3, #8]
 80051ea:	f020 0001 	bic.w	r0, r0, #1
 80051ee:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80051f0:	2020      	movs	r0, #32
 80051f2:	67e0      	str	r0, [r4, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f4:	6622      	str	r2, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 80051f6:	6662      	str	r2, [r4, #100]	@ 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	f022 0210 	bic.w	r2, r2, #16
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e7dc      	b.n	80051bc <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005202:	02d6      	lsls	r6, r2, #11
 8005204:	d509      	bpl.n	800521a <HAL_UART_IRQHandler+0x1e2>
 8005206:	0268      	lsls	r0, r5, #9
 8005208:	d507      	bpl.n	800521a <HAL_UART_IRQHandler+0x1e2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800520a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800520e:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005216:	f000 bb1b 	b.w	8005850 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800521a:	0616      	lsls	r6, r2, #24
 800521c:	d506      	bpl.n	800522c <HAL_UART_IRQHandler+0x1f4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800521e:	060d      	lsls	r5, r1, #24
 8005220:	d504      	bpl.n	800522c <HAL_UART_IRQHandler+0x1f4>
    if (huart->TxISR != NULL)
 8005222:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005224:	2b00      	cmp	r3, #0
 8005226:	d08b      	beq.n	8005140 <HAL_UART_IRQHandler+0x108>
      huart->TxISR(huart);
 8005228:	4620      	mov	r0, r4
 800522a:	e716      	b.n	800505a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800522c:	0650      	lsls	r0, r2, #25
 800522e:	d587      	bpl.n	8005140 <HAL_UART_IRQHandler+0x108>
 8005230:	064a      	lsls	r2, r1, #25
 8005232:	d585      	bpl.n	8005140 <HAL_UART_IRQHandler+0x108>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800523a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800523c:	2320      	movs	r3, #32
 800523e:	67a3      	str	r3, [r4, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	66a3      	str	r3, [r4, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005244:	4620      	mov	r0, r4
 8005246:	f7fc fc63 	bl	8001b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800524a:	e779      	b.n	8005140 <HAL_UART_IRQHandler+0x108>
 800524c:	04000120 	.word	0x04000120
 8005250:	08005021 	.word	0x08005021

08005254 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005254:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 8005256:	f8b0 305c 	ldrh.w	r3, [r0, #92]	@ 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800525a:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800525c:	2922      	cmp	r1, #34	@ 0x22
{
 800525e:	b510      	push	{r4, lr}
 8005260:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005262:	d12d      	bne.n	80052c0 <UART_RxISR_8BIT+0x6c>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005264:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005266:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8005268:	400b      	ands	r3, r1
 800526a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800526c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800526e:	3301      	adds	r3, #1
 8005270:	6543      	str	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8005272:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
 8005276:	3b01      	subs	r3, #1
 8005278:	b29b      	uxth	r3, r3
 800527a:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800527e:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
 8005282:	b292      	uxth	r2, r2
 8005284:	b9c2      	cbnz	r2, 80052b8 <UART_RxISR_8BIT+0x64>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005286:	6803      	ldr	r3, [r0, #0]
 8005288:	6819      	ldr	r1, [r3, #0]
 800528a:	f421 7190 	bic.w	r1, r1, #288	@ 0x120
 800528e:	6019      	str	r1, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	f021 0101 	bic.w	r1, r1, #1
 8005296:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005298:	2120      	movs	r1, #32
 800529a:	67c1      	str	r1, [r0, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800529c:	6642      	str	r2, [r0, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529e:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80052a0:	2a01      	cmp	r2, #1
 80052a2:	d10a      	bne.n	80052ba <UART_RxISR_8BIT+0x66>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a4:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a6:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052aa:	f022 0210 	bic.w	r2, r2, #16
 80052ae:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b0:	f7ff fec0 	bl	8005034 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	2300      	movs	r3, #0
 80052b6:	6623      	str	r3, [r4, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052b8:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80052ba:	f7fc fc2f 	bl	8001b1c <HAL_UART_RxCpltCallback>
 80052be:	e7f9      	b.n	80052b4 <UART_RxISR_8BIT+0x60>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052c0:	8b13      	ldrh	r3, [r2, #24]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f043 0308 	orr.w	r3, r3, #8
 80052c8:	8313      	strh	r3, [r2, #24]
}
 80052ca:	e7f5      	b.n	80052b8 <UART_RxISR_8BIT+0x64>

080052cc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052cc:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 80052ce:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052d2:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052d4:	2a22      	cmp	r2, #34	@ 0x22
{
 80052d6:	b510      	push	{r4, lr}
 80052d8:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052da:	d12b      	bne.n	8005334 <UART_RxISR_16BIT+0x68>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052dc:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80052de:	4011      	ands	r1, r2
 80052e0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80052e2:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 80052e6:	6542      	str	r2, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 80052e8:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
 80052ec:	3a01      	subs	r2, #1
 80052ee:	b292      	uxth	r2, r2
 80052f0:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80052f4:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
 80052f8:	b292      	uxth	r2, r2
 80052fa:	b9ba      	cbnz	r2, 800532c <UART_RxISR_16BIT+0x60>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fc:	6819      	ldr	r1, [r3, #0]
 80052fe:	f421 7190 	bic.w	r1, r1, #288	@ 0x120
 8005302:	6019      	str	r1, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	f021 0101 	bic.w	r1, r1, #1
 800530a:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800530c:	2120      	movs	r1, #32
 800530e:	67c1      	str	r1, [r0, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005310:	6642      	str	r2, [r0, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005312:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8005314:	2a01      	cmp	r2, #1
 8005316:	d10a      	bne.n	800532e <UART_RxISR_16BIT+0x62>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800531a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531e:	f022 0210 	bic.w	r2, r2, #16
 8005322:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005324:	f7ff fe86 	bl	8005034 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005328:	2300      	movs	r3, #0
 800532a:	6623      	str	r3, [r4, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800532c:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800532e:	f7fc fbf5 	bl	8001b1c <HAL_UART_RxCpltCallback>
 8005332:	e7f9      	b.n	8005328 <UART_RxISR_16BIT+0x5c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005334:	8b1a      	ldrh	r2, [r3, #24]
 8005336:	b292      	uxth	r2, r2
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	831a      	strh	r2, [r3, #24]
}
 800533e:	e7f5      	b.n	800532c <UART_RxISR_16BIT+0x60>

08005340 <UART_SetConfig>:
{
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005344:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005346:	6921      	ldr	r1, [r4, #16]
 8005348:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800534a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800534c:	69c0      	ldr	r0, [r0, #28]
 800534e:	430a      	orrs	r2, r1
 8005350:	6961      	ldr	r1, [r4, #20]
 8005352:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005354:	497f      	ldr	r1, [pc, #508]	@ (8005554 <UART_SetConfig+0x214>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005356:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005358:	4029      	ands	r1, r5
 800535a:	430a      	orrs	r2, r1
 800535c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68e1      	ldr	r1, [r4, #12]
 8005362:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800536a:	4a7b      	ldr	r2, [pc, #492]	@ (8005558 <UART_SetConfig+0x218>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800536c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800536e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8005370:	bf1c      	itt	ne
 8005372:	6a22      	ldrne	r2, [r4, #32]
 8005374:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005380:	4a76      	ldr	r2, [pc, #472]	@ (800555c <UART_SetConfig+0x21c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d113      	bne.n	80053ae <UART_SetConfig+0x6e>
 8005386:	4b76      	ldr	r3, [pc, #472]	@ (8005560 <UART_SetConfig+0x220>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	2b02      	cmp	r3, #2
 8005392:	f000 80b9 	beq.w	8005508 <UART_SetConfig+0x1c8>
 8005396:	2b03      	cmp	r3, #3
 8005398:	d01e      	beq.n	80053d8 <UART_SetConfig+0x98>
 800539a:	2b01      	cmp	r3, #1
 800539c:	f040 80bc 	bne.w	8005518 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80053a4:	f040 80a7 	bne.w	80054f6 <UART_SetConfig+0x1b6>
        pclk = HAL_RCC_GetSysClockFreq();
 80053a8:	f7fe f880 	bl	80034ac <HAL_RCC_GetSysClockFreq>
        break;
 80053ac:	e0b9      	b.n	8005522 <UART_SetConfig+0x1e2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ae:	4a6d      	ldr	r2, [pc, #436]	@ (8005564 <UART_SetConfig+0x224>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d118      	bne.n	80053e6 <UART_SetConfig+0xa6>
 80053b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005560 <UART_SetConfig+0x220>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b08      	cmp	r3, #8
 80053c0:	f000 80a2 	beq.w	8005508 <UART_SetConfig+0x1c8>
 80053c4:	d806      	bhi.n	80053d4 <UART_SetConfig+0x94>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8098 	beq.w	80054fc <UART_SetConfig+0x1bc>
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d0e7      	beq.n	80053a0 <UART_SetConfig+0x60>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d0:	2001      	movs	r0, #1
 80053d2:	e053      	b.n	800547c <UART_SetConfig+0x13c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d1fb      	bne.n	80053d0 <UART_SetConfig+0x90>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80053dc:	f000 80a3 	beq.w	8005526 <UART_SetConfig+0x1e6>
        pclk = (uint32_t) LSE_VALUE;
 80053e0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80053e4:	e077      	b.n	80054d6 <UART_SetConfig+0x196>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e6:	4a60      	ldr	r2, [pc, #384]	@ (8005568 <UART_SetConfig+0x228>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10e      	bne.n	800540a <UART_SetConfig+0xca>
 80053ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005560 <UART_SetConfig+0x220>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	f000 8086 	beq.w	8005508 <UART_SetConfig+0x1c8>
 80053fc:	d803      	bhi.n	8005406 <UART_SetConfig+0xc6>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d07c      	beq.n	80054fc <UART_SetConfig+0x1bc>
 8005402:	2b10      	cmp	r3, #16
 8005404:	e7e3      	b.n	80053ce <UART_SetConfig+0x8e>
 8005406:	2b30      	cmp	r3, #48	@ 0x30
 8005408:	e7e5      	b.n	80053d6 <UART_SetConfig+0x96>
 800540a:	4a58      	ldr	r2, [pc, #352]	@ (800556c <UART_SetConfig+0x22c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d10d      	bne.n	800542c <UART_SetConfig+0xec>
 8005410:	4b53      	ldr	r3, [pc, #332]	@ (8005560 <UART_SetConfig+0x220>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005416:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800541a:	2b80      	cmp	r3, #128	@ 0x80
 800541c:	d074      	beq.n	8005508 <UART_SetConfig+0x1c8>
 800541e:	d803      	bhi.n	8005428 <UART_SetConfig+0xe8>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d06b      	beq.n	80054fc <UART_SetConfig+0x1bc>
 8005424:	2b40      	cmp	r3, #64	@ 0x40
 8005426:	e7d2      	b.n	80053ce <UART_SetConfig+0x8e>
 8005428:	2bc0      	cmp	r3, #192	@ 0xc0
 800542a:	e7d4      	b.n	80053d6 <UART_SetConfig+0x96>
 800542c:	4a50      	ldr	r2, [pc, #320]	@ (8005570 <UART_SetConfig+0x230>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d110      	bne.n	8005454 <UART_SetConfig+0x114>
 8005432:	4b4b      	ldr	r3, [pc, #300]	@ (8005560 <UART_SetConfig+0x220>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800543c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005440:	d062      	beq.n	8005508 <UART_SetConfig+0x1c8>
 8005442:	d804      	bhi.n	800544e <UART_SetConfig+0x10e>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d059      	beq.n	80054fc <UART_SetConfig+0x1bc>
 8005448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800544c:	e7bf      	b.n	80053ce <UART_SetConfig+0x8e>
 800544e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005452:	e7c0      	b.n	80053d6 <UART_SetConfig+0x96>
 8005454:	4a40      	ldr	r2, [pc, #256]	@ (8005558 <UART_SetConfig+0x218>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d1ba      	bne.n	80053d0 <UART_SetConfig+0x90>
 800545a:	4b41      	ldr	r3, [pc, #260]	@ (8005560 <UART_SetConfig+0x220>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005460:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005468:	d015      	beq.n	8005496 <UART_SetConfig+0x156>
 800546a:	d80b      	bhi.n	8005484 <UART_SetConfig+0x144>
 800546c:	b183      	cbz	r3, 8005490 <UART_SetConfig+0x150>
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005472:	d1ad      	bne.n	80053d0 <UART_SetConfig+0x90>
        pclk = HAL_RCC_GetSysClockFreq();
 8005474:	f7fe f81a 	bl	80034ac <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005478:	b970      	cbnz	r0, 8005498 <UART_SetConfig+0x158>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800547a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800547c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800547e:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
}
 8005482:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005484:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005488:	d1a2      	bne.n	80053d0 <UART_SetConfig+0x90>
 800548a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800548e:	e003      	b.n	8005498 <UART_SetConfig+0x158>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005490:	f7fe fb74 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
        break;
 8005494:	e7f0      	b.n	8005478 <UART_SetConfig+0x138>
        pclk = (uint32_t) HSI_VALUE;
 8005496:	4837      	ldr	r0, [pc, #220]	@ (8005574 <UART_SetConfig+0x234>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005498:	6862      	ldr	r2, [r4, #4]
 800549a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800549e:	4283      	cmp	r3, r0
 80054a0:	d896      	bhi.n	80053d0 <UART_SetConfig+0x90>
 80054a2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80054a6:	d893      	bhi.n	80053d0 <UART_SetConfig+0x90>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054a8:	0851      	lsrs	r1, r2, #1
 80054aa:	2300      	movs	r3, #0
 80054ac:	468c      	mov	ip, r1
 80054ae:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80054b2:	4619      	mov	r1, r3
 80054b4:	fbe0 c105 	umlal	ip, r1, r0, r5
 80054b8:	4660      	mov	r0, ip
 80054ba:	f7fb f8f9 	bl	80006b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054be:	4b2e      	ldr	r3, [pc, #184]	@ (8005578 <UART_SetConfig+0x238>)
 80054c0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d883      	bhi.n	80053d0 <UART_SetConfig+0x90>
          huart->Instance->BRR = usartdiv;
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	60d8      	str	r0, [r3, #12]
 80054cc:	e7d5      	b.n	800547a <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ce:	f7fe fb55 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d0d1      	beq.n	800547a <UART_SetConfig+0x13a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054d6:	6862      	ldr	r2, [r4, #4]
 80054d8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80054dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80054e0:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e2:	f1a3 0110 	sub.w	r1, r3, #16
 80054e6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80054ea:	4291      	cmp	r1, r2
 80054ec:	f63f af70 	bhi.w	80053d0 <UART_SetConfig+0x90>
        huart->Instance->BRR = usartdiv;
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	60d3      	str	r3, [r2, #12]
 80054f4:	e7c1      	b.n	800547a <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetSysClockFreq();
 80054f6:	f7fd ffd9 	bl	80034ac <HAL_RCC_GetSysClockFreq>
        break;
 80054fa:	e7ea      	b.n	80054d2 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005500:	d1e5      	bne.n	80054ce <UART_SetConfig+0x18e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005502:	f7fe fb3b 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
        break;
 8005506:	e00c      	b.n	8005522 <UART_SetConfig+0x1e2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005508:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800550c:	4819      	ldr	r0, [pc, #100]	@ (8005574 <UART_SetConfig+0x234>)
 800550e:	d1e2      	bne.n	80054d6 <UART_SetConfig+0x196>
 8005510:	e009      	b.n	8005526 <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005512:	f7fe fb45 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
        break;
 8005516:	e7dc      	b.n	80054d2 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005518:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800551c:	d1f9      	bne.n	8005512 <UART_SetConfig+0x1d2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800551e:	f7fe fb3f 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005522:	2800      	cmp	r0, #0
 8005524:	d0a9      	beq.n	800547a <UART_SetConfig+0x13a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005526:	6862      	ldr	r2, [r4, #4]
 8005528:	0853      	lsrs	r3, r2, #1
 800552a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800552e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005532:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005534:	f1a2 0010 	sub.w	r0, r2, #16
 8005538:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 800553c:	4288      	cmp	r0, r1
 800553e:	f63f af47 	bhi.w	80053d0 <UART_SetConfig+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005542:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 8005546:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005548:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800554a:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800554e:	4313      	orrs	r3, r2
 8005550:	60cb      	str	r3, [r1, #12]
 8005552:	e792      	b.n	800547a <UART_SetConfig+0x13a>
 8005554:	efff69f3 	.word	0xefff69f3
 8005558:	40008000 	.word	0x40008000
 800555c:	40013800 	.word	0x40013800
 8005560:	40021000 	.word	0x40021000
 8005564:	40004400 	.word	0x40004400
 8005568:	40004800 	.word	0x40004800
 800556c:	40004c00 	.word	0x40004c00
 8005570:	40005000 	.word	0x40005000
 8005574:	00f42400 	.word	0x00f42400
 8005578:	000ffcff 	.word	0x000ffcff

0800557c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800557c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800557e:	07da      	lsls	r2, r3, #31
{
 8005580:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005582:	d506      	bpl.n	8005592 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005584:	6801      	ldr	r1, [r0, #0]
 8005586:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005588:	684a      	ldr	r2, [r1, #4]
 800558a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800558e:	4322      	orrs	r2, r4
 8005590:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005592:	079c      	lsls	r4, r3, #30
 8005594:	d506      	bpl.n	80055a4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005596:	6801      	ldr	r1, [r0, #0]
 8005598:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800559a:	684a      	ldr	r2, [r1, #4]
 800559c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80055a0:	4322      	orrs	r2, r4
 80055a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a4:	0759      	lsls	r1, r3, #29
 80055a6:	d506      	bpl.n	80055b6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055a8:	6801      	ldr	r1, [r0, #0]
 80055aa:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80055ac:	684a      	ldr	r2, [r1, #4]
 80055ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055b2:	4322      	orrs	r2, r4
 80055b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055b6:	071a      	lsls	r2, r3, #28
 80055b8:	d506      	bpl.n	80055c8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ba:	6801      	ldr	r1, [r0, #0]
 80055bc:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80055be:	684a      	ldr	r2, [r1, #4]
 80055c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055c4:	4322      	orrs	r2, r4
 80055c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c8:	06dc      	lsls	r4, r3, #27
 80055ca:	d506      	bpl.n	80055da <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055cc:	6801      	ldr	r1, [r0, #0]
 80055ce:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80055d0:	688a      	ldr	r2, [r1, #8]
 80055d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055d6:	4322      	orrs	r2, r4
 80055d8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055da:	0699      	lsls	r1, r3, #26
 80055dc:	d506      	bpl.n	80055ec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055de:	6801      	ldr	r1, [r0, #0]
 80055e0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80055e2:	688a      	ldr	r2, [r1, #8]
 80055e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055e8:	4322      	orrs	r2, r4
 80055ea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055ec:	065a      	lsls	r2, r3, #25
 80055ee:	d50f      	bpl.n	8005610 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055f0:	6801      	ldr	r1, [r0, #0]
 80055f2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80055f4:	684a      	ldr	r2, [r1, #4]
 80055f6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80055fa:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055fc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005600:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005602:	d105      	bne.n	8005610 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005604:	684a      	ldr	r2, [r1, #4]
 8005606:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005608:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800560c:	4322      	orrs	r2, r4
 800560e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005610:	061b      	lsls	r3, r3, #24
 8005612:	d506      	bpl.n	8005622 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005614:	6802      	ldr	r2, [r0, #0]
 8005616:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005618:	6853      	ldr	r3, [r2, #4]
 800561a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800561e:	430b      	orrs	r3, r1
 8005620:	6053      	str	r3, [r2, #4]
}
 8005622:	bd10      	pop	{r4, pc}

08005624 <UART_WaitOnFlagUntilTimeout>:
{
 8005624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800562c:	4605      	mov	r5, r0
 800562e:	460f      	mov	r7, r1
 8005630:	4616      	mov	r6, r2
 8005632:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005634:	682a      	ldr	r2, [r5, #0]
 8005636:	69d3      	ldr	r3, [r2, #28]
 8005638:	ea37 0303 	bics.w	r3, r7, r3
 800563c:	bf0c      	ite	eq
 800563e:	2301      	moveq	r3, #1
 8005640:	2300      	movne	r3, #0
 8005642:	42b3      	cmp	r3, r6
 8005644:	d001      	beq.n	800564a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005646:	2000      	movs	r0, #0
 8005648:	e01b      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800564a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800564e:	d0f2      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005650:	f7fc f8eb 	bl	800182a <HAL_GetTick>
 8005654:	682c      	ldr	r4, [r5, #0]
 8005656:	eba0 0008 	sub.w	r0, r0, r8
 800565a:	4548      	cmp	r0, r9
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800565c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565e:	d802      	bhi.n	8005666 <UART_WaitOnFlagUntilTimeout+0x42>
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	d10f      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005666:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800566a:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566c:	68a3      	ldr	r3, [r4, #8]
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005674:	2320      	movs	r3, #32
 8005676:	67ab      	str	r3, [r5, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005678:	67eb      	str	r3, [r5, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800567a:	2300      	movs	r3, #0
 800567c:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
        return HAL_TIMEOUT;
 8005680:	2003      	movs	r0, #3
}
 8005682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005686:	075a      	lsls	r2, r3, #29
 8005688:	d5d4      	bpl.n	8005634 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800568a:	69e3      	ldr	r3, [r4, #28]
 800568c:	051b      	lsls	r3, r3, #20
 800568e:	d5d1      	bpl.n	8005634 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005690:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005694:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800569c:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569e:	68a3      	ldr	r3, [r4, #8]
 80056a0:	f023 0301 	bic.w	r3, r3, #1
 80056a4:	60a3      	str	r3, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 80056a6:	2320      	movs	r3, #32
 80056a8:	67ab      	str	r3, [r5, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056aa:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ac:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          return HAL_TIMEOUT;
 80056b0:	e7e3      	b.n	800567a <UART_WaitOnFlagUntilTimeout+0x56>

080056b2 <UART_CheckIdleState>:
{
 80056b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056b4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b6:	2600      	movs	r6, #0
 80056b8:	f8c0 6080 	str.w	r6, [r0, #128]	@ 0x80
  tickstart = HAL_GetTick();
 80056bc:	f7fc f8b5 	bl	800182a <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80056c6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056c8:	d416      	bmi.n	80056f8 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	075b      	lsls	r3, r3, #29
 80056d0:	d50a      	bpl.n	80056e8 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	2200      	movs	r2, #0
 80056da:	462b      	mov	r3, r5
 80056dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7ff ff9f 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 80056e6:	b998      	cbnz	r0, 8005710 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80056e8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80056ec:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UNLOCK(huart);
 80056ee:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80056f2:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f4:	6620      	str	r0, [r4, #96]	@ 0x60
  return HAL_OK;
 80056f6:	e00c      	b.n	8005712 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	4632      	mov	r2, r6
 8005700:	4603      	mov	r3, r0
 8005702:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005706:	4620      	mov	r0, r4
 8005708:	f7ff ff8c 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 800570c:	2800      	cmp	r0, #0
 800570e:	d0dc      	beq.n	80056ca <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005710:	2003      	movs	r0, #3
}
 8005712:	b002      	add	sp, #8
 8005714:	bd70      	pop	{r4, r5, r6, pc}

08005716 <HAL_UART_Init>:
{
 8005716:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005718:	4604      	mov	r4, r0
 800571a:	b340      	cbz	r0, 800576e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800571c:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800571e:	b91b      	cbnz	r3, 8005728 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005720:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    HAL_UART_MspInit(huart);
 8005724:	f7fc f8e8 	bl	80018f8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005728:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800572a:	2324      	movs	r3, #36	@ 0x24
 800572c:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UART_DISABLE(huart);
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005736:	4620      	mov	r0, r4
 8005738:	f7ff fe02 	bl	8005340 <UART_SetConfig>
 800573c:	2801      	cmp	r0, #1
 800573e:	d016      	beq.n	800576e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005740:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005742:	b113      	cbz	r3, 800574a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005744:	4620      	mov	r0, r4
 8005746:	f7ff ff19 	bl	800557c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800575a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005762:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800576a:	f7ff bfa2 	b.w	80056b2 <UART_CheckIdleState>
}
 800576e:	2001      	movs	r0, #1
 8005770:	bd10      	pop	{r4, pc}
	...

08005774 <UART_Start_Receive_IT>:
{
 8005774:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8005776:	6541      	str	r1, [r0, #84]	@ 0x54
  UART_MASK_COMPUTATION(huart);
 8005778:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 800577a:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 800577e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
{
 8005782:	4603      	mov	r3, r0
  huart->RxXferCount = Size;
 8005784:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
  UART_MASK_COMPUTATION(huart);
 8005788:	d123      	bne.n	80057d2 <UART_Start_Receive_IT+0x5e>
 800578a:	6902      	ldr	r2, [r0, #16]
 800578c:	2a00      	cmp	r2, #0
 800578e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005792:	bf18      	it	ne
 8005794:	22ff      	movne	r2, #255	@ 0xff
 8005796:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	2200      	movs	r2, #0
 800579c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057a0:	2222      	movs	r2, #34	@ 0x22
 80057a2:	67da      	str	r2, [r3, #124]	@ 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	6890      	ldr	r0, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a8:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ac:	f040 0001 	orr.w	r0, r0, #1
 80057b0:	6090      	str	r0, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b2:	d120      	bne.n	80057f6 <UART_Start_Receive_IT+0x82>
 80057b4:	691c      	ldr	r4, [r3, #16]
    huart->RxISR = UART_RxISR_16BIT;
 80057b6:	4911      	ldr	r1, [pc, #68]	@ (80057fc <UART_Start_Receive_IT+0x88>)
 80057b8:	4811      	ldr	r0, [pc, #68]	@ (8005800 <UART_Start_Receive_IT+0x8c>)
 80057ba:	2c00      	cmp	r4, #0
 80057bc:	bf08      	it	eq
 80057be:	4601      	moveq	r1, r0
  __HAL_UNLOCK(huart);
 80057c0:	2000      	movs	r0, #0
 80057c2:	f883 0074 	strb.w	r0, [r3, #116]	@ 0x74
 80057c6:	6659      	str	r1, [r3, #100]	@ 0x64
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057c8:	6813      	ldr	r3, [r2, #0]
 80057ca:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80057d2:	b929      	cbnz	r1, 80057e0 <UART_Start_Receive_IT+0x6c>
 80057d4:	6902      	ldr	r2, [r0, #16]
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	bf14      	ite	ne
 80057da:	227f      	movne	r2, #127	@ 0x7f
 80057dc:	22ff      	moveq	r2, #255	@ 0xff
 80057de:	e7da      	b.n	8005796 <UART_Start_Receive_IT+0x22>
 80057e0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80057e4:	d105      	bne.n	80057f2 <UART_Start_Receive_IT+0x7e>
 80057e6:	6902      	ldr	r2, [r0, #16]
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	bf14      	ite	ne
 80057ec:	223f      	movne	r2, #63	@ 0x3f
 80057ee:	227f      	moveq	r2, #127	@ 0x7f
 80057f0:	e7d1      	b.n	8005796 <UART_Start_Receive_IT+0x22>
 80057f2:	2200      	movs	r2, #0
 80057f4:	e7cf      	b.n	8005796 <UART_Start_Receive_IT+0x22>
    huart->RxISR = UART_RxISR_8BIT;
 80057f6:	4901      	ldr	r1, [pc, #4]	@ (80057fc <UART_Start_Receive_IT+0x88>)
 80057f8:	e7e2      	b.n	80057c0 <UART_Start_Receive_IT+0x4c>
 80057fa:	bf00      	nop
 80057fc:	08005255 	.word	0x08005255
 8005800:	080052cd 	.word	0x080052cd

08005804 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005804:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005806:	2b20      	cmp	r3, #32
{
 8005808:	b410      	push	{r4}
  if (huart->RxState == HAL_UART_STATE_READY)
 800580a:	d11d      	bne.n	8005848 <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 800580c:	b1c1      	cbz	r1, 8005840 <HAL_UART_Receive_IT+0x3c>
 800580e:	b1ba      	cbz	r2, 8005840 <HAL_UART_Receive_IT+0x3c>
    __HAL_LOCK(huart);
 8005810:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 8005814:	2b01      	cmp	r3, #1
 8005816:	d017      	beq.n	8005848 <HAL_UART_Receive_IT+0x44>
 8005818:	2301      	movs	r3, #1
 800581a:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005820:	4c0a      	ldr	r4, [pc, #40]	@ (800584c <HAL_UART_Receive_IT+0x48>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	6603      	str	r3, [r0, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005824:	6803      	ldr	r3, [r0, #0]
 8005826:	42a3      	cmp	r3, r4
 8005828:	d006      	beq.n	8005838 <HAL_UART_Receive_IT+0x34>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800582a:	685c      	ldr	r4, [r3, #4]
 800582c:	0224      	lsls	r4, r4, #8
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800582e:	bf42      	ittt	mi
 8005830:	681c      	ldrmi	r4, [r3, #0]
 8005832:	f044 6480 	orrmi.w	r4, r4, #67108864	@ 0x4000000
 8005836:	601c      	strmi	r4, [r3, #0]
}
 8005838:	f85d 4b04 	ldr.w	r4, [sp], #4
    return(UART_Start_Receive_IT(huart, pData, Size));
 800583c:	f7ff bf9a 	b.w	8005774 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8005840:	2001      	movs	r0, #1
}
 8005842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005846:	4770      	bx	lr
    __HAL_LOCK(huart);
 8005848:	2002      	movs	r0, #2
 800584a:	e7fa      	b.n	8005842 <HAL_UART_Receive_IT+0x3e>
 800584c:	40008000 	.word	0x40008000

08005850 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005850:	4770      	bx	lr

08005852 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005852:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005854:	ab04      	add	r3, sp, #16
 8005856:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800585a:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800585e:	2b01      	cmp	r3, #1
{
 8005860:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005862:	d038      	beq.n	80058d6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>
 8005864:	2301      	movs	r3, #1
 8005866:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74

  huart->gState = HAL_UART_STATE_BUSY;
 800586a:	2324      	movs	r3, #36	@ 0x24
 800586c:	6783      	str	r3, [r0, #120]	@ 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800586e:	6803      	ldr	r3, [r0, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f022 0201 	bic.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800587e:	430a      	orrs	r2, r1
 8005880:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005882:	b971      	cbnz	r1, 80058a2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x50>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800588a:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800588e:	f022 0210 	bic.w	r2, r2, #16
 8005892:	4302      	orrs	r2, r0
 8005894:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800589c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80058a0:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80058aa:	f7fb ffbe 	bl	800182a <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ae:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
  tickstart = HAL_GetTick();
 80058b2:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b4:	9200      	str	r2, [sp, #0]
 80058b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058ba:	2200      	movs	r2, #0
 80058bc:	4620      	mov	r0, r4
 80058be:	f7ff feb1 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 80058c2:	b930      	cbnz	r0, 80058d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80058c4:	2320      	movs	r3, #32
 80058c6:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UNLOCK(huart);
 80058c8:	2300      	movs	r3, #0
 80058ca:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
}
 80058ce:	b004      	add	sp, #16
 80058d0:	bd10      	pop	{r4, pc}
    status = HAL_TIMEOUT;
 80058d2:	2003      	movs	r0, #3
 80058d4:	e7f8      	b.n	80058c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x76>
  __HAL_LOCK(huart);
 80058d6:	2002      	movs	r0, #2
 80058d8:	e7f9      	b.n	80058ce <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>

080058da <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80058da:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74
 80058de:	2a01      	cmp	r2, #1
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80058e0:	bf1c      	itt	ne
 80058e2:	6801      	ldrne	r1, [r0, #0]
 80058e4:	680a      	ldrne	r2, [r1, #0]
{
 80058e6:	4603      	mov	r3, r0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80058e8:	bf1f      	itttt	ne
 80058ea:	f042 0202 	orrne.w	r2, r2, #2
  __HAL_UNLOCK(huart);
 80058ee:	2000      	movne	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80058f0:	600a      	strne	r2, [r1, #0]
  __HAL_UNLOCK(huart);
 80058f2:	f883 0074 	strbne.w	r0, [r3, #116]	@ 0x74
  __HAL_LOCK(huart);
 80058f6:	bf08      	it	eq
 80058f8:	2002      	moveq	r0, #2
}
 80058fa:	4770      	bx	lr

080058fc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80058fc:	b510      	push	{r4, lr}
    memset1( ctx->X, 0, sizeof ctx->X );
 80058fe:	2210      	movs	r2, #16
{
 8005900:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8005902:	2100      	movs	r1, #0
 8005904:	30f1      	adds	r0, #241	@ 0xf1
 8005906:	f005 ff0b 	bl	800b720 <memset1>
    ctx->M_n = 0;
 800590a:	2100      	movs	r1, #0
 800590c:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8005910:	4620      	mov	r0, r4
 8005912:	22f0      	movs	r2, #240	@ 0xf0
}
 8005914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8005918:	f005 bf02 	b.w	800b720 <memset1>

0800591c <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800591c:	4602      	mov	r2, r0
 800591e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8005920:	2110      	movs	r1, #16
 8005922:	f000 b9a5 	b.w	8005c70 <lorawan_aes_set_key>

08005926 <AES_CMAC_Update>:
}

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8005926:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800592a:	4604      	mov	r4, r0
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800592c:	f8d0 0114 	ldr.w	r0, [r0, #276]	@ 0x114
{
 8005930:	b085      	sub	sp, #20
 8005932:	460e      	mov	r6, r1
 8005934:	4615      	mov	r5, r2
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8005936:	f204 1901 	addw	r9, r4, #257	@ 0x101
    if( ctx->M_n > 0 )
 800593a:	b388      	cbz	r0, 80059a0 <AES_CMAC_Update+0x7a>
        mlen = MIN( 16 - ctx->M_n, len );
 800593c:	f1c0 0810 	rsb	r8, r0, #16
 8005940:	4590      	cmp	r8, r2
 8005942:	4647      	mov	r7, r8
 8005944:	bf28      	it	cs
 8005946:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8005948:	b2ba      	uxth	r2, r7
 800594a:	4448      	add	r0, r9
 800594c:	f005 fed4 	bl	800b6f8 <memcpy1>
        ctx->M_n += mlen;
 8005950:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 8005954:	443b      	add	r3, r7
        if( ctx->M_n < 16 || len == mlen )
 8005956:	2b0f      	cmp	r3, #15
        ctx->M_n += mlen;
 8005958:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800595c:	d92d      	bls.n	80059ba <AES_CMAC_Update+0x94>
 800595e:	45a8      	cmp	r8, r5
 8005960:	d22b      	bcs.n	80059ba <AES_CMAC_Update+0x94>
 8005962:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8005966:	f504 7180 	add.w	r1, r4, #256	@ 0x100
            return;
        XOR( ctx->M_last, ctx->X );
 800596a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800596e:	7c18      	ldrb	r0, [r3, #16]
 8005970:	428b      	cmp	r3, r1
 8005972:	ea82 0200 	eor.w	r2, r2, r0
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	d1f7      	bne.n	800596a <AES_CMAC_Update+0x44>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800597a:	f104 08f1 	add.w	r8, r4, #241	@ 0xf1
 800597e:	2210      	movs	r2, #16
 8005980:	4641      	mov	r1, r8
 8005982:	4668      	mov	r0, sp
 8005984:	f005 feb8 	bl	800b6f8 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8005988:	4622      	mov	r2, r4
 800598a:	4669      	mov	r1, sp
 800598c:	4668      	mov	r0, sp
 800598e:	f000 f9f1 	bl	8005d74 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8005992:	2210      	movs	r2, #16
 8005994:	4669      	mov	r1, sp
 8005996:	4640      	mov	r0, r8
 8005998:	f005 feae 	bl	800b6f8 <memcpy1>

        data += mlen;
 800599c:	443e      	add	r6, r7
        len -= mlen;
 800599e:	1bed      	subs	r5, r5, r7
 80059a0:	f504 7880 	add.w	r8, r4, #256	@ 0x100
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80059a4:	f104 07f1 	add.w	r7, r4, #241	@ 0xf1
    while( len > 16 )
 80059a8:	2d10      	cmp	r5, #16
 80059aa:	d809      	bhi.n	80059c0 <AES_CMAC_Update+0x9a>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80059ac:	b2aa      	uxth	r2, r5
 80059ae:	4631      	mov	r1, r6
 80059b0:	4648      	mov	r0, r9
 80059b2:	f005 fea1 	bl	800b6f8 <memcpy1>
    ctx->M_n = len;
 80059b6:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
}
 80059ba:	b005      	add	sp, #20
 80059bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059c0:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 80059c4:	1e71      	subs	r1, r6, #1
        XOR( data, ctx->X );
 80059c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80059ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80059ce:	4543      	cmp	r3, r8
 80059d0:	ea82 0200 	eor.w	r2, r2, r0
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	d1f6      	bne.n	80059c6 <AES_CMAC_Update+0xa0>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80059d8:	2210      	movs	r2, #16
 80059da:	4639      	mov	r1, r7
 80059dc:	4668      	mov	r0, sp
 80059de:	f005 fe8b 	bl	800b6f8 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80059e2:	4622      	mov	r2, r4
 80059e4:	4669      	mov	r1, sp
 80059e6:	4668      	mov	r0, sp
 80059e8:	f000 f9c4 	bl	8005d74 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80059ec:	2210      	movs	r2, #16
 80059ee:	4669      	mov	r1, sp
 80059f0:	4638      	mov	r0, r7
 80059f2:	f005 fe81 	bl	800b6f8 <memcpy1>
        data += 16;
 80059f6:	3610      	adds	r6, #16
        len -= 16;
 80059f8:	3d10      	subs	r5, #16
 80059fa:	e7d5      	b.n	80059a8 <AES_CMAC_Update+0x82>

080059fc <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80059fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fe:	b089      	sub	sp, #36	@ 0x24
 8005a00:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8005a02:	2210      	movs	r2, #16
 8005a04:	2100      	movs	r1, #0
{
 8005a06:	4605      	mov	r5, r0
    memset1( K, '\0', 16 );
 8005a08:	4668      	mov	r0, sp
 8005a0a:	f005 fe89 	bl	800b720 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8005a0e:	4622      	mov	r2, r4
 8005a10:	4669      	mov	r1, sp
 8005a12:	4668      	mov	r0, sp
 8005a14:	f000 f9ae 	bl	8005d74 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8005a18:	f99d 3000 	ldrsb.w	r3, [sp]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	466a      	mov	r2, sp
    {
        LSHIFT( K, K );
 8005a20:	f04f 0100 	mov.w	r1, #0
    if( K[0] & 0x80 )
 8005a24:	da43      	bge.n	8005aae <AES_CMAC_Final+0xb2>
        LSHIFT( K, K );
 8005a26:	7813      	ldrb	r3, [r2, #0]
 8005a28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005a2c:	3101      	adds	r1, #1
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8005a34:	290f      	cmp	r1, #15
 8005a36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a3a:	d1f4      	bne.n	8005a26 <AES_CMAC_Final+0x2a>
 8005a3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005a40:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
 8005a42:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
    }
    else
        LSHIFT( K, K );

    if( ctx->M_n == 16 )
 8005a46:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
        LSHIFT( K, K );
 8005a4a:	b2db      	uxtb	r3, r3
    if( ctx->M_n == 16 )
 8005a4c:	2810      	cmp	r0, #16
        K[15] ^= 0x87;
 8005a4e:	f88d 300f 	strb.w	r3, [sp, #15]
    if( ctx->M_n == 16 )
 8005a52:	d13b      	bne.n	8005acc <AES_CMAC_Final+0xd0>
 8005a54:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 8005a58:	4669      	mov	r1, sp
 8005a5a:	f504 7088 	add.w	r0, r4, #272	@ 0x110
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8005a5e:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8005a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a66:	4298      	cmp	r0, r3
 8005a68:	ea82 0206 	eor.w	r2, r2, r6
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	d1f6      	bne.n	8005a5e <AES_CMAC_Final+0x62>
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8005a70:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8005a74:	f504 7180 	add.w	r1, r4, #256	@ 0x100
 8005a78:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005a7c:	7c18      	ldrb	r0, [r3, #16]
 8005a7e:	428b      	cmp	r3, r1
 8005a80:	ea82 0200 	eor.w	r2, r2, r0
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	d1f7      	bne.n	8005a78 <AES_CMAC_Final+0x7c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8005a88:	2210      	movs	r2, #16
 8005a8a:	eb0d 0002 	add.w	r0, sp, r2
 8005a8e:	f104 01f1 	add.w	r1, r4, #241	@ 0xf1
 8005a92:	f005 fe31 	bl	800b6f8 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8005a96:	4622      	mov	r2, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	a804      	add	r0, sp, #16
 8005a9c:	f000 f96a 	bl	8005d74 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8005aa0:	2210      	movs	r2, #16
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4668      	mov	r0, sp
 8005aa6:	f005 fe3b 	bl	800b720 <memset1>
}
 8005aaa:	b009      	add	sp, #36	@ 0x24
 8005aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 8005aae:	7813      	ldrb	r3, [r2, #0]
 8005ab0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005ab4:	3101      	adds	r1, #1
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8005abc:	290f      	cmp	r1, #15
 8005abe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ac2:	d1f4      	bne.n	8005aae <AES_CMAC_Final+0xb2>
 8005ac4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	e7bc      	b.n	8005a46 <AES_CMAC_Final+0x4a>
        if( K[0] & 0x80 )
 8005acc:	f99d 3000 	ldrsb.w	r3, [sp]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	466a      	mov	r2, sp
            LSHIFT( K, K );
 8005ad4:	f04f 0100 	mov.w	r1, #0
        if( K[0] & 0x80 )
 8005ad8:	da37      	bge.n	8005b4a <AES_CMAC_Final+0x14e>
            LSHIFT( K, K );
 8005ada:	7813      	ldrb	r3, [r2, #0]
 8005adc:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8005ae0:	3101      	adds	r1, #1
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
 8005ae8:	290f      	cmp	r1, #15
 8005aea:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005aee:	d1f4      	bne.n	8005ada <AES_CMAC_Final+0xde>
 8005af0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005af4:	005b      	lsls	r3, r3, #1
            K[15] ^= 0x87;
 8005af6:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
            ctx->M_last[ctx->M_n] = 0;
 8005afa:	1c47      	adds	r7, r0, #1
            LSHIFT( K, K );
 8005afc:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 8005afe:	f88d 300f 	strb.w	r3, [sp, #15]
            ctx->M_last[ctx->M_n] = 0;
 8005b02:	2f10      	cmp	r7, #16
        ctx->M_last[ctx->M_n] = 0x80;
 8005b04:	eb04 0300 	add.w	r3, r4, r0
            ctx->M_last[ctx->M_n] = 0;
 8005b08:	f1c0 060f 	rsb	r6, r0, #15
        ctx->M_last[ctx->M_n] = 0x80;
 8005b0c:	f04f 0280 	mov.w	r2, #128	@ 0x80
            ctx->M_last[ctx->M_n] = 0;
 8005b10:	bf88      	it	hi
 8005b12:	2600      	movhi	r6, #0
 8005b14:	f500 7081 	add.w	r0, r0, #258	@ 0x102
        ctx->M_last[ctx->M_n] = 0x80;
 8005b18:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
            ctx->M_last[ctx->M_n] = 0;
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4632      	mov	r2, r6
 8005b20:	4420      	add	r0, r4
        while( ++ctx->M_n < 16 )
 8005b22:	443e      	add	r6, r7
            ctx->M_last[ctx->M_n] = 0;
 8005b24:	f007 fe20 	bl	800d768 <memset>
 8005b28:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
 8005b2c:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 8005b30:	4669      	mov	r1, sp
 8005b32:	f504 7088 	add.w	r0, r4, #272	@ 0x110
        XOR( K, ctx->M_last );
 8005b36:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8005b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b3e:	4298      	cmp	r0, r3
 8005b40:	ea82 0206 	eor.w	r2, r2, r6
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	d1f6      	bne.n	8005b36 <AES_CMAC_Final+0x13a>
 8005b48:	e792      	b.n	8005a70 <AES_CMAC_Final+0x74>
            LSHIFT( K, K );
 8005b4a:	7813      	ldrb	r3, [r2, #0]
 8005b4c:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8005b50:	3101      	adds	r1, #1
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
 8005b58:	290f      	cmp	r1, #15
 8005b5a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b5e:	d1f4      	bne.n	8005b4a <AES_CMAC_Final+0x14e>
 8005b60:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	e7c8      	b.n	8005afa <AES_CMAC_Final+0xfe>

08005b68 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8005b68:	780a      	ldrb	r2, [r1, #0]
 8005b6a:	7803      	ldrb	r3, [r0, #0]
 8005b6c:	4053      	eors	r3, r2
 8005b6e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8005b70:	784a      	ldrb	r2, [r1, #1]
 8005b72:	7843      	ldrb	r3, [r0, #1]
 8005b74:	4053      	eors	r3, r2
 8005b76:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8005b78:	788a      	ldrb	r2, [r1, #2]
 8005b7a:	7883      	ldrb	r3, [r0, #2]
 8005b7c:	4053      	eors	r3, r2
 8005b7e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8005b80:	78ca      	ldrb	r2, [r1, #3]
 8005b82:	78c3      	ldrb	r3, [r0, #3]
 8005b84:	4053      	eors	r3, r2
 8005b86:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8005b88:	790a      	ldrb	r2, [r1, #4]
 8005b8a:	7903      	ldrb	r3, [r0, #4]
 8005b8c:	4053      	eors	r3, r2
 8005b8e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8005b90:	794a      	ldrb	r2, [r1, #5]
 8005b92:	7943      	ldrb	r3, [r0, #5]
 8005b94:	4053      	eors	r3, r2
 8005b96:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8005b98:	798a      	ldrb	r2, [r1, #6]
 8005b9a:	7983      	ldrb	r3, [r0, #6]
 8005b9c:	4053      	eors	r3, r2
 8005b9e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8005ba0:	79ca      	ldrb	r2, [r1, #7]
 8005ba2:	79c3      	ldrb	r3, [r0, #7]
 8005ba4:	4053      	eors	r3, r2
 8005ba6:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8005ba8:	7a0a      	ldrb	r2, [r1, #8]
 8005baa:	7a03      	ldrb	r3, [r0, #8]
 8005bac:	4053      	eors	r3, r2
 8005bae:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8005bb0:	7a4a      	ldrb	r2, [r1, #9]
 8005bb2:	7a43      	ldrb	r3, [r0, #9]
 8005bb4:	4053      	eors	r3, r2
 8005bb6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8005bb8:	7a8a      	ldrb	r2, [r1, #10]
 8005bba:	7a83      	ldrb	r3, [r0, #10]
 8005bbc:	4053      	eors	r3, r2
 8005bbe:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8005bc0:	7aca      	ldrb	r2, [r1, #11]
 8005bc2:	7ac3      	ldrb	r3, [r0, #11]
 8005bc4:	4053      	eors	r3, r2
 8005bc6:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8005bc8:	7b0a      	ldrb	r2, [r1, #12]
 8005bca:	7b03      	ldrb	r3, [r0, #12]
 8005bcc:	4053      	eors	r3, r2
 8005bce:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8005bd0:	7b4a      	ldrb	r2, [r1, #13]
 8005bd2:	7b43      	ldrb	r3, [r0, #13]
 8005bd4:	4053      	eors	r3, r2
 8005bd6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8005bd8:	7b8a      	ldrb	r2, [r1, #14]
 8005bda:	7b83      	ldrb	r3, [r0, #14]
 8005bdc:	4053      	eors	r3, r2
 8005bde:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8005be0:	7bca      	ldrb	r2, [r1, #15]
 8005be2:	7bc3      	ldrb	r3, [r0, #15]
 8005be4:	4053      	eors	r3, r2
 8005be6:	73c3      	strb	r3, [r0, #15]
#endif
}
 8005be8:	4770      	bx	lr

08005bea <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8005bea:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8005bec:	780b      	ldrb	r3, [r1, #0]
 8005bee:	7814      	ldrb	r4, [r2, #0]
 8005bf0:	4063      	eors	r3, r4
 8005bf2:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8005bf4:	7854      	ldrb	r4, [r2, #1]
 8005bf6:	784b      	ldrb	r3, [r1, #1]
 8005bf8:	4063      	eors	r3, r4
 8005bfa:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8005bfc:	7894      	ldrb	r4, [r2, #2]
 8005bfe:	788b      	ldrb	r3, [r1, #2]
 8005c00:	4063      	eors	r3, r4
 8005c02:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8005c04:	78d4      	ldrb	r4, [r2, #3]
 8005c06:	78cb      	ldrb	r3, [r1, #3]
 8005c08:	4063      	eors	r3, r4
 8005c0a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8005c0c:	7914      	ldrb	r4, [r2, #4]
 8005c0e:	790b      	ldrb	r3, [r1, #4]
 8005c10:	4063      	eors	r3, r4
 8005c12:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8005c14:	7954      	ldrb	r4, [r2, #5]
 8005c16:	794b      	ldrb	r3, [r1, #5]
 8005c18:	4063      	eors	r3, r4
 8005c1a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8005c1c:	7994      	ldrb	r4, [r2, #6]
 8005c1e:	798b      	ldrb	r3, [r1, #6]
 8005c20:	4063      	eors	r3, r4
 8005c22:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8005c24:	79d4      	ldrb	r4, [r2, #7]
 8005c26:	79cb      	ldrb	r3, [r1, #7]
 8005c28:	4063      	eors	r3, r4
 8005c2a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8005c2c:	7a14      	ldrb	r4, [r2, #8]
 8005c2e:	7a0b      	ldrb	r3, [r1, #8]
 8005c30:	4063      	eors	r3, r4
 8005c32:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8005c34:	7a54      	ldrb	r4, [r2, #9]
 8005c36:	7a4b      	ldrb	r3, [r1, #9]
 8005c38:	4063      	eors	r3, r4
 8005c3a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8005c3c:	7a8b      	ldrb	r3, [r1, #10]
 8005c3e:	7a94      	ldrb	r4, [r2, #10]
 8005c40:	4063      	eors	r3, r4
 8005c42:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8005c44:	7ad4      	ldrb	r4, [r2, #11]
 8005c46:	7acb      	ldrb	r3, [r1, #11]
 8005c48:	4063      	eors	r3, r4
 8005c4a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8005c4c:	7b14      	ldrb	r4, [r2, #12]
 8005c4e:	7b0b      	ldrb	r3, [r1, #12]
 8005c50:	4063      	eors	r3, r4
 8005c52:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8005c54:	7b54      	ldrb	r4, [r2, #13]
 8005c56:	7b4b      	ldrb	r3, [r1, #13]
 8005c58:	4063      	eors	r3, r4
 8005c5a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8005c5c:	7b94      	ldrb	r4, [r2, #14]
 8005c5e:	7b8b      	ldrb	r3, [r1, #14]
 8005c60:	4063      	eors	r3, r4
 8005c62:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8005c64:	7bcb      	ldrb	r3, [r1, #15]
 8005c66:	7bd2      	ldrb	r2, [r2, #15]
 8005c68:	4053      	eors	r3, r2
 8005c6a:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8005c6c:	bd10      	pop	{r4, pc}
	...

08005c70 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8005c70:	f1a1 0310 	sub.w	r3, r1, #16
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b10      	cmp	r3, #16
{
 8005c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	4604      	mov	r4, r0
    switch( keylen )
 8005c7e:	d804      	bhi.n	8005c8a <lorawan_aes_set_key+0x1a>
 8005c80:	483a      	ldr	r0, [pc, #232]	@ (8005d6c <lorawan_aes_set_key+0xfc>)
 8005c82:	fa20 f303 	lsr.w	r3, r0, r3
 8005c86:	07db      	lsls	r3, r3, #31
 8005c88:	d405      	bmi.n	8005c96 <lorawan_aes_set_key+0x26>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        return ( uint8_t )-1;
 8005c90:	20ff      	movs	r0, #255	@ 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8005c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while( nn-- )
 8005c96:	1e56      	subs	r6, r2, #1
    switch( keylen )
 8005c98:	4625      	mov	r5, r4
        *d++ = *s++;
 8005c9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c9e:	f806 3f01 	strb.w	r3, [r6, #1]!
    while( nn-- )
 8005ca2:	1b63      	subs	r3, r4, r5
 8005ca4:	440b      	add	r3, r1
 8005ca6:	f013 00ff 	ands.w	r0, r3, #255	@ 0xff
 8005caa:	d1f6      	bne.n	8005c9a <lorawan_aes_set_key+0x2a>
    hi = (keylen + 28) << 2;
 8005cac:	f101 031c 	add.w	r3, r1, #28
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	fa5f fc83 	uxtb.w	ip, r3
    ctx->rnd = (hi >> 4) - 1;
 8005cb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005cba:	3b01      	subs	r3, #1
            t0 = s_box(t1) ^ rc;
 8005cbc:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8005d70 <lorawan_aes_set_key+0x100>
    ctx->rnd = (hi >> 4) - 1;
 8005cc0:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
 8005cc4:	4688      	mov	r8, r1
 8005cc6:	1853      	adds	r3, r2, r1
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8005cc8:	f04f 0e01 	mov.w	lr, #1
        if( cc % keylen == 0 )
 8005ccc:	fbb8 faf1 	udiv	sl, r8, r1
 8005cd0:	fb01 8a1a 	mls	sl, r1, sl, r8
 8005cd4:	f01a 0aff 	ands.w	sl, sl, #255	@ 0xff
        t0 = ctx->ksch[cc - 4];
 8005cd8:	f813 7c04 	ldrb.w	r7, [r3, #-4]
        t1 = ctx->ksch[cc - 3];
 8005cdc:	f813 6c03 	ldrb.w	r6, [r3, #-3]
        t2 = ctx->ksch[cc - 2];
 8005ce0:	f813 5c02 	ldrb.w	r5, [r3, #-2]
        t3 = ctx->ksch[cc - 1];
 8005ce4:	f813 4c01 	ldrb.w	r4, [r3, #-1]
        if( cc % keylen == 0 )
 8005ce8:	d130      	bne.n	8005d4c <lorawan_aes_set_key+0xdc>
            t0 = s_box(t1) ^ rc;
 8005cea:	f819 a006 	ldrb.w	sl, [r9, r6]
            t1 = s_box(t2);
 8005cee:	f819 6005 	ldrb.w	r6, [r9, r5]
            t2 = s_box(t3);
 8005cf2:	f819 5004 	ldrb.w	r5, [r9, r4]
            t3 = s_box(tt);
 8005cf6:	f819 4007 	ldrb.w	r4, [r9, r7]
            rc = f2(rc);
 8005cfa:	ea4f 17de 	mov.w	r7, lr, lsr #7
 8005cfe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
            t0 = s_box(t1) ^ rc;
 8005d02:	ea8e 0a0a 	eor.w	sl, lr, sl
            rc = f2(rc);
 8005d06:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8005d0a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8005d0e:	b2ff      	uxtb	r7, r7
 8005d10:	fa5f fe8e 	uxtb.w	lr, lr
 8005d14:	ea87 0e0e 	eor.w	lr, r7, lr
            t0 = s_box(t1) ^ rc;
 8005d18:	4657      	mov	r7, sl
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8005d1a:	f892 a000 	ldrb.w	sl, [r2]
 8005d1e:	ea87 070a 	eor.w	r7, r7, sl
 8005d22:	701f      	strb	r7, [r3, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8005d24:	7857      	ldrb	r7, [r2, #1]
 8005d26:	407e      	eors	r6, r7
 8005d28:	705e      	strb	r6, [r3, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8005d2a:	7896      	ldrb	r6, [r2, #2]
 8005d2c:	4075      	eors	r5, r6
 8005d2e:	709d      	strb	r5, [r3, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8005d30:	78d5      	ldrb	r5, [r2, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8005d32:	f108 0804 	add.w	r8, r8, #4
 8005d36:	fa5f f888 	uxtb.w	r8, r8
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8005d3a:	406c      	eors	r4, r5
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8005d3c:	45c4      	cmp	ip, r8
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8005d3e:	70dc      	strb	r4, [r3, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8005d40:	f102 0204 	add.w	r2, r2, #4
 8005d44:	f103 0304 	add.w	r3, r3, #4
 8005d48:	d8c0      	bhi.n	8005ccc <lorawan_aes_set_key+0x5c>
 8005d4a:	e7a2      	b.n	8005c92 <lorawan_aes_set_key+0x22>
        else if( keylen > 24 && cc % keylen == 16 )
 8005d4c:	2918      	cmp	r1, #24
 8005d4e:	d9e4      	bls.n	8005d1a <lorawan_aes_set_key+0xaa>
 8005d50:	f1ba 0f10 	cmp.w	sl, #16
 8005d54:	d1e1      	bne.n	8005d1a <lorawan_aes_set_key+0xaa>
            t0 = s_box(t0);
 8005d56:	f8df a018 	ldr.w	sl, [pc, #24]	@ 8005d70 <lorawan_aes_set_key+0x100>
 8005d5a:	f81a 7007 	ldrb.w	r7, [sl, r7]
            t1 = s_box(t1);
 8005d5e:	f81a 6006 	ldrb.w	r6, [sl, r6]
            t2 = s_box(t2);
 8005d62:	f81a 5005 	ldrb.w	r5, [sl, r5]
            t3 = s_box(t3);
 8005d66:	f81a 4004 	ldrb.w	r4, [sl, r4]
 8005d6a:	e7d6      	b.n	8005d1a <lorawan_aes_set_key+0xaa>
 8005d6c:	00010101 	.word	0x00010101
 8005d70:	0800d9f0 	.word	0x0800d9f0

08005d74 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8005d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	b0a1      	sub	sp, #132	@ 0x84
    if( ctx->rnd )
 8005d7a:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
{
 8005d7e:	911b      	str	r1, [sp, #108]	@ 0x6c
 8005d80:	920d      	str	r2, [sp, #52]	@ 0x34
    if( ctx->rnd )
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8168 	beq.w	800605a <lorawan_aes_encrypt+0x2e6>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	a81c      	add	r0, sp, #112	@ 0x70
 8005d8e:	f7ff ff2c 	bl	8005bea <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8005d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8005d94:	4cb2      	ldr	r4, [pc, #712]	@ (8006060 <lorawan_aes_encrypt+0x2ec>)
 8005d96:	3310      	adds	r3, #16
 8005d98:	9301      	str	r3, [sp, #4]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9302      	str	r3, [sp, #8]
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8005d9e:	9b01      	ldr	r3, [sp, #4]
 8005da0:	931a      	str	r3, [sp, #104]	@ 0x68
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005da2:	f89d 3074 	ldrb.w	r3, [sp, #116]	@ 0x74
 8005da6:	930e      	str	r3, [sp, #56]	@ 0x38
 8005da8:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 8005dac:	930f      	str	r3, [sp, #60]	@ 0x3c
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8005dae:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005db0:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8005db4:	5da6      	ldrb	r6, [r4, r6]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005db6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005db8:	5ce3      	ldrb	r3, [r4, r3]
 8005dba:	9303      	str	r3, [sp, #12]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8005dbc:	9604      	str	r6, [sp, #16]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005dbe:	f89d 3073 	ldrb.w	r3, [sp, #115]	@ 0x73
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8005dc2:	f89d 6078 	ldrb.w	r6, [sp, #120]	@ 0x78
 8005dc6:	9612      	str	r6, [sp, #72]	@ 0x48
 8005dc8:	f89d 607d 	ldrb.w	r6, [sp, #125]	@ 0x7d
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8005dcc:	f89d c070 	ldrb.w	ip, [sp, #112]	@ 0x70
 8005dd0:	f89d 7075 	ldrb.w	r7, [sp, #117]	@ 0x75
 8005dd4:	f89d 807a 	ldrb.w	r8, [sp, #122]	@ 0x7a
 8005dd8:	f89d e07f 	ldrb.w	lr, [sp, #127]	@ 0x7f
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005ddc:	5ce0      	ldrb	r0, [r4, r3]
 8005dde:	9311      	str	r3, [sp, #68]	@ 0x44
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8005de0:	9613      	str	r6, [sp, #76]	@ 0x4c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8005de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8005de4:	f89d 6072 	ldrb.w	r6, [sp, #114]	@ 0x72
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8005de8:	f814 5008 	ldrb.w	r5, [r4, r8]
 8005dec:	f814 100e 	ldrb.w	r1, [r4, lr]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8005df0:	f814 200c 	ldrb.w	r2, [r4, ip]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8005df4:	f814 a007 	ldrb.w	sl, [r4, r7]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8005df8:	5ce3      	ldrb	r3, [r4, r3]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8005dfa:	9614      	str	r6, [sp, #80]	@ 0x50
 8005dfc:	5da6      	ldrb	r6, [r4, r6]
 8005dfe:	9605      	str	r6, [sp, #20]
 8005e00:	f89d 6077 	ldrb.w	r6, [sp, #119]	@ 0x77
 8005e04:	9615      	str	r6, [sp, #84]	@ 0x54
 8005e06:	5da6      	ldrb	r6, [r4, r6]
 8005e08:	9606      	str	r6, [sp, #24]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8005e0a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8005e0c:	5da6      	ldrb	r6, [r4, r6]
 8005e0e:	9607      	str	r6, [sp, #28]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8005e10:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005e12:	5da6      	ldrb	r6, [r4, r6]
 8005e14:	9608      	str	r6, [sp, #32]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8005e16:	f89d 607c 	ldrb.w	r6, [sp, #124]	@ 0x7c
 8005e1a:	9616      	str	r6, [sp, #88]	@ 0x58
 8005e1c:	f89d 6071 	ldrb.w	r6, [sp, #113]	@ 0x71
 8005e20:	9617      	str	r6, [sp, #92]	@ 0x5c
 8005e22:	f89d 6076 	ldrb.w	r6, [sp, #118]	@ 0x76
 8005e26:	9618      	str	r6, [sp, #96]	@ 0x60
 8005e28:	5da6      	ldrb	r6, [r4, r6]
 8005e2a:	9609      	str	r6, [sp, #36]	@ 0x24
 8005e2c:	f89d 607b 	ldrb.w	r6, [sp, #123]	@ 0x7b
 8005e30:	9619      	str	r6, [sp, #100]	@ 0x64
 8005e32:	5da6      	ldrb	r6, [r4, r6]
 8005e34:	960a      	str	r6, [sp, #40]	@ 0x28
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8005e36:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8005e38:	5da6      	ldrb	r6, [r4, r6]
 8005e3a:	960b      	str	r6, [sp, #44]	@ 0x2c
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8005e3c:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8005e3e:	5da6      	ldrb	r6, [r4, r6]
 8005e40:	960c      	str	r6, [sp, #48]	@ 0x30
        for( r = 1 ; r < ctx->rnd ; ++r )
 8005e42:	9e02      	ldr	r6, [sp, #8]
 8005e44:	3601      	adds	r6, #1
 8005e46:	9602      	str	r6, [sp, #8]
 8005e48:	9e01      	ldr	r6, [sp, #4]
 8005e4a:	f89d 9008 	ldrb.w	r9, [sp, #8]
 8005e4e:	3610      	adds	r6, #16
 8005e50:	9601      	str	r6, [sp, #4]
 8005e52:	9e00      	ldr	r6, [sp, #0]
 8005e54:	454e      	cmp	r6, r9
 8005e56:	d834      	bhi.n	8005ec2 <lorawan_aes_encrypt+0x14e>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8005e58:	f88d 3074 	strb.w	r3, [sp, #116]	@ 0x74
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8005e5c:	9b07      	ldr	r3, [sp, #28]
 8005e5e:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8005e62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e64:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8005e68:	9b04      	ldr	r3, [sp, #16]
 8005e6a:	f88d 3075 	strb.w	r3, [sp, #117]	@ 0x75
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8005e6e:	9b08      	ldr	r3, [sp, #32]
 8005e70:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
 8005e74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e76:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8005e7a:	9b05      	ldr	r3, [sp, #20]
 8005e7c:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8005e80:	9b03      	ldr	r3, [sp, #12]
 8005e82:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
 8005e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e88:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8005e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e8e:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
 8005e92:	9b06      	ldr	r3, [sp, #24]
 8005e94:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8005e98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8005e9a:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8005e9e:	f88d 0077 	strb.w	r0, [sp, #119]	@ 0x77
 8005ea2:	f88d 1073 	strb.w	r1, [sp, #115]	@ 0x73
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8005ea6:	981b      	ldr	r0, [sp, #108]	@ 0x6c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8005ea8:	f88d a071 	strb.w	sl, [sp, #113]	@ 0x71
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8005eac:	eb03 1206 	add.w	r2, r3, r6, lsl #4
 8005eb0:	a91c      	add	r1, sp, #112	@ 0x70
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8005eb2:	f88d 5072 	strb.w	r5, [sp, #114]	@ 0x72
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8005eb6:	f7ff fe98 	bl	8005bea <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8005eba:	2000      	movs	r0, #0
}
 8005ebc:	b021      	add	sp, #132	@ 0x84
 8005ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8005ec2:	44a4      	add	ip, r4
 8005ec4:	4427      	add	r7, r4
 8005ec6:	f89c 9100 	ldrb.w	r9, [ip, #256]	@ 0x100
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005eca:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8005ecc:	ea85 0b01 	eor.w	fp, r5, r1
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8005ed0:	44a0      	add	r8, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8005ed2:	ea89 090b 	eor.w	r9, r9, fp
 8005ed6:	f897 b200 	ldrb.w	fp, [r7, #512]	@ 0x200
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8005eda:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
 8005ede:	4051      	eors	r1, r2
 8005ee0:	4079      	eors	r1, r7
 8005ee2:	f898 7200 	ldrb.w	r7, [r8, #512]	@ 0x200
 8005ee6:	4079      	eors	r1, r7
 8005ee8:	f88d 1071 	strb.w	r1, [sp, #113]	@ 0x71
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8005eec:	44a6      	add	lr, r4
 8005eee:	f898 1100 	ldrb.w	r1, [r8, #256]	@ 0x100
 8005ef2:	ea82 020a 	eor.w	r2, r2, sl
 8005ef6:	404a      	eors	r2, r1
 8005ef8:	f89e 1200 	ldrb.w	r1, [lr, #512]	@ 0x200
 8005efc:	404a      	eors	r2, r1
 8005efe:	f88d 2072 	strb.w	r2, [sp, #114]	@ 0x72
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8005f02:	f89c 2200 	ldrb.w	r2, [ip, #512]	@ 0x200
 8005f06:	f89e 1100 	ldrb.w	r1, [lr, #256]	@ 0x100
 8005f0a:	ea85 050a 	eor.w	r5, r5, sl
 8005f0e:	406a      	eors	r2, r5
 8005f10:	404a      	eors	r2, r1
 8005f12:	f88d 2073 	strb.w	r2, [sp, #115]	@ 0x73
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005f16:	4426      	add	r6, r4
 8005f18:	9a03      	ldr	r2, [sp, #12]
 8005f1a:	ea82 0100 	eor.w	r1, r2, r0
 8005f1e:	f896 2100 	ldrb.w	r2, [r6, #256]	@ 0x100
 8005f22:	404a      	eors	r2, r1
 8005f24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f26:	4421      	add	r1, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8005f28:	ea89 090b 	eor.w	r9, r9, fp
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005f2c:	f891 5200 	ldrb.w	r5, [r1, #512]	@ 0x200
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8005f30:	f88d 9070 	strb.w	r9, [sp, #112]	@ 0x70
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005f34:	406a      	eors	r2, r5
 8005f36:	f88d 2074 	strb.w	r2, [sp, #116]	@ 0x74
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8005f3a:	ea80 0203 	eor.w	r2, r0, r3
 8005f3e:	f891 0100 	ldrb.w	r0, [r1, #256]	@ 0x100
 8005f42:	4050      	eors	r0, r2
 8005f44:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005f46:	4422      	add	r2, r4
 8005f48:	f892 1200 	ldrb.w	r1, [r2, #512]	@ 0x200
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8005f4c:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8005f50:	4048      	eors	r0, r1
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8005f52:	9904      	ldr	r1, [sp, #16]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8005f54:	f88d 0075 	strb.w	r0, [sp, #117]	@ 0x75
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8005f58:	404b      	eors	r3, r1
 8005f5a:	4053      	eors	r3, r2
 8005f5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f5e:	4422      	add	r2, r4
 8005f60:	f892 1200 	ldrb.w	r1, [r2, #512]	@ 0x200
 8005f64:	404b      	eors	r3, r1
 8005f66:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8005f6a:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 8005f6e:	404b      	eors	r3, r1
 8005f70:	f896 1200 	ldrb.w	r1, [r6, #512]	@ 0x200
 8005f74:	4059      	eors	r1, r3
 8005f76:	f892 3100 	ldrb.w	r3, [r2, #256]	@ 0x100
 8005f7a:	4059      	eors	r1, r3
 8005f7c:	f88d 1077 	strb.w	r1, [sp, #119]	@ 0x77
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8005f80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f82:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8005f86:	4422      	add	r2, r4
 8005f88:	4059      	eors	r1, r3
 8005f8a:	f892 3100 	ldrb.w	r3, [r2, #256]	@ 0x100
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8005f8e:	f892 2200 	ldrb.w	r2, [r2, #512]	@ 0x200
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8005f92:	404b      	eors	r3, r1
 8005f94:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005f96:	4421      	add	r1, r4
 8005f98:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
 8005f9c:	4043      	eors	r3, r0
 8005f9e:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8005fa2:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8005fa6:	4058      	eors	r0, r3
 8005fa8:	f891 3100 	ldrb.w	r3, [r1, #256]	@ 0x100
 8005fac:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8005fae:	4421      	add	r1, r4
 8005fb0:	4043      	eors	r3, r0
 8005fb2:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8005fb6:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8005fba:	4043      	eors	r3, r0
 8005fbc:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8005fc0:	e9dd 3007 	ldrd	r3, r0, [sp, #28]
 8005fc4:	4043      	eors	r3, r0
 8005fc6:	404b      	eors	r3, r1
 8005fc8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8005fca:	4421      	add	r1, r4
 8005fcc:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
 8005fd0:	4043      	eors	r3, r0
 8005fd2:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8005fd6:	9808      	ldr	r0, [sp, #32]
 8005fd8:	9b05      	ldr	r3, [sp, #20]
 8005fda:	4043      	eors	r3, r0
 8005fdc:	405a      	eors	r2, r3
 8005fde:	f891 3100 	ldrb.w	r3, [r1, #256]	@ 0x100
 8005fe2:	405a      	eors	r2, r3
 8005fe4:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8005fe8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005fea:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	@ 0x24
 8005fee:	4422      	add	r2, r4
 8005ff0:	4059      	eors	r1, r3
 8005ff2:	f892 3100 	ldrb.w	r3, [r2, #256]	@ 0x100
 8005ff6:	404b      	eors	r3, r1
 8005ff8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005ffa:	4421      	add	r1, r4
 8005ffc:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
 8006000:	4043      	eors	r3, r0
 8006002:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8006006:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	@ 0x28
 800600a:	4058      	eors	r0, r3
 800600c:	f891 3100 	ldrb.w	r3, [r1, #256]	@ 0x100
 8006010:	9918      	ldr	r1, [sp, #96]	@ 0x60
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006012:	f892 2200 	ldrb.w	r2, [r2, #512]	@ 0x200
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8006016:	4421      	add	r1, r4
 8006018:	4043      	eors	r3, r0
 800601a:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800601e:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8006022:	4043      	eors	r3, r0
 8006024:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8006028:	e9dd 300b 	ldrd	r3, r0, [sp, #44]	@ 0x2c
 800602c:	4043      	eors	r3, r0
 800602e:	404b      	eors	r3, r1
 8006030:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8006032:	4421      	add	r1, r4
 8006034:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
 8006038:	4043      	eors	r3, r0
 800603a:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800603e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006042:	4043      	eors	r3, r0
 8006044:	4053      	eors	r3, r2
 8006046:	f891 2100 	ldrb.w	r2, [r1, #256]	@ 0x100
    xor_block(d, k);
 800604a:	991a      	ldr	r1, [sp, #104]	@ 0x68
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800604c:	4053      	eors	r3, r2
    xor_block(d, k);
 800604e:	a81c      	add	r0, sp, #112	@ 0x70
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006050:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
    xor_block(d, k);
 8006054:	f7ff fd88 	bl	8005b68 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006058:	e6a1      	b.n	8005d9e <lorawan_aes_encrypt+0x2a>
        return ( uint8_t )-1;
 800605a:	20ff      	movs	r0, #255	@ 0xff
 800605c:	e72e      	b.n	8005ebc <lorawan_aes_encrypt+0x148>
 800605e:	bf00      	nop
 8006060:	0800d9f0 	.word	0x0800d9f0

08006064 <SecureElementGetKeyByID>:
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8006064:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <SecureElementGetKeyByID+0x2c>)
 8006066:	681a      	ldr	r2, [r3, #0]
{
 8006068:	b570      	push	{r4, r5, r6, lr}
        if (SeNvm->KeyList[i].KeyID == keyID)
 800606a:	2300      	movs	r3, #0
 800606c:	f102 0510 	add.w	r5, r2, #16
 8006070:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8006074:	5d2e      	ldrb	r6, [r5, r4]
 8006076:	4286      	cmp	r6, r0
 8006078:	d104      	bne.n	8006084 <SecureElementGetKeyByID+0x20>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800607a:	3410      	adds	r4, #16
 800607c:	4422      	add	r2, r4
 800607e:	600a      	str	r2, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8006080:	2000      	movs	r0, #0
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8006082:	bd70      	pop	{r4, r5, r6, pc}
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8006084:	3301      	adds	r3, #1
 8006086:	2b0a      	cmp	r3, #10
 8006088:	d1f2      	bne.n	8006070 <SecureElementGetKeyByID+0xc>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800608a:	2003      	movs	r0, #3
 800608c:	e7f9      	b.n	8006082 <SecureElementGetKeyByID+0x1e>
 800608e:	bf00      	nop
 8006090:	200004d0 	.word	0x200004d0

08006094 <ComputeCmac>:
{
 8006094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006098:	b0cc      	sub	sp, #304	@ 0x130
 800609a:	4606      	mov	r6, r0
 800609c:	f8dd 8148 	ldr.w	r8, [sp, #328]	@ 0x148
 80060a0:	4617      	mov	r7, r2
 80060a2:	461c      	mov	r4, r3
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80060a4:	460d      	mov	r5, r1
 80060a6:	b331      	cbz	r1, 80060f6 <ComputeCmac+0x62>
 80060a8:	f1b8 0f00 	cmp.w	r8, #0
 80060ac:	d023      	beq.n	80060f6 <ComputeCmac+0x62>
    AES_CMAC_Init( aesCmacCtx );
 80060ae:	a806      	add	r0, sp, #24
 80060b0:	f7ff fc24 	bl	80058fc <AES_CMAC_Init>
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80060b4:	4620      	mov	r0, r4
 80060b6:	a901      	add	r1, sp, #4
 80060b8:	f7ff ffd4 	bl	8006064 <SecureElementGetKeyByID>
    if( retval == SECURE_ELEMENT_SUCCESS )
 80060bc:	4604      	mov	r4, r0
 80060be:	b9b0      	cbnz	r0, 80060ee <ComputeCmac+0x5a>
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80060c0:	9901      	ldr	r1, [sp, #4]
 80060c2:	a806      	add	r0, sp, #24
 80060c4:	3101      	adds	r1, #1
 80060c6:	f7ff fc29 	bl	800591c <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 80060ca:	b126      	cbz	r6, 80060d6 <ComputeCmac+0x42>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 80060cc:	2210      	movs	r2, #16
 80060ce:	4631      	mov	r1, r6
 80060d0:	a806      	add	r0, sp, #24
 80060d2:	f7ff fc28 	bl	8005926 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80060d6:	463a      	mov	r2, r7
 80060d8:	4629      	mov	r1, r5
 80060da:	a806      	add	r0, sp, #24
 80060dc:	f7ff fc23 	bl	8005926 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 80060e0:	a906      	add	r1, sp, #24
 80060e2:	a802      	add	r0, sp, #8
 80060e4:	f7ff fc8a 	bl	80059fc <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 80060e8:	9b02      	ldr	r3, [sp, #8]
 80060ea:	f8c8 3000 	str.w	r3, [r8]
}
 80060ee:	4620      	mov	r0, r4
 80060f0:	b04c      	add	sp, #304	@ 0x130
 80060f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80060f6:	2402      	movs	r4, #2
 80060f8:	e7f9      	b.n	80060ee <ComputeCmac+0x5a>
	...

080060fc <PrintKey>:
{
 80060fc:	b510      	push	{r4, lr}
 80060fe:	b092      	sub	sp, #72	@ 0x48
    retval = SecureElementGetKeyByID(key, &keyItem);
 8006100:	a911      	add	r1, sp, #68	@ 0x44
{
 8006102:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8006104:	f7ff ffae 	bl	8006064 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 8006108:	4602      	mov	r2, r0
 800610a:	2800      	cmp	r0, #0
 800610c:	d132      	bne.n	8006174 <PrintKey+0x78>
        if (key == APP_KEY)
 800610e:	2c02      	cmp	r4, #2
 8006110:	d034      	beq.n	800617c <PrintKey+0x80>
 8006112:	2c03      	cmp	r4, #3
 8006114:	d030      	beq.n	8006178 <PrintKey+0x7c>
 8006116:	2c01      	cmp	r4, #1
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8006118:	bf14      	ite	ne
 800611a:	4b1a      	ldrne	r3, [pc, #104]	@ (8006184 <PrintKey+0x88>)
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800611c:	4b1a      	ldreq	r3, [pc, #104]	@ (8006188 <PrintKey+0x8c>)
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800611e:	4611      	mov	r1, r2
 8006120:	2002      	movs	r0, #2
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8006122:	f006 fdf1 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006126:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006128:	7c1a      	ldrb	r2, [r3, #16]
 800612a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800612c:	7bda      	ldrb	r2, [r3, #15]
 800612e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006130:	7b9a      	ldrb	r2, [r3, #14]
 8006132:	920d      	str	r2, [sp, #52]	@ 0x34
 8006134:	7b5a      	ldrb	r2, [r3, #13]
 8006136:	920c      	str	r2, [sp, #48]	@ 0x30
 8006138:	7b1a      	ldrb	r2, [r3, #12]
 800613a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800613c:	7ada      	ldrb	r2, [r3, #11]
 800613e:	920a      	str	r2, [sp, #40]	@ 0x28
 8006140:	7a9a      	ldrb	r2, [r3, #10]
 8006142:	9209      	str	r2, [sp, #36]	@ 0x24
 8006144:	7a5a      	ldrb	r2, [r3, #9]
 8006146:	9208      	str	r2, [sp, #32]
 8006148:	7a1a      	ldrb	r2, [r3, #8]
 800614a:	9207      	str	r2, [sp, #28]
 800614c:	79da      	ldrb	r2, [r3, #7]
 800614e:	9206      	str	r2, [sp, #24]
 8006150:	799a      	ldrb	r2, [r3, #6]
 8006152:	9205      	str	r2, [sp, #20]
 8006154:	795a      	ldrb	r2, [r3, #5]
 8006156:	9204      	str	r2, [sp, #16]
 8006158:	791a      	ldrb	r2, [r3, #4]
 800615a:	9203      	str	r2, [sp, #12]
 800615c:	78da      	ldrb	r2, [r3, #3]
 800615e:	9202      	str	r2, [sp, #8]
 8006160:	789a      	ldrb	r2, [r3, #2]
 8006162:	9201      	str	r2, [sp, #4]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	2200      	movs	r2, #0
 800616a:	4b08      	ldr	r3, [pc, #32]	@ (800618c <PrintKey+0x90>)
 800616c:	4611      	mov	r1, r2
 800616e:	2002      	movs	r0, #2
 8006170:	f006 fdca 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
}
 8006174:	b012      	add	sp, #72	@ 0x48
 8006176:	bd10      	pop	{r4, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8006178:	4b05      	ldr	r3, [pc, #20]	@ (8006190 <PrintKey+0x94>)
 800617a:	e7d0      	b.n	800611e <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800617c:	4601      	mov	r1, r0
 800617e:	4b05      	ldr	r3, [pc, #20]	@ (8006194 <PrintKey+0x98>)
 8006180:	4620      	mov	r0, r4
 8006182:	e7ce      	b.n	8006122 <PrintKey+0x26>
 8006184:	0800e175 	.word	0x0800e175
 8006188:	0800e18a 	.word	0x0800e18a
 800618c:	0800e1c9 	.word	0x0800e1c9
 8006190:	0800e19f 	.word	0x0800e19f
 8006194:	0800e1b4 	.word	0x0800e1b4

08006198 <SecureElementInit>:
{
 8006198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619a:	b0b1      	sub	sp, #196	@ 0xc4
    SecureElementNvmData_t seNvmInit =
 800619c:	22b0      	movs	r2, #176	@ 0xb0
{
 800619e:	4604      	mov	r4, r0
 80061a0:	460d      	mov	r5, r1
    SecureElementNvmData_t seNvmInit =
 80061a2:	a804      	add	r0, sp, #16
 80061a4:	2100      	movs	r1, #0
 80061a6:	f007 fadf 	bl	800d768 <memset>
 80061aa:	4b25      	ldr	r3, [pc, #148]	@ (8006240 <SecureElementInit+0xa8>)
 80061ac:	466a      	mov	r2, sp
 80061ae:	f103 0c10 	add.w	ip, r3, #16
 80061b2:	4617      	mov	r7, r2
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	6859      	ldr	r1, [r3, #4]
 80061b8:	4616      	mov	r6, r2
 80061ba:	c603      	stmia	r6!, {r0, r1}
 80061bc:	3308      	adds	r3, #8
 80061be:	4563      	cmp	r3, ip
 80061c0:	4632      	mov	r2, r6
 80061c2:	d1f7      	bne.n	80061b4 <SecureElementInit+0x1c>
 80061c4:	491f      	ldr	r1, [pc, #124]	@ (8006244 <SecureElementInit+0xac>)
 80061c6:	2244      	movs	r2, #68	@ 0x44
 80061c8:	f10d 0011 	add.w	r0, sp, #17
 80061cc:	f007 faf8 	bl	800d7c0 <memcpy>
 80061d0:	237f      	movs	r3, #127	@ 0x7f
 80061d2:	f88d 3065 	strb.w	r3, [sp, #101]	@ 0x65
 80061d6:	2380      	movs	r3, #128	@ 0x80
 80061d8:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
 80061dc:	2381      	movs	r3, #129	@ 0x81
 80061de:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
 80061e2:	2382      	movs	r3, #130	@ 0x82
 80061e4:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 80061e8:	2383      	movs	r3, #131	@ 0x83
 80061ea:	f88d 30a9 	strb.w	r3, [sp, #169]	@ 0xa9
    if( nvm == NULL )
 80061ee:	b32c      	cbz	r4, 800623c <SecureElementInit+0xa4>
    SeNvm = nvm;
 80061f0:	4e15      	ldr	r6, [pc, #84]	@ (8006248 <SecureElementInit+0xb0>)
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 80061f2:	22c0      	movs	r2, #192	@ 0xc0
 80061f4:	4639      	mov	r1, r7
 80061f6:	4620      	mov	r0, r4
    SeNvm = nvm;
 80061f8:	6034      	str	r4, [r6, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 80061fa:	f005 fa7d 	bl	800b6f8 <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 80061fe:	2200      	movs	r2, #0
 8006200:	4611      	mov	r1, r2
 8006202:	4b12      	ldr	r3, [pc, #72]	@ (800624c <SecureElementInit+0xb4>)
 8006204:	2002      	movs	r0, #2
 8006206:	f006 fd7f 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800620a:	2000      	movs	r0, #0
 800620c:	f7ff ff76 	bl	80060fc <PrintKey>
    PrintKey(NWK_KEY);
 8006210:	2001      	movs	r0, #1
 8006212:	f7ff ff73 	bl	80060fc <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8006216:	2200      	movs	r2, #0
 8006218:	4b0d      	ldr	r3, [pc, #52]	@ (8006250 <SecureElementInit+0xb8>)
 800621a:	4611      	mov	r1, r2
 800621c:	2002      	movs	r0, #2
 800621e:	f006 fd73 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8006222:	2003      	movs	r0, #3
 8006224:	f7ff ff6a 	bl	80060fc <PrintKey>
    PrintKey(NWK_S_KEY);
 8006228:	2002      	movs	r0, #2
 800622a:	f7ff ff67 	bl	80060fc <PrintKey>
    if (seGetUniqueId != NULL)
 800622e:	b915      	cbnz	r5, 8006236 <SecureElementInit+0x9e>
    return SECURE_ELEMENT_SUCCESS;
 8006230:	2000      	movs	r0, #0
}
 8006232:	b031      	add	sp, #196	@ 0xc4
 8006234:	bdf0      	pop	{r4, r5, r6, r7, pc}
        seGetUniqueId(SeNvm->DevEui);
 8006236:	6830      	ldr	r0, [r6, #0]
 8006238:	47a8      	blx	r5
 800623a:	e7f9      	b.n	8006230 <SecureElementInit+0x98>
        return SECURE_ELEMENT_ERROR_NPE;
 800623c:	2002      	movs	r0, #2
 800623e:	e7f8      	b.n	8006232 <SecureElementInit+0x9a>
 8006240:	0800dcf0 	.word	0x0800dcf0
 8006244:	0800e245 	.word	0x0800e245
 8006248:	200004d0 	.word	0x200004d0
 800624c:	0800e21b 	.word	0x0800e21b
 8006250:	0800e230 	.word	0x0800e230

08006254 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 8006254:	b410      	push	{r4}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8006256:	2b7e      	cmp	r3, #126	@ 0x7e
{
 8006258:	9c01      	ldr	r4, [sp, #4]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800625a:	d804      	bhi.n	8006266 <SecureElementComputeAesCmac+0x12>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800625c:	9401      	str	r4, [sp, #4]
}
 800625e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8006262:	f7ff bf17 	b.w	8006094 <ComputeCmac>
}
 8006266:	2003      	movs	r0, #3
 8006268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800626c:	4770      	bx	lr

0800626e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800626e:	b530      	push	{r4, r5, lr}
 8006270:	460d      	mov	r5, r1
 8006272:	b085      	sub	sp, #20
 8006274:	4614      	mov	r4, r2
    if( buffer == NULL )
 8006276:	4601      	mov	r1, r0
 8006278:	b168      	cbz	r0, 8006296 <SecureElementVerifyAesCmac+0x28>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800627a:	aa03      	add	r2, sp, #12
    uint32_t              compCmac = 0;
 800627c:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800627e:	9200      	str	r2, [sp, #0]
 8006280:	462a      	mov	r2, r5
    uint32_t              compCmac = 0;
 8006282:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8006284:	f7ff ff06 	bl	8006094 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8006288:	b918      	cbnz	r0, 8006292 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800628a:	9803      	ldr	r0, [sp, #12]
 800628c:	1b00      	subs	r0, r0, r4
 800628e:	bf18      	it	ne
 8006290:	2001      	movne	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8006292:	b005      	add	sp, #20
 8006294:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8006296:	2002      	movs	r0, #2
 8006298:	e7fb      	b.n	8006292 <SecureElementVerifyAesCmac+0x24>

0800629a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800629a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800629e:	460e      	mov	r6, r1
 80062a0:	b0bf      	sub	sp, #252	@ 0xfc
 80062a2:	4614      	mov	r4, r2
 80062a4:	4699      	mov	r9, r3
    if( buffer == NULL || encBuffer == NULL )
 80062a6:	4680      	mov	r8, r0
 80062a8:	b328      	cbz	r0, 80062f6 <SecureElementAesEncrypt+0x5c>
 80062aa:	b323      	cbz	r3, 80062f6 <SecureElementAesEncrypt+0x5c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80062ac:	f011 010f 	ands.w	r1, r1, #15
 80062b0:	d123      	bne.n	80062fa <SecureElementAesEncrypt+0x60>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80062b2:	22f0      	movs	r2, #240	@ 0xf0
 80062b4:	a801      	add	r0, sp, #4
 80062b6:	f005 fa33 	bl	800b720 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80062ba:	4620      	mov	r0, r4
 80062bc:	4669      	mov	r1, sp
 80062be:	f7ff fed1 	bl	8006064 <SecureElementGetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80062c2:	4604      	mov	r4, r0
 80062c4:	b948      	cbnz	r0, 80062da <SecureElementAesEncrypt+0x40>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80062c6:	9800      	ldr	r0, [sp, #0]
 80062c8:	aa01      	add	r2, sp, #4
 80062ca:	2110      	movs	r1, #16
 80062cc:	3001      	adds	r0, #1
 80062ce:	f7ff fccf 	bl	8005c70 <lorawan_aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 80062d2:	4635      	mov	r5, r6
 80062d4:	1b77      	subs	r7, r6, r5
 80062d6:	b2ff      	uxtb	r7, r7
 80062d8:	b91d      	cbnz	r5, 80062e2 <SecureElementAesEncrypt+0x48>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 80062da:	4620      	mov	r0, r4
 80062dc:	b03f      	add	sp, #252	@ 0xfc
 80062de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80062e2:	aa01      	add	r2, sp, #4
 80062e4:	eb09 0107 	add.w	r1, r9, r7
 80062e8:	eb08 0007 	add.w	r0, r8, r7
            size  = size - 16;
 80062ec:	3d10      	subs	r5, #16
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80062ee:	f7ff fd41 	bl	8005d74 <lorawan_aes_encrypt>
            size  = size - 16;
 80062f2:	b2ad      	uxth	r5, r5
 80062f4:	e7ee      	b.n	80062d4 <SecureElementAesEncrypt+0x3a>
        return SECURE_ELEMENT_ERROR_NPE;
 80062f6:	2402      	movs	r4, #2
 80062f8:	e7ef      	b.n	80062da <SecureElementAesEncrypt+0x40>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80062fa:	2405      	movs	r4, #5
 80062fc:	e7ed      	b.n	80062da <SecureElementAesEncrypt+0x40>
	...

08006300 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006300:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006302:	4e18      	ldr	r6, [pc, #96]	@ (8006364 <SecureElementSetKey.part.0+0x64>)
 8006304:	6835      	ldr	r5, [r6, #0]
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006306:	4602      	mov	r2, r0
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006308:	2300      	movs	r3, #0
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800630a:	4608      	mov	r0, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 800630c:	f105 0110 	add.w	r1, r5, #16
 8006310:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8006314:	3301      	adds	r3, #1
 8006316:	5d0c      	ldrb	r4, [r1, r4]
 8006318:	4294      	cmp	r4, r2
 800631a:	d11e      	bne.n	800635a <SecureElementSetKey.part.0+0x5a>
            if ( keyID == MC_KEY_0 )
 800631c:	2a80      	cmp	r2, #128	@ 0x80
 800631e:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8006322:	d113      	bne.n	800634c <SecureElementSetKey.part.0+0x4c>
                uint8_t               decryptedKey[16] = { 0 };
 8006324:	2300      	movs	r3, #0
 8006326:	e9cd 3300 	strd	r3, r3, [sp]
 800632a:	e9cd 3302 	strd	r3, r3, [sp, #8]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800632e:	227f      	movs	r2, #127	@ 0x7f
 8006330:	2110      	movs	r1, #16
 8006332:	466b      	mov	r3, sp
 8006334:	f7ff ffb1 	bl	800629a <SecureElementAesEncrypt>
 8006338:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800633a:	6830      	ldr	r0, [r6, #0]
 800633c:	2210      	movs	r2, #16
 800633e:	4669      	mov	r1, sp
 8006340:	4420      	add	r0, r4
 8006342:	f005 f9d9 	bl	800b6f8 <memcpy1>
}
 8006346:	4628      	mov	r0, r5
 8006348:	b004      	add	sp, #16
 800634a:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800634c:	4601      	mov	r1, r0
 800634e:	2210      	movs	r2, #16
 8006350:	1928      	adds	r0, r5, r4
 8006352:	f005 f9d1 	bl	800b6f8 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8006356:	2500      	movs	r5, #0
 8006358:	e7f5      	b.n	8006346 <SecureElementSetKey.part.0+0x46>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800635a:	2b0a      	cmp	r3, #10
 800635c:	d1d8      	bne.n	8006310 <SecureElementSetKey.part.0+0x10>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800635e:	2503      	movs	r5, #3
 8006360:	e7f1      	b.n	8006346 <SecureElementSetKey.part.0+0x46>
 8006362:	bf00      	nop
 8006364:	200004d0 	.word	0x200004d0

08006368 <SecureElementSetKey>:
    if( key == NULL )
 8006368:	b109      	cbz	r1, 800636e <SecureElementSetKey+0x6>
 800636a:	f7ff bfc9 	b.w	8006300 <SecureElementSetKey.part.0>
}
 800636e:	2002      	movs	r0, #2
 8006370:	4770      	bx	lr

08006372 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8006372:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006374:	4614      	mov	r4, r2
    if( input == NULL )
 8006376:	b1a0      	cbz	r0, 80063a2 <SecureElementDeriveAndStoreKey+0x30>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8006378:	2a7f      	cmp	r2, #127	@ 0x7f
 800637a:	d101      	bne.n	8006380 <SecureElementDeriveAndStoreKey+0xe>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800637c:	2904      	cmp	r1, #4
 800637e:	d112      	bne.n	80063a6 <SecureElementDeriveAndStoreKey+0x34>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8006380:	2300      	movs	r3, #0
 8006382:	e9cd 3300 	strd	r3, r3, [sp]
 8006386:	e9cd 3302 	strd	r3, r3, [sp, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800638a:	460a      	mov	r2, r1
 800638c:	466b      	mov	r3, sp
 800638e:	2110      	movs	r1, #16
 8006390:	f7ff ff83 	bl	800629a <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8006394:	b918      	cbnz	r0, 800639e <SecureElementDeriveAndStoreKey+0x2c>
    if( key == NULL )
 8006396:	4669      	mov	r1, sp
 8006398:	4620      	mov	r0, r4
 800639a:	f7ff ffb1 	bl	8006300 <SecureElementSetKey.part.0>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800639e:	b004      	add	sp, #16
 80063a0:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80063a2:	2002      	movs	r0, #2
 80063a4:	e7fb      	b.n	800639e <SecureElementDeriveAndStoreKey+0x2c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80063a6:	2003      	movs	r0, #3
 80063a8:	e7f9      	b.n	800639e <SecureElementDeriveAndStoreKey+0x2c>

080063aa <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 80063aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80063ac:	461e      	mov	r6, r3
{
 80063ae:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
 80063b2:	f89d 4018 	ldrb.w	r4, [sp, #24]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80063b6:	b36b      	cbz	r3, 8006414 <SecureElementProcessJoinAccept+0x6a>
 80063b8:	b365      	cbz	r5, 8006414 <SecureElementProcessJoinAccept+0x6a>
 80063ba:	b35f      	cbz	r7, 8006414 <SecureElementProcessJoinAccept+0x6a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80063bc:	2c21      	cmp	r4, #33	@ 0x21
 80063be:	d82b      	bhi.n	8006418 <SecureElementProcessJoinAccept+0x6e>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80063c0:	4619      	mov	r1, r3
 80063c2:	4622      	mov	r2, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	f005 f997 	bl	800b6f8 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80063ca:	1e61      	subs	r1, r4, #1
 80063cc:	2201      	movs	r2, #1
 80063ce:	1c6b      	adds	r3, r5, #1
 80063d0:	b289      	uxth	r1, r1
 80063d2:	18b0      	adds	r0, r6, r2
 80063d4:	f7ff ff61 	bl	800629a <SecureElementAesEncrypt>
 80063d8:	bb00      	cbnz	r0, 800641c <SecureElementProcessJoinAccept+0x72>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 80063da:	7aeb      	ldrb	r3, [r5, #11]
 80063dc:	09db      	lsrs	r3, r3, #7
 80063de:	703b      	strb	r3, [r7, #0]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 80063e0:	b9f3      	cbnz	r3, 8006420 <SecureElementProcessJoinAccept+0x76>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 80063e2:	192b      	adds	r3, r5, r4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 80063e4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 80063e8:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 80063ec:	f813 0c03 	ldrb.w	r0, [r3, #-3]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 80063f0:	0612      	lsls	r2, r2, #24
 80063f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 80063f6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80063fa:	430a      	orrs	r2, r1
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80063fc:	1f21      	subs	r1, r4, #4
 80063fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006402:	2301      	movs	r3, #1
 8006404:	b289      	uxth	r1, r1
 8006406:	4628      	mov	r0, r5
 8006408:	f7ff ff31 	bl	800626e <SecureElementVerifyAesCmac>
 800640c:	3800      	subs	r0, #0
 800640e:	bf18      	it	ne
 8006410:	2001      	movne	r0, #1
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8006412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8006414:	2002      	movs	r0, #2
 8006416:	e7fc      	b.n	8006412 <SecureElementProcessJoinAccept+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8006418:	2005      	movs	r0, #5
 800641a:	e7fa      	b.n	8006412 <SecureElementProcessJoinAccept+0x68>
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800641c:	2007      	movs	r0, #7
 800641e:	e7f8      	b.n	8006412 <SecureElementProcessJoinAccept+0x68>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8006420:	2004      	movs	r0, #4
 8006422:	e7f6      	b.n	8006412 <SecureElementProcessJoinAccept+0x68>

08006424 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8006424:	b510      	push	{r4, lr}
    if( randomNum == NULL )
 8006426:	4604      	mov	r4, r0
 8006428:	b128      	cbz	r0, 8006436 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800642a:	4b04      	ldr	r3, [pc, #16]	@ (800643c <SecureElementRandomNumber+0x18>)
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4798      	blx	r3
 8006430:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8006432:	2000      	movs	r0, #0
}
 8006434:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8006436:	2002      	movs	r0, #2
 8006438:	e7fc      	b.n	8006434 <SecureElementRandomNumber+0x10>
 800643a:	bf00      	nop
 800643c:	0800de84 	.word	0x0800de84

08006440 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8006440:	b508      	push	{r3, lr}
    if( devEui == NULL )
 8006442:	4601      	mov	r1, r0
 8006444:	b130      	cbz	r0, 8006454 <SecureElementSetDevEui+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8006446:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <SecureElementSetDevEui+0x18>)
 8006448:	2208      	movs	r2, #8
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	f005 f954 	bl	800b6f8 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8006450:	2000      	movs	r0, #0
}
 8006452:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8006454:	2002      	movs	r0, #2
 8006456:	e7fc      	b.n	8006452 <SecureElementSetDevEui+0x12>
 8006458:	200004d0 	.word	0x200004d0

0800645c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800645c:	4b01      	ldr	r3, [pc, #4]	@ (8006464 <SecureElementGetDevEui+0x8>)
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	200004d0 	.word	0x200004d0

08006468 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8006468:	b508      	push	{r3, lr}
    if( joinEui == NULL )
 800646a:	4601      	mov	r1, r0
 800646c:	b138      	cbz	r0, 800647e <SecureElementSetJoinEui+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800646e:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <SecureElementSetJoinEui+0x1c>)
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	2208      	movs	r2, #8
 8006474:	4410      	add	r0, r2
 8006476:	f005 f93f 	bl	800b6f8 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800647a:	2000      	movs	r0, #0
}
 800647c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800647e:	2002      	movs	r0, #2
 8006480:	e7fc      	b.n	800647c <SecureElementSetJoinEui+0x14>
 8006482:	bf00      	nop
 8006484:	200004d0 	.word	0x200004d0

08006488 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8006488:	4b01      	ldr	r3, [pc, #4]	@ (8006490 <SecureElementGetJoinEui+0x8>)
 800648a:	6818      	ldr	r0, [r3, #0]
}
 800648c:	3008      	adds	r0, #8
 800648e:	4770      	bx	lr
 8006490:	200004d0 	.word	0x200004d0

08006494 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8006494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8006496:	230a      	movs	r3, #10

    status = LoRaMacMlmeRequest( &mlmeReq );
 8006498:	a801      	add	r0, sp, #4
    mlmeReq.Type = MLME_DEVICE_TIME;
 800649a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800649e:	f002 fe3f 	bl	8009120 <LoRaMacMlmeRequest>

    if( status == LORAMAC_STATUS_OK )
 80064a2:	3800      	subs	r0, #0
 80064a4:	bf18      	it	ne
 80064a6:	2001      	movne	r0, #1
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
    }
}
 80064a8:	4240      	negs	r0, r0
 80064aa:	b007      	add	sp, #28
 80064ac:	f85d fb04 	ldr.w	pc, [sp], #4

080064b0 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80064b0:	b570      	push	{r4, r5, r6, lr}
    TxParams.IsMcpsConfirm = 1;
 80064b2:	4c11      	ldr	r4, [pc, #68]	@ (80064f8 <McpsConfirm+0x48>)
 80064b4:	2301      	movs	r3, #1
 80064b6:	7023      	strb	r3, [r4, #0]
    TxParams.Status = mcpsConfirm->Status;
 80064b8:	7843      	ldrb	r3, [r0, #1]
 80064ba:	7063      	strb	r3, [r4, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80064bc:	7883      	ldrb	r3, [r0, #2]
 80064be:	7123      	strb	r3, [r4, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80064c0:	68c3      	ldr	r3, [r0, #12]
 80064c2:	60a3      	str	r3, [r4, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80064c4:	78c3      	ldrb	r3, [r0, #3]
 80064c6:	7523      	strb	r3, [r4, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 80064c8:	6903      	ldr	r3, [r0, #16]
 80064ca:	7563      	strb	r3, [r4, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80064cc:	7903      	ldrb	r3, [r0, #4]
 80064ce:	70e3      	strb	r3, [r4, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 80064d0:	69a3      	ldr	r3, [r4, #24]
{
 80064d2:	4605      	mov	r5, r0
    LmHandlerCallbacks->OnTxData( &TxParams );
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	4620      	mov	r0, r4
 80064d8:	4798      	blx	r3
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80064da:	341c      	adds	r4, #28
 80064dc:	2600      	movs	r6, #0
    {
        if( LmHandlerPackages[i] != NULL )
 80064de:	f854 3b04 	ldr.w	r3, [r4], #4
 80064e2:	b11b      	cbz	r3, 80064ec <McpsConfirm+0x3c>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	b10b      	cbz	r3, 80064ec <McpsConfirm+0x3c>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 80064e8:	4628      	mov	r0, r5
 80064ea:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80064ec:	3601      	adds	r6, #1
 80064ee:	b2f3      	uxtb	r3, r6
 80064f0:	2b05      	cmp	r3, #5
 80064f2:	b276      	sxtb	r6, r6
 80064f4:	d1f3      	bne.n	80064de <McpsConfirm+0x2e>
}
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	200004d4 	.word	0x200004d4

080064fc <LmHandlerConfigure>:
{
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006500:	4e61      	ldr	r6, [pc, #388]	@ (8006688 <LmHandlerConfigure+0x18c>)
{
 8006502:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006504:	2210      	movs	r2, #16
{
 8006506:	b09e      	sub	sp, #120	@ 0x78
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006508:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 800650c:	f006 fd12 	bl	800cf34 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8006510:	f7fa fc70 	bl	8000df4 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8006514:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 8006518:	6843      	ldr	r3, [r0, #4]
 800651a:	f04f 0801 	mov.w	r8, #1
 800651e:	fa08 f102 	lsl.w	r1, r8, r2
 8006522:	4019      	ands	r1, r3
 8006524:	d00a      	beq.n	800653c <LmHandlerConfigure+0x40>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8006526:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 800652a:	f106 0054 	add.w	r0, r6, #84	@ 0x54
 800652e:	f002 f8f3 	bl	8008718 <LoRaMacInitialization>
 8006532:	4605      	mov	r5, r0
 8006534:	b140      	cbz	r0, 8006548 <LmHandlerConfigure+0x4c>
            return LORAMAC_HANDLER_ERROR;
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	e0a2      	b.n	8006682 <LmHandlerConfigure+0x186>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800653c:	4b53      	ldr	r3, [pc, #332]	@ (800668c <LmHandlerConfigure+0x190>)
 800653e:	4642      	mov	r2, r8
 8006540:	4608      	mov	r0, r1
 8006542:	f006 fbe1 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8006546:	e7fe      	b.n	8006546 <LmHandlerConfigure+0x4a>
    nbNvmData = NvmDataMgmtRestore( );
 8006548:	f000 fcef 	bl	8006f2a <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 800654c:	3800      	subs	r0, #0
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800654e:	4c50      	ldr	r4, [pc, #320]	@ (8006690 <LmHandlerConfigure+0x194>)
    if( nbNvmData > 0 )
 8006550:	bf18      	it	ne
 8006552:	2001      	movne	r0, #1
    mibReq.Type = MIB_DEV_EUI;
 8006554:	2702      	movs	r7, #2
    if( nbNvmData > 0 )
 8006556:	f886 0064 	strb.w	r0, [r6, #100]	@ 0x64
    LoRaMacMibGetRequestConfirm( &mibReq );
 800655a:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_DEV_EUI;
 800655c:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006560:	f002 fafc 	bl	8008b5c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8006564:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006566:	2208      	movs	r2, #8
 8006568:	4620      	mov	r0, r4
 800656a:	f005 f8c5 	bl	800b6f8 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 800656e:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006570:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_JOIN_EUI;
 8006572:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006576:	f002 faf1 	bl	8008b5c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800657a:	2208      	movs	r2, #8
 800657c:	18a0      	adds	r0, r4, r2
 800657e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006580:	f005 f8ba 	bl	800b6f8 <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8006584:	69b3      	ldr	r3, [r6, #24]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	4798      	blx	r3
    mibReq.Type = MIB_DEV_ADDR;
 800658a:	2306      	movs	r3, #6
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800658c:	6160      	str	r0, [r4, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800658e:	900d      	str	r0, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006590:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_DEV_ADDR;
 8006592:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006596:	f002 fb9b 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800659a:	79e3      	ldrb	r3, [r4, #7]
 800659c:	9307      	str	r3, [sp, #28]
 800659e:	79a3      	ldrb	r3, [r4, #6]
 80065a0:	9306      	str	r3, [sp, #24]
 80065a2:	7963      	ldrb	r3, [r4, #5]
 80065a4:	9305      	str	r3, [sp, #20]
 80065a6:	7923      	ldrb	r3, [r4, #4]
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	78e3      	ldrb	r3, [r4, #3]
 80065ac:	9303      	str	r3, [sp, #12]
 80065ae:	78a3      	ldrb	r3, [r4, #2]
 80065b0:	9302      	str	r3, [sp, #8]
 80065b2:	7863      	ldrb	r3, [r4, #1]
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	7823      	ldrb	r3, [r4, #0]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	462a      	mov	r2, r5
 80065bc:	4b35      	ldr	r3, [pc, #212]	@ (8006694 <LmHandlerConfigure+0x198>)
 80065be:	4629      	mov	r1, r5
 80065c0:	4638      	mov	r0, r7
 80065c2:	f006 fba1 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80065c6:	7be3      	ldrb	r3, [r4, #15]
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	7ba3      	ldrb	r3, [r4, #14]
 80065cc:	9306      	str	r3, [sp, #24]
 80065ce:	7b63      	ldrb	r3, [r4, #13]
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	7b23      	ldrb	r3, [r4, #12]
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	7ae3      	ldrb	r3, [r4, #11]
 80065d8:	9303      	str	r3, [sp, #12]
 80065da:	7aa3      	ldrb	r3, [r4, #10]
 80065dc:	9302      	str	r3, [sp, #8]
 80065de:	7a63      	ldrb	r3, [r4, #9]
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	7a23      	ldrb	r3, [r4, #8]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	462a      	mov	r2, r5
 80065e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006698 <LmHandlerConfigure+0x19c>)
 80065ea:	4629      	mov	r1, r5
 80065ec:	4638      	mov	r0, r7
 80065ee:	f006 fb8b 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 80065f2:	7d23      	ldrb	r3, [r4, #20]
 80065f4:	9303      	str	r3, [sp, #12]
 80065f6:	7d63      	ldrb	r3, [r4, #21]
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	7da3      	ldrb	r3, [r4, #22]
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	7de3      	ldrb	r3, [r4, #23]
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	462a      	mov	r2, r5
 8006604:	4629      	mov	r1, r5
 8006606:	4b25      	ldr	r3, [pc, #148]	@ (800669c <LmHandlerConfigure+0x1a0>)
 8006608:	4638      	mov	r0, r7
 800660a:	f006 fb7d 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800660e:	240f      	movs	r4, #15
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006610:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006612:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006616:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm(&mibReq);
 800661a:	f002 fb59 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 800661e:	2305      	movs	r3, #5
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006620:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_NET_ID;
 8006622:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8006626:	950d      	str	r5, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006628:	f002 fb52 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800662c:	2310      	movs	r3, #16
    LoRaMacMibSetRequestConfirm( &mibReq );
 800662e:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006630:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8006634:	f88d 5034 	strb.w	r5, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006638:	f002 fb4a 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800663c:	2304      	movs	r3, #4
 800663e:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006642:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006644:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
 8006648:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm( &mibReq );
 800664c:	f002 fb40 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8006650:	a90a      	add	r1, sp, #40	@ 0x28
 8006652:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006656:	f88d 4028 	strb.w	r4, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800665a:	f003 fec2 	bl	800a3e2 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800665e:	3800      	subs	r0, #0
 8006660:	bf18      	it	ne
 8006662:	2001      	movne	r0, #1
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8006664:	2322      	movs	r3, #34	@ 0x22
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8006666:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800666a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800666e:	a815      	add	r0, sp, #84	@ 0x54
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8006670:	2314      	movs	r3, #20
 8006672:	9316      	str	r3, [sp, #88]	@ 0x58
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006674:	f002 fb2c 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8006678:	f896 0035 	ldrb.w	r0, [r6, #53]	@ 0x35
 800667c:	f002 ffd6 	bl	800962c <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8006680:	4628      	mov	r0, r5
}
 8006682:	b01e      	add	sp, #120	@ 0x78
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	200004d4 	.word	0x200004d4
 800668c:	0800e28a 	.word	0x0800e28a
 8006690:	20000058 	.word	0x20000058
 8006694:	0800e2d3 	.word	0x0800e2d3
 8006698:	0800e30d 	.word	0x0800e30d
 800669c:	0800e347 	.word	0x0800e347

080066a0 <LmHandlerProcess>:
{
 80066a0:	b538      	push	{r3, r4, r5, lr}
    LoRaMacProcess( );
 80066a2:	f001 fb7b 	bl	8007d9c <LoRaMacProcess>
    }
}

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80066a6:	4d0b      	ldr	r5, [pc, #44]	@ (80066d4 <LmHandlerProcess+0x34>)
    LoRaMacProcess( );
 80066a8:	2405      	movs	r4, #5
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	b14b      	cbz	r3, 80066c4 <LmHandlerProcess+0x24>
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	b13a      	cbz	r2, 80066c4 <LmHandlerProcess+0x24>
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	b12b      	cbz	r3, 80066c4 <LmHandlerProcess+0x24>
        return LmHandlerPackages[id]->IsInitialized( );
 80066b8:	4798      	blx	r3
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80066ba:	b118      	cbz	r0, 80066c4 <LmHandlerProcess+0x24>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 80066bc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80066c4:	3c01      	subs	r4, #1
 80066c6:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 80066ca:	d1ee      	bne.n	80066aa <LmHandlerProcess+0xa>
}
 80066cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    NvmDataMgmtStore( );
 80066d0:	f000 bc29 	b.w	8006f26 <NvmDataMgmtStore>
 80066d4:	200004f0 	.word	0x200004f0

080066d8 <LmHandlerJoinStatus>:
{
 80066d8:	b500      	push	{lr}
 80066da:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80066dc:	2301      	movs	r3, #1
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80066de:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80066e0:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80066e4:	f002 fa3a 	bl	8008b5c <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80066e8:	b938      	cbnz	r0, 80066fa <LmHandlerJoinStatus+0x22>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80066ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80066ee:	3800      	subs	r0, #0
 80066f0:	bf18      	it	ne
 80066f2:	2001      	movne	r0, #1
}
 80066f4:	b00b      	add	sp, #44	@ 0x2c
 80066f6:	f85d fb04 	ldr.w	pc, [sp], #4
            return LORAMAC_HANDLER_RESET;
 80066fa:	2000      	movs	r0, #0
 80066fc:	e7fa      	b.n	80066f4 <LmHandlerJoinStatus+0x1c>
	...

08006700 <LmHandlerRequestClass>:
{
 8006700:	b530      	push	{r4, r5, lr}
 8006702:	b08d      	sub	sp, #52	@ 0x34
 8006704:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 8006706:	f001 fb3b 	bl	8007d80 <LoRaMacIsBusy>
 800670a:	4605      	mov	r5, r0
 800670c:	2800      	cmp	r0, #0
 800670e:	d147      	bne.n	80067a0 <LmHandlerRequestClass+0xa0>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8006710:	f7ff ffe2 	bl	80066d8 <LmHandlerJoinStatus>
 8006714:	2801      	cmp	r0, #1
 8006716:	d146      	bne.n	80067a6 <LmHandlerRequestClass+0xa6>
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006718:	a803      	add	r0, sp, #12
    mibReq.Type = MIB_DEVICE_CLASS;
 800671a:	f88d 500c 	strb.w	r5, [sp, #12]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800671e:	f002 fa1d 	bl	8008b5c <LoRaMacMibGetRequestConfirm>
 8006722:	2800      	cmp	r0, #0
 8006724:	d139      	bne.n	800679a <LmHandlerRequestClass+0x9a>
    currentClass = mibReq.Param.Class;
 8006726:	f89d 3010 	ldrb.w	r3, [sp, #16]
    if( currentClass != newClass )
 800672a:	42a3      	cmp	r3, r4
 800672c:	d004      	beq.n	8006738 <LmHandlerRequestClass+0x38>
        switch( newClass )
 800672e:	2c01      	cmp	r4, #1
 8006730:	d033      	beq.n	800679a <LmHandlerRequestClass+0x9a>
 8006732:	2c02      	cmp	r4, #2
 8006734:	d01b      	beq.n	800676e <LmHandlerRequestClass+0x6e>
 8006736:	b114      	cbz	r4, 800673e <LmHandlerRequestClass+0x3e>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006738:	2000      	movs	r0, #0
}
 800673a:	b00d      	add	sp, #52	@ 0x34
 800673c:	bd30      	pop	{r4, r5, pc}
                if( currentClass != CLASS_A )
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0fa      	beq.n	8006738 <LmHandlerRequestClass+0x38>
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006742:	a803      	add	r0, sp, #12
                    mibReq.Param.Class = newClass;
 8006744:	f88d 4010 	strb.w	r4, [sp, #16]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006748:	f002 fac2 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
 800674c:	4602      	mov	r2, r0
 800674e:	bb20      	cbnz	r0, 800679a <LmHandlerRequestClass+0x9a>
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8006750:	2341      	movs	r3, #65	@ 0x41
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4601      	mov	r1, r0
 8006756:	4b15      	ldr	r3, [pc, #84]	@ (80067ac <LmHandlerRequestClass+0xac>)
 8006758:	2002      	movs	r0, #2
 800675a:	f006 fad5 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800675e:	4b14      	ldr	r3, [pc, #80]	@ (80067b0 <LmHandlerRequestClass+0xb0>)
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0e7      	beq.n	8006738 <LmHandlerRequestClass+0x38>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006768:	2000      	movs	r0, #0
                            LmHandlerCallbacks->OnClassChange( newClass );
 800676a:	4798      	blx	r3
 800676c:	e7e4      	b.n	8006738 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 800676e:	b9a3      	cbnz	r3, 800679a <LmHandlerRequestClass+0x9a>
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8006770:	a803      	add	r0, sp, #12
                    mibReq.Param.Class = newClass;
 8006772:	f88d 4010 	strb.w	r4, [sp, #16]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8006776:	f002 faab 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
 800677a:	4602      	mov	r2, r0
 800677c:	b968      	cbnz	r0, 800679a <LmHandlerRequestClass+0x9a>
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800677e:	2343      	movs	r3, #67	@ 0x43
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	4601      	mov	r1, r0
 8006784:	4b09      	ldr	r3, [pc, #36]	@ (80067ac <LmHandlerRequestClass+0xac>)
 8006786:	4620      	mov	r0, r4
 8006788:	f006 fabe 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800678c:	4b08      	ldr	r3, [pc, #32]	@ (80067b0 <LmHandlerRequestClass+0xb0>)
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0d0      	beq.n	8006738 <LmHandlerRequestClass+0x38>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006796:	4620      	mov	r0, r4
 8006798:	e7e7      	b.n	800676a <LmHandlerRequestClass+0x6a>
        return LORAMAC_HANDLER_ERROR;
 800679a:	f04f 30ff 	mov.w	r0, #4294967295
 800679e:	e7cc      	b.n	800673a <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80067a0:	f06f 0001 	mvn.w	r0, #1
 80067a4:	e7c9      	b.n	800673a <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80067a6:	f06f 0002 	mvn.w	r0, #2
 80067aa:	e7c6      	b.n	800673a <LmHandlerRequestClass+0x3a>
 80067ac:	0800e36d 	.word	0x0800e36d
 80067b0:	200004d4 	.word	0x200004d4

080067b4 <LmHandlerJoin>:
{
 80067b4:	b530      	push	{r4, r5, lr}
    if ( mode == ACTIVATION_TYPE_OTAA )
 80067b6:	2802      	cmp	r0, #2
 80067b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006828 <LmHandlerJoin+0x74>)
 80067ba:	4c1c      	ldr	r4, [pc, #112]	@ (800682c <LmHandlerJoin+0x78>)
{
 80067bc:	b08b      	sub	sp, #44	@ 0x2c
 80067be:	f04f 0501 	mov.w	r5, #1
    if ( mode == ACTIVATION_TYPE_OTAA )
 80067c2:	d10d      	bne.n	80067e0 <LmHandlerJoin+0x2c>
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80067c4:	7698      	strb	r0, [r3, #26]
        LoRaMacStart();
 80067c6:	f002 f967 	bl	8008a98 <LoRaMacStart>
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80067ca:	f894 3033 	ldrb.w	r3, [r4, #51]	@ 0x33
        mlmeReq.Type = MLME_JOIN;
 80067ce:	f88d 5004 	strb.w	r5, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 80067d2:	a801      	add	r0, sp, #4
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80067d4:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMlmeRequest( &mlmeReq );
 80067d8:	f002 fca2 	bl	8009120 <LoRaMacMlmeRequest>
}
 80067dc:	b00b      	add	sp, #44	@ 0x2c
 80067de:	bd30      	pop	{r4, r5, pc}
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80067e0:	f894 2033 	ldrb.w	r2, [r4, #51]	@ 0x33
 80067e4:	761a      	strb	r2, [r3, #24]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80067e6:	2200      	movs	r2, #0
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80067e8:	769d      	strb	r5, [r3, #26]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80067ea:	765a      	strb	r2, [r3, #25]
        if (CtxRestoreDone == false)
 80067ec:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 80067f0:	b93b      	cbnz	r3, 8006802 <LmHandlerJoin+0x4e>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80067f2:	2327      	movs	r3, #39	@ 0x27
 80067f4:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80067f8:	a801      	add	r0, sp, #4
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80067fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <LmHandlerJoin+0x7c>)
 80067fc:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80067fe:	f002 fa67 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 8006802:	f002 f949 	bl	8008a98 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006806:	2301      	movs	r3, #1
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006808:	a801      	add	r0, sp, #4
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800680a:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800680e:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006812:	f002 fa5d 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006816:	69a3      	ldr	r3, [r4, #24]
 8006818:	4806      	ldr	r0, [pc, #24]	@ (8006834 <LmHandlerJoin+0x80>)
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800681e:	f894 0031 	ldrb.w	r0, [r4, #49]	@ 0x31
 8006822:	f7ff ff6d 	bl	8006700 <LmHandlerRequestClass>
}
 8006826:	e7d9      	b.n	80067dc <LmHandlerJoin+0x28>
 8006828:	20000058 	.word	0x20000058
 800682c:	200004d4 	.word	0x200004d4
 8006830:	01000300 	.word	0x01000300
 8006834:	20000070 	.word	0x20000070

08006838 <LmHandlerSend>:
{
 8006838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683c:	b086      	sub	sp, #24
 800683e:	4604      	mov	r4, r0
 8006840:	460e      	mov	r6, r1
 8006842:	4617      	mov	r7, r2
 8006844:	4698      	mov	r8, r3
    if (LoRaMacIsBusy() == true)
 8006846:	f001 fa9b 	bl	8007d80 <LoRaMacIsBusy>
 800684a:	2800      	cmp	r0, #0
 800684c:	d179      	bne.n	8006942 <LmHandlerSend+0x10a>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800684e:	f7ff ff43 	bl	80066d8 <LmHandlerJoinStatus>
 8006852:	2801      	cmp	r0, #1
 8006854:	d008      	beq.n	8006868 <LmHandlerSend+0x30>
        LmHandlerJoin(JoinParams.Mode);
 8006856:	4b42      	ldr	r3, [pc, #264]	@ (8006960 <LmHandlerSend+0x128>)
 8006858:	7e98      	ldrb	r0, [r3, #26]
 800685a:	f7ff ffab 	bl	80067b4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800685e:	f06f 0002 	mvn.w	r0, #2
}
 8006862:	b006      	add	sp, #24
 8006864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8006868:	4d3e      	ldr	r5, [pc, #248]	@ (8006964 <LmHandlerSend+0x12c>)
 800686a:	69eb      	ldr	r3, [r5, #28]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	4798      	blx	r3
 8006870:	b130      	cbz	r0, 8006880 <LmHandlerSend+0x48>
 8006872:	69ea      	ldr	r2, [r5, #28]
 8006874:	7823      	ldrb	r3, [r4, #0]
 8006876:	7812      	ldrb	r2, [r2, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <LmHandlerSend+0x48>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d169      	bne.n	8006954 <LmHandlerSend+0x11c>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8006880:	f895 3033 	ldrb.w	r3, [r5, #51]	@ 0x33
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8006884:	7860      	ldrb	r0, [r4, #1]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8006886:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800688a:	4669      	mov	r1, sp
 800688c:	f002 f90c 	bl	8008aa8 <LoRaMacQueryTxPossible>
 8006890:	2800      	cmp	r0, #0
 8006892:	d03f      	beq.n	8006914 <LmHandlerSend+0xdc>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8006894:	2200      	movs	r2, #0
 8006896:	70aa      	strb	r2, [r5, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8006898:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800689c:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800689e:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 80068a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068a6:	4b30      	ldr	r3, [pc, #192]	@ (8006968 <LmHandlerSend+0x130>)
 80068a8:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80068ac:	f895 3033 	ldrb.w	r3, [r5, #51]	@ 0x33
 80068b0:	712b      	strb	r3, [r5, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 80068b2:	4641      	mov	r1, r8
 80068b4:	a801      	add	r0, sp, #4
 80068b6:	f002 fd25 	bl	8009304 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 80068ba:	b10f      	cbz	r7, 80068c0 <LmHandlerSend+0x88>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80068bc:	9b05      	ldr	r3, [sp, #20]
 80068be:	603b      	str	r3, [r7, #0]
    switch (status)
 80068c0:	2811      	cmp	r0, #17
 80068c2:	d844      	bhi.n	800694e <LmHandlerSend+0x116>
 80068c4:	a301      	add	r3, pc, #4	@ (adr r3, 80068cc <LmHandlerSend+0x94>)
 80068c6:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	0800695b 	.word	0x0800695b
 80068d0:	08006943 	.word	0x08006943
 80068d4:	0800694f 	.word	0x0800694f
 80068d8:	0800694f 	.word	0x0800694f
 80068dc:	0800694f 	.word	0x0800694f
 80068e0:	0800694f 	.word	0x0800694f
 80068e4:	0800694f 	.word	0x0800694f
 80068e8:	0800685f 	.word	0x0800685f
 80068ec:	0800694f 	.word	0x0800694f
 80068f0:	0800694f 	.word	0x0800694f
 80068f4:	0800694f 	.word	0x0800694f
 80068f8:	08006949 	.word	0x08006949
 80068fc:	0800694f 	.word	0x0800694f
 8006900:	0800694f 	.word	0x0800694f
 8006904:	08006943 	.word	0x08006943
 8006908:	08006943 	.word	0x08006943
 800690c:	08006943 	.word	0x08006943
 8006910:	0800693d 	.word	0x0800693d
        TxParams.MsgType = isTxConfirmed;
 8006914:	70ae      	strb	r6, [r5, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8006916:	7823      	ldrb	r3, [r4, #0]
 8006918:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800691c:	7863      	ldrb	r3, [r4, #1]
 800691e:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8006922:	6863      	ldr	r3, [r4, #4]
 8006924:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 8006926:	b916      	cbnz	r6, 800692e <LmHandlerSend+0xf6>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8006928:	f88d 6004 	strb.w	r6, [sp, #4]
 800692c:	e7b9      	b.n	80068a2 <LmHandlerSend+0x6a>
            mcpsReq.Type = MCPS_CONFIRMED;
 800692e:	2301      	movs	r3, #1
 8006930:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 8006934:	2308      	movs	r3, #8
 8006936:	f88d 3013 	strb.w	r3, [sp, #19]
 800693a:	e7b2      	b.n	80068a2 <LmHandlerSend+0x6a>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800693c:	f06f 0004 	mvn.w	r0, #4
 8006940:	e78f      	b.n	8006862 <LmHandlerSend+0x2a>
{
 8006942:	f06f 0001 	mvn.w	r0, #1
 8006946:	e78c      	b.n	8006862 <LmHandlerSend+0x2a>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8006948:	f06f 0005 	mvn.w	r0, #5
            break;
 800694c:	e789      	b.n	8006862 <LmHandlerSend+0x2a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800694e:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 8006952:	e786      	b.n	8006862 <LmHandlerSend+0x2a>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8006954:	f06f 0003 	mvn.w	r0, #3
 8006958:	e783      	b.n	8006862 <LmHandlerSend+0x2a>
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800695a:	2000      	movs	r0, #0
 800695c:	e781      	b.n	8006862 <LmHandlerSend+0x2a>
 800695e:	bf00      	nop
 8006960:	20000058 	.word	0x20000058
 8006964:	200004d4 	.word	0x200004d4
 8006968:	200004e0 	.word	0x200004e0

0800696c <MlmeIndication>:
{
 800696c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800696e:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006970:	4b14      	ldr	r3, [pc, #80]	@ (80069c4 <MlmeIndication+0x58>)
    RxParams.Status = mlmeIndication->Status;
 8006972:	7862      	ldrb	r2, [r4, #1]
 8006974:	775a      	strb	r2, [r3, #29]
    RxParams.IsMcpsIndication = 0;
 8006976:	2000      	movs	r0, #0
 8006978:	7718      	strb	r0, [r3, #28]
    RxParams.Rssi = RxStatus->Rssi;
 800697a:	880d      	ldrh	r5, [r1, #0]
 800697c:	77dd      	strb	r5, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 800697e:	788d      	ldrb	r5, [r1, #2]
 8006980:	f883 5020 	strb.w	r5, [r3, #32]
    RxParams.RxSlot = RxStatus->RxSlot;
 8006984:	78c9      	ldrb	r1, [r1, #3]
 8006986:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800698a:	2a0e      	cmp	r2, #14
 800698c:	d005      	beq.n	800699a <MlmeIndication+0x2e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800698e:	4a0e      	ldr	r2, [pc, #56]	@ (80069c8 <MlmeIndication+0x5c>)
 8006990:	6992      	ldr	r2, [r2, #24]
 8006992:	f103 011c 	add.w	r1, r3, #28
 8006996:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006998:	4790      	blx	r2
    switch( mlmeIndication->MlmeIndication )
 800699a:	7823      	ldrb	r3, [r4, #0]
 800699c:	2b07      	cmp	r3, #7
 800699e:	d10e      	bne.n	80069be <MlmeIndication+0x52>
            LmHandlerAppData_t appData =
 80069a0:	2300      	movs	r3, #0
 80069a2:	f8ad 3000 	strh.w	r3, [sp]
 80069a6:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 80069a8:	4b07      	ldr	r3, [pc, #28]	@ (80069c8 <MlmeIndication+0x5c>)
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	4798      	blx	r3
 80069b0:	4602      	mov	r2, r0
 80069b2:	b920      	cbnz	r0, 80069be <MlmeIndication+0x52>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 80069b4:	4601      	mov	r1, r0
 80069b6:	2301      	movs	r3, #1
 80069b8:	4668      	mov	r0, sp
 80069ba:	f7ff ff3d 	bl	8006838 <LmHandlerSend>
}
 80069be:	b003      	add	sp, #12
 80069c0:	bd30      	pop	{r4, r5, pc}
 80069c2:	bf00      	nop
 80069c4:	20000058 	.word	0x20000058
 80069c8:	200004d4 	.word	0x200004d4

080069cc <LmHandlerGetCurrentClass>:
{
 80069cc:	b510      	push	{r4, lr}
    if (deviceClass == NULL)
 80069ce:	4604      	mov	r4, r0
{
 80069d0:	b08a      	sub	sp, #40	@ 0x28
    if (deviceClass == NULL)
 80069d2:	b918      	cbnz	r0, 80069dc <LmHandlerGetCurrentClass+0x10>
        return LORAMAC_HANDLER_ERROR;
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80069d8:	b00a      	add	sp, #40	@ 0x28
 80069da:	bd10      	pop	{r4, pc}
    mibReq.Type = MIB_DEVICE_CLASS;
 80069dc:	2300      	movs	r3, #0
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 80069de:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_DEVICE_CLASS;
 80069e0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 80069e4:	f002 f8ba 	bl	8008b5c <LoRaMacMibGetRequestConfirm>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d1f3      	bne.n	80069d4 <LmHandlerGetCurrentClass+0x8>
    *deviceClass = mibReq.Param.Class;
 80069ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80069f0:	7023      	strb	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80069f2:	e7f1      	b.n	80069d8 <LmHandlerGetCurrentClass+0xc>

080069f4 <McpsIndication>:
{
 80069f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069f6:	b087      	sub	sp, #28
    DeviceClass_t deviceClass = CLASS_A;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 80069fe:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab4 <McpsIndication+0xc0>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	771a      	strb	r2, [r3, #28]
    RxParams.Status = mcpsIndication->Status;
 8006a04:	7842      	ldrb	r2, [r0, #1]
 8006a06:	775a      	strb	r2, [r3, #29]
{
 8006a08:	4604      	mov	r4, r0
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	d146      	bne.n	8006a9c <McpsIndication+0xa8>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8006a0e:	7902      	ldrb	r2, [r0, #4]
 8006a10:	779a      	strb	r2, [r3, #30]
    RxParams.Rssi = RxStatus->Rssi;
 8006a12:	880a      	ldrh	r2, [r1, #0]
 8006a14:	77da      	strb	r2, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 8006a16:	788a      	ldrb	r2, [r1, #2]
 8006a18:	f883 2020 	strb.w	r2, [r3, #32]
    RxParams.RxSlot = RxStatus->RxSlot;
 8006a1c:	78ca      	ldrb	r2, [r1, #3]
 8006a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8006a22:	6902      	ldr	r2, [r0, #16]
 8006a24:	625a      	str	r2, [r3, #36]	@ 0x24
    appData.Port = mcpsIndication->Port;
 8006a26:	78c2      	ldrb	r2, [r0, #3]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006a28:	4f23      	ldr	r7, [pc, #140]	@ (8006ab8 <McpsIndication+0xc4>)
    appData.Port = mcpsIndication->Port;
 8006a2a:	f88d 2008 	strb.w	r2, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8006a2e:	7b02      	ldrb	r2, [r0, #12]
 8006a30:	f88d 2009 	strb.w	r2, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8006a34:	6882      	ldr	r2, [r0, #8]
 8006a36:	9203      	str	r2, [sp, #12]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	f103 011c 	add.w	r1, r3, #28
 8006a3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a40:	a802      	add	r0, sp, #8
 8006a42:	4790      	blx	r2
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a48:	b113      	cbz	r3, 8006a50 <McpsIndication+0x5c>
 8006a4a:	7e22      	ldrb	r2, [r4, #24]
 8006a4c:	b102      	cbz	r2, 8006a50 <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8006a4e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006a50:	4e1a      	ldr	r6, [pc, #104]	@ (8006abc <McpsIndication+0xc8>)
{
 8006a52:	2500      	movs	r5, #0
        if( LmHandlerPackages[i] != NULL )
 8006a54:	f856 3b04 	ldr.w	r3, [r6], #4
 8006a58:	b153      	cbz	r3, 8006a70 <McpsIndication+0x7c>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006a5a:	69da      	ldr	r2, [r3, #28]
 8006a5c:	b142      	cbz	r2, 8006a70 <McpsIndication+0x7c>
 8006a5e:	781a      	ldrb	r2, [r3, #0]
 8006a60:	78e3      	ldrb	r3, [r4, #3]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d11c      	bne.n	8006aa0 <McpsIndication+0xac>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006a66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006a70:	3501      	adds	r5, #1
 8006a72:	b2eb      	uxtb	r3, r5
 8006a74:	2b05      	cmp	r3, #5
 8006a76:	b26d      	sxtb	r5, r5
 8006a78:	d1ec      	bne.n	8006a54 <McpsIndication+0x60>
    LmHandlerGetCurrentClass(&deviceClass);
 8006a7a:	f10d 0007 	add.w	r0, sp, #7
 8006a7e:	f7ff ffa5 	bl	80069cc <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8006a82:	7963      	ldrb	r3, [r4, #5]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d109      	bne.n	8006a9c <McpsIndication+0xa8>
 8006a88:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006a8c:	b932      	cbnz	r2, 8006a9c <McpsIndication+0xa8>
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8006a8e:	4611      	mov	r1, r2
 8006a90:	a804      	add	r0, sp, #16
        LmHandlerAppData_t appData =
 8006a92:	f8ad 2010 	strh.w	r2, [sp, #16]
 8006a96:	9205      	str	r2, [sp, #20]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8006a98:	f7ff fece 	bl	8006838 <LmHandlerSend>
}
 8006a9c:	b007      	add	sp, #28
 8006a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	d1e5      	bne.n	8006a70 <McpsIndication+0x7c>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4798      	blx	r3
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d1db      	bne.n	8006a66 <McpsIndication+0x72>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006aae:	2501      	movs	r5, #1
 8006ab0:	e7d0      	b.n	8006a54 <McpsIndication+0x60>
 8006ab2:	bf00      	nop
 8006ab4:	20000058 	.word	0x20000058
 8006ab8:	200004d4 	.word	0x200004d4
 8006abc:	200004f0 	.word	0x200004f0

08006ac0 <LmHandlerGetTxDatarate>:
{
 8006ac0:	b510      	push	{r4, lr}
    if (txDatarate == NULL)
 8006ac2:	4604      	mov	r4, r0
{
 8006ac4:	b08a      	sub	sp, #40	@ 0x28
    if (txDatarate == NULL)
 8006ac6:	b918      	cbnz	r0, 8006ad0 <LmHandlerGetTxDatarate+0x10>
        return LORAMAC_HANDLER_ERROR;
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006acc:	b00a      	add	sp, #40	@ 0x28
 8006ace:	bd10      	pop	{r4, pc}
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8006ad0:	231f      	movs	r3, #31
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8006ad2:	a801      	add	r0, sp, #4
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8006ad4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8006ad8:	f002 f840 	bl	8008b5c <LoRaMacMibGetRequestConfirm>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d1f3      	bne.n	8006ac8 <LmHandlerGetTxDatarate+0x8>
    LmHandlerParams.TxDatarate = *txDatarate;
 8006ae0:	4a03      	ldr	r2, [pc, #12]	@ (8006af0 <LmHandlerGetTxDatarate+0x30>)
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8006ae2:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8006ae6:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8006ae8:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
    return LORAMAC_HANDLER_SUCCESS;
 8006aec:	e7ee      	b.n	8006acc <LmHandlerGetTxDatarate+0xc>
 8006aee:	bf00      	nop
 8006af0:	200004d4 	.word	0x200004d4

08006af4 <MlmeConfirm>:
{
 8006af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    TxParams.IsMcpsConfirm = 0;
 8006af6:	4e23      	ldr	r6, [pc, #140]	@ (8006b84 <MlmeConfirm+0x90>)
    TxParams.Status = mlmeConfirm->Status;
 8006af8:	7843      	ldrb	r3, [r0, #1]
 8006afa:	7073      	strb	r3, [r6, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006afc:	69b3      	ldr	r3, [r6, #24]
    TxParams.IsMcpsConfirm = 0;
 8006afe:	2500      	movs	r5, #0
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006b00:	6a1b      	ldr	r3, [r3, #32]
    TxParams.IsMcpsConfirm = 0;
 8006b02:	7035      	strb	r5, [r6, #0]
{
 8006b04:	b08b      	sub	sp, #44	@ 0x2c
 8006b06:	4604      	mov	r4, r0
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006b08:	4630      	mov	r0, r6
 8006b0a:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006b0c:	f106 071c 	add.w	r7, r6, #28
        if( LmHandlerPackages[i] != NULL )
 8006b10:	f857 3b04 	ldr.w	r3, [r7], #4
 8006b14:	b11b      	cbz	r3, 8006b1e <MlmeConfirm+0x2a>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	b10b      	cbz	r3, 8006b1e <MlmeConfirm+0x2a>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006b1e:	3501      	adds	r5, #1
 8006b20:	b2eb      	uxtb	r3, r5
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	b26d      	sxtb	r5, r5
 8006b26:	d1f3      	bne.n	8006b10 <MlmeConfirm+0x1c>
    switch( mlmeConfirm->MlmeRequest )
 8006b28:	7823      	ldrb	r3, [r4, #0]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d003      	beq.n	8006b36 <MlmeConfirm+0x42>
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d01d      	beq.n	8006b6e <MlmeConfirm+0x7a>
}
 8006b32:	b00b      	add	sp, #44	@ 0x2c
 8006b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8006b36:	4d14      	ldr	r5, [pc, #80]	@ (8006b88 <MlmeConfirm+0x94>)
            mibReq.Type = MIB_DEV_ADDR;
 8006b38:	2306      	movs	r3, #6
            LoRaMacMibGetRequestConfirm( &mibReq );
 8006b3a:	a801      	add	r0, sp, #4
            mibReq.Type = MIB_DEV_ADDR;
 8006b3c:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8006b40:	f002 f80c 	bl	8008b5c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8006b44:	9b02      	ldr	r3, [sp, #8]
 8006b46:	616b      	str	r3, [r5, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8006b48:	f105 0018 	add.w	r0, r5, #24
 8006b4c:	f7ff ffb8 	bl	8006ac0 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8006b50:	7863      	ldrb	r3, [r4, #1]
 8006b52:	b94b      	cbnz	r3, 8006b68 <MlmeConfirm+0x74>
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006b54:	f896 0031 	ldrb.w	r0, [r6, #49]	@ 0x31
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006b58:	766b      	strb	r3, [r5, #25]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006b5a:	f7ff fdd1 	bl	8006700 <LmHandlerRequestClass>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006b5e:	69b3      	ldr	r3, [r6, #24]
 8006b60:	480a      	ldr	r0, [pc, #40]	@ (8006b8c <MlmeConfirm+0x98>)
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	4798      	blx	r3
        break;
 8006b66:	e7e4      	b.n	8006b32 <MlmeConfirm+0x3e>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8006b68:	23ff      	movs	r3, #255	@ 0xff
 8006b6a:	766b      	strb	r3, [r5, #25]
 8006b6c:	e7f7      	b.n	8006b5e <MlmeConfirm+0x6a>
            RxParams.LinkCheck = true;
 8006b6e:	4b06      	ldr	r3, [pc, #24]	@ (8006b88 <MlmeConfirm+0x94>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8006b76:	7a22      	ldrb	r2, [r4, #8]
 8006b78:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8006b7c:	7a62      	ldrb	r2, [r4, #9]
 8006b7e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 8006b82:	e7d6      	b.n	8006b32 <MlmeConfirm+0x3e>
 8006b84:	200004d4 	.word	0x200004d4
 8006b88:	20000058 	.word	0x20000058
 8006b8c:	20000070 	.word	0x20000070

08006b90 <LmHandlerPackageRegister>:
{
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	460d      	mov	r5, r1
    switch( id )
 8006b94:	4604      	mov	r4, r0
 8006b96:	b110      	cbz	r0, 8006b9e <LmHandlerPackageRegister+0xe>
        return LORAMAC_HANDLER_ERROR;
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006b9c:	bd38      	pop	{r3, r4, r5, pc}
            package = LmhpCompliancePackageFactory( );
 8006b9e:	f000 f9bd 	bl	8006f1c <LmhpCompliancePackageFactory>
    if( package != NULL )
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d0f8      	beq.n	8006b98 <LmHandlerPackageRegister+0x8>
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8006ba6:	4b09      	ldr	r3, [pc, #36]	@ (8006bcc <LmHandlerPackageRegister+0x3c>)
        LmHandlerPackages[id] = package;
 8006ba8:	4909      	ldr	r1, [pc, #36]	@ (8006bd0 <LmHandlerPackageRegister+0x40>)
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8006baa:	6243      	str	r3, [r0, #36]	@ 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8006bac:	4b09      	ldr	r3, [pc, #36]	@ (8006bd4 <LmHandlerPackageRegister+0x44>)
 8006bae:	6283      	str	r3, [r0, #40]	@ 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8006bb0:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <LmHandlerPackageRegister+0x48>)
 8006bb2:	62c3      	str	r3, [r0, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8006bb4:	698b      	ldr	r3, [r1, #24]
        LmHandlerPackages[id] = package;
 8006bb6:	61c8      	str	r0, [r1, #28]
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	6143      	str	r3, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8006bbc:	22f2      	movs	r2, #242	@ 0xf2
 8006bbe:	6843      	ldr	r3, [r0, #4]
 8006bc0:	3165      	adds	r1, #101	@ 0x65
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	e7e8      	b.n	8006b9c <LmHandlerPackageRegister+0xc>
 8006bca:	bf00      	nop
 8006bcc:	080067b5 	.word	0x080067b5
 8006bd0:	200004d4 	.word	0x200004d4
 8006bd4:	08006839 	.word	0x08006839
 8006bd8:	08006495 	.word	0x08006495

08006bdc <LmHandlerInit>:
{
 8006bdc:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8006bde:	4b0e      	ldr	r3, [pc, #56]	@ (8006c18 <LmHandlerInit+0x3c>)
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8006be0:	4a0e      	ldr	r2, [pc, #56]	@ (8006c1c <LmHandlerInit+0x40>)
 8006be2:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8006be4:	4a0e      	ldr	r2, [pc, #56]	@ (8006c20 <LmHandlerInit+0x44>)
 8006be6:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8006be8:	4a0e      	ldr	r2, [pc, #56]	@ (8006c24 <LmHandlerInit+0x48>)
 8006bea:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8006bec:	4a0e      	ldr	r2, [pc, #56]	@ (8006c28 <LmHandlerInit+0x4c>)
 8006bee:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8006bf0:	6802      	ldr	r2, [r0, #0]
 8006bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8006bf4:	6842      	ldr	r2, [r0, #4]
 8006bf6:	645a      	str	r2, [r3, #68]	@ 0x44
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8006bf8:	6882      	ldr	r2, [r0, #8]
 8006bfa:	649a      	str	r2, [r3, #72]	@ 0x48
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8006bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8006c2c <LmHandlerInit+0x50>)
    LmHandlerCallbacks = handlerCallbacks;
 8006bfe:	6198      	str	r0, [r3, #24]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8006c00:	64da      	str	r2, [r3, #76]	@ 0x4c
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8006c02:	490b      	ldr	r1, [pc, #44]	@ (8006c30 <LmHandlerInit+0x54>)
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8006c04:	6902      	ldr	r2, [r0, #16]
 8006c06:	651a      	str	r2, [r3, #80]	@ 0x50
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f7ff ffc1 	bl	8006b90 <LmHandlerPackageRegister>
 8006c0e:	3800      	subs	r0, #0
 8006c10:	bf18      	it	ne
 8006c12:	2001      	movne	r0, #1
}
 8006c14:	4240      	negs	r0, r0
 8006c16:	bd08      	pop	{r3, pc}
 8006c18:	200004d4 	.word	0x200004d4
 8006c1c:	080064b1 	.word	0x080064b1
 8006c20:	080069f5 	.word	0x080069f5
 8006c24:	08006af5 	.word	0x08006af5
 8006c28:	0800696d 	.word	0x0800696d
 8006c2c:	08006f25 	.word	0x08006f25
 8006c30:	20000084 	.word	0x20000084

08006c34 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8006c34:	4b01      	ldr	r3, [pc, #4]	@ (8006c3c <LmhpComplianceIsInitialized+0x8>)
 8006c36:	7818      	ldrb	r0, [r3, #0]
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	2000062c 	.word	0x2000062c

08006c40 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8006c40:	4b02      	ldr	r3, [pc, #8]	@ (8006c4c <LmhpComplianceIsRunning+0xc>)
 8006c42:	7818      	ldrb	r0, [r3, #0]
 8006c44:	b100      	cbz	r0, 8006c48 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8006c46:	7858      	ldrb	r0, [r3, #1]
}
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	2000062c 	.word	0x2000062c

08006c50 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8006c50:	4770      	bx	lr
	...

08006c54 <LmhpComplianceInit>:
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8006c54:	4b05      	ldr	r3, [pc, #20]	@ (8006c6c <LmhpComplianceInit+0x18>)
 8006c56:	b130      	cbz	r0, 8006c66 <LmhpComplianceInit+0x12>
 8006c58:	b129      	cbz	r1, 8006c66 <LmhpComplianceInit+0x12>
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8006c5a:	715a      	strb	r2, [r3, #5]
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8006c5c:	6158      	str	r0, [r3, #20]
        ComplianceTestState.DataBuffer = dataBuffer;
 8006c5e:	6099      	str	r1, [r3, #8]
        ComplianceTestState.Initialized = true;
 8006c60:	2201      	movs	r2, #1
 8006c62:	701a      	strb	r2, [r3, #0]
}
 8006c64:	4770      	bx	lr
        LmhpComplianceParams = NULL;
 8006c66:	2200      	movs	r2, #0
 8006c68:	615a      	str	r2, [r3, #20]
}
 8006c6a:	e7fa      	b.n	8006c62 <LmhpComplianceInit+0xe>
 8006c6c:	2000062c 	.word	0x2000062c

08006c70 <LmhpComplianceOnMcpsConfirm>:
    if (ComplianceTestState.Initialized == false)
 8006c70:	4b06      	ldr	r3, [pc, #24]	@ (8006c8c <LmhpComplianceOnMcpsConfirm+0x1c>)
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	b14a      	cbz	r2, 8006c8a <LmhpComplianceOnMcpsConfirm+0x1a>
    if ((ComplianceTestState.IsRunning == true) &&
 8006c76:	785a      	ldrb	r2, [r3, #1]
 8006c78:	b13a      	cbz	r2, 8006c8a <LmhpComplianceOnMcpsConfirm+0x1a>
 8006c7a:	7802      	ldrb	r2, [r0, #0]
 8006c7c:	2a01      	cmp	r2, #1
 8006c7e:	d104      	bne.n	8006c8a <LmhpComplianceOnMcpsConfirm+0x1a>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8006c80:	7902      	ldrb	r2, [r0, #4]
 8006c82:	b112      	cbz	r2, 8006c8a <LmhpComplianceOnMcpsConfirm+0x1a>
        ComplianceTestState.DownLinkCounter++;
 8006c84:	899a      	ldrh	r2, [r3, #12]
 8006c86:	3201      	adds	r2, #1
 8006c88:	819a      	strh	r2, [r3, #12]
}
 8006c8a:	4770      	bx	lr
 8006c8c:	2000062c 	.word	0x2000062c

08006c90 <LmhpComplianceOnMlmeConfirm>:
    if( ComplianceTestState.Initialized == false )
 8006c90:	4b07      	ldr	r3, [pc, #28]	@ (8006cb0 <LmhpComplianceOnMlmeConfirm+0x20>)
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	b152      	cbz	r2, 8006cac <LmhpComplianceOnMlmeConfirm+0x1c>
    if( ComplianceTestState.IsRunning == false )
 8006c96:	785a      	ldrb	r2, [r3, #1]
 8006c98:	b142      	cbz	r2, 8006cac <LmhpComplianceOnMlmeConfirm+0x1c>
    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8006c9a:	7802      	ldrb	r2, [r0, #0]
 8006c9c:	2a04      	cmp	r2, #4
 8006c9e:	d105      	bne.n	8006cac <LmhpComplianceOnMlmeConfirm+0x1c>
 8006ca0:	7a01      	ldrb	r1, [r0, #8]
 8006ca2:	7a42      	ldrb	r2, [r0, #9]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8006ca4:	73d9      	strb	r1, [r3, #15]
        ComplianceTestState.LinkCheck = true;
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	7398      	strb	r0, [r3, #14]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8006caa:	741a      	strb	r2, [r3, #16]
}
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	2000062c 	.word	0x2000062c

08006cb4 <LmhpComplianceTxProcess.isra.0>:
static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
 8006cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 8006cb6:	4c1a      	ldr	r4, [pc, #104]	@ (8006d20 <LmhpComplianceTxProcess.isra.0+0x6c>)
 8006cb8:	7823      	ldrb	r3, [r4, #0]
 8006cba:	b33b      	cbz	r3, 8006d0c <LmhpComplianceTxProcess.isra.0+0x58>
    if( ComplianceTestState.IsRunning == false )
 8006cbc:	7863      	ldrb	r3, [r4, #1]
 8006cbe:	b32b      	cbz	r3, 8006d0c <LmhpComplianceTxProcess.isra.0+0x58>
    if( ComplianceTestState.LinkCheck == true )
 8006cc0:	7ba2      	ldrb	r2, [r4, #14]
        ComplianceTestState.DataBuffer[0] = 5;
 8006cc2:	68a3      	ldr	r3, [r4, #8]
    if( ComplianceTestState.LinkCheck == true )
 8006cc4:	b162      	cbz	r2, 8006ce0 <LmhpComplianceTxProcess.isra.0+0x2c>
        ComplianceTestState.LinkCheck = false;
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	73a2      	strb	r2, [r4, #14]
        ComplianceTestState.DataBufferSize = 3;
 8006cca:	2203      	movs	r2, #3
 8006ccc:	71a2      	strb	r2, [r4, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8006cce:	2205      	movs	r2, #5
 8006cd0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8006cd2:	7be2      	ldrb	r2, [r4, #15]
 8006cd4:	705a      	strb	r2, [r3, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8006cd6:	7c22      	ldrb	r2, [r4, #16]
 8006cd8:	709a      	strb	r2, [r3, #2]
            ComplianceTestState.State = 1;
 8006cda:	2201      	movs	r2, #1
 8006cdc:	70a2      	strb	r2, [r4, #2]
            break;
 8006cde:	e004      	b.n	8006cea <LmhpComplianceTxProcess.isra.0+0x36>
        switch( ComplianceTestState.State )
 8006ce0:	78a2      	ldrb	r2, [r4, #2]
 8006ce2:	2a01      	cmp	r2, #1
 8006ce4:	d014      	beq.n	8006d10 <LmhpComplianceTxProcess.isra.0+0x5c>
 8006ce6:	2a04      	cmp	r2, #4
 8006ce8:	d0f7      	beq.n	8006cda <LmhpComplianceTxProcess.isra.0+0x26>
    LmHandlerAppData_t appData =
 8006cea:	22e0      	movs	r2, #224	@ 0xe0
 8006cec:	f88d 2000 	strb.w	r2, [sp]
    TimerStart( &ComplianceTxNextPacketTimer );
 8006cf0:	480c      	ldr	r0, [pc, #48]	@ (8006d24 <LmhpComplianceTxProcess.isra.0+0x70>)
    LmHandlerAppData_t appData =
 8006cf2:	79a2      	ldrb	r2, [r4, #6]
 8006cf4:	f88d 2001 	strb.w	r2, [sp, #1]
 8006cf8:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8006cfa:	f006 fb7b 	bl	800d3f4 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8006cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <LmhpComplianceTxProcess.isra.0+0x74>)
 8006d00:	78e1      	ldrb	r1, [r4, #3]
 8006d02:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8006d04:	2200      	movs	r2, #0
 8006d06:	2301      	movs	r3, #1
 8006d08:	4668      	mov	r0, sp
 8006d0a:	47a8      	blx	r5
}
 8006d0c:	b003      	add	sp, #12
 8006d0e:	bd30      	pop	{r4, r5, pc}
            ComplianceTestState.DataBufferSize = 2;
 8006d10:	2202      	movs	r2, #2
 8006d12:	71a2      	strb	r2, [r4, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8006d14:	89a2      	ldrh	r2, [r4, #12]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8006d16:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8006d18:	0a11      	lsrs	r1, r2, #8
 8006d1a:	7019      	strb	r1, [r3, #0]
            break;
 8006d1c:	e7e5      	b.n	8006cea <LmhpComplianceTxProcess.isra.0+0x36>
 8006d1e:	bf00      	nop
 8006d20:	2000062c 	.word	0x2000062c
 8006d24:	20000644 	.word	0x20000644
 8006d28:	20000090 	.word	0x20000090

08006d2c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
    LmhpComplianceTxProcess( );
 8006d2c:	f7ff bfc2 	b.w	8006cb4 <LmhpComplianceTxProcess.isra.0>

08006d30 <LmhpComplianceOnMcpsIndication>:
{
 8006d30:	b530      	push	{r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 8006d32:	4c76      	ldr	r4, [pc, #472]	@ (8006f0c <LmhpComplianceOnMcpsIndication+0x1dc>)
 8006d34:	7823      	ldrb	r3, [r4, #0]
{
 8006d36:	b08d      	sub	sp, #52	@ 0x34
    if( ComplianceTestState.Initialized == false )
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d042      	beq.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
    if( mcpsIndication->RxData == false )
 8006d3c:	7b43      	ldrb	r3, [r0, #13]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d03f      	beq.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
    if ((ComplianceTestState.IsRunning == true) &&
 8006d42:	7865      	ldrb	r5, [r4, #1]
 8006d44:	b125      	cbz	r5, 8006d50 <LmhpComplianceOnMcpsIndication+0x20>
 8006d46:	7b83      	ldrb	r3, [r0, #14]
 8006d48:	b913      	cbnz	r3, 8006d50 <LmhpComplianceOnMcpsIndication+0x20>
        ComplianceTestState.DownLinkCounter++;
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	81a3      	strh	r3, [r4, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8006d50:	78c1      	ldrb	r1, [r0, #3]
 8006d52:	29e0      	cmp	r1, #224	@ 0xe0
 8006d54:	d135      	bne.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
    if( ComplianceTestState.IsRunning == false )
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	d135      	bne.n	8006dc6 <LmhpComplianceOnMcpsIndication+0x96>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006d5a:	7b02      	ldrb	r2, [r0, #12]
 8006d5c:	2a04      	cmp	r2, #4
 8006d5e:	d130      	bne.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006d60:	6883      	ldr	r3, [r0, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006d62:	7818      	ldrb	r0, [r3, #0]
 8006d64:	2801      	cmp	r0, #1
 8006d66:	d12c      	bne.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006d68:	7858      	ldrb	r0, [r3, #1]
 8006d6a:	2801      	cmp	r0, #1
 8006d6c:	d129      	bne.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006d6e:	7898      	ldrb	r0, [r3, #2]
 8006d70:	2801      	cmp	r0, #1
 8006d72:	d126      	bne.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006d74:	78db      	ldrb	r3, [r3, #3]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d123      	bne.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
            ComplianceTestState.DataBufferSize = 2;
 8006d7a:	2002      	movs	r0, #2
 8006d7c:	71a0      	strb	r0, [r4, #6]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006d7e:	a803      	add	r0, sp, #12
            ComplianceTestState.IsRunning = true;
 8006d80:	7063      	strb	r3, [r4, #1]
            ComplianceTestState.State = 1;
 8006d82:	8063      	strh	r3, [r4, #2]
            mibReq.Param.AdrEnable = true;
 8006d84:	f88d 3010 	strb.w	r3, [sp, #16]
            ComplianceTestState.Port = 224;
 8006d88:	7121      	strb	r1, [r4, #4]
            mibReq.Type = MIB_ADR;
 8006d8a:	f88d 200c 	strb.w	r2, [sp, #12]
            ComplianceTestState.DownLinkCounter = 0;
 8006d8e:	60e5      	str	r5, [r4, #12]
            ComplianceTestState.NbGateways = 0;
 8006d90:	7425      	strb	r5, [r4, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006d92:	f001 ff9d 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8006d96:	4628      	mov	r0, r5
 8006d98:	f002 fc48 	bl	800962c <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8006d9c:	6963      	ldr	r3, [r4, #20]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	b103      	cbz	r3, 8006da4 <LmhpComplianceOnMcpsIndication+0x74>
                LmhpComplianceParams->StopPeripherals( );
 8006da2:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8006da4:	2200      	movs	r2, #0
 8006da6:	4b5a      	ldr	r3, [pc, #360]	@ (8006f10 <LmhpComplianceOnMcpsIndication+0x1e0>)
 8006da8:	9200      	str	r2, [sp, #0]
 8006daa:	f04f 31ff 	mov.w	r1, #4294967295
 8006dae:	4859      	ldr	r0, [pc, #356]	@ (8006f14 <LmhpComplianceOnMcpsIndication+0x1e4>)
 8006db0:	f006 fa74 	bl	800d29c <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8006db4:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006db8:	4856      	ldr	r0, [pc, #344]	@ (8006f14 <LmhpComplianceOnMcpsIndication+0x1e4>)
 8006dba:	f006 fb55 	bl	800d468 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8006dbe:	f7ff ff79 	bl	8006cb4 <LmhpComplianceTxProcess.isra.0>
}
 8006dc2:	b00d      	add	sp, #52	@ 0x34
 8006dc4:	bd30      	pop	{r4, r5, pc}
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8006dc6:	6883      	ldr	r3, [r0, #8]
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	70a2      	strb	r2, [r4, #2]
        switch( ComplianceTestState.State )
 8006dcc:	2a0a      	cmp	r2, #10
 8006dce:	d8f8      	bhi.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
 8006dd0:	e8df f002 	tbb	[pc, r2]
 8006dd4:	27232006 	.word	0x27232006
 8006dd8:	60433c29 	.word	0x60433c29
 8006ddc:	8b89      	.short	0x8b89
 8006dde:	95          	.byte	0x95
 8006ddf:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8006de0:	484c      	ldr	r0, [pc, #304]	@ (8006f14 <LmhpComplianceOnMcpsIndication+0x1e4>)
 8006de2:	f006 fab9 	bl	800d358 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	81a3      	strh	r3, [r4, #12]
                ComplianceTestState.IsRunning = false;
 8006dea:	7063      	strb	r3, [r4, #1]
                mibReq.Type = MIB_ADR;
 8006dec:	2304      	movs	r3, #4
 8006dee:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006df2:	6963      	ldr	r3, [r4, #20]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006df4:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006dfc:	f001 ff68 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006e00:	6963      	ldr	r3, [r4, #20]
 8006e02:	7858      	ldrb	r0, [r3, #1]
 8006e04:	f002 fc12 	bl	800962c <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006e08:	6963      	ldr	r3, [r4, #20]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0d8      	beq.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
                    LmhpComplianceParams->StartPeripherals( );
 8006e10:	4798      	blx	r3
            break;
 8006e12:	e7d6      	b.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
            ComplianceTestState.DataBufferSize = 2;
 8006e14:	2302      	movs	r3, #2
 8006e16:	71a3      	strb	r3, [r4, #6]
            break;
 8006e18:	e7d3      	b.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
            ComplianceTestState.State = 1;
 8006e1a:	f240 1301 	movw	r3, #257	@ 0x101
            ComplianceTestState.State = 1;
 8006e1e:	8063      	strh	r3, [r4, #2]
            break;
 8006e20:	e7cf      	b.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
            ComplianceTestState.State = 1;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e7fb      	b.n	8006e1e <LmhpComplianceOnMcpsIndication+0xee>
            ComplianceTestState.DataBuffer[0] = 4;
 8006e26:	68a5      	ldr	r5, [r4, #8]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8006e28:	7b03      	ldrb	r3, [r0, #12]
 8006e2a:	71a3      	strb	r3, [r4, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	702a      	strb	r2, [r5, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006e30:	7962      	ldrb	r2, [r4, #5]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	bf28      	it	cs
 8006e36:	461a      	movcs	r2, r3
 8006e38:	2300      	movs	r3, #0
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2d9      	uxtb	r1, r3
 8006e3e:	428a      	cmp	r2, r1
 8006e40:	d9bf      	bls.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8006e42:	6881      	ldr	r1, [r0, #8]
 8006e44:	5cc9      	ldrb	r1, [r1, r3]
 8006e46:	3101      	adds	r1, #1
 8006e48:	54e9      	strb	r1, [r5, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006e4a:	e7f6      	b.n	8006e3a <LmhpComplianceOnMcpsIndication+0x10a>
                mlmeReq.Type = MLME_LINK_CHECK;
 8006e4c:	2304      	movs	r3, #4
                mlmeReq.Type = MLME_DEVICE_TIME;
 8006e4e:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8006e52:	a803      	add	r0, sp, #12
 8006e54:	f002 f964 	bl	8009120 <LoRaMacMlmeRequest>
            break;
 8006e58:	e7b3      	b.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
                TimerStop(&ComplianceTxNextPacketTimer);
 8006e5a:	482e      	ldr	r0, [pc, #184]	@ (8006f14 <LmhpComplianceOnMcpsIndication+0x1e4>)
 8006e5c:	f006 fa7c 	bl	800d358 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	81a3      	strh	r3, [r4, #12]
                ComplianceTestState.IsRunning = false;
 8006e64:	7063      	strb	r3, [r4, #1]
                mibReq.Type = MIB_ADR;
 8006e66:	2304      	movs	r3, #4
 8006e68:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006e6c:	6963      	ldr	r3, [r4, #20]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006e6e:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006e76:	f001 ff2b 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006e7a:	6963      	ldr	r3, [r4, #20]
 8006e7c:	7858      	ldrb	r0, [r3, #1]
 8006e7e:	f002 fbd5 	bl	800962c <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006e82:	6963      	ldr	r3, [r4, #20]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	b103      	cbz	r3, 8006e8a <LmhpComplianceOnMcpsIndication+0x15a>
                    LmhpComplianceParams->StartPeripherals( );
 8006e88:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8006e8a:	4b23      	ldr	r3, [pc, #140]	@ (8006f18 <LmhpComplianceOnMcpsIndication+0x1e8>)
 8006e8c:	2002      	movs	r0, #2
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	4798      	blx	r3
            break;
 8006e92:	e796      	b.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
                if( mcpsIndication->BufferSize == 3 )
 8006e94:	7b02      	ldrb	r2, [r0, #12]
 8006e96:	2a03      	cmp	r2, #3
 8006e98:	d10d      	bne.n	8006eb6 <LmhpComplianceOnMcpsIndication+0x186>
                    mlmeReq.Type = MLME_TXCW;
 8006e9a:	2205      	movs	r2, #5
 8006e9c:	f88d 200c 	strb.w	r2, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006ea0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ea4:	ba5b      	rev16	r3, r3
 8006ea6:	f8ad 3010 	strh.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8006eaa:	a803      	add	r0, sp, #12
 8006eac:	f002 f938 	bl	8009120 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	70a3      	strb	r3, [r4, #2]
            break;
 8006eb4:	e785      	b.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
                else if( mcpsIndication->BufferSize == 7 )
 8006eb6:	2a07      	cmp	r2, #7
 8006eb8:	d1f7      	bne.n	8006eaa <LmhpComplianceOnMcpsIndication+0x17a>
                    mlmeReq.Type = MLME_TXCW_1;
 8006eba:	2206      	movs	r2, #6
 8006ebc:	f88d 200c 	strb.w	r2, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006ec0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 8006ec4:	ba52      	rev16	r2, r2
 8006ec6:	f8ad 2010 	strh.w	r2, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8006eca:	791a      	ldrb	r2, [r3, #4]
 8006ecc:	78d9      	ldrb	r1, [r3, #3]
 8006ece:	0212      	lsls	r2, r2, #8
 8006ed0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006ed4:	7959      	ldrb	r1, [r3, #5]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	2164      	movs	r1, #100	@ 0x64
 8006eda:	434a      	muls	r2, r1
 8006edc:	9205      	str	r2, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8006ede:	799b      	ldrb	r3, [r3, #6]
 8006ee0:	f88d 3018 	strb.w	r3, [sp, #24]
 8006ee4:	e7e1      	b.n	8006eaa <LmhpComplianceOnMcpsIndication+0x17a>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8006ee6:	230a      	movs	r3, #10
 8006ee8:	e7b1      	b.n	8006e4e <LmhpComplianceOnMcpsIndication+0x11e>
                mibReq.Type = MIB_DEVICE_CLASS;
 8006eea:	2200      	movs	r2, #0
 8006eec:	f88d 200c 	strb.w	r2, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006ef6:	a803      	add	r0, sp, #12
 8006ef8:	f001 feea 	bl	8008cd0 <LoRaMacMibSetRequestConfirm>
            break;
 8006efc:	e761      	b.n	8006dc2 <LmhpComplianceOnMcpsIndication+0x92>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8006efe:	220d      	movs	r2, #13
 8006f00:	f88d 200c 	strb.w	r2, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	f88d 3010 	strb.w	r3, [sp, #16]
 8006f0a:	e7a2      	b.n	8006e52 <LmhpComplianceOnMcpsIndication+0x122>
 8006f0c:	2000062c 	.word	0x2000062c
 8006f10:	08006d2d 	.word	0x08006d2d
 8006f14:	20000644 	.word	0x20000644
 8006f18:	20000090 	.word	0x20000090

08006f1c <LmhpCompliancePackageFactory>:
}
 8006f1c:	4800      	ldr	r0, [pc, #0]	@ (8006f20 <LmhpCompliancePackageFactory+0x4>)
 8006f1e:	4770      	bx	lr
 8006f20:	20000090 	.word	0x20000090

08006f24 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8006f24:	4770      	bx	lr

08006f26 <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 8006f26:	2000      	movs	r0, #0
 8006f28:	4770      	bx	lr

08006f2a <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	4770      	bx	lr
	...

08006f30 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8006f30:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <OnRadioRxError+0x18>)
 8006f32:	781a      	ldrb	r2, [r3, #0]
 8006f34:	f042 0202 	orr.w	r2, r2, #2
 8006f38:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006f3a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8006f3e:	b113      	cbz	r3, 8006f46 <OnRadioRxError+0x16>
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	b103      	cbz	r3, 8006f46 <OnRadioRxError+0x16>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8006f44:	4718      	bx	r3
    }
}
 8006f46:	4770      	bx	lr
 8006f48:	2000065c 	.word	0x2000065c

08006f4c <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006f4c:	4a04      	ldr	r2, [pc, #16]	@ (8006f60 <UpdateRxSlotIdleState+0x14>)
 8006f4e:	f892 3608 	ldrb.w	r3, [r2, #1544]	@ 0x608
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	bf18      	it	ne
 8006f56:	2306      	movne	r3, #6
 8006f58:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	2000065c 	.word	0x2000065c

08006f64 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8006f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006f66:	4b0a      	ldr	r3, [pc, #40]	@ (8006f90 <GetMaxAppPayloadWithoutFOptsLength+0x2c>)
    getPhy.Datarate = datarate;
 8006f68:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006f6c:	f893 2580 	ldrb.w	r2, [r3, #1408]	@ 0x580
 8006f70:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8006f74:	f893 258c 	ldrb.w	r2, [r3, #1420]	@ 0x58c
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f78:	f893 054c 	ldrb.w	r0, [r3, #1356]	@ 0x54c
 8006f7c:	320d      	adds	r2, #13
 8006f7e:	a902      	add	r1, sp, #8
 8006f80:	f88d 2008 	strb.w	r2, [sp, #8]
 8006f84:	f003 fa2d 	bl	800a3e2 <RegionGetPhyParam>

    return phyParam.Value;
}
 8006f88:	b2c0      	uxtb	r0, r0
 8006f8a:	b005      	add	sp, #20
 8006f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f90:	2000065c 	.word	0x2000065c

08006f94 <OnAckTimeoutTimerEvent>:
{
 8006f94:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8006f96:	4c0f      	ldr	r4, [pc, #60]	@ (8006fd4 <OnAckTimeoutTimerEvent+0x40>)
 8006f98:	f504 707f 	add.w	r0, r4, #1020	@ 0x3fc
 8006f9c:	f006 f9dc 	bl	800d358 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8006fa0:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8006fa4:	b113      	cbz	r3, 8006fac <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8006fac:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8006fb0:	2b02      	cmp	r3, #2
        MacCtx.MacFlags.Bits.MacDone = 1;
 8006fb2:	bf02      	ittt	eq
 8006fb4:	f894 3485 	ldrbeq.w	r3, [r4, #1157]	@ 0x485
 8006fb8:	f043 0320 	orreq.w	r3, r3, #32
 8006fbc:	f884 3485 	strbeq.w	r3, [r4, #1157]	@ 0x485
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006fc0:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
 8006fc4:	b123      	cbz	r3, 8006fd0 <OnAckTimeoutTimerEvent+0x3c>
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	b113      	cbz	r3, 8006fd0 <OnAckTimeoutTimerEvent+0x3c>
}
 8006fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8006fce:	4718      	bx	r3
}
 8006fd0:	bd10      	pop	{r4, pc}
 8006fd2:	bf00      	nop
 8006fd4:	2000065c 	.word	0x2000065c

08006fd8 <PrepareRxDoneAbort>:
{
 8006fd8:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8006fda:	4c0c      	ldr	r4, [pc, #48]	@ (800700c <PrepareRxDoneAbort+0x34>)
 8006fdc:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe4:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    if( MacCtx.NodeAckRequested == true )
 8006fe8:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8006fec:	b113      	cbz	r3, 8006ff4 <PrepareRxDoneAbort+0x1c>
        OnAckTimeoutTimerEvent( NULL );
 8006fee:	2000      	movs	r0, #0
 8006ff0:	f7ff ffd0 	bl	8006f94 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8006ff4:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8006ff8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006ffc:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8007000:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
}
 8007004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 8007008:	f7ff bfa0 	b.w	8006f4c <UpdateRxSlotIdleState>
 800700c:	2000065c 	.word	0x2000065c

08007010 <HandleRadioRxErrorTimeout>:
{
 8007010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007014:	4c2c      	ldr	r4, [pc, #176]	@ (80070c8 <HandleRadioRxErrorTimeout+0xb8>)
 8007016:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 800701a:	2b02      	cmp	r3, #2
{
 800701c:	4607      	mov	r7, r0
 800701e:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007020:	d002      	beq.n	8007028 <HandleRadioRxErrorTimeout+0x18>
        Radio.Sleep( );
 8007022:	4b2a      	ldr	r3, [pc, #168]	@ (80070cc <HandleRadioRxErrorTimeout+0xbc>)
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007028:	f002 fb8b 	bl	8009742 <LoRaMacClassBIsBeaconExpected>
 800702c:	4605      	mov	r5, r0
 800702e:	b128      	cbz	r0, 800703c <HandleRadioRxErrorTimeout+0x2c>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8007030:	2002      	movs	r0, #2
 8007032:	f002 fb7c 	bl	800972e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8007036:	2000      	movs	r0, #0
 8007038:	f002 fb7e 	bl	8009738 <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800703c:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8007040:	2b01      	cmp	r3, #1
 8007042:	d117      	bne.n	8007074 <HandleRadioRxErrorTimeout+0x64>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007044:	f002 fb7f 	bl	8009746 <LoRaMacClassBIsPingExpected>
 8007048:	4680      	mov	r8, r0
 800704a:	b130      	cbz	r0, 800705a <HandleRadioRxErrorTimeout+0x4a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800704c:	2000      	movs	r0, #0
 800704e:	f002 fb6f 	bl	8009730 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007052:	2000      	movs	r0, #0
 8007054:	f002 fb71 	bl	800973a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007058:	4645      	mov	r5, r8
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800705a:	f002 fb76 	bl	800974a <LoRaMacClassBIsMulticastExpected>
 800705e:	b148      	cbz	r0, 8007074 <HandleRadioRxErrorTimeout+0x64>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007060:	2000      	movs	r0, #0
 8007062:	f002 fb66 	bl	8009732 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007066:	2000      	movs	r0, #0
 8007068:	f002 fb68 	bl	800973c <LoRaMacClassBMulticastSlotTimerEvent>
}
 800706c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 8007070:	f7ff bf6c 	b.w	8006f4c <UpdateRxSlotIdleState>
    if( classBRx == false )
 8007074:	2d00      	cmp	r5, #0
 8007076:	d1f9      	bne.n	800706c <HandleRadioRxErrorTimeout+0x5c>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007078:	f894 2484 	ldrb.w	r2, [r4, #1156]	@ 0x484
            if( MacCtx.NodeAckRequested == true )
 800707c:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007080:	b9ba      	cbnz	r2, 80070b2 <HandleRadioRxErrorTimeout+0xa2>
            if( MacCtx.NodeAckRequested == true )
 8007082:	b10b      	cbz	r3, 8007088 <HandleRadioRxErrorTimeout+0x78>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007084:	f884 743d 	strb.w	r7, [r4, #1085]	@ 0x43d
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8007088:	4638      	mov	r0, r7
 800708a:	f002 fcf7 	bl	8009a7c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800708e:	f8d4 0538 	ldr.w	r0, [r4, #1336]	@ 0x538
 8007092:	f006 f927 	bl	800d2e4 <UTIL_TIMER_GetElapsedTime>
 8007096:	f8d4 33b8 	ldr.w	r3, [r4, #952]	@ 0x3b8
 800709a:	4298      	cmp	r0, r3
 800709c:	d3e6      	bcc.n	800706c <HandleRadioRxErrorTimeout+0x5c>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800709e:	480c      	ldr	r0, [pc, #48]	@ (80070d0 <HandleRadioRxErrorTimeout+0xc0>)
 80070a0:	f006 f95a 	bl	800d358 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80070a4:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80070a8:	f043 0320 	orr.w	r3, r3, #32
 80070ac:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
 80070b0:	e7dc      	b.n	800706c <HandleRadioRxErrorTimeout+0x5c>
            if( MacCtx.NodeAckRequested == true )
 80070b2:	b10b      	cbz	r3, 80070b8 <HandleRadioRxErrorTimeout+0xa8>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80070b4:	f884 643d 	strb.w	r6, [r4, #1085]	@ 0x43d
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80070b8:	4630      	mov	r0, r6
 80070ba:	f002 fcdf 	bl	8009a7c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80070be:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d1ee      	bne.n	80070a4 <HandleRadioRxErrorTimeout+0x94>
 80070c6:	e7d1      	b.n	800706c <HandleRadioRxErrorTimeout+0x5c>
 80070c8:	2000065c 	.word	0x2000065c
 80070cc:	0800de84 	.word	0x0800de84
 80070d0:	200009f8 	.word	0x200009f8

080070d4 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80070d4:	4b09      	ldr	r3, [pc, #36]	@ (80070fc <OnRadioRxTimeout+0x28>)
 80070d6:	781a      	ldrb	r2, [r3, #0]
 80070d8:	f042 0201 	orr.w	r2, r2, #1
{
 80070dc:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80070de:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80070e0:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80070e4:	b113      	cbz	r3, 80070ec <OnRadioRxTimeout+0x18>
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	b103      	cbz	r3, 80070ec <OnRadioRxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80070ea:	4798      	blx	r3
}
 80070ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80070f0:	4b03      	ldr	r3, [pc, #12]	@ (8007100 <OnRadioRxTimeout+0x2c>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	2100      	movs	r1, #0
 80070f6:	2002      	movs	r0, #2
 80070f8:	f005 be06 	b.w	800cd08 <UTIL_ADV_TRACE_COND_FSend>
 80070fc:	2000065c 	.word	0x2000065c
 8007100:	0800e387 	.word	0x0800e387

08007104 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007104:	4b09      	ldr	r3, [pc, #36]	@ (800712c <OnRadioTxTimeout+0x28>)
 8007106:	781a      	ldrb	r2, [r3, #0]
 8007108:	f042 0204 	orr.w	r2, r2, #4
{
 800710c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800710e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007110:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8007114:	b113      	cbz	r3, 800711c <OnRadioTxTimeout+0x18>
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	b103      	cbz	r3, 800711c <OnRadioTxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800711a:	4798      	blx	r3
}
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8007120:	4b03      	ldr	r3, [pc, #12]	@ (8007130 <OnRadioTxTimeout+0x2c>)
 8007122:	2201      	movs	r2, #1
 8007124:	2100      	movs	r1, #0
 8007126:	2002      	movs	r0, #2
 8007128:	f005 bdee 	b.w	800cd08 <UTIL_ADV_TRACE_COND_FSend>
 800712c:	2000065c 	.word	0x2000065c
 8007130:	0800e397 	.word	0x0800e397

08007134 <OnRadioRxDone>:
{
 8007134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007138:	4c11      	ldr	r4, [pc, #68]	@ (8007180 <OnRadioRxDone+0x4c>)
{
 800713a:	461d      	mov	r5, r3
 800713c:	4680      	mov	r8, r0
 800713e:	460f      	mov	r7, r1
 8007140:	4616      	mov	r6, r2
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007142:	f006 f8c5 	bl	800d2d0 <UTIL_TIMER_GetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007146:	7823      	ldrb	r3, [r4, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007148:	f8c4 0858 	str.w	r0, [r4, #2136]	@ 0x858
    LoRaMacRadioEvents.Events.RxDone = 1;
 800714c:	f043 0308 	orr.w	r3, r3, #8
 8007150:	7023      	strb	r3, [r4, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007152:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
    RxDoneParams.Payload = payload;
 8007156:	f8c4 885c 	str.w	r8, [r4, #2140]	@ 0x85c
    RxDoneParams.Size = size;
 800715a:	f8a4 7860 	strh.w	r7, [r4, #2144]	@ 0x860
    RxDoneParams.Rssi = rssi;
 800715e:	f8a4 6862 	strh.w	r6, [r4, #2146]	@ 0x862
    RxDoneParams.Snr = snr;
 8007162:	f884 5864 	strb.w	r5, [r4, #2148]	@ 0x864
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007166:	b113      	cbz	r3, 800716e <OnRadioRxDone+0x3a>
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	b103      	cbz	r3, 800716e <OnRadioRxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800716c:	4798      	blx	r3
}
 800716e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8007172:	4b04      	ldr	r3, [pc, #16]	@ (8007184 <OnRadioRxDone+0x50>)
 8007174:	2201      	movs	r2, #1
 8007176:	2100      	movs	r1, #0
 8007178:	2002      	movs	r0, #2
 800717a:	f005 bdc5 	b.w	800cd08 <UTIL_ADV_TRACE_COND_FSend>
 800717e:	bf00      	nop
 8007180:	2000065c 	.word	0x2000065c
 8007184:	0800e3a7 	.word	0x0800e3a7

08007188 <OnRadioTxDone>:
{
 8007188:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800718a:	f006 f8a1 	bl	800d2d0 <UTIL_TIMER_GetCurrentTime>
 800718e:	4c10      	ldr	r4, [pc, #64]	@ (80071d0 <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007190:	466d      	mov	r5, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007192:	f8c4 0868 	str.w	r0, [r4, #2152]	@ 0x868
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007196:	4628      	mov	r0, r5
 8007198:	f005 ffee 	bl	800d178 <SysTimeGet>
 800719c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80071a0:	f504 734f 	add.w	r3, r4, #828	@ 0x33c
 80071a4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80071a8:	7823      	ldrb	r3, [r4, #0]
 80071aa:	f043 0310 	orr.w	r3, r3, #16
 80071ae:	7023      	strb	r3, [r4, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80071b0:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
 80071b4:	b113      	cbz	r3, 80071bc <OnRadioTxDone+0x34>
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	b103      	cbz	r3, 80071bc <OnRadioTxDone+0x34>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80071ba:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80071bc:	4b05      	ldr	r3, [pc, #20]	@ (80071d4 <OnRadioTxDone+0x4c>)
 80071be:	2201      	movs	r2, #1
 80071c0:	2100      	movs	r1, #0
 80071c2:	2002      	movs	r0, #2
}
 80071c4:	b003      	add	sp, #12
 80071c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80071ca:	f005 bd9d 	b.w	800cd08 <UTIL_ADV_TRACE_COND_FSend>
 80071ce:	bf00      	nop
 80071d0:	2000065c 	.word	0x2000065c
 80071d4:	0800e3b4 	.word	0x0800e3b4

080071d8 <ResetMacParameters>:
    }
}


static void ResetMacParameters( void )
{
 80071d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80071da:	4c46      	ldr	r4, [pc, #280]	@ (80072f4 <ResetMacParameters+0x11c>)
    MacCtx.AckTimeoutRetry = false;

    Nvm.MacGroup2.MaxDCycle = 0;
    Nvm.MacGroup2.AggregatedDCycle = 1;

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80071dc:	f8b4 35d0 	ldrh.w	r3, [r4, #1488]	@ 0x5d0
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80071e0:	f8d4 15b4 	ldr.w	r1, [r4, #1460]	@ 0x5b4
 80071e4:	f8d4 05b0 	ldr.w	r0, [r4, #1456]	@ 0x5b0
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80071e8:	f8a4 3544 	strh.w	r3, [r4, #1348]	@ 0x544
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80071ec:	f894 35ad 	ldrb.w	r3, [r4, #1453]	@ 0x5ad
 80071f0:	f884 356d 	strb.w	r3, [r4, #1389]	@ 0x56d
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80071f4:	f504 63ae 	add.w	r3, r4, #1392	@ 0x570
 80071f8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80071fc:	f8d4 15bc 	ldr.w	r1, [r4, #1468]	@ 0x5bc
 8007200:	f8d4 05b8 	ldr.w	r0, [r4, #1464]	@ 0x5b8
 8007204:	f504 63af 	add.w	r3, r4, #1400	@ 0x578
 8007208:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800720c:	f8b4 35c0 	ldrh.w	r3, [r4, #1472]	@ 0x5c0
 8007210:	f8a4 3580 	strh.w	r3, [r4, #1408]	@ 0x580
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007214:	f204 530c 	addw	r3, r4, #1292	@ 0x50c
{
 8007218:	b08f      	sub	sp, #60	@ 0x3c
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800721a:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 800721e:	6799      	str	r1, [r3, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007220:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 8007224:	67d9      	str	r1, [r3, #124]	@ 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 8007226:	4b34      	ldr	r3, [pc, #208]	@ (80072f8 <ResetMacParameters+0x120>)
 8007228:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
    Nvm.MacGroup1.SrvAckRequested = false;

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800722c:	f204 63e4 	addw	r3, r4, #1764	@ 0x6e4
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007230:	2500      	movs	r5, #0
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007232:	2201      	movs	r2, #1
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007234:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8007238:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800723a:	a903      	add	r1, sp, #12
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800723c:	f504 63ef 	add.w	r3, r4, #1912	@ 0x778
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007240:	f8a4 260e 	strh.w	r2, [r4, #1550]	@ 0x60e
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007244:	f88d 2014 	strb.w	r2, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007248:	9304      	str	r3, [sp, #16]
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800724a:	f884 561c 	strb.w	r5, [r4, #1564]	@ 0x61c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800724e:	f8c4 5534 	str.w	r5, [r4, #1332]	@ 0x534
    Nvm.MacGroup2.MaxDCycle = 0;
 8007252:	f884 560b 	strb.w	r5, [r4, #1547]	@ 0x60b
    MacCtx.NodeAckRequested = false;
 8007256:	f884 5418 	strb.w	r5, [r4, #1048]	@ 0x418
    Nvm.MacGroup1.SrvAckRequested = false;
 800725a:	f884 5546 	strb.w	r5, [r4, #1350]	@ 0x546
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800725e:	f003 f8d0 	bl	800a402 <RegionInitDefaults>
    // Initialize channel index.
    MacCtx.Channel = 0;

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007262:	f8d4 3570 	ldr.w	r3, [r4, #1392]	@ 0x570
 8007266:	f8c4 33d4 	str.w	r3, [r4, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800726a:	f894 3581 	ldrb.w	r3, [r4, #1409]	@ 0x581
 800726e:	f884 33e0 	strb.w	r3, [r4, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007272:	f894 358c 	ldrb.w	r3, [r4, #1420]	@ 0x58c
 8007276:	f884 33e1 	strb.w	r3, [r4, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800727a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800727e:	f8a4 33e2 	strh.w	r3, [r4, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007282:	f884 53d0 	strb.w	r5, [r4, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007286:	f504 7774 	add.w	r7, r4, #976	@ 0x3d0
 800728a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800728c:	f504 7679 	add.w	r6, r4, #996	@ 0x3e4
 8007290:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6033      	str	r3, [r6, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007296:	f240 2301 	movw	r3, #513	@ 0x201
 800729a:	f8a4 33f6 	strh.w	r3, [r4, #1014]	@ 0x3f6
    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
    classBCallbacks.MacProcessNotify = NULL;

    if( MacCtx.MacCallbacks != NULL )
 800729e:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
    MacCtx.Channel = 0;
 80072a2:	f884 5419 	strb.w	r5, [r4, #1049]	@ 0x419
    classBCallbacks.MacProcessNotify = NULL;
 80072a6:	e9cd 5501 	strd	r5, r5, [sp, #4]
    if( MacCtx.MacCallbacks != NULL )
 80072aa:	b11b      	cbz	r3, 80072b4 <ResetMacParameters+0xdc>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80072ac:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80072ae:	691b      	ldr	r3, [r3, #16]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80072b0:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80072b2:	9302      	str	r3, [sp, #8]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80072b4:	4a11      	ldr	r2, [pc, #68]	@ (80072fc <ResetMacParameters+0x124>)
 80072b6:	9206      	str	r2, [sp, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80072b8:	f1a2 0344 	sub.w	r3, r2, #68	@ 0x44
 80072bc:	9307      	str	r3, [sp, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80072be:	f1a2 0314 	sub.w	r3, r2, #20
 80072c2:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80072c4:	f102 0321 	add.w	r3, r2, #33	@ 0x21
 80072c8:	9309      	str	r3, [sp, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80072ca:	f502 73ba 	add.w	r3, r2, #372	@ 0x174
 80072ce:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80072d0:	f102 03e8 	add.w	r3, r2, #232	@ 0xe8
 80072d4:	930b      	str	r3, [sp, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80072d6:	f102 03ec 	add.w	r3, r2, #236	@ 0xec
 80072da:	930c      	str	r3, [sp, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80072dc:	a901      	add	r1, sp, #4
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80072de:	f502 73bc 	add.w	r3, r2, #376	@ 0x178
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80072e2:	a806      	add	r0, sp, #24
 80072e4:	f502 7277 	add.w	r2, r2, #988	@ 0x3dc
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80072e8:	930d      	str	r3, [sp, #52]	@ 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80072ea:	f002 fa1f 	bl	800972c <LoRaMacClassBInit>
}
 80072ee:	b00f      	add	sp, #60	@ 0x3c
 80072f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f2:	bf00      	nop
 80072f4:	2000065c 	.word	0x2000065c
 80072f8:	00010100 	.word	0x00010100
 80072fc:	20000ac0 	.word	0x20000ac0

08007300 <ScheduleTx>:
{
 8007300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007302:	b093      	sub	sp, #76	@ 0x4c
 8007304:	4607      	mov	r7, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007306:	f002 fa1c 	bl	8009742 <LoRaMacClassBIsBeaconExpected>
 800730a:	2800      	cmp	r0, #0
 800730c:	f040 8162 	bne.w	80075d4 <ScheduleTx+0x2d4>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007310:	4cb1      	ldr	r4, [pc, #708]	@ (80075d8 <ScheduleTx+0x2d8>)
 8007312:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8007316:	2b01      	cmp	r3, #1
 8007318:	d009      	beq.n	800732e <ScheduleTx+0x2e>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800731a:	f8d4 353c 	ldr.w	r3, [r4, #1340]	@ 0x53c
 800731e:	b193      	cbz	r3, 8007346 <ScheduleTx+0x46>
    switch( MacCtx.TxMsg.Type )
 8007320:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 8007324:	b1c3      	cbz	r3, 8007358 <ScheduleTx+0x58>
 8007326:	2b04      	cmp	r3, #4
 8007328:	d076      	beq.n	8007418 <ScheduleTx+0x118>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800732a:	2503      	movs	r5, #3
 800732c:	e003      	b.n	8007336 <ScheduleTx+0x36>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800732e:	f002 fa0a 	bl	8009746 <LoRaMacClassBIsPingExpected>
 8007332:	b118      	cbz	r0, 800733c <ScheduleTx+0x3c>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8007334:	250f      	movs	r5, #15
}
 8007336:	4628      	mov	r0, r5
 8007338:	b013      	add	sp, #76	@ 0x4c
 800733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800733c:	f002 fa05 	bl	800974a <LoRaMacClassBIsMulticastExpected>
 8007340:	2800      	cmp	r0, #0
 8007342:	d0ea      	beq.n	800731a <ScheduleTx+0x1a>
 8007344:	e7f6      	b.n	8007334 <ScheduleTx+0x34>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007346:	f8b4 360e 	ldrh.w	r3, [r4, #1550]	@ 0x60e
 800734a:	f8d4 241c 	ldr.w	r2, [r4, #1052]	@ 0x41c
 800734e:	3b01      	subs	r3, #1
 8007350:	4353      	muls	r3, r2
 8007352:	f8c4 353c 	str.w	r3, [r4, #1340]	@ 0x53c
 8007356:	e7e3      	b.n	8007320 <ScheduleTx+0x20>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007358:	48a0      	ldr	r0, [pc, #640]	@ (80075dc <ScheduleTx+0x2dc>)
 800735a:	f002 ff9e 	bl	800a29a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800735e:	2800      	cmp	r0, #0
 8007360:	f040 811e 	bne.w	80075a0 <ScheduleTx+0x2a0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007364:	f894 3110 	ldrb.w	r3, [r4, #272]	@ 0x110
 8007368:	80a3      	strh	r3, [r4, #4]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800736a:	f8d4 353c 	ldr.w	r3, [r4, #1340]	@ 0x53c
 800736e:	930c      	str	r3, [sp, #48]	@ 0x30
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007370:	ae06      	add	r6, sp, #24
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007372:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
 8007376:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800737a:	4630      	mov	r0, r6
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800737c:	f894 360c 	ldrb.w	r3, [r4, #1548]	@ 0x60c
 8007380:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007384:	f005 ff1e 	bl	800d1c4 <SysTimeGetMcuTime>
 8007388:	f8d4 3614 	ldr.w	r3, [r4, #1556]	@ 0x614
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	ad02      	add	r5, sp, #8
 8007390:	e896 0006 	ldmia.w	r6, {r1, r2}
 8007394:	f8d4 3610 	ldr.w	r3, [r4, #1552]	@ 0x610
 8007398:	4628      	mov	r0, r5
 800739a:	f005 feaa 	bl	800d0f2 <SysTimeSub>
 800739e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80073a2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80073a4:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80073a8:	f8d4 3538 	ldr.w	r3, [r4, #1336]	@ 0x538
 80073ac:	930d      	str	r3, [sp, #52]	@ 0x34
    nextChan.LastTxIsJoinRequest = false;
 80073ae:	2300      	movs	r3, #0
 80073b0:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
    nextChan.PktLen = MacCtx.PktBufferLen;
 80073b4:	88a3      	ldrh	r3, [r4, #4]
 80073b6:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80073ba:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
    nextChan.Joined = true;
 80073be:	2201      	movs	r2, #1
 80073c0:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80073c4:	b91b      	cbnz	r3, 80073ce <ScheduleTx+0xce>
        nextChan.LastTxIsJoinRequest = true;
 80073c6:	f88d 2044 	strb.w	r2, [sp, #68]	@ 0x44
        nextChan.Joined = false;
 80073ca:	f88d 3039 	strb.w	r3, [sp, #57]	@ 0x39
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80073ce:	4e84      	ldr	r6, [pc, #528]	@ (80075e0 <ScheduleTx+0x2e0>)
 80073d0:	9600      	str	r6, [sp, #0]
 80073d2:	f46f 7291 	mvn.w	r2, #290	@ 0x122
 80073d6:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 80073da:	f1a6 03b4 	sub.w	r3, r6, #180	@ 0xb4
 80073de:	18b2      	adds	r2, r6, r2
 80073e0:	a90c      	add	r1, sp, #48	@ 0x30
 80073e2:	f003 f886 	bl	800a4f2 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 80073e6:	4605      	mov	r5, r0
 80073e8:	b1d0      	cbz	r0, 8007420 <ScheduleTx+0x120>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80073ea:	280b      	cmp	r0, #11
 80073ec:	d1a3      	bne.n	8007336 <ScheduleTx+0x36>
 80073ee:	2f00      	cmp	r7, #0
 80073f0:	d0a1      	beq.n	8007336 <ScheduleTx+0x36>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80073f2:	f8d4 1488 	ldr.w	r1, [r4, #1160]	@ 0x488
 80073f6:	b169      	cbz	r1, 8007414 <ScheduleTx+0x114>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80073f8:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80073fc:	f5a6 70e8 	sub.w	r0, r6, #464	@ 0x1d0
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007400:	f043 0320 	orr.w	r3, r3, #32
 8007404:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007408:	f006 f82e 	bl	800d468 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800740c:	f5a6 70e8 	sub.w	r0, r6, #464	@ 0x1d0
 8007410:	f005 fff0 	bl	800d3f4 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 8007414:	2500      	movs	r5, #0
 8007416:	e78e      	b.n	8007336 <ScheduleTx+0x36>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8007418:	4870      	ldr	r0, [pc, #448]	@ (80075dc <ScheduleTx+0x2dc>)
 800741a:	f002 ff72 	bl	800a302 <LoRaMacSerializerData>
 800741e:	e79e      	b.n	800735e <ScheduleTx+0x5e>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007420:	f894 754c 	ldrb.w	r7, [r4, #1356]	@ 0x54c
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007424:	f994 356d 	ldrsb.w	r3, [r4, #1389]	@ 0x56d
 8007428:	f994 2545 	ldrsb.w	r2, [r4, #1349]	@ 0x545
 800742c:	f894 1581 	ldrb.w	r1, [r4, #1409]	@ 0x581
 8007430:	4638      	mov	r0, r7
 8007432:	f003 f874 	bl	800a51e <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007436:	f5a6 73c0 	sub.w	r3, r6, #384	@ 0x180
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	b241      	sxtb	r1, r0
 800743e:	f8d4 3550 	ldr.w	r3, [r4, #1360]	@ 0x550
 8007442:	f894 2554 	ldrb.w	r2, [r4, #1364]	@ 0x554
 8007446:	4638      	mov	r0, r7
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007448:	f5a6 76b6 	sub.w	r6, r6, #364	@ 0x16c
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800744c:	f002 fff5 	bl	800a43a <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007450:	9600      	str	r6, [sp, #0]
 8007452:	f8d4 3550 	ldr.w	r3, [r4, #1360]	@ 0x550
 8007456:	f894 2554 	ldrb.w	r2, [r4, #1364]	@ 0x554
 800745a:	f994 1574 	ldrsb.w	r1, [r4, #1396]	@ 0x574
 800745e:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8007462:	f002 ffea 	bl	800a43a <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007466:	f8d4 13c8 	ldr.w	r1, [r4, #968]	@ 0x3c8
 800746a:	f8d4 355c 	ldr.w	r3, [r4, #1372]	@ 0x55c
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800746e:	f8d4 23dc 	ldr.w	r2, [r4, #988]	@ 0x3dc
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007472:	440b      	add	r3, r1
 8007474:	f8c4 33b4 	str.w	r3, [r4, #948]	@ 0x3b4
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007478:	f8d4 3560 	ldr.w	r3, [r4, #1376]	@ 0x560
 800747c:	4413      	add	r3, r2
 800747e:	f8c4 33b8 	str.w	r3, [r4, #952]	@ 0x3b8
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007482:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d16a      	bne.n	8007560 <ScheduleTx+0x260>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800748a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	@ 0x564
 800748e:	440b      	add	r3, r1
 8007490:	f8c4 33b4 	str.w	r3, [r4, #948]	@ 0x3b4
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007494:	f8d4 3568 	ldr.w	r3, [r4, #1384]	@ 0x568
 8007498:	4413      	add	r3, r2
 800749a:	f8c4 33b8 	str.w	r3, [r4, #952]	@ 0x3b8

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	f88d 3013 	strb.w	r3, [sp, #19]

    txConfig.Channel = channel;
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80074a4:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
 80074a8:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80074ac:	f894 3544 	ldrb.w	r3, [r4, #1348]	@ 0x544
 80074b0:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80074b4:	4b4b      	ldr	r3, [pc, #300]	@ (80075e4 <ScheduleTx+0x2e4>)
    return SendFrameOnChannel( MacCtx.Channel );
 80074b6:	f894 6419 	ldrb.w	r6, [r4, #1049]	@ 0x419
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80074ba:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80074bc:	9209      	str	r2, [sp, #36]	@ 0x24
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80074be:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80074c0:	920a      	str	r2, [sp, #40]	@ 0x28
    txConfig.PktLen = MacCtx.PktBufferLen;
 80074c2:	88a2      	ldrh	r2, [r4, #4]
 80074c4:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80074c8:	3bf0      	subs	r3, #240	@ 0xf0
 80074ca:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    txConfig.Channel = channel;
 80074ce:	f88d 6020 	strb.w	r6, [sp, #32]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80074d2:	f10d 0213 	add.w	r2, sp, #19
 80074d6:	a908      	add	r1, sp, #32
 80074d8:	f002 ffc7 	bl	800a46a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f884 343d 	strb.w	r3, [r4, #1085]	@ 0x43d
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80074e2:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
 80074e6:	f884 343e 	strb.w	r3, [r4, #1086]	@ 0x43e
    MacCtx.McpsConfirm.TxPower = txPower;
 80074ea:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80074ee:	f884 343f 	strb.w	r3, [r4, #1087]	@ 0x43f
    MacCtx.McpsConfirm.Channel = channel;

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80074f2:	f8d4 341c 	ldr.w	r3, [r4, #1052]	@ 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 80074f6:	f8c4 644c 	str.w	r6, [r4, #1100]	@ 0x44c
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80074fa:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80074fe:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8007502:	f002 f924 	bl	800974e <LoRaMacClassBIsBeaconModeActive>
 8007506:	2800      	cmp	r0, #0
 8007508:	d13e      	bne.n	8007588 <ScheduleTx+0x288>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800750a:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 800750e:	2b01      	cmp	r3, #1
 8007510:	d101      	bne.n	8007516 <ScheduleTx+0x216>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8007512:	f002 f930 	bl	8009776 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8007516:	f002 f91d 	bl	8009754 <LoRaMacClassBHaltBeaconing>
    uint32_t fCntUp = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	9305      	str	r3, [sp, #20]
    switch( MacCtx.TxMsg.Type )
 800751e:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007522:	f994 6545 	ldrsb.w	r6, [r4, #1349]	@ 0x545
 8007526:	f894 7419 	ldrb.w	r7, [r4, #1049]	@ 0x419
    switch( MacCtx.TxMsg.Type )
 800752a:	2b00      	cmp	r3, #0
 800752c:	d034      	beq.n	8007598 <ScheduleTx+0x298>
 800752e:	2b04      	cmp	r3, #4
 8007530:	f47f aefb 	bne.w	800732a <ScheduleTx+0x2a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007534:	a805      	add	r0, sp, #20
 8007536:	f002 fc15 	bl	8009d64 <LoRaMacCryptoGetFCntUp>
 800753a:	2800      	cmp	r0, #0
 800753c:	d148      	bne.n	80075d0 <ScheduleTx+0x2d0>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800753e:	f894 3414 	ldrb.w	r3, [r4, #1044]	@ 0x414
 8007542:	b91b      	cbnz	r3, 800754c <ScheduleTx+0x24c>
 8007544:	f894 3416 	ldrb.w	r3, [r4, #1046]	@ 0x416
 8007548:	2b01      	cmp	r3, #1
 800754a:	d902      	bls.n	8007552 <ScheduleTx+0x252>
                fCntUp -= 1;
 800754c:	9b05      	ldr	r3, [sp, #20]
 800754e:	3b01      	subs	r3, #1
 8007550:	9305      	str	r3, [sp, #20]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8007552:	4b22      	ldr	r3, [pc, #136]	@ (80075dc <ScheduleTx+0x2dc>)
 8007554:	9805      	ldr	r0, [sp, #20]
 8007556:	463a      	mov	r2, r7
 8007558:	b2f1      	uxtb	r1, r6
 800755a:	f002 fc77 	bl	8009e4c <LoRaMacCryptoSecureMessage>
 800755e:	e01e      	b.n	800759e <ScheduleTx+0x29e>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007560:	a808      	add	r0, sp, #32
    size_t macCmdsSize = 0;
 8007562:	9508      	str	r5, [sp, #32]
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007564:	f002 f9a6 	bl	80098b4 <LoRaMacCommandsGetSizeSerializedCmds>
 8007568:	b960      	cbnz	r0, 8007584 <ScheduleTx+0x284>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800756a:	f994 0545 	ldrsb.w	r0, [r4, #1349]	@ 0x545
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800756e:	f894 623b 	ldrb.w	r6, [r4, #571]	@ 0x23b
 8007572:	f89d 7020 	ldrb.w	r7, [sp, #32]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007576:	f7ff fcf5 	bl	8006f64 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800757a:	443e      	add	r6, r7
 800757c:	42b0      	cmp	r0, r6
 800757e:	d28e      	bcs.n	800749e <ScheduleTx+0x19e>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8007580:	2508      	movs	r5, #8
 8007582:	e6d8      	b.n	8007336 <ScheduleTx+0x36>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007584:	2513      	movs	r5, #19
 8007586:	e6d6      	b.n	8007336 <ScheduleTx+0x36>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8007588:	f8d4 041c 	ldr.w	r0, [r4, #1052]	@ 0x41c
 800758c:	f002 f8f1 	bl	8009772 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8007590:	2800      	cmp	r0, #0
 8007592:	d0ba      	beq.n	800750a <ScheduleTx+0x20a>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8007594:	2510      	movs	r5, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8007596:	e6ce      	b.n	8007336 <ScheduleTx+0x36>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007598:	4810      	ldr	r0, [pc, #64]	@ (80075dc <ScheduleTx+0x2dc>)
 800759a:	f002 fc2d 	bl	8009df8 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800759e:	b108      	cbz	r0, 80075a4 <ScheduleTx+0x2a4>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80075a0:	2511      	movs	r5, #17
 80075a2:	e6c8      	b.n	8007336 <ScheduleTx+0x36>
    if( status != LORAMAC_STATUS_OK )
    {
        return status;
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80075a4:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80075a8:	f894 1110 	ldrb.w	r1, [r4, #272]	@ 0x110
 80075ac:	80a1      	strh	r1, [r4, #4]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80075ae:	f043 0302 	orr.w	r3, r3, #2
 80075b2:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    if( MacCtx.NodeAckRequested == false )
 80075b6:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 80075ba:	b923      	cbnz	r3, 80075c6 <ScheduleTx+0x2c6>
    {
        MacCtx.ChannelsNbTransCounter++;
 80075bc:	f894 3414 	ldrb.w	r3, [r4, #1044]	@ 0x414
 80075c0:	3301      	adds	r3, #1
 80075c2:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80075c6:	4b08      	ldr	r3, [pc, #32]	@ (80075e8 <ScheduleTx+0x2e8>)
 80075c8:	4808      	ldr	r0, [pc, #32]	@ (80075ec <ScheduleTx+0x2ec>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80075ce:	e6b2      	b.n	8007336 <ScheduleTx+0x36>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80075d0:	2512      	movs	r5, #18
 80075d2:	e6b0      	b.n	8007336 <ScheduleTx+0x36>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80075d4:	250e      	movs	r5, #14
 80075d6:	e6ae      	b.n	8007336 <ScheduleTx+0x36>
 80075d8:	2000065c 	.word	0x2000065c
 80075dc:	20000768 	.word	0x20000768
 80075e0:	20000b98 	.word	0x20000b98
 80075e4:	20000b68 	.word	0x20000b68
 80075e8:	0800de84 	.word	0x0800de84
 80075ec:	20000662 	.word	0x20000662

080075f0 <OpenContinuousRxCWindow>:
{
 80075f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80075f2:	4c12      	ldr	r4, [pc, #72]	@ (800763c <OpenContinuousRxCWindow+0x4c>)
 80075f4:	f504 7579 	add.w	r5, r4, #996	@ 0x3e4
 80075f8:	9500      	str	r5, [sp, #0]
 80075fa:	f8d4 3550 	ldr.w	r3, [r4, #1360]	@ 0x550
 80075fe:	f894 2554 	ldrb.w	r2, [r4, #1364]	@ 0x554
 8007602:	f994 157c 	ldrsb.w	r1, [r4, #1404]	@ 0x57c
 8007606:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 800760a:	f002 ff16 	bl	800a43a <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800760e:	f240 2301 	movw	r3, #513	@ 0x201
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007612:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007616:	f8a4 33f6 	strh.w	r3, [r4, #1014]	@ 0x3f6
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800761a:	f204 4224 	addw	r2, r4, #1060	@ 0x424
 800761e:	4629      	mov	r1, r5
 8007620:	f002 ff1a 	bl	800a458 <RegionRxConfig>
 8007624:	b138      	cbz	r0, 8007636 <OpenContinuousRxCWindow+0x46>
        Radio.Rx( 0 ); // Continuous mode
 8007626:	4b06      	ldr	r3, [pc, #24]	@ (8007640 <OpenContinuousRxCWindow+0x50>)
 8007628:	2000      	movs	r0, #0
 800762a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800762c:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800762e:	f894 33f7 	ldrb.w	r3, [r4, #1015]	@ 0x3f7
 8007632:	f884 3484 	strb.w	r3, [r4, #1156]	@ 0x484
}
 8007636:	b003      	add	sp, #12
 8007638:	bd30      	pop	{r4, r5, pc}
 800763a:	bf00      	nop
 800763c:	2000065c 	.word	0x2000065c
 8007640:	0800de84 	.word	0x0800de84

08007644 <SwitchClass>:
{
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 8007646:	4c2c      	ldr	r4, [pc, #176]	@ (80076f8 <SwitchClass+0xb4>)
 8007648:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 800764c:	2b01      	cmp	r3, #1
{
 800764e:	4605      	mov	r5, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8007650:	d00f      	beq.n	8007672 <SwitchClass+0x2e>
 8007652:	2b02      	cmp	r3, #2
 8007654:	d048      	beq.n	80076e8 <SwitchClass+0xa4>
 8007656:	b943      	cbnz	r3, 800766a <SwitchClass+0x26>
            if( deviceClass == CLASS_A )
 8007658:	b948      	cbnz	r0, 800766e <SwitchClass+0x2a>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800765a:	f8d4 1574 	ldr.w	r1, [r4, #1396]	@ 0x574
 800765e:	f8d4 0570 	ldr.w	r0, [r4, #1392]	@ 0x570
 8007662:	f504 63af 	add.w	r3, r4, #1400	@ 0x578
 8007666:	e883 0003 	stmia.w	r3, {r0, r1}
{
 800766a:	2003      	movs	r0, #3
 800766c:	e03b      	b.n	80076e6 <SwitchClass+0xa2>
            if( deviceClass == CLASS_B )
 800766e:	2801      	cmp	r0, #1
 8007670:	d105      	bne.n	800767e <SwitchClass+0x3a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8007672:	f002 f871 	bl	8009758 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8007676:	bbb0      	cbnz	r0, 80076e6 <SwitchClass+0xa2>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007678:	f884 5608 	strb.w	r5, [r4, #1544]	@ 0x608
 800767c:	e033      	b.n	80076e6 <SwitchClass+0xa2>
            if( deviceClass == CLASS_C )
 800767e:	2802      	cmp	r0, #2
 8007680:	d1f3      	bne.n	800766a <SwitchClass+0x26>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007682:	f504 7774 	add.w	r7, r4, #976	@ 0x3d0
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007686:	f884 0608 	strb.w	r0, [r4, #1544]	@ 0x608
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800768a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800768c:	f504 7679 	add.w	r6, r4, #996	@ 0x3e4
 8007690:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6033      	str	r3, [r6, #0]
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8007696:	f894 35de 	ldrb.w	r3, [r4, #1502]	@ 0x5de
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800769a:	f884 53f7 	strb.w	r5, [r4, #1015]	@ 0x3f7
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800769e:	b1cb      	cbz	r3, 80076d4 <SwitchClass+0x90>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80076a0:	f8d4 35f4 	ldr.w	r3, [r4, #1524]	@ 0x5f4
 80076a4:	f8c4 3578 	str.w	r3, [r4, #1400]	@ 0x578
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80076a8:	f8c4 33e8 	str.w	r3, [r4, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80076ac:	f894 3581 	ldrb.w	r3, [r4, #1409]	@ 0x581
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80076b0:	f894 25f8 	ldrb.w	r2, [r4, #1528]	@ 0x5f8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80076b4:	f884 33f4 	strb.w	r3, [r4, #1012]	@ 0x3f4
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80076b8:	f894 358c 	ldrb.w	r3, [r4, #1420]	@ 0x58c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80076bc:	f884 257c 	strb.w	r2, [r4, #1404]	@ 0x57c
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80076c0:	f884 33f5 	strb.w	r3, [r4, #1013]	@ 0x3f5
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80076c4:	f894 2419 	ldrb.w	r2, [r4, #1049]	@ 0x419
 80076c8:	f884 23e4 	strb.w	r2, [r4, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80076cc:	f240 3301 	movw	r3, #769	@ 0x301
 80076d0:	f8a4 33f6 	strh.w	r3, [r4, #1014]	@ 0x3f6
                MacCtx.NodeAckRequested = false;
 80076d4:	2300      	movs	r3, #0
 80076d6:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
                Radio.Sleep( );
 80076da:	4b08      	ldr	r3, [pc, #32]	@ (80076fc <SwitchClass+0xb8>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 80076e0:	f7ff ff86 	bl	80075f0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 80076e4:	2000      	movs	r0, #0
}
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d1be      	bne.n	800766a <SwitchClass+0x26>
                Radio.Sleep( );
 80076ec:	4b03      	ldr	r3, [pc, #12]	@ (80076fc <SwitchClass+0xb8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80076ee:	f884 0608 	strb.w	r0, [r4, #1544]	@ 0x608
                Radio.Sleep( );
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 80076f6:	e7f5      	b.n	80076e4 <SwitchClass+0xa0>
 80076f8:	2000065c 	.word	0x2000065c
 80076fc:	0800de84 	.word	0x0800de84

08007700 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8007700:	b570      	push	{r4, r5, r6, lr}
    Radio.Standby( );
 8007702:	4e0b      	ldr	r6, [pc, #44]	@ (8007730 <RxWindowSetup.constprop.0+0x30>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007704:	4c0b      	ldr	r4, [pc, #44]	@ (8007734 <RxWindowSetup.constprop.0+0x34>)
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8007706:	460d      	mov	r5, r1
    TimerStop( rxTimer );
 8007708:	f005 fe26 	bl	800d358 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800770c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800770e:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007710:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8007714:	f204 4224 	addw	r2, r4, #1060	@ 0x424
 8007718:	4629      	mov	r1, r5
 800771a:	f002 fe9d 	bl	800a458 <RegionRxConfig>
 800771e:	b130      	cbz	r0, 800772e <RxWindowSetup.constprop.0+0x2e>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8007720:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8007722:	f8d4 0558 	ldr.w	r0, [r4, #1368]	@ 0x558
 8007726:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8007728:	7ceb      	ldrb	r3, [r5, #19]
 800772a:	f884 3484 	strb.w	r3, [r4, #1156]	@ 0x484
}
 800772e:	bd70      	pop	{r4, r5, r6, pc}
 8007730:	0800de84 	.word	0x0800de84
 8007734:	2000065c 	.word	0x2000065c

08007738 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8007738:	480c      	ldr	r0, [pc, #48]	@ (800776c <OnRxWindow1TimerEvent+0x34>)
 800773a:	f890 3419 	ldrb.w	r3, [r0, #1049]	@ 0x419
 800773e:	f880 33bc 	strb.w	r3, [r0, #956]	@ 0x3bc
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8007742:	f890 356d 	ldrb.w	r3, [r0, #1389]	@ 0x56d
 8007746:	f880 33bf 	strb.w	r3, [r0, #959]	@ 0x3bf
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800774a:	f890 3581 	ldrb.w	r3, [r0, #1409]	@ 0x581
 800774e:	f880 33cc 	strb.w	r3, [r0, #972]	@ 0x3cc
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007752:	f890 358c 	ldrb.w	r3, [r0, #1420]	@ 0x58c
 8007756:	f880 33cd 	strb.w	r3, [r0, #973]	@ 0x3cd
    MacCtx.RxWindow1Config.RxContinuous = false;
 800775a:	2300      	movs	r3, #0
 800775c:	f8a0 33ce 	strh.w	r3, [r0, #974]	@ 0x3ce
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8007760:	f500 716f 	add.w	r1, r0, #956	@ 0x3bc
 8007764:	f500 7061 	add.w	r0, r0, #900	@ 0x384
 8007768:	f7ff bfca 	b.w	8007700 <RxWindowSetup.constprop.0>
 800776c:	2000065c 	.word	0x2000065c

08007770 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007770:	480f      	ldr	r0, [pc, #60]	@ (80077b0 <OnRxWindow2TimerEvent+0x40>)
 8007772:	f890 3484 	ldrb.w	r3, [r0, #1156]	@ 0x484
 8007776:	b1cb      	cbz	r3, 80077ac <OnRxWindow2TimerEvent+0x3c>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007778:	f890 3419 	ldrb.w	r3, [r0, #1049]	@ 0x419
 800777c:	f880 33d0 	strb.w	r3, [r0, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007780:	f8d0 3570 	ldr.w	r3, [r0, #1392]	@ 0x570
 8007784:	f8c0 33d4 	str.w	r3, [r0, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007788:	f890 3581 	ldrb.w	r3, [r0, #1409]	@ 0x581
 800778c:	f880 33e0 	strb.w	r3, [r0, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007790:	f890 358c 	ldrb.w	r3, [r0, #1420]	@ 0x58c
 8007794:	f880 33e1 	strb.w	r3, [r0, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800779c:	f8a0 33e2 	strh.w	r3, [r0, #994]	@ 0x3e2
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80077a0:	f500 7174 	add.w	r1, r0, #976	@ 0x3d0
 80077a4:	f500 7067 	add.w	r0, r0, #924	@ 0x39c
 80077a8:	f7ff bfaa 	b.w	8007700 <RxWindowSetup.constprop.0>
}
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	2000065c 	.word	0x2000065c

080077b4 <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80077b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	b08f      	sub	sp, #60	@ 0x3c
    uint8_t status = 0;
 80077ba:	2700      	movs	r7, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80077bc:	4606      	mov	r6, r0
 80077be:	4688      	mov	r8, r1
 80077c0:	4691      	mov	r9, r2
    uint8_t status = 0;
 80077c2:	f88d 700d 	strb.w	r7, [sp, #13]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80077c6:	f8ad 7010 	strh.w	r7, [sp, #16]
    while( macIndex < commandsSize )
 80077ca:	463c      	mov	r4, r7
 80077cc:	4544      	cmp	r4, r8
 80077ce:	d302      	bcc.n	80077d6 <ProcessMacCommands.constprop.0+0x22>
}
 80077d0:	b00f      	add	sp, #60	@ 0x3c
 80077d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80077d6:	5d30      	ldrb	r0, [r6, r4]
 80077d8:	f002 f8be 	bl	8009958 <LoRaMacCommandsGetCmdSize>
 80077dc:	4420      	add	r0, r4
 80077de:	4540      	cmp	r0, r8
 80077e0:	dcf6      	bgt.n	80077d0 <ProcessMacCommands.constprop.0+0x1c>
        switch( payload[macIndex++] )
 80077e2:	5d33      	ldrb	r3, [r6, r4]
 80077e4:	1c65      	adds	r5, r4, #1
 80077e6:	3b02      	subs	r3, #2
 80077e8:	b2ed      	uxtb	r5, r5
 80077ea:	2b11      	cmp	r3, #17
 80077ec:	d8f0      	bhi.n	80077d0 <ProcessMacCommands.constprop.0+0x1c>
 80077ee:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <ProcessMacCommands.constprop.0+0x40>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	0800783d 	.word	0x0800783d
 80077f8:	08007867 	.word	0x08007867
 80077fc:	08007925 	.word	0x08007925
 8007800:	0800794b 	.word	0x0800794b
 8007804:	080079d9 	.word	0x080079d9
 8007808:	08007a03 	.word	0x08007a03
 800780c:	08007a69 	.word	0x08007a69
 8007810:	08007aa5 	.word	0x08007aa5
 8007814:	08007b2d 	.word	0x08007b2d
 8007818:	080077d1 	.word	0x080077d1
 800781c:	080077d1 	.word	0x080077d1
 8007820:	08007b81 	.word	0x08007b81
 8007824:	080077d1 	.word	0x080077d1
 8007828:	080077d1 	.word	0x080077d1
 800782c:	08007c25 	.word	0x08007c25
 8007830:	08007c4d 	.word	0x08007c4d
 8007834:	08007c85 	.word	0x08007c85
 8007838:	08007cbb 	.word	0x08007cbb
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800783c:	2004      	movs	r0, #4
 800783e:	f002 f937 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
 8007842:	b170      	cbz	r0, 8007862 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8007844:	2104      	movs	r1, #4
 8007846:	2000      	movs	r0, #0
 8007848:	f002 f8f6 	bl	8009a38 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800784c:	5d72      	ldrb	r2, [r6, r5]
 800784e:	4bb5      	ldr	r3, [pc, #724]	@ (8007b24 <ProcessMacCommands.constprop.0+0x370>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007850:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007852:	3402      	adds	r4, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007854:	b2e4      	uxtb	r4, r4
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007856:	f883 2458 	strb.w	r2, [r3, #1112]	@ 0x458
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800785a:	5d32      	ldrb	r2, [r6, r4]
 800785c:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459
 8007860:	b2ed      	uxtb	r5, r5
                uint8_t eirpDwellTime = payload[macIndex++];
 8007862:	462c      	mov	r4, r5
 8007864:	e7b2      	b.n	80077cc <ProcessMacCommands.constprop.0+0x18>
                int8_t linkAdrDatarate = DR_0;
 8007866:	2300      	movs	r3, #0
 8007868:	f88d 300e 	strb.w	r3, [sp, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 800786c:	f88d 300f 	strb.w	r3, [sp, #15]
                uint8_t linkAdrNbRep = 0;
 8007870:	f88d 3014 	strb.w	r3, [sp, #20]
                uint8_t linkAdrNbBytesParsed = 0;
 8007874:	f88d 3018 	strb.w	r3, [sp, #24]
                if( adrBlockFound == false )
 8007878:	2f00      	cmp	r7, #0
 800787a:	d151      	bne.n	8007920 <ProcessMacCommands.constprop.0+0x16c>
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800787c:	eba8 0404 	sub.w	r4, r8, r4
 8007880:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007884:	1e6b      	subs	r3, r5, #1
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007886:	4ca7      	ldr	r4, [pc, #668]	@ (8007b24 <ProcessMacCommands.constprop.0+0x370>)
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007888:	4433      	add	r3, r6
 800788a:	930b      	str	r3, [sp, #44]	@ 0x2c
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800788c:	f894 360a 	ldrb.w	r3, [r4, #1546]	@ 0x60a
 8007890:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007894:	f894 3580 	ldrb.w	r3, [r4, #1408]	@ 0x580
 8007898:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800789c:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
 80078a0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80078a4:	f894 3544 	ldrb.w	r3, [r4, #1348]	@ 0x544
 80078a8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80078ac:	f894 356c 	ldrb.w	r3, [r4, #1388]	@ 0x56c
 80078b0:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80078b4:	f8d4 3618 	ldr.w	r3, [r4, #1560]	@ 0x618
 80078b8:	930a      	str	r3, [sp, #40]	@ 0x28
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80078ba:	ab06      	add	r3, sp, #24
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	ab05      	add	r3, sp, #20
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 80078c6:	f10d 030f 	add.w	r3, sp, #15
 80078ca:	f10d 020e 	add.w	r2, sp, #14
 80078ce:	a90a      	add	r1, sp, #40	@ 0x28
 80078d0:	f002 fdda 	bl	800a488 <RegionLinkAdrReq>
 80078d4:	f88d 000d 	strb.w	r0, [sp, #13]
                    if( ( status & 0x07 ) == 0x07 )
 80078d8:	f000 0007 	and.w	r0, r0, #7
 80078dc:	2807      	cmp	r0, #7
 80078de:	d10b      	bne.n	80078f8 <ProcessMacCommands.constprop.0+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80078e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80078e4:	f884 3545 	strb.w	r3, [r4, #1349]	@ 0x545
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80078e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80078ec:	f884 3544 	strb.w	r3, [r4, #1348]	@ 0x544
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80078f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80078f4:	f884 356c 	strb.w	r3, [r4, #1388]	@ 0x56c
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80078f8:	2400      	movs	r4, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80078fa:	2705      	movs	r7, #5
 80078fc:	e006      	b.n	800790c <ProcessMacCommands.constprop.0+0x158>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80078fe:	2201      	movs	r2, #1
 8007900:	f10d 010d 	add.w	r1, sp, #13
 8007904:	2003      	movs	r0, #3
 8007906:	f001 ff47 	bl	8009798 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800790a:	3401      	adds	r4, #1
 800790c:	b2e2      	uxtb	r2, r4
 800790e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007912:	fbb3 f1f7 	udiv	r1, r3, r7
 8007916:	4291      	cmp	r1, r2
 8007918:	d8f1      	bhi.n	80078fe <ProcessMacCommands.constprop.0+0x14a>
                    macIndex += linkAdrNbBytesParsed - 1;
 800791a:	3b01      	subs	r3, #1
 800791c:	442b      	add	r3, r5
 800791e:	b2dd      	uxtb	r5, r3
                break;
 8007920:	2701      	movs	r7, #1
 8007922:	e79e      	b.n	8007862 <ProcessMacCommands.constprop.0+0xae>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8007924:	5d73      	ldrb	r3, [r6, r5]
 8007926:	497f      	ldr	r1, [pc, #508]	@ (8007b24 <ProcessMacCommands.constprop.0+0x370>)
 8007928:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800792c:	2201      	movs	r2, #1
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800792e:	f881 360b 	strb.w	r3, [r1, #1547]	@ 0x60b
 8007932:	3402      	adds	r4, #2
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	f8a1 360e 	strh.w	r3, [r1, #1550]	@ 0x60e
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800793c:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800793e:	2200      	movs	r2, #0
 8007940:	a904      	add	r1, sp, #16
 8007942:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8007944:	f001 ff28 	bl	8009798 <LoRaMacCommandsAddCmd>
 8007948:	e0aa      	b.n	8007aa0 <ProcessMacCommands.constprop.0+0x2ec>
                status = 0x07;
 800794a:	2307      	movs	r3, #7
 800794c:	f88d 300d 	strb.w	r3, [sp, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8007950:	5d73      	ldrb	r3, [r6, r5]
 8007952:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800795e:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007960:	b2db      	uxtb	r3, r3
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8007962:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007966:	5cf2      	ldrb	r2, [r6, r3]
 8007968:	1d23      	adds	r3, r4, #4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800796a:	b2db      	uxtb	r3, r3
 800796c:	1d65      	adds	r5, r4, #5
 800796e:	5cf3      	ldrb	r3, [r6, r3]
                macIndex++;
 8007970:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007972:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007974:	041b      	lsls	r3, r3, #16
 8007976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800797a:	5d32      	ldrb	r2, [r6, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800797c:	4c69      	ldr	r4, [pc, #420]	@ (8007b24 <ProcessMacCommands.constprop.0+0x370>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800797e:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8007980:	2264      	movs	r2, #100	@ 0x64
 8007982:	4353      	muls	r3, r2
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8007984:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
                rxParamSetupReq.Frequency *= 100;
 8007988:	930b      	str	r3, [sp, #44]	@ 0x2c
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800798a:	a90a      	add	r1, sp, #40	@ 0x28
 800798c:	f002 fd8c 	bl	800a4a8 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 8007990:	f000 0307 	and.w	r3, r0, #7
 8007994:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007996:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8007998:	f88d 000d 	strb.w	r0, [sp, #13]
                if( ( status & 0x07 ) == 0x07 )
 800799c:	d10e      	bne.n	80079bc <ProcessMacCommands.constprop.0+0x208>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800799e:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80079a2:	f884 3574 	strb.w	r3, [r4, #1396]	@ 0x574
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80079a6:	f884 357c 	strb.w	r3, [r4, #1404]	@ 0x57c
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80079aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079ac:	f8c4 3570 	str.w	r3, [r4, #1392]	@ 0x570
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80079b0:	f8c4 3578 	str.w	r3, [r4, #1400]	@ 0x578
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80079b4:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 80079b8:	f884 356d 	strb.w	r3, [r4, #1389]	@ 0x56d
                macCmdPayload[0] = status;
 80079bc:	f88d 0010 	strb.w	r0, [sp, #16]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80079c0:	2201      	movs	r2, #1
 80079c2:	a904      	add	r1, sp, #16
 80079c4:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80079c6:	f001 fee7 	bl	8009798 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80079ca:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80079ce:	f043 0310 	orr.w	r3, r3, #16
 80079d2:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
}
 80079d6:	e744      	b.n	8007862 <ProcessMacCommands.constprop.0+0xae>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80079d8:	4b52      	ldr	r3, [pc, #328]	@ (8007b24 <ProcessMacCommands.constprop.0+0x370>)
 80079da:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80079de:	b173      	cbz	r3, 80079fe <ProcessMacCommands.constprop.0+0x24a>
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	b163      	cbz	r3, 80079fe <ProcessMacCommands.constprop.0+0x24a>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80079e4:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80079e6:	f009 033f 	and.w	r3, r9, #63	@ 0x3f
                macCmdPayload[0] = batteryLevel;
 80079ea:	f88d 0010 	strb.w	r0, [sp, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80079ee:	f88d 3011 	strb.w	r3, [sp, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80079f2:	2202      	movs	r2, #2
 80079f4:	a904      	add	r1, sp, #16
 80079f6:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80079f8:	f001 fece 	bl	8009798 <LoRaMacCommandsAddCmd>
                break;
 80079fc:	e731      	b.n	8007862 <ProcessMacCommands.constprop.0+0xae>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80079fe:	20ff      	movs	r0, #255	@ 0xff
 8007a00:	e7f1      	b.n	80079e6 <ProcessMacCommands.constprop.0+0x232>
                status = 0x03;
 8007a02:	2303      	movs	r3, #3
 8007a04:	f88d 300d 	strb.w	r3, [sp, #13]
                newChannelReq.ChannelId = payload[macIndex++];
 8007a08:	5d73      	ldrb	r3, [r6, r5]
 8007a0a:	f88d 301c 	strb.w	r3, [sp, #28]
                newChannelReq.NewChannel = &chParam;
 8007a0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a10:	9306      	str	r3, [sp, #24]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8007a12:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007a14:	b2db      	uxtb	r3, r3
                chParam.DrRange.Value = payload[macIndex++];
 8007a16:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007a18:	5cf2      	ldrb	r2, [r6, r3]
 8007a1a:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a1c:	b2db      	uxtb	r3, r3
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8007a1e:	a906      	add	r1, sp, #24
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a20:	5cf3      	ldrb	r3, [r6, r3]
 8007a22:	041b      	lsls	r3, r3, #16
 8007a24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                newChannelReq.ChannelId = payload[macIndex++];
 8007a28:	1ca2      	adds	r2, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8007a2a:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a2c:	3405      	adds	r4, #5
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8007a2e:	5cb2      	ldrb	r2, [r6, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a30:	4313      	orrs	r3, r2
                chParam.Frequency *= 100;
 8007a32:	2264      	movs	r2, #100	@ 0x64
 8007a34:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8007a36:	b2e4      	uxtb	r4, r4
                chParam.Frequency *= 100;
 8007a38:	930a      	str	r3, [sp, #40]	@ 0x28
                chParam.Rx1Frequency = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	930b      	str	r3, [sp, #44]	@ 0x2c
                chParam.DrRange.Value = payload[macIndex++];
 8007a3e:	5d33      	ldrb	r3, [r6, r4]
 8007a40:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8007a44:	4b37      	ldr	r3, [pc, #220]	@ (8007b24 <ProcessMacCommands.constprop.0+0x370>)
 8007a46:	f893 054c 	ldrb.w	r0, [r3, #1356]	@ 0x54c
 8007a4a:	f002 fd34 	bl	800a4b6 <RegionNewChannelReq>
 8007a4e:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 8007a50:	2800      	cmp	r0, #0
                chParam.DrRange.Value = payload[macIndex++];
 8007a52:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8007a54:	f88d 300d 	strb.w	r3, [sp, #13]
                if( ( int8_t )status >= 0 )
 8007a58:	f6ff af03 	blt.w	8007862 <ProcessMacCommands.constprop.0+0xae>
                    macCmdPayload[0] = status;
 8007a5c:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8007a60:	2201      	movs	r2, #1
 8007a62:	a904      	add	r1, sp, #16
 8007a64:	2007      	movs	r0, #7
 8007a66:	e7c7      	b.n	80079f8 <ProcessMacCommands.constprop.0+0x244>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8007a68:	5d73      	ldrb	r3, [r6, r5]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8007a6a:	4d2e      	ldr	r5, [pc, #184]	@ (8007b24 <ProcessMacCommands.constprop.0+0x370>)
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a76:	bf38      	it	cc
 8007a78:	2301      	movcc	r3, #1
 8007a7a:	4353      	muls	r3, r2
 8007a7c:	f8c5 355c 	str.w	r3, [r5, #1372]	@ 0x55c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8007a80:	a904      	add	r1, sp, #16
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8007a82:	4413      	add	r3, r2
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8007a84:	2008      	movs	r0, #8
 8007a86:	2200      	movs	r2, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8007a88:	f8c5 3560 	str.w	r3, [r5, #1376]	@ 0x560
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8007a8c:	f001 fe84 	bl	8009798 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007a90:	f895 3485 	ldrb.w	r3, [r5, #1157]	@ 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8007a94:	3402      	adds	r4, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007a96:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 8007a9a:	b2e4      	uxtb	r4, r4
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007a9c:	f885 3485 	strb.w	r3, [r5, #1157]	@ 0x485
                uint8_t eirpDwellTime = payload[macIndex++];
 8007aa0:	4625      	mov	r5, r4
 8007aa2:	e6de      	b.n	8007862 <ProcessMacCommands.constprop.0+0xae>
 8007aa4:	5d73      	ldrb	r3, [r6, r5]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8007aa6:	4d1f      	ldr	r5, [pc, #124]	@ (8007b24 <ProcessMacCommands.constprop.0+0x370>)
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8007aa8:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8007aac:	f88d 2015 	strb.w	r2, [sp, #21]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8007ab0:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8007ab4:	f3c3 1200 	ubfx	r2, r3, #4, #1
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8007ab8:	a905      	add	r1, sp, #20
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	f88d 2014 	strb.w	r2, [sp, #20]
 8007ac2:	f88d 3016 	strb.w	r3, [sp, #22]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8007ac6:	f002 fcfd 	bl	800a4c4 <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 8007aca:	3402      	adds	r4, #2
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8007acc:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 8007ace:	b2e4      	uxtb	r4, r4
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8007ad0:	d0e6      	beq.n	8007aa0 <ProcessMacCommands.constprop.0+0x2ec>
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8007ad2:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8007ad6:	4814      	ldr	r0, [pc, #80]	@ (8007b28 <ProcessMacCommands.constprop.0+0x374>)
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8007ad8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8007adc:	5c41      	ldrb	r1, [r0, r1]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8007ade:	f8a5 2580 	strh.w	r2, [r5, #1408]	@ 0x580
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8007ae2:	ee07 1a90 	vmov	s15, r1
 8007ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aea:	f205 520c 	addw	r2, r5, #1292	@ 0x50c
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8007aee:	f89d 3014 	ldrb.w	r3, [sp, #20]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8007af2:	edc2 7a1e 	vstr	s15, [r2, #120]	@ 0x78
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007af6:	a90a      	add	r1, sp, #40	@ 0x28
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8007af8:	2202      	movs	r2, #2
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007afa:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8007afe:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007b02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b06:	f002 fc6c 	bl	800a3e2 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8007b0a:	f995 3545 	ldrsb.w	r3, [r5, #1349]	@ 0x545
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b0e:	9006      	str	r0, [sp, #24]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8007b10:	b240      	sxtb	r0, r0
 8007b12:	4298      	cmp	r0, r3
 8007b14:	bfb8      	it	lt
 8007b16:	4618      	movlt	r0, r3
 8007b18:	f885 0545 	strb.w	r0, [r5, #1349]	@ 0x545
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	a904      	add	r1, sp, #16
 8007b20:	2009      	movs	r0, #9
 8007b22:	e70f      	b.n	8007944 <ProcessMacCommands.constprop.0+0x190>
 8007b24:	2000065c 	.word	0x2000065c
 8007b28:	0800dd00 	.word	0x0800dd00
                status = 0x03;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	f88d 300d 	strb.w	r3, [sp, #13]
                dlChannelReq.ChannelId = payload[macIndex++];
 8007b32:	5d73      	ldrb	r3, [r6, r5]
 8007b34:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8007b38:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007b3a:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007b3c:	1d65      	adds	r5, r4, #5
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007b3e:	5cf2      	ldrb	r2, [r6, r3]
 8007b40:	1d23      	adds	r3, r4, #4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007b42:	b2db      	uxtb	r3, r3
                dlChannelReq.ChannelId = payload[macIndex++];
 8007b44:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007b46:	5cf3      	ldrb	r3, [r6, r3]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8007b48:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007b4a:	041b      	lsls	r3, r3, #16
 8007b4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8007b50:	5d32      	ldrb	r2, [r6, r4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8007b52:	4c65      	ldr	r4, [pc, #404]	@ (8007ce8 <ProcessMacCommands.constprop.0+0x534>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007b54:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8007b56:	2264      	movs	r2, #100	@ 0x64
 8007b58:	4353      	muls	r3, r2
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8007b5a:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
                dlChannelReq.Rx1Frequency *= 100;
 8007b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8007b60:	a90a      	add	r1, sp, #40	@ 0x28
 8007b62:	f002 fcb6 	bl	800a4d2 <RegionDlChannelReq>
 8007b66:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 8007b68:	2800      	cmp	r0, #0
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007b6a:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8007b6c:	f88d 300d 	strb.w	r3, [sp, #13]
                if( ( int8_t )status >= 0 )
 8007b70:	f6ff ae77 	blt.w	8007862 <ProcessMacCommands.constprop.0+0xae>
                    macCmdPayload[0] = status;
 8007b74:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8007b78:	2201      	movs	r2, #1
 8007b7a:	a904      	add	r1, sp, #16
 8007b7c:	200a      	movs	r0, #10
 8007b7e:	e722      	b.n	80079c6 <ProcessMacCommands.constprop.0+0x212>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8007b80:	200a      	movs	r0, #10
 8007b82:	f001 ff95 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f ae6b 	beq.w	8007862 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8007b8c:	210a      	movs	r1, #10
 8007b8e:	2000      	movs	r0, #0
 8007b90:	f001 ff52 	bl	8009a38 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8007b94:	2300      	movs	r3, #0
 8007b96:	f8ad 301e 	strh.w	r3, [sp, #30]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8007b9a:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8007b9c:	b2db      	uxtb	r3, r3
                    sysTimeCurrent = SysTimeGet( );
 8007b9e:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8007ba2:	5cf2      	ldrb	r2, [r6, r3]
 8007ba4:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007ba6:	b2db      	uxtb	r3, r3
                    sysTimeCurrent = SysTimeGet( );
 8007ba8:	4658      	mov	r0, fp
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007baa:	f816 a003 	ldrb.w	sl, [r6, r3]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8007bae:	5d73      	ldrb	r3, [r6, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007bb0:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8007bb4:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
 8007bb8:	ea4a 0a03 	orr.w	sl, sl, r3
 8007bbc:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007bbe:	b2db      	uxtb	r3, r3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8007bc0:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007bc2:	3405      	adds	r4, #5
 8007bc4:	5cf3      	ldrb	r3, [r6, r3]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8007bc6:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007bc8:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8007bcc:	5d33      	ldrb	r3, [r6, r4]
 8007bce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007bd2:	4353      	muls	r3, r2
 8007bd4:	121b      	asrs	r3, r3, #8
 8007bd6:	f8ad 301c 	strh.w	r3, [sp, #28]
                    sysTimeCurrent = SysTimeGet( );
 8007bda:	f005 facd 	bl	800d178 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8007bde:	4b43      	ldr	r3, [pc, #268]	@ (8007cec <ProcessMacCommands.constprop.0+0x538>)
 8007be0:	4453      	add	r3, sl
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8007be2:	f8df a104 	ldr.w	sl, [pc, #260]	@ 8007ce8 <ProcessMacCommands.constprop.0+0x534>
 8007be6:	9306      	str	r3, [sp, #24]
 8007be8:	f8da 3340 	ldr.w	r3, [sl, #832]	@ 0x340
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	ac06      	add	r4, sp, #24
 8007bf0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8007bf4:	f8da 333c 	ldr.w	r3, [sl, #828]	@ 0x33c
 8007bf8:	a808      	add	r0, sp, #32
 8007bfa:	f005 fa7a 	bl	800d0f2 <SysTimeSub>
 8007bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8007c06:	9b08      	ldr	r3, [sp, #32]
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f005 fa57 	bl	800d0bc <SysTimeAdd>
                    SysTimeSet( sysTime );
 8007c0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c12:	f005 fa89 	bl	800d128 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8007c16:	f001 fda9 	bl	800976c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8007c1a:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8007c1c:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8007c1e:	f88a 3438 	strb.w	r3, [sl, #1080]	@ 0x438
 8007c22:	e61e      	b.n	8007862 <ProcessMacCommands.constprop.0+0xae>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8007c24:	200d      	movs	r0, #13
 8007c26:	f001 ff43 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f43f ae19 	beq.w	8007862 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8007c30:	210d      	movs	r1, #13
 8007c32:	2000      	movs	r0, #0
 8007c34:	f001 ff00 	bl	8009a38 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8007c38:	4b2b      	ldr	r3, [pc, #172]	@ (8007ce8 <ProcessMacCommands.constprop.0+0x534>)
 8007c3a:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 8007c3e:	3b04      	subs	r3, #4
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	f67f ae0e 	bls.w	8007862 <ProcessMacCommands.constprop.0+0xae>
                        LoRaMacClassBPingSlotInfoAns( );
 8007c46:	f001 fd8d 	bl	8009764 <LoRaMacClassBPingSlotInfoAns>
 8007c4a:	e60a      	b.n	8007862 <ProcessMacCommands.constprop.0+0xae>
                frequency = ( uint32_t )payload[macIndex++];
 8007c4c:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007c4e:	b2db      	uxtb	r3, r3
                frequency = ( uint32_t )payload[macIndex++];
 8007c50:	5d72      	ldrb	r2, [r6, r5]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007c52:	5cf1      	ldrb	r1, [r6, r3]
 8007c54:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007c56:	b2db      	uxtb	r3, r3
                datarate = payload[macIndex++] & 0x0F;
 8007c58:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007c5a:	5cf3      	ldrb	r3, [r6, r3]
 8007c5c:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8007c5e:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007c60:	041b      	lsls	r3, r3, #16
                datarate = payload[macIndex++] & 0x0F;
 8007c62:	5d30      	ldrb	r0, [r6, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007c64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007c68:	4313      	orrs	r3, r2
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8007c6a:	2164      	movs	r1, #100	@ 0x64
 8007c6c:	4359      	muls	r1, r3
 8007c6e:	f000 000f 	and.w	r0, r0, #15
 8007c72:	f001 fd78 	bl	8009766 <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
 8007c76:	b2ed      	uxtb	r5, r5
                macCmdPayload[0] = status;
 8007c78:	f88d 0010 	strb.w	r0, [sp, #16]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	a904      	add	r1, sp, #16
 8007c80:	2011      	movs	r0, #17
 8007c82:	e6b9      	b.n	80079f8 <ProcessMacCommands.constprop.0+0x244>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8007c84:	200e      	movs	r0, #14
 8007c86:	f001 ff13 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	f43f ade9 	beq.w	8007862 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8007c90:	210e      	movs	r1, #14
 8007c92:	2000      	movs	r0, #0
 8007c94:	f001 fed0 	bl	8009a38 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8007c98:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8007c9a:	b2db      	uxtb	r3, r3
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007c9c:	4a12      	ldr	r2, [pc, #72]	@ (8007ce8 <ProcessMacCommands.constprop.0+0x534>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8007c9e:	5cf0      	ldrb	r0, [r6, r3]
 8007ca0:	5d73      	ldrb	r3, [r6, r5]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007ca2:	f8d2 2858 	ldr.w	r2, [r2, #2136]	@ 0x858
                    beaconTimingChannel = payload[macIndex++];
 8007ca6:	1d25      	adds	r5, r4, #4
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8007ca8:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 8007caa:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007cac:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007cb0:	5d31      	ldrb	r1, [r6, r4]
                    beaconTimingChannel = payload[macIndex++];
 8007cb2:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007cb4:	f001 fd59 	bl	800976a <LoRaMacClassBBeaconTimingAns>
 8007cb8:	e5d3      	b.n	8007862 <ProcessMacCommands.constprop.0+0xae>
                    frequency = ( uint32_t )payload[macIndex++];
 8007cba:	5d72      	ldrb	r2, [r6, r5]
 8007cbc:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007cbe:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007cc0:	3403      	adds	r4, #3
 8007cc2:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007cc4:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007cc6:	5cf1      	ldrb	r1, [r6, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007cc8:	5d33      	ldrb	r3, [r6, r4]
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007cd0:	4313      	orrs	r3, r2
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8007cd2:	2064      	movs	r0, #100	@ 0x64
 8007cd4:	4358      	muls	r0, r3
 8007cd6:	f001 fd4a 	bl	800976e <LoRaMacClassBBeaconFreqReq>
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007cda:	b2ed      	uxtb	r5, r5
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8007cdc:	f88d 0010 	strb.w	r0, [sp, #16]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	a904      	add	r1, sp, #16
 8007ce4:	2013      	movs	r0, #19
 8007ce6:	e687      	b.n	80079f8 <ProcessMacCommands.constprop.0+0x244>
 8007ce8:	2000065c 	.word	0x2000065c
 8007cec:	12d53d80 	.word	0x12d53d80

08007cf0 <StopRetransmission.isra.0>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8007d30 <StopRetransmission.isra.0+0x40>)
 8007cf2:	f893 2485 	ldrb.w	r2, [r3, #1157]	@ 0x485
 8007cf6:	0792      	lsls	r2, r2, #30
 8007cf8:	d503      	bpl.n	8007d02 <StopRetransmission.isra.0+0x12>
 8007cfa:	f893 2483 	ldrb.w	r2, [r3, #1155]	@ 0x483
 8007cfe:	2a01      	cmp	r2, #1
 8007d00:	d907      	bls.n	8007d12 <StopRetransmission.isra.0+0x22>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007d02:	f893 260a 	ldrb.w	r2, [r3, #1546]	@ 0x60a
 8007d06:	b122      	cbz	r2, 8007d12 <StopRetransmission.isra.0+0x22>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8007d08:	f8d3 2534 	ldr.w	r2, [r3, #1332]	@ 0x534
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	f8c3 2534 	str.w	r2, [r3, #1332]	@ 0x534
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    MacCtx.NodeAckRequested = false;
 8007d18:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.AckTimeoutRetry = false;
 8007d1c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007d20:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 8007d24:	f022 0202 	bic.w	r2, r2, #2
 8007d28:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344

    return true;
}
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	2000065c 	.word	0x2000065c

08007d34 <OnTxDelayedTimerEvent>:
{
 8007d34:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8007d36:	4c11      	ldr	r4, [pc, #68]	@ (8007d7c <OnTxDelayedTimerEvent+0x48>)
 8007d38:	f504 705b 	add.w	r0, r4, #876	@ 0x36c
 8007d3c:	f005 fb0c 	bl	800d358 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8007d40:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
    switch( ScheduleTx( true ) )
 8007d44:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8007d46:	f023 0320 	bic.w	r3, r3, #32
 8007d4a:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    switch( ScheduleTx( true ) )
 8007d4e:	f7ff fad7 	bl	8007300 <ScheduleTx>
 8007d52:	b190      	cbz	r0, 8007d7a <OnTxDelayedTimerEvent+0x46>
 8007d54:	280b      	cmp	r0, #11
 8007d56:	d010      	beq.n	8007d7a <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007d58:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
 8007d5c:	f884 343e 	strb.w	r3, [r4, #1086]	@ 0x43e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8007d60:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8007d62:	f894 3416 	ldrb.w	r3, [r4, #1046]	@ 0x416
 8007d66:	f884 3441 	strb.w	r3, [r4, #1089]	@ 0x441
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8007d6a:	f884 043d 	strb.w	r0, [r4, #1085]	@ 0x43d
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8007d6e:	f001 fe85 	bl	8009a7c <LoRaMacConfirmQueueSetStatusCmn>
}
 8007d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8007d76:	f7ff bfbb 	b.w	8007cf0 <StopRetransmission.isra.0>
}
 8007d7a:	bd10      	pop	{r4, pc}
 8007d7c:	2000065c 	.word	0x2000065c

08007d80 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8007d80:	4b05      	ldr	r3, [pc, #20]	@ (8007d98 <LoRaMacIsBusy+0x18>)
 8007d82:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 8007d86:	b92a      	cbnz	r2, 8007d94 <LoRaMacIsBusy+0x14>
 8007d88:	f893 0486 	ldrb.w	r0, [r3, #1158]	@ 0x486
 8007d8c:	3801      	subs	r0, #1
 8007d8e:	bf18      	it	ne
 8007d90:	2001      	movne	r0, #1
 8007d92:	4770      	bx	lr
    return true;
 8007d94:	2001      	movs	r0, #1
}
 8007d96:	4770      	bx	lr
 8007d98:	2000065c 	.word	0x2000065c

08007d9c <LoRaMacProcess>:
{
 8007d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	b0a5      	sub	sp, #148	@ 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007da2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007da6:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8007da8:	4ccb      	ldr	r4, [pc, #812]	@ (80080d8 <LoRaMacProcess+0x33c>)
    LoRaMacRadioEvents.Value = 0;
 8007daa:	2100      	movs	r1, #0
    events = LoRaMacRadioEvents;
 8007dac:	6823      	ldr	r3, [r4, #0]
    LoRaMacRadioEvents.Value = 0;
 8007dae:	6021      	str	r1, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db0:	f382 8810 	msr	PRIMASK, r2
    if( events.Value != 0 )
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80ce 	beq.w	8007f56 <LoRaMacProcess+0x1ba>
        if( events.Events.TxDone == 1 )
 8007dba:	06da      	lsls	r2, r3, #27
 8007dbc:	fa5f fb83 	uxtb.w	fp, r3
 8007dc0:	d560      	bpl.n	8007e84 <LoRaMacProcess+0xe8>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007dc2:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d002      	beq.n	8007dd0 <LoRaMacProcess+0x34>
        Radio.Sleep( );
 8007dca:	4bc4      	ldr	r3, [pc, #784]	@ (80080dc <LoRaMacProcess+0x340>)
 8007dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dce:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8007dd0:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8007dd4:	48c2      	ldr	r0, [pc, #776]	@ (80080e0 <LoRaMacProcess+0x344>)
 8007dd6:	f005 fb47 	bl	800d468 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007dda:	48c1      	ldr	r0, [pc, #772]	@ (80080e0 <LoRaMacProcess+0x344>)
 8007ddc:	f005 fb0a 	bl	800d3f4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8007de0:	f8d4 13b8 	ldr.w	r1, [r4, #952]	@ 0x3b8
 8007de4:	48bf      	ldr	r0, [pc, #764]	@ (80080e4 <LoRaMacProcess+0x348>)
 8007de6:	f005 fb3f 	bl	800d468 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8007dea:	48be      	ldr	r0, [pc, #760]	@ (80080e4 <LoRaMacProcess+0x348>)
 8007dec:	f005 fb02 	bl	800d3f4 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8007df0:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d002      	beq.n	8007dfe <LoRaMacProcess+0x62>
 8007df8:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8007dfc:	b18b      	cbz	r3, 8007e22 <LoRaMacProcess+0x86>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8007dfe:	2316      	movs	r3, #22
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007e00:	a90e      	add	r1, sp, #56	@ 0x38
 8007e02:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8007e06:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007e0a:	f002 faea 	bl	800a3e2 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8007e0e:	f8d4 13b8 	ldr.w	r1, [r4, #952]	@ 0x3b8
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007e12:	900c      	str	r0, [sp, #48]	@ 0x30
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8007e14:	4401      	add	r1, r0
 8007e16:	48b4      	ldr	r0, [pc, #720]	@ (80080e8 <LoRaMacProcess+0x34c>)
 8007e18:	f005 fb26 	bl	800d468 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8007e1c:	48b2      	ldr	r0, [pc, #712]	@ (80080e8 <LoRaMacProcess+0x34c>)
 8007e1e:	f005 fae9 	bl	800d3f4 <UTIL_TIMER_Start>
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007e22:	ae0a      	add	r6, sp, #40	@ 0x28
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8007e24:	f8d4 3868 	ldr.w	r3, [r4, #2152]	@ 0x868
    txDone.Channel = MacCtx.Channel;
 8007e28:	f894 2419 	ldrb.w	r2, [r4, #1049]	@ 0x419
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8007e2c:	f8c4 3538 	str.w	r3, [r4, #1336]	@ 0x538
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007e30:	4630      	mov	r0, r6
    txDone.Channel = MacCtx.Channel;
 8007e32:	f88d 2060 	strb.w	r2, [sp, #96]	@ 0x60
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8007e36:	9319      	str	r3, [sp, #100]	@ 0x64
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007e38:	f005 f9c4 	bl	800d1c4 <SysTimeGetMcuTime>
 8007e3c:	f8d4 3614 	ldr.w	r3, [r4, #1556]	@ 0x614
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	ad04      	add	r5, sp, #16
 8007e44:	e896 0006 	ldmia.w	r6, {r1, r2}
 8007e48:	f8d4 3610 	ldr.w	r3, [r4, #1552]	@ 0x610
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f005 f950 	bl	800d0f2 <SysTimeSub>
 8007e52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007e58:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8007e5c:	f8d4 341c 	ldr.w	r3, [r4, #1052]	@ 0x41c
 8007e60:	931a      	str	r3, [sp, #104]	@ 0x68
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007e62:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007e66:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007e6a:	3b00      	subs	r3, #0
 8007e6c:	bf18      	it	ne
 8007e6e:	2301      	movne	r3, #1
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007e70:	a918      	add	r1, sp, #96	@ 0x60
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007e72:	f88d 3061 	strb.w	r3, [sp, #97]	@ 0x61
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007e76:	f002 fabe 	bl	800a3f6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8007e7a:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8007e7e:	b90b      	cbnz	r3, 8007e84 <LoRaMacProcess+0xe8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007e80:	f884 343d 	strb.w	r3, [r4, #1085]	@ 0x43d
        if( events.Events.RxDone == 1 )
 8007e84:	f01b 0f08 	tst.w	fp, #8
 8007e88:	d03a      	beq.n	8007f00 <LoRaMacProcess+0x164>
    uint32_t downLinkCounter = 0;
 8007e8a:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8007e8c:	f8d4 25d8 	ldr.w	r2, [r4, #1496]	@ 0x5d8
    uint32_t downLinkCounter = 0;
 8007e90:	9307      	str	r3, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 8007e92:	f884 3440 	strb.w	r3, [r4, #1088]	@ 0x440
    MacCtx.McpsIndication.Multicast = 0;
 8007e96:	f8a4 3422 	strh.w	r3, [r4, #1058]	@ 0x422
    MacCtx.McpsIndication.FramePending = 0;
 8007e9a:	f884 3425 	strb.w	r3, [r4, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8007e9e:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8007ea2:	f8a4 342c 	strh.w	r3, [r4, #1068]	@ 0x42c
    MacCtx.McpsIndication.AckReceived = false;
 8007ea6:	f884 342e 	strb.w	r3, [r4, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8007eaa:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007eae:	f884 3420 	strb.w	r3, [r4, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8007eb2:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8007eb6:	f884 3438 	strb.w	r3, [r4, #1080]	@ 0x438
    Radio.Sleep( );
 8007eba:	4b88      	ldr	r3, [pc, #544]	@ (80080dc <LoRaMacProcess+0x340>)
    int16_t rssi = RxDoneParams.Rssi;
 8007ebc:	f9b4 7862 	ldrsh.w	r7, [r4, #2146]	@ 0x862
    int8_t snr = RxDoneParams.Snr;
 8007ec0:	f994 9864 	ldrsb.w	r9, [r4, #2148]	@ 0x864
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8007ec4:	9203      	str	r2, [sp, #12]
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8007ec6:	f894 2484 	ldrb.w	r2, [r4, #1156]	@ 0x484
    Radio.Sleep( );
 8007eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8007ecc:	f884 2483 	strb.w	r2, [r4, #1155]	@ 0x483
    uint8_t *payload = RxDoneParams.Payload;
 8007ed0:	f8d4 685c 	ldr.w	r6, [r4, #2140]	@ 0x85c
    uint16_t size = RxDoneParams.Size;
 8007ed4:	f8b4 5860 	ldrh.w	r5, [r4, #2144]	@ 0x860
    MacCtx.RxStatus.Rssi = rssi;
 8007ed8:	f8a4 7480 	strh.w	r7, [r4, #1152]	@ 0x480
    MacCtx.RxStatus.Snr = snr;
 8007edc:	f884 9482 	strb.w	r9, [r4, #1154]	@ 0x482
    Radio.Sleep( );
 8007ee0:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8007ee2:	4880      	ldr	r0, [pc, #512]	@ (80080e4 <LoRaMacProcess+0x348>)
 8007ee4:	f005 fa38 	bl	800d358 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4630      	mov	r0, r6
 8007eec:	f001 fc27 	bl	800973e <LoRaMacClassBRxBeacon>
 8007ef0:	4680      	mov	r8, r0
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f000 8167 	beq.w	80081c6 <LoRaMacProcess+0x42a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8007ef8:	f8a4 7476 	strh.w	r7, [r4, #1142]	@ 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8007efc:	f884 9478 	strb.w	r9, [r4, #1144]	@ 0x478
        if( events.Events.TxTimeout == 1 )
 8007f00:	f01b 0f04 	tst.w	fp, #4
 8007f04:	d019      	beq.n	8007f3a <LoRaMacProcess+0x19e>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007f06:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d002      	beq.n	8007f14 <LoRaMacProcess+0x178>
        Radio.Sleep( );
 8007f0e:	4b73      	ldr	r3, [pc, #460]	@ (80080dc <LoRaMacProcess+0x340>)
 8007f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f12:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8007f14:	2002      	movs	r0, #2
    UpdateRxSlotIdleState( );
 8007f16:	f7ff f819 	bl	8006f4c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8007f1a:	f884 043d 	strb.w	r0, [r4, #1085]	@ 0x43d
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8007f1e:	f001 fdad 	bl	8009a7c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8007f22:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8007f26:	b113      	cbz	r3, 8007f2e <LoRaMacProcess+0x192>
        MacCtx.AckTimeoutRetry = true;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007f2e:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007f32:	f043 0320 	orr.w	r3, r3, #32
 8007f36:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
        if( events.Events.RxError == 1 )
 8007f3a:	f01b 0f02 	tst.w	fp, #2
 8007f3e:	d003      	beq.n	8007f48 <LoRaMacProcess+0x1ac>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8007f40:	2106      	movs	r1, #6
 8007f42:	2005      	movs	r0, #5
 8007f44:	f7ff f864 	bl	8007010 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8007f48:	f01b 0f01 	tst.w	fp, #1
 8007f4c:	d003      	beq.n	8007f56 <LoRaMacProcess+0x1ba>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8007f4e:	2104      	movs	r1, #4
 8007f50:	2003      	movs	r0, #3
 8007f52:	f7ff f85d 	bl	8007010 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8007f56:	f001 fc0f 	bl	8009778 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8007f5a:	f894 2485 	ldrb.w	r2, [r4, #1157]	@ 0x485
 8007f5e:	0697      	lsls	r7, r2, #26
 8007f60:	f140 80f6 	bpl.w	8008150 <LoRaMacProcess+0x3b4>
    MacCtx.AllowRequests = requestState;
 8007f64:	2300      	movs	r3, #0
 8007f66:	f884 3486 	strb.w	r3, [r4, #1158]	@ 0x486
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007f6a:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 8007f6e:	061e      	lsls	r6, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007f70:	bf44      	itt	mi
 8007f72:	f023 0382 	bicmi.w	r3, r3, #130	@ 0x82
 8007f76:	f8c4 3344 	strmi.w	r3, [r4, #836]	@ 0x344
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007f7a:	f012 0f05 	tst.w	r2, #5
 8007f7e:	f000 8323 	beq.w	80085c8 <LoRaMacProcess+0x82c>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007f82:	200c      	movs	r0, #12
 8007f84:	f001 fd94 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f000 831d 	beq.w	80085c8 <LoRaMacProcess+0x82c>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8007f8e:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007f92:	07dd      	lsls	r5, r3, #31
 8007f94:	f100 8318 	bmi.w	80085c8 <LoRaMacProcess+0x82c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007f98:	0758      	lsls	r0, r3, #29
 8007f9a:	f140 8329 	bpl.w	80085f0 <LoRaMacProcess+0x854>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007f9e:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 8007fa2:	f023 0302 	bic.w	r3, r3, #2
 8007fa6:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    if( MacCtx.MacState == LORAMAC_IDLE )
 8007faa:	f8d4 2344 	ldr.w	r2, [r4, #836]	@ 0x344
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8007fae:	f894 5485 	ldrb.w	r5, [r4, #1157]	@ 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 8007fb2:	2a00      	cmp	r2, #0
 8007fb4:	f040 80c9 	bne.w	800814a <LoRaMacProcess+0x3ae>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8007fb8:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8007fbc:	bf1e      	ittt	ne
 8007fbe:	462b      	movne	r3, r5
 8007fc0:	f362 0300 	bfine	r3, r2, #0, #1
 8007fc4:	f884 3485 	strbne.w	r3, [r4, #1157]	@ 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007fc8:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007fcc:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8007fce:	bf44      	itt	mi
 8007fd0:	f36f 0382 	bfcmi	r3, #2, #1
 8007fd4:	f884 3485 	strbmi.w	r3, [r4, #1157]	@ 0x485
    MacCtx.AllowRequests = requestState;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f884 3486 	strb.w	r3, [r4, #1158]	@ 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 8007fde:	b121      	cbz	r1, 8007fea <LoRaMacProcess+0x24e>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8007fe0:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 8007fe4:	4841      	ldr	r0, [pc, #260]	@ (80080ec <LoRaMacProcess+0x350>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8007fea:	076d      	lsls	r5, r5, #29
 8007fec:	d50b      	bpl.n	8008006 <LoRaMacProcess+0x26a>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8007fee:	4840      	ldr	r0, [pc, #256]	@ (80080f0 <LoRaMacProcess+0x354>)
 8007ff0:	f001 fd6a 	bl	8009ac8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8007ff4:	f001 fd92 	bl	8009b1c <LoRaMacConfirmQueueGetCnt>
 8007ff8:	b128      	cbz	r0, 8008006 <LoRaMacProcess+0x26a>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8007ffa:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007ffe:	f043 0304 	orr.w	r3, r3, #4
 8008002:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
        LoRaMacClassBResumeBeaconing( );
 8008006:	f001 fba6 	bl	8009756 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800800a:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 800800e:	f36f 1345 	bfc	r3, #5, #1
 8008012:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008016:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 800801a:	2b00      	cmp	r3, #0
 800801c:	f040 8095 	bne.w	800814a <LoRaMacProcess+0x3ae>
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008020:	a818      	add	r0, sp, #96	@ 0x60
        bool isStickyMacCommandPending = false;
 8008022:	f88d 3060 	strb.w	r3, [sp, #96]	@ 0x60
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008026:	f001 fc85 	bl	8009934 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800802a:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800802e:	b12b      	cbz	r3, 800803c <LoRaMacProcess+0x2a0>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008030:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8008034:	f043 0310 	orr.w	r3, r3, #16
 8008038:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    if( MacCtx.MacState != LORAMAC_IDLE )
 800803c:	f8d4 5344 	ldr.w	r5, [r4, #836]	@ 0x344
 8008040:	2d00      	cmp	r5, #0
 8008042:	f040 8082 	bne.w	800814a <LoRaMacProcess+0x3ae>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8008046:	2124      	movs	r1, #36	@ 0x24
 8008048:	482a      	ldr	r0, [pc, #168]	@ (80080f4 <LoRaMacProcess+0x358>)
 800804a:	f003 fb6b 	bl	800b724 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800804e:	f8d4 3530 	ldr.w	r3, [r4, #1328]	@ 0x530
 8008052:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
 8008054:	bf18      	it	ne
 8008056:	f8c4 0530 	strne.w	r0, [r4, #1328]	@ 0x530
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800805a:	f04f 0114 	mov.w	r1, #20
 800805e:	4826      	ldr	r0, [pc, #152]	@ (80080f8 <LoRaMacProcess+0x35c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8008060:	bf18      	it	ne
 8008062:	2501      	movne	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8008064:	f003 fb5e 	bl	800b724 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8008068:	f8d4 3548 	ldr.w	r3, [r4, #1352]	@ 0x548
 800806c:	4298      	cmp	r0, r3
        nvmData->MacGroup1.Crc32 = crc;
 800806e:	bf18      	it	ne
 8008070:	f8c4 0548 	strne.w	r0, [r4, #1352]	@ 0x548
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8008074:	f04f 01d4 	mov.w	r1, #212	@ 0xd4
 8008078:	4820      	ldr	r0, [pc, #128]	@ (80080fc <LoRaMacProcess+0x360>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800807a:	bf18      	it	ne
 800807c:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8008080:	f003 fb50 	bl	800b724 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8008084:	f8d4 3620 	ldr.w	r3, [r4, #1568]	@ 0x620
 8008088:	4298      	cmp	r0, r3
        nvmData->MacGroup2.Crc32 = crc;
 800808a:	bf18      	it	ne
 800808c:	f8c4 0620 	strne.w	r0, [r4, #1568]	@ 0x620
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8008090:	f04f 01bc 	mov.w	r1, #188	@ 0xbc
 8008094:	481a      	ldr	r0, [pc, #104]	@ (8008100 <LoRaMacProcess+0x364>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8008096:	bf18      	it	ne
 8008098:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800809c:	f003 fb42 	bl	800b724 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 80080a0:	f8d4 36e0 	ldr.w	r3, [r4, #1760]	@ 0x6e0
 80080a4:	4298      	cmp	r0, r3
        nvmData->SecureElement.Crc32 = crc;
 80080a6:	bf18      	it	ne
 80080a8:	f8c4 06e0 	strne.w	r0, [r4, #1760]	@ 0x6e0
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80080ac:	f04f 0190 	mov.w	r1, #144	@ 0x90
 80080b0:	4814      	ldr	r0, [pc, #80]	@ (8008104 <LoRaMacProcess+0x368>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80080b2:	bf18      	it	ne
 80080b4:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80080b8:	f003 fb34 	bl	800b724 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 80080bc:	f8d4 3774 	ldr.w	r3, [r4, #1908]	@ 0x774
 80080c0:	4298      	cmp	r0, r3
        nvmData->RegionGroup1.Crc32 = crc;
 80080c2:	bf18      	it	ne
 80080c4:	f8c4 0774 	strne.w	r0, [r4, #1908]	@ 0x774
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80080c8:	f04f 01c4 	mov.w	r1, #196	@ 0xc4
 80080cc:	480e      	ldr	r0, [pc, #56]	@ (8008108 <LoRaMacProcess+0x36c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80080ce:	bf18      	it	ne
 80080d0:	f045 0510 	orrne.w	r5, r5, #16
 80080d4:	e01a      	b.n	800810c <LoRaMacProcess+0x370>
 80080d6:	bf00      	nop
 80080d8:	2000065c 	.word	0x2000065c
 80080dc:	0800de84 	.word	0x0800de84
 80080e0:	200009e0 	.word	0x200009e0
 80080e4:	200009f8 	.word	0x200009f8
 80080e8:	20000a58 	.word	0x20000a58
 80080ec:	20000a98 	.word	0x20000a98
 80080f0:	20000aac 	.word	0x20000aac
 80080f4:	20000b68 	.word	0x20000b68
 80080f8:	20000b90 	.word	0x20000b90
 80080fc:	20000ba8 	.word	0x20000ba8
 8008100:	20000c80 	.word	0x20000c80
 8008104:	20000d40 	.word	0x20000d40
 8008108:	20000dd4 	.word	0x20000dd4
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800810c:	f003 fb0a 	bl	800b724 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8008110:	f8d4 383c 	ldr.w	r3, [r4, #2108]	@ 0x83c
 8008114:	4298      	cmp	r0, r3
        nvmData->RegionGroup2.Crc32 = crc;
 8008116:	bf18      	it	ne
 8008118:	f8c4 083c 	strne.w	r0, [r4, #2108]	@ 0x83c
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800811c:	f04f 0114 	mov.w	r1, #20
 8008120:	487d      	ldr	r0, [pc, #500]	@ (8008318 <LoRaMacProcess+0x57c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8008122:	bf18      	it	ne
 8008124:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8008128:	f003 fafc 	bl	800b724 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800812c:	f8d4 3854 	ldr.w	r3, [r4, #2132]	@ 0x854
 8008130:	4298      	cmp	r0, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008132:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
        nvmData->ClassB.Crc32 = crc;
 8008136:	bf1c      	itt	ne
 8008138:	f8c4 0854 	strne.w	r0, [r4, #2132]	@ 0x854
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800813c:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008140:	b11b      	cbz	r3, 800814a <LoRaMacProcess+0x3ae>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008142:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008144:	b10b      	cbz	r3, 800814a <LoRaMacProcess+0x3ae>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008146:	4628      	mov	r0, r5
 8008148:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800814a:	2301      	movs	r3, #1
 800814c:	f884 3486 	strb.w	r3, [r4, #1158]	@ 0x486
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008150:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8008154:	0718      	lsls	r0, r3, #28
 8008156:	d50a      	bpl.n	800816e <LoRaMacProcess+0x3d2>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008158:	f36f 03c3 	bfc	r3, #3, #1
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800815c:	496f      	ldr	r1, [pc, #444]	@ (800831c <LoRaMacProcess+0x580>)
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800815e:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008162:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 8008166:	f1a1 001c 	sub.w	r0, r1, #28
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800816e:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8008172:	06d9      	lsls	r1, r3, #27
 8008174:	d50e      	bpl.n	8008194 <LoRaMacProcess+0x3f8>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008176:	2307      	movs	r3, #7
 8008178:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800817c:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 8008180:	4966      	ldr	r1, [pc, #408]	@ (800831c <LoRaMacProcess+0x580>)
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	a818      	add	r0, sp, #96	@ 0x60
 8008186:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8008188:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 800818c:	f36f 1304 	bfc	r3, #4, #1
 8008190:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008194:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8008198:	079a      	lsls	r2, r3, #30
 800819a:	d50a      	bpl.n	80081b2 <LoRaMacProcess+0x416>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800819c:	f36f 0341 	bfc	r3, #1, #1
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80081a0:	495e      	ldr	r1, [pc, #376]	@ (800831c <LoRaMacProcess+0x580>)
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80081a2:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80081a6:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 80081aa:	f1a1 0060 	sub.w	r0, r1, #96	@ 0x60
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80081b2:	f894 3484 	ldrb.w	r3, [r4, #1156]	@ 0x484
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	f040 82a8 	bne.w	800870c <LoRaMacProcess+0x970>
}
 80081bc:	b025      	add	sp, #148	@ 0x94
 80081be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        OpenContinuousRxCWindow( );
 80081c2:	f7ff ba15 	b.w	80075f0 <OpenContinuousRxCWindow>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80081c6:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d10c      	bne.n	80081e8 <LoRaMacProcess+0x44c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80081ce:	f001 faba 	bl	8009746 <LoRaMacClassBIsPingExpected>
 80081d2:	4607      	mov	r7, r0
 80081d4:	b1c8      	cbz	r0, 800820a <LoRaMacProcess+0x46e>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80081d6:	4640      	mov	r0, r8
 80081d8:	f001 faaa 	bl	8009730 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80081dc:	4640      	mov	r0, r8
 80081de:	f001 faac 	bl	800973a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80081e2:	2304      	movs	r3, #4
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80081e4:	f884 3483 	strb.w	r3, [r4, #1155]	@ 0x483
    macHdr.Value = payload[pktHeaderLen++];
 80081e8:	f896 8000 	ldrb.w	r8, [r6]
    switch( macHdr.Bits.MType )
 80081ec:	ea4f 1358 	mov.w	r3, r8, lsr #5
 80081f0:	3b01      	subs	r3, #1
 80081f2:	2b06      	cmp	r3, #6
 80081f4:	f200 81dc 	bhi.w	80085b0 <LoRaMacProcess+0x814>
 80081f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80081fc:	01da0013 	.word	0x01da0013
 8008200:	01da0095 	.word	0x01da0095
 8008204:	01da0092 	.word	0x01da0092
 8008208:	01cb      	.short	0x01cb
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800820a:	f001 fa9e 	bl	800974a <LoRaMacClassBIsMulticastExpected>
 800820e:	2800      	cmp	r0, #0
 8008210:	d0ea      	beq.n	80081e8 <LoRaMacProcess+0x44c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008212:	4638      	mov	r0, r7
 8008214:	f001 fa8d 	bl	8009732 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008218:	4638      	mov	r0, r7
 800821a:	f001 fa8f 	bl	800973c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800821e:	2305      	movs	r3, #5
 8008220:	e7e0      	b.n	80081e4 <LoRaMacProcess+0x448>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008222:	2d10      	cmp	r5, #16
 8008224:	d803      	bhi.n	800822e <LoRaMacProcess+0x492>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f884 3421 	strb.w	r3, [r4, #1057]	@ 0x421
 800822c:	e11d      	b.n	800846a <LoRaMacProcess+0x6ce>
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800822e:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
            macMsgJoinAccept.Buffer = payload;
 8008232:	960e      	str	r6, [sp, #56]	@ 0x38
            macMsgJoinAccept.BufSize = size;
 8008234:	b2ed      	uxtb	r5, r5
 8008236:	f88d 503c 	strb.w	r5, [sp, #60]	@ 0x3c
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1f3      	bne.n	8008226 <LoRaMacProcess+0x48a>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800823e:	f7fe f923 	bl	8006488 <SecureElementGetJoinEui>
 8008242:	aa0e      	add	r2, sp, #56	@ 0x38
 8008244:	4601      	mov	r1, r0
 8008246:	20ff      	movs	r0, #255	@ 0xff
 8008248:	f001 ff0c 	bl	800a064 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800824c:	4606      	mov	r6, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	d159      	bne.n	8008306 <LoRaMacProcess+0x56a>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008252:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008256:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800825a:	f884 061a 	strb.w	r0, [r4, #1562]	@ 0x61a
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800825e:	041b      	lsls	r3, r3, #16
 8008260:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008264:	f89d 2041 	ldrb.w	r2, [sp, #65]	@ 0x41
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008268:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c4 35d4 	str.w	r3, [r4, #1492]	@ 0x5d4
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008272:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008274:	f8c4 35d8 	str.w	r3, [r4, #1496]	@ 0x5d8
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008278:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800827c:	f3c3 1202 	ubfx	r2, r3, #4, #3
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008280:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008284:	f884 3574 	strb.w	r3, [r4, #1396]	@ 0x574
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008288:	f884 357c 	strb.w	r3, [r4, #1404]	@ 0x57c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800828c:	f89d 3049 	ldrb.w	r3, [sp, #73]	@ 0x49
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008290:	f884 256d 	strb.w	r2, [r4, #1389]	@ 0x56d
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008294:	2b01      	cmp	r3, #1
 8008296:	bf38      	it	cc
 8008298:	2301      	movcc	r3, #1
 800829a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800829e:	4353      	muls	r3, r2
 80082a0:	f8c4 355c 	str.w	r3, [r4, #1372]	@ 0x55c
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80082a4:	4413      	add	r3, r2
 80082a6:	f8c4 3560 	str.w	r3, [r4, #1376]	@ 0x560
                applyCFList.Size = size - 17;
 80082aa:	3d11      	subs	r5, #17
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80082ac:	f10d 034a 	add.w	r3, sp, #74	@ 0x4a
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80082b0:	a90c      	add	r1, sp, #48	@ 0x30
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80082b2:	930c      	str	r3, [sp, #48]	@ 0x30
                applyCFList.Size = size - 17;
 80082b4:	f88d 5034 	strb.w	r5, [sp, #52]	@ 0x34
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80082b8:	f002 f8b2 	bl	800a420 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80082bc:	2302      	movs	r3, #2
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80082be:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80082c0:	f884 361c 	strb.w	r3, [r4, #1564]	@ 0x61c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80082c4:	f001 fbf4 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
 80082c8:	b118      	cbz	r0, 80082d2 <LoRaMacProcess+0x536>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80082ca:	2101      	movs	r1, #1
 80082cc:	4630      	mov	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80082ce:	f001 fbb3 	bl	8009a38 <LoRaMacConfirmQueueSetStatus>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 80082d2:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80082d6:	f043 0308 	orr.w	r3, r3, #8
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80082da:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    if( MacCtx.NodeAckRequested == true )
 80082de:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 816a 	beq.w	80085bc <LoRaMacProcess+0x820>
        if( MacCtx.McpsConfirm.AckReceived == true )
 80082e8:	f894 3440 	ldrb.w	r3, [r4, #1088]	@ 0x440
 80082ec:	b113      	cbz	r3, 80082f4 <LoRaMacProcess+0x558>
            OnAckTimeoutTimerEvent( NULL );
 80082ee:	2000      	movs	r0, #0
 80082f0:	f7fe fe50 	bl	8006f94 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 80082f4:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80082f8:	f043 0320 	orr.w	r3, r3, #32
 80082fc:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    UpdateRxSlotIdleState( );
 8008300:	f7fe fe24 	bl	8006f4c <UpdateRxSlotIdleState>
 8008304:	e5fc      	b.n	8007f00 <LoRaMacProcess+0x164>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008306:	2001      	movs	r0, #1
 8008308:	f001 fbd2 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
 800830c:	2800      	cmp	r0, #0
 800830e:	d0e0      	beq.n	80082d2 <LoRaMacProcess+0x536>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008310:	2101      	movs	r1, #1
 8008312:	2007      	movs	r0, #7
 8008314:	e7db      	b.n	80082ce <LoRaMacProcess+0x532>
 8008316:	bf00      	nop
 8008318:	20000e9c 	.word	0x20000e9c
 800831c:	20000adc 	.word	0x20000adc
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008320:	2301      	movs	r3, #1
 8008322:	f884 3420 	strb.w	r3, [r4, #1056]	@ 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008326:	f894 3581 	ldrb.w	r3, [r4, #1409]	@ 0x581
 800832a:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800832e:	f894 3424 	ldrb.w	r3, [r4, #1060]	@ 0x424
 8008332:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008336:	f894 358c 	ldrb.w	r3, [r4, #1420]	@ 0x58c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800833a:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 800833e:	330d      	adds	r3, #13
 8008340:	a908      	add	r1, sp, #32
 8008342:	f88d 3020 	strb.w	r3, [sp, #32]
 8008346:	f002 f84c 	bl	800a3e2 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800834a:	f1a5 030d 	sub.w	r3, r5, #13
 800834e:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008350:	9006      	str	r0, [sp, #24]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008356:	b200      	sxth	r0, r0
 8008358:	4283      	cmp	r3, r0
 800835a:	f73f af64 	bgt.w	8008226 <LoRaMacProcess+0x48a>
 800835e:	2d0b      	cmp	r5, #11
 8008360:	f67f af61 	bls.w	8008226 <LoRaMacProcess+0x48a>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008364:	4bb5      	ldr	r3, [pc, #724]	@ (800863c <LoRaMacProcess+0x8a0>)
 8008366:	9321      	str	r3, [sp, #132]	@ 0x84
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008368:	a818      	add	r0, sp, #96	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800836a:	23ff      	movs	r3, #255	@ 0xff
            macMsgData.Buffer = payload;
 800836c:	9618      	str	r6, [sp, #96]	@ 0x60
            macMsgData.BufSize = size;
 800836e:	f88d 5064 	strb.w	r5, [sp, #100]	@ 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008372:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008376:	f001 ff35 	bl	800a1e4 <LoRaMacParserData>
 800837a:	4606      	mov	r6, r0
 800837c:	2800      	cmp	r0, #0
 800837e:	f47f af52 	bne.w	8008226 <LoRaMacProcess+0x48a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008382:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008386:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008388:	f8c4 1434 	str.w	r1, [r4, #1076]	@ 0x434
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800838c:	f013 020f 	ands.w	r2, r3, #15
 8008390:	d003      	beq.n	800839a <LoRaMacProcess+0x5fe>
 8008392:	f89d 0080 	ldrb.w	r0, [sp, #128]	@ 0x80
 8008396:	2800      	cmp	r0, #0
 8008398:	d16a      	bne.n	8008470 <LoRaMacProcess+0x6d4>
    else if( macMsg->FRMPayloadSize == 0 )
 800839a:	f89d 0088 	ldrb.w	r0, [sp, #136]	@ 0x88
 800839e:	2800      	cmp	r0, #0
 80083a0:	d068      	beq.n	8008474 <LoRaMacProcess+0x6d8>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80083a2:	2a00      	cmp	r2, #0
 80083a4:	f47f af3f 	bne.w	8008226 <LoRaMacProcess+0x48a>
 80083a8:	f89d 2080 	ldrb.w	r2, [sp, #128]	@ 0x80
        *fType = FRAME_TYPE_C;
 80083ac:	2a00      	cmp	r2, #0
 80083ae:	bf14      	ite	ne
 80083b0:	2703      	movne	r7, #3
 80083b2:	2702      	moveq	r7, #2
            downLinkCounter = 0;
 80083b4:	2200      	movs	r2, #0
 80083b6:	9207      	str	r2, [sp, #28]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80083b8:	f8d4 25e0 	ldr.w	r2, [r4, #1504]	@ 0x5e0
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80083bc:	f894 05de 	ldrb.w	r0, [r4, #1502]	@ 0x5de
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80083c0:	4291      	cmp	r1, r2
 80083c2:	d159      	bne.n	8008478 <LoRaMacProcess+0x6dc>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d057      	beq.n	8008478 <LoRaMacProcess+0x6dc>
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80083c8:	f8d4 15fc 	ldr.w	r1, [r4, #1532]	@ 0x5fc
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80083cc:	f894 a5df 	ldrb.w	sl, [r4, #1503]	@ 0x5df
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80083d0:	6809      	ldr	r1, [r1, #0]
 80083d2:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80083d4:	f894 1608 	ldrb.w	r1, [r4, #1544]	@ 0x608
 80083d8:	2902      	cmp	r1, #2
 80083da:	d102      	bne.n	80083e2 <LoRaMacProcess+0x646>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80083dc:	2103      	movs	r1, #3
 80083de:	f884 1483 	strb.w	r1, [r4, #1155]	@ 0x483
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80083e2:	2f03      	cmp	r7, #3
 80083e4:	f47f af1f 	bne.w	8008226 <LoRaMacProcess+0x48a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80083e8:	f013 0f60 	tst.w	r3, #96	@ 0x60
 80083ec:	f47f af1b 	bne.w	8008226 <LoRaMacProcess+0x48a>
 80083f0:	9203      	str	r2, [sp, #12]
 80083f2:	2601      	movs	r6, #1
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80083f4:	2315      	movs	r3, #21
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80083f6:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80083fa:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80083fe:	a908      	add	r1, sp, #32
 8008400:	f001 ffef 	bl	800a3e2 <RegionGetPhyParam>
 8008404:	f894 361a 	ldrb.w	r3, [r4, #1562]	@ 0x61a
 8008408:	9006      	str	r0, [sp, #24]
    switch( addrID )
 800840a:	f1ba 0f00 	cmp.w	sl, #0
 800840e:	d036      	beq.n	800847e <LoRaMacProcess+0x6e2>
 8008410:	f1ba 0f01 	cmp.w	sl, #1
 8008414:	d13d      	bne.n	8008492 <LoRaMacProcess+0x6f6>
            if( lrWanVersion.Fields.Minor == 1 )
 8008416:	2b01      	cmp	r3, #1
 8008418:	d133      	bne.n	8008482 <LoRaMacProcess+0x6e6>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800841a:	f06f 0509 	mvn.w	r5, #9
 800841e:	413d      	asrs	r5, r7
 8008420:	f005 0501 	and.w	r5, r5, #1
 8008424:	f1c5 0502 	rsb	r5, r5, #2
 8008428:	b2ed      	uxtb	r5, r5
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800842a:	b281      	uxth	r1, r0
 800842c:	f8bd 206e 	ldrh.w	r2, [sp, #110]	@ 0x6e
 8008430:	ab07      	add	r3, sp, #28
 8008432:	4628      	mov	r0, r5
 8008434:	f001 fca2 	bl	8009d7c <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008438:	b368      	cbz	r0, 8008496 <LoRaMacProcess+0x6fa>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800843a:	2807      	cmp	r0, #7
 800843c:	d123      	bne.n	8008486 <LoRaMacProcess+0x6ea>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800843e:	2308      	movs	r3, #8
 8008440:	f884 3421 	strb.w	r3, [r4, #1057]	@ 0x421
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8008444:	f894 361a 	ldrb.w	r3, [r4, #1562]	@ 0x61a
 8008448:	b963      	cbnz	r3, 8008464 <LoRaMacProcess+0x6c8>
 800844a:	f008 08e0 	and.w	r8, r8, #224	@ 0xe0
 800844e:	f1b8 0fa0 	cmp.w	r8, #160	@ 0xa0
 8008452:	d107      	bne.n	8008464 <LoRaMacProcess+0x6c8>
 8008454:	f8d4 2540 	ldr.w	r2, [r4, #1344]	@ 0x540
 8008458:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800845a:	429a      	cmp	r2, r3
 800845c:	d102      	bne.n	8008464 <LoRaMacProcess+0x6c8>
                        Nvm.MacGroup1.SrvAckRequested = true;
 800845e:	2301      	movs	r3, #1
 8008460:	f884 3546 	strb.w	r3, [r4, #1350]	@ 0x546
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008464:	9b07      	ldr	r3, [sp, #28]
 8008466:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
                PrepareRxDoneAbort( );
 800846a:	f7fe fdb5 	bl	8006fd8 <PrepareRxDoneAbort>
                return;
 800846e:	e547      	b.n	8007f00 <LoRaMacProcess+0x164>
        *fType = FRAME_TYPE_A;
 8008470:	4637      	mov	r7, r6
 8008472:	e79f      	b.n	80083b4 <LoRaMacProcess+0x618>
        *fType = FRAME_TYPE_B;
 8008474:	2701      	movs	r7, #1
 8008476:	e79d      	b.n	80083b4 <LoRaMacProcess+0x618>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8008478:	f04f 0a01 	mov.w	sl, #1
 800847c:	e7ba      	b.n	80083f4 <LoRaMacProcess+0x658>
    switch( addrID )
 800847e:	2504      	movs	r5, #4
 8008480:	e7d3      	b.n	800842a <LoRaMacProcess+0x68e>
                *fCntID = FCNT_DOWN;
 8008482:	2503      	movs	r5, #3
 8008484:	e7d1      	b.n	800842a <LoRaMacProcess+0x68e>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8008486:	2808      	cmp	r0, #8
 8008488:	d103      	bne.n	8008492 <LoRaMacProcess+0x6f6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800848a:	230a      	movs	r3, #10
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800848c:	f884 3421 	strb.w	r3, [r4, #1057]	@ 0x421
 8008490:	e7e8      	b.n	8008464 <LoRaMacProcess+0x6c8>
 8008492:	2301      	movs	r3, #1
 8008494:	e7fa      	b.n	800848c <LoRaMacProcess+0x6f0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008496:	ab18      	add	r3, sp, #96	@ 0x60
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	9903      	ldr	r1, [sp, #12]
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	462a      	mov	r2, r5
 80084a0:	4650      	mov	r0, sl
 80084a2:	f001 fd39 	bl	8009f18 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80084a6:	b120      	cbz	r0, 80084b2 <LoRaMacProcess+0x716>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80084a8:	2802      	cmp	r0, #2
 80084aa:	bf14      	ite	ne
 80084ac:	230c      	movne	r3, #12
 80084ae:	230b      	moveq	r3, #11
 80084b0:	e6ba      	b.n	8008228 <LoRaMacProcess+0x48c>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80084b2:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80084b6:	f884 0421 	strb.w	r0, [r4, #1057]	@ 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80084ba:	f3c3 1200 	ubfx	r2, r3, #4, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80084be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80084c2:	f884 342e 	strb.w	r3, [r4, #1070]	@ 0x42e
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80084c6:	f884 3440 	strb.w	r3, [r4, #1088]	@ 0x440
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80084ca:	f894 3483 	ldrb.w	r3, [r4, #1155]	@ 0x483
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80084ce:	f884 2425 	strb.w	r2, [r4, #1061]	@ 0x425
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80084d2:	2b01      	cmp	r3, #1
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80084d4:	9a07      	ldr	r2, [sp, #28]
                Nvm.MacGroup1.AdrAckCounter = 0;
 80084d6:	bf98      	it	ls
 80084d8:	f8c4 0534 	strls.w	r0, [r4, #1332]	@ 0x534
            if( multicast == 1 )
 80084dc:	2e01      	cmp	r6, #1
            MacCtx.McpsIndication.Multicast = multicast;
 80084de:	f884 6422 	strb.w	r6, [r4, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80084e2:	f8c4 0428 	str.w	r0, [r4, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80084e6:	f884 042c 	strb.w	r0, [r4, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80084ea:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80084ee:	f884 043d 	strb.w	r0, [r4, #1085]	@ 0x43d
            if( multicast == 1 )
 80084f2:	d03d      	beq.n	8008570 <LoRaMacProcess+0x7d4>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80084f4:	f008 08e0 	and.w	r8, r8, #224	@ 0xe0
 80084f8:	f1b8 0fa0 	cmp.w	r8, #160	@ 0xa0
 80084fc:	d134      	bne.n	8008568 <LoRaMacProcess+0x7cc>
                    Nvm.MacGroup1.SrvAckRequested = true;
 80084fe:	2201      	movs	r2, #1
 8008500:	f884 2546 	strb.w	r2, [r4, #1350]	@ 0x546
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008504:	f894 261a 	ldrb.w	r2, [r4, #1562]	@ 0x61a
 8008508:	b912      	cbnz	r2, 8008510 <LoRaMacProcess+0x774>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800850a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800850c:	f8c4 2540 	str.w	r2, [r4, #1344]	@ 0x540
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008510:	2601      	movs	r6, #1
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8008512:	2b01      	cmp	r3, #1
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008514:	f894 143c 	ldrb.w	r1, [r4, #1084]	@ 0x43c
 8008518:	f89d 206c 	ldrb.w	r2, [sp, #108]	@ 0x6c
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800851c:	f884 6420 	strb.w	r6, [r4, #1056]	@ 0x420
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8008520:	d805      	bhi.n	800852e <LoRaMacProcess+0x792>
        if( request == MCPS_CONFIRMED )
 8008522:	2901      	cmp	r1, #1
 8008524:	d101      	bne.n	800852a <LoRaMacProcess+0x78e>
            if( fCtrl.Bits.Ack == 1 )
 8008526:	0693      	lsls	r3, r2, #26
 8008528:	d501      	bpl.n	800852e <LoRaMacProcess+0x792>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800852a:	f001 f9b1 	bl	8009890 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 800852e:	2f02      	cmp	r7, #2
 8008530:	d020      	beq.n	8008574 <LoRaMacProcess+0x7d8>
 8008532:	2f03      	cmp	r7, #3
 8008534:	d009      	beq.n	800854a <LoRaMacProcess+0x7ae>
 8008536:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 800853a:	2f01      	cmp	r7, #1
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800853c:	464a      	mov	r2, r9
 800853e:	f001 010f 	and.w	r1, r1, #15
 8008542:	a81c      	add	r0, sp, #112	@ 0x70
 8008544:	d01a      	beq.n	800857c <LoRaMacProcess+0x7e0>
 8008546:	f7ff f935 	bl	80077b4 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800854a:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 800854e:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008552:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008554:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008558:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 800855c:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8008560:	2301      	movs	r3, #1
 8008562:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
                    break;
 8008566:	e00f      	b.n	8008588 <LoRaMacProcess+0x7ec>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008568:	2200      	movs	r2, #0
 800856a:	f884 2546 	strb.w	r2, [r4, #1350]	@ 0x546
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800856e:	e7d0      	b.n	8008512 <LoRaMacProcess+0x776>
 8008570:	2602      	movs	r6, #2
 8008572:	e7ce      	b.n	8008512 <LoRaMacProcess+0x776>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008574:	f89d 1088 	ldrb.w	r1, [sp, #136]	@ 0x88
 8008578:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800857a:	464a      	mov	r2, r9
 800857c:	f7ff f91a 	bl	80077b4 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008580:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 8008584:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008588:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 800858c:	f043 0302 	orr.w	r3, r3, #2
 8008590:	e6a3      	b.n	80082da <LoRaMacProcess+0x53e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008592:	4f2a      	ldr	r7, [pc, #168]	@ (800863c <LoRaMacProcess+0x8a0>)
 8008594:	3d01      	subs	r5, #1
 8008596:	b2aa      	uxth	r2, r5
 8008598:	1c71      	adds	r1, r6, #1
 800859a:	4638      	mov	r0, r7
 800859c:	f003 f8ac 	bl	800b6f8 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80085a0:	2303      	movs	r3, #3
 80085a2:	f8a4 3420 	strh.w	r3, [r4, #1056]	@ 0x420
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80085a6:	f8c4 7428 	str.w	r7, [r4, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80085aa:	f884 542c 	strb.w	r5, [r4, #1068]	@ 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80085ae:	e7eb      	b.n	8008588 <LoRaMacProcess+0x7ec>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f884 3421 	strb.w	r3, [r4, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 80085b6:	f7fe fd0f 	bl	8006fd8 <PrepareRxDoneAbort>
            break;
 80085ba:	e690      	b.n	80082de <LoRaMacProcess+0x542>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80085bc:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	f47f ae97 	bne.w	80082f4 <LoRaMacProcess+0x558>
 80085c6:	e692      	b.n	80082ee <LoRaMacProcess+0x552>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80085c8:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80085cc:	0759      	lsls	r1, r3, #29
 80085ce:	d50f      	bpl.n	80085f0 <LoRaMacProcess+0x854>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80085d0:	2001      	movs	r0, #1
 80085d2:	f001 fa6d 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
 80085d6:	b3a8      	cbz	r0, 8008644 <LoRaMacProcess+0x8a8>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80085d8:	2001      	movs	r0, #1
 80085da:	f001 fa3f 	bl	8009a5c <LoRaMacConfirmQueueGetStatus>
 80085de:	b908      	cbnz	r0, 80085e4 <LoRaMacProcess+0x848>
                MacCtx.ChannelsNbTransCounter = 0;
 80085e0:	f884 0414 	strb.w	r0, [r4, #1044]	@ 0x414
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80085e4:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 80085e8:	f023 0302 	bic.w	r3, r3, #2
 80085ec:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80085f0:	f894 1485 	ldrb.w	r1, [r4, #1157]	@ 0x485
 80085f4:	07ca      	lsls	r2, r1, #31
 80085f6:	f57f acd8 	bpl.w	8007faa <LoRaMacProcess+0x20e>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80085fa:	f894 343c 	ldrb.w	r3, [r4, #1084]	@ 0x43c
 80085fe:	b10b      	cbz	r3, 8008604 <LoRaMacProcess+0x868>
 8008600:	2b03      	cmp	r3, #3
 8008602:	d12a      	bne.n	800865a <LoRaMacProcess+0x8be>
    if( MacCtx.ChannelsNbTransCounter >=
 8008604:	f894 2414 	ldrb.w	r2, [r4, #1044]	@ 0x414
 8008608:	f894 356c 	ldrb.w	r3, [r4, #1388]	@ 0x56c
 800860c:	429a      	cmp	r2, r3
 800860e:	d208      	bcs.n	8008622 <LoRaMacProcess+0x886>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008610:	078b      	lsls	r3, r1, #30
 8008612:	d554      	bpl.n	80086be <LoRaMacProcess+0x922>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8008614:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8008618:	b11b      	cbz	r3, 8008622 <LoRaMacProcess+0x886>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800861a:	f894 3483 	ldrb.w	r3, [r4, #1155]	@ 0x483
 800861e:	2b00      	cmp	r3, #0
 8008620:	d14d      	bne.n	80086be <LoRaMacProcess+0x922>
            TimerStop( &MacCtx.TxDelayedTimer );
 8008622:	4807      	ldr	r0, [pc, #28]	@ (8008640 <LoRaMacProcess+0x8a4>)
 8008624:	f004 fe98 	bl	800d358 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008628:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 800862c:	f023 0320 	bic.w	r3, r3, #32
 8008630:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
            StopRetransmission( );
 8008634:	f7ff fb5c 	bl	8007cf0 <StopRetransmission.isra.0>
 8008638:	e4b7      	b.n	8007faa <LoRaMacProcess+0x20e>
 800863a:	bf00      	nop
 800863c:	20000898 	.word	0x20000898
 8008640:	200009c8 	.word	0x200009c8
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008644:	2005      	movs	r0, #5
 8008646:	f001 fa33 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
 800864a:	2800      	cmp	r0, #0
 800864c:	d1ca      	bne.n	80085e4 <LoRaMacProcess+0x848>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800864e:	2006      	movs	r0, #6
 8008650:	f001 fa2e 	bl	8009ab0 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008654:	2800      	cmp	r0, #0
 8008656:	d1c5      	bne.n	80085e4 <LoRaMacProcess+0x848>
 8008658:	e7ca      	b.n	80085f0 <LoRaMacProcess+0x854>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800865a:	2b01      	cmp	r3, #1
 800865c:	d12f      	bne.n	80086be <LoRaMacProcess+0x922>
            if( MacCtx.AckTimeoutRetry == true )
 800865e:	f894 2417 	ldrb.w	r2, [r4, #1047]	@ 0x417
 8008662:	2a00      	cmp	r2, #0
 8008664:	f43f aca1 	beq.w	8007faa <LoRaMacProcess+0x20e>
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008668:	f894 3416 	ldrb.w	r3, [r4, #1046]	@ 0x416
        MacCtx.AckTimeoutRetries )
 800866c:	f894 0415 	ldrb.w	r0, [r4, #1045]	@ 0x415
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008670:	4283      	cmp	r3, r0
 8008672:	d204      	bcs.n	800867e <LoRaMacProcess+0x8e2>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008674:	f011 0202 	ands.w	r2, r1, #2
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008678:	bf18      	it	ne
 800867a:	f894 2440 	ldrbne.w	r2, [r4, #1088]	@ 0x440
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800867e:	f894 161a 	ldrb.w	r1, [r4, #1562]	@ 0x61a
 8008682:	2900      	cmp	r1, #0
 8008684:	d13f      	bne.n	8008706 <LoRaMacProcess+0x96a>
                    if( stopRetransmission == false )
 8008686:	bb32      	cbnz	r2, 80086d6 <LoRaMacProcess+0x93a>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8008688:	4283      	cmp	r3, r0
 800868a:	d218      	bcs.n	80086be <LoRaMacProcess+0x922>
        MacCtx.AckTimeoutRetriesCounter++;
 800868c:	3301      	adds	r3, #1
 800868e:	b2db      	uxtb	r3, r3
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8008690:	07df      	lsls	r7, r3, #31
        MacCtx.AckTimeoutRetriesCounter++;
 8008692:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8008696:	d512      	bpl.n	80086be <LoRaMacProcess+0x922>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8008698:	2322      	movs	r3, #34	@ 0x22
 800869a:	f88d 3060 	strb.w	r3, [sp, #96]	@ 0x60
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800869e:	f894 3580 	ldrb.w	r3, [r4, #1408]	@ 0x580
 80086a2:	f88d 3062 	strb.w	r3, [sp, #98]	@ 0x62
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80086a6:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80086aa:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
 80086ae:	f88d 3061 	strb.w	r3, [sp, #97]	@ 0x61
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80086b2:	a918      	add	r1, sp, #96	@ 0x60
 80086b4:	f001 fe95 	bl	800a3e2 <RegionGetPhyParam>
 80086b8:	900e      	str	r0, [sp, #56]	@ 0x38
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80086ba:	f884 0545 	strb.w	r0, [r4, #1349]	@ 0x545
            MacCtx.MacFlags.Bits.MacDone = 0;
 80086be:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
            MacCtx.AckTimeoutRetry = false;
 80086c2:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 80086c4:	f36f 1345 	bfc	r3, #5, #1
 80086c8:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
            MacCtx.AckTimeoutRetry = false;
 80086cc:	f884 0417 	strb.w	r0, [r4, #1047]	@ 0x417
            OnTxDelayedTimerEvent( NULL );
 80086d0:	f7ff fb30 	bl	8007d34 <OnTxDelayedTimerEvent>
 80086d4:	e469      	b.n	8007faa <LoRaMacProcess+0x20e>
    if( MacCtx.McpsConfirm.AckReceived == false )
 80086d6:	f894 5440 	ldrb.w	r5, [r4, #1088]	@ 0x440
 80086da:	b97d      	cbnz	r5, 80086fc <LoRaMacProcess+0x960>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80086dc:	2302      	movs	r3, #2
 80086de:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80086e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008714 <LoRaMacProcess+0x978>)
 80086e4:	9318      	str	r3, [sp, #96]	@ 0x60
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80086e6:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80086ea:	3394      	adds	r3, #148	@ 0x94
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80086ec:	a918      	add	r1, sp, #96	@ 0x60
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80086ee:	9319      	str	r3, [sp, #100]	@ 0x64
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80086f0:	f001 fe87 	bl	800a402 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 80086f4:	f884 5418 	strb.w	r5, [r4, #1048]	@ 0x418
        MacCtx.McpsConfirm.AckReceived = false;
 80086f8:	f884 5440 	strb.w	r5, [r4, #1088]	@ 0x440
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80086fc:	f894 3416 	ldrb.w	r3, [r4, #1046]	@ 0x416
 8008700:	f884 3441 	strb.w	r3, [r4, #1089]	@ 0x441
        if( stopRetransmission == true )
 8008704:	e78d      	b.n	8008622 <LoRaMacProcess+0x886>
 8008706:	2a00      	cmp	r2, #0
 8008708:	d0d9      	beq.n	80086be <LoRaMacProcess+0x922>
 800870a:	e78a      	b.n	8008622 <LoRaMacProcess+0x886>
}
 800870c:	b025      	add	sp, #148	@ 0x94
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	bf00      	nop
 8008714:	20000d40 	.word	0x20000d40

08008718 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	4688      	mov	r8, r1
 800871e:	b08b      	sub	sp, #44	@ 0x2c
 8008720:	4691      	mov	r9, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8008722:	4606      	mov	r6, r0
 8008724:	2800      	cmp	r0, #0
 8008726:	f000 8196 	beq.w	8008a56 <LoRaMacInitialization+0x33e>
 800872a:	2900      	cmp	r1, #0
 800872c:	f000 8193 	beq.w	8008a56 <LoRaMacInitialization+0x33e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8008730:	6803      	ldr	r3, [r0, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 818f 	beq.w	8008a56 <LoRaMacInitialization+0x33e>
 8008738:	6843      	ldr	r3, [r0, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 818b 	beq.w	8008a56 <LoRaMacInitialization+0x33e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8008740:	6883      	ldr	r3, [r0, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8187 	beq.w	8008a56 <LoRaMacInitialization+0x33e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8008748:	68c3      	ldr	r3, [r0, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 8183 	beq.w	8008a56 <LoRaMacInitialization+0x33e>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8008750:	4610      	mov	r0, r2
 8008752:	f001 fe42 	bl	800a3da <RegionIsActive>
 8008756:	2800      	cmp	r0, #0
 8008758:	f000 817f 	beq.w	8008a5a <LoRaMacInitialization+0x342>

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800875c:	4cc1      	ldr	r4, [pc, #772]	@ (8008a64 <LoRaMacInitialization+0x34c>)
    LoRaMacConfirmQueueInit( primitives );
 800875e:	4630      	mov	r0, r6
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8008760:	f204 5a0c 	addw	sl, r4, #1292	@ 0x50c
    LoRaMacConfirmQueueInit( primitives );
 8008764:	f001 f91e 	bl	80099a4 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8008768:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800876c:	2100      	movs	r1, #0
 800876e:	4650      	mov	r0, sl
 8008770:	f002 ffd6 	bl	800b720 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8008774:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 8008778:	2100      	movs	r1, #0
 800877a:	1d20      	adds	r0, r4, #4
 800877c:	f002 ffd0 	bl	800b720 <memset1>
    Nvm.MacGroup2.Region = region;
    Nvm.MacGroup2.DeviceClass = CLASS_A;
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8008780:	4bb9      	ldr	r3, [pc, #740]	@ (8008a68 <LoRaMacInitialization+0x350>)
 8008782:	f8c4 3618 	str.w	r3, [r4, #1560]	@ 0x618
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8008786:	2500      	movs	r5, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008788:	2701      	movs	r7, #1

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800878a:	230f      	movs	r3, #15
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800878c:	a905      	add	r1, sp, #20
 800878e:	4648      	mov	r0, r9
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008790:	f88d 3014 	strb.w	r3, [sp, #20]
    Nvm.MacGroup2.Region = region;
 8008794:	f884 954c 	strb.w	r9, [r4, #1356]	@ 0x54c
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8008798:	f884 5608 	strb.w	r5, [r4, #1544]	@ 0x608
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800879c:	f884 558c 	strb.w	r5, [r4, #1420]	@ 0x58c
    MacCtx.AckTimeoutRetriesCounter = 1;
 80087a0:	f884 7416 	strb.w	r7, [r4, #1046]	@ 0x416
    MacCtx.AckTimeoutRetries = 1;
 80087a4:	f884 7415 	strb.w	r7, [r4, #1045]	@ 0x415
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087a8:	f001 fe1b 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80087ac:	1b40      	subs	r0, r0, r5
 80087ae:	bf18      	it	ne
 80087b0:	2001      	movne	r0, #1

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80087b2:	f04f 0b0a 	mov.w	fp, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80087b6:	f884 060c 	strb.w	r0, [r4, #1548]	@ 0x60c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087ba:	a905      	add	r1, sp, #20
 80087bc:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_TX_POWER;
 80087c0:	f88d b014 	strb.w	fp, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087c4:	f001 fe0d 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 80087c8:	f04f 0906 	mov.w	r9, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80087cc:	f884 05d0 	strb.w	r0, [r4, #1488]	@ 0x5d0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087d0:	a905      	add	r1, sp, #20
 80087d2:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_TX_DR;
 80087d6:	f88d 9014 	strb.w	r9, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087da:	f001 fe02 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80087de:	2310      	movs	r3, #16
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80087e0:	f884 05d1 	strb.w	r0, [r4, #1489]	@ 0x5d1
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087e4:	a905      	add	r1, sp, #20
 80087e6:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80087ea:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087ee:	f001 fdf8 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80087f2:	2311      	movs	r3, #17
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80087f4:	f8c4 0598 	str.w	r0, [r4, #1432]	@ 0x598
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087f8:	a905      	add	r1, sp, #20
 80087fa:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80087fe:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008802:	f001 fdee 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8008806:	2312      	movs	r3, #18
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8008808:	f8c4 059c 	str.w	r0, [r4, #1436]	@ 0x59c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800880c:	a905      	add	r1, sp, #20
 800880e:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8008812:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008816:	f001 fde4 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800881a:	2313      	movs	r3, #19
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800881c:	f8c4 05a0 	str.w	r0, [r4, #1440]	@ 0x5a0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008820:	a905      	add	r1, sp, #20
 8008822:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8008826:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800882a:	f001 fdda 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800882e:	2314      	movs	r3, #20
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008830:	eb0d 0103 	add.w	r1, sp, r3
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8008834:	f8c4 05a4 	str.w	r0, [r4, #1444]	@ 0x5a4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008838:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800883c:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008840:	f001 fdcf 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8008844:	2317      	movs	r3, #23
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8008846:	f8c4 05a8 	str.w	r0, [r4, #1448]	@ 0x5a8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800884a:	a905      	add	r1, sp, #20
 800884c:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8008850:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008854:	f001 fdc5 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8008858:	2318      	movs	r3, #24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800885a:	f884 05ad 	strb.w	r0, [r4, #1453]	@ 0x5ad
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800885e:	a905      	add	r1, sp, #20
 8008860:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8008864:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008868:	f001 fdbb 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800886c:	2319      	movs	r3, #25
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800886e:	f8c4 05b0 	str.w	r0, [r4, #1456]	@ 0x5b0
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8008872:	f8c4 05b8 	str.w	r0, [r4, #1464]	@ 0x5b8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008876:	a905      	add	r1, sp, #20
 8008878:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800887c:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008880:	f001 fdaf 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8008884:	b2c0      	uxtb	r0, r0
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8008886:	231e      	movs	r3, #30
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8008888:	f884 05b4 	strb.w	r0, [r4, #1460]	@ 0x5b4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800888c:	f884 05bc 	strb.w	r0, [r4, #1468]	@ 0x5bc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008890:	a905      	add	r1, sp, #20
 8008892:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8008896:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800889a:	f001 fda2 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800889e:	231f      	movs	r3, #31
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80088a0:	f884 05c0 	strb.w	r0, [r4, #1472]	@ 0x5c0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088a4:	a905      	add	r1, sp, #20
 80088a6:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80088aa:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088ae:	f001 fd98 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80088b2:	2320      	movs	r3, #32
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80088b4:	f884 05c1 	strb.w	r0, [r4, #1473]	@ 0x5c1
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088b8:	a905      	add	r1, sp, #20
 80088ba:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80088be:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088c2:	f001 fd8e 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80088c6:	2321      	movs	r3, #33	@ 0x21
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80088c8:	f8ca 00b8 	str.w	r0, [sl, #184]	@ 0xb8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088cc:	a905      	add	r1, sp, #20
 80088ce:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80088d2:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088d6:	f001 fd84 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80088da:	230b      	movs	r3, #11
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80088dc:	f8ca 00bc 	str.w	r0, [sl, #188]	@ 0xbc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088e0:	a905      	add	r1, sp, #20
 80088e2:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80088e6:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088ea:	f001 fd7a 	bl	800a3e2 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80088ee:	230c      	movs	r3, #12
    MacCtx.AdrAckLimit = phyParam.Value;
 80088f0:	f8a4 03f8 	strh.w	r0, [r4, #1016]	@ 0x3f8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088f4:	a905      	add	r1, sp, #20
 80088f6:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80088fa:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80088fe:	f001 fd70 	bl	800a3e2 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8008902:	f8d4 3598 	ldr.w	r3, [r4, #1432]	@ 0x598
 8008906:	f8c4 3558 	str.w	r3, [r4, #1368]	@ 0x558
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800890a:	f8d4 359c 	ldr.w	r3, [r4, #1436]	@ 0x59c
 800890e:	f8c4 355c 	str.w	r3, [r4, #1372]	@ 0x55c
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8008912:	f8d4 35a0 	ldr.w	r3, [r4, #1440]	@ 0x5a0
 8008916:	f8c4 3560 	str.w	r3, [r4, #1376]	@ 0x560
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800891a:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	@ 0x5a4
 800891e:	f8c4 3564 	str.w	r3, [r4, #1380]	@ 0x564
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8008922:	f8d4 35a8 	ldr.w	r3, [r4, #1448]	@ 0x5a8
 8008926:	f8c4 3568 	str.w	r3, [r4, #1384]	@ 0x568
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800892a:	f204 63e4 	addw	r3, r4, #1764	@ 0x6e4
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800892e:	a907      	add	r1, sp, #28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008930:	9004      	str	r0, [sp, #16]
    MacCtx.AdrAckDelay = phyParam.Value;
 8008932:	f8a4 03fa 	strh.w	r0, [r4, #1018]	@ 0x3fa
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8008936:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008938:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    params.Type = INIT_TYPE_DEFAULTS;
 800893c:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8008940:	f504 63ef 	add.w	r3, r4, #1912	@ 0x778
 8008944:	9308      	str	r3, [sp, #32]
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8008946:	f884 75ac 	strb.w	r7, [r4, #1452]	@ 0x5ac
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800894a:	f8c4 b590 	str.w	fp, [r4, #1424]	@ 0x590
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800894e:	f884 9594 	strb.w	r9, [r4, #1428]	@ 0x594
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8008952:	f8c4 b550 	str.w	fp, [r4, #1360]	@ 0x550
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8008956:	f884 9554 	strb.w	r9, [r4, #1364]	@ 0x554
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800895a:	f884 756c 	strb.w	r7, [r4, #1388]	@ 0x56c
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800895e:	f001 fd50 	bl	800a402 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8008962:	f8c4 834c 	str.w	r8, [r4, #844]	@ 0x34c
    ResetMacParameters( );
 8008966:	f7fe fc37 	bl	80071d8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;

    MacCtx.MacPrimitives = primitives;
 800896a:	f8c4 6348 	str.w	r6, [r4, #840]	@ 0x348
    MacCtx.MacFlags.Value = 0;
 800896e:	f884 5485 	strb.w	r5, [r4, #1157]	@ 0x485
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8008972:	f8c4 5538 	str.w	r5, [r4, #1336]	@ 0x538
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8008976:	f8c4 553c 	str.w	r5, [r4, #1340]	@ 0x53c

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800897a:	462a      	mov	r2, r5
 800897c:	4b3b      	ldr	r3, [pc, #236]	@ (8008a6c <LoRaMacInitialization+0x354>)
    Nvm.MacGroup2.PublicNetwork = true;
 800897e:	f884 7609 	strb.w	r7, [r4, #1545]	@ 0x609
    MacCtx.MacState = LORAMAC_STOPPED;
 8008982:	f8c4 7344 	str.w	r7, [r4, #836]	@ 0x344
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8008986:	f04f 31ff 	mov.w	r1, #4294967295
 800898a:	9500      	str	r5, [sp, #0]
 800898c:	f504 705b 	add.w	r0, r4, #876	@ 0x36c
 8008990:	f004 fc84 	bl	800d29c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8008994:	462a      	mov	r2, r5
 8008996:	4b36      	ldr	r3, [pc, #216]	@ (8008a70 <LoRaMacInitialization+0x358>)
 8008998:	9500      	str	r5, [sp, #0]
 800899a:	f04f 31ff 	mov.w	r1, #4294967295
 800899e:	f504 7061 	add.w	r0, r4, #900	@ 0x384
 80089a2:	f004 fc7b 	bl	800d29c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80089a6:	462a      	mov	r2, r5
 80089a8:	4b32      	ldr	r3, [pc, #200]	@ (8008a74 <LoRaMacInitialization+0x35c>)
 80089aa:	9500      	str	r5, [sp, #0]
 80089ac:	f04f 31ff 	mov.w	r1, #4294967295
 80089b0:	f504 7067 	add.w	r0, r4, #924	@ 0x39c
 80089b4:	f004 fc72 	bl	800d29c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80089b8:	462a      	mov	r2, r5
 80089ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008a78 <LoRaMacInitialization+0x360>)
 80089bc:	9500      	str	r5, [sp, #0]
 80089be:	f04f 31ff 	mov.w	r1, #4294967295

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80089c2:	ad02      	add	r5, sp, #8
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80089c4:	f504 707f 	add.w	r0, r4, #1020	@ 0x3fc
 80089c8:	f004 fc68 	bl	800d29c <UTIL_TIMER_Create>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80089cc:	4628      	mov	r0, r5
 80089ce:	f004 fbf9 	bl	800d1c4 <SysTimeGetMcuTime>
 80089d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80089d6:	f504 63c2 	add.w	r3, r4, #1552	@ 0x610
 80089da:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80089de:	4b27      	ldr	r3, [pc, #156]	@ (8008a7c <LoRaMacInitialization+0x364>)
 80089e0:	f8c4 3350 	str.w	r3, [r4, #848]	@ 0x350
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80089e4:	4b26      	ldr	r3, [pc, #152]	@ (8008a80 <LoRaMacInitialization+0x368>)
 80089e6:	f8c4 3358 	str.w	r3, [r4, #856]	@ 0x358
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80089ea:	4b26      	ldr	r3, [pc, #152]	@ (8008a84 <LoRaMacInitialization+0x36c>)
 80089ec:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 80089f0:	4e25      	ldr	r6, [pc, #148]	@ (8008a88 <LoRaMacInitialization+0x370>)
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80089f2:	4b26      	ldr	r3, [pc, #152]	@ (8008a8c <LoRaMacInitialization+0x374>)
 80089f4:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80089f8:	4b25      	ldr	r3, [pc, #148]	@ (8008a90 <LoRaMacInitialization+0x378>)
 80089fa:	f8c4 335c 	str.w	r3, [r4, #860]	@ 0x35c
    Radio.Init( &MacCtx.RadioEvents );
 80089fe:	f504 7054 	add.w	r0, r4, #848	@ 0x350
 8008a02:	6833      	ldr	r3, [r6, #0]
 8008a04:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8008a06:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8008a0a:	f204 6024 	addw	r0, r4, #1572	@ 0x624
 8008a0e:	f7fd fbc3 	bl	8006198 <SecureElementInit>
 8008a12:	b120      	cbz	r0, 8008a1e <LoRaMacInitialization+0x306>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8008a14:	2511      	movs	r5, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8008a16:	4628      	mov	r0, r5
 8008a18:	b00b      	add	sp, #44	@ 0x2c
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8008a1e:	4650      	mov	r0, sl
 8008a20:	f001 f97c 	bl	8009d1c <LoRaMacCryptoInit>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d1f5      	bne.n	8008a14 <LoRaMacInitialization+0x2fc>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8008a28:	f000 fea8 	bl	800977c <LoRaMacCommandsInit>
 8008a2c:	b9b8      	cbnz	r0, 8008a5e <LoRaMacInitialization+0x346>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8008a2e:	4819      	ldr	r0, [pc, #100]	@ (8008a94 <LoRaMacInitialization+0x37c>)
 8008a30:	f001 f9d6 	bl	8009de0 <LoRaMacCryptoSetMulticastReference>
 8008a34:	4605      	mov	r5, r0
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d1ec      	bne.n	8008a14 <LoRaMacInitialization+0x2fc>
    srand1( Radio.Random( ) );
 8008a3a:	6973      	ldr	r3, [r6, #20]
 8008a3c:	4798      	blx	r3
 8008a3e:	f002 fe39 	bl	800b6b4 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8008a42:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8008a44:	f894 0609 	ldrb.w	r0, [r4, #1545]	@ 0x609
 8008a48:	4798      	blx	r3
    Radio.Sleep( );
 8008a4a:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8008a4c:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f884 3486 	strb.w	r3, [r4, #1158]	@ 0x486
    return LORAMAC_STATUS_OK;
 8008a54:	e7df      	b.n	8008a16 <LoRaMacInitialization+0x2fe>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008a56:	2503      	movs	r5, #3
 8008a58:	e7dd      	b.n	8008a16 <LoRaMacInitialization+0x2fe>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8008a5a:	2509      	movs	r5, #9
 8008a5c:	e7db      	b.n	8008a16 <LoRaMacInitialization+0x2fe>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008a5e:	2513      	movs	r5, #19
 8008a60:	e7d9      	b.n	8008a16 <LoRaMacInitialization+0x2fe>
 8008a62:	bf00      	nop
 8008a64:	2000065c 	.word	0x2000065c
 8008a68:	01000300 	.word	0x01000300
 8008a6c:	08007d35 	.word	0x08007d35
 8008a70:	08007739 	.word	0x08007739
 8008a74:	08007771 	.word	0x08007771
 8008a78:	08006f95 	.word	0x08006f95
 8008a7c:	08007189 	.word	0x08007189
 8008a80:	08007135 	.word	0x08007135
 8008a84:	08006f31 	.word	0x08006f31
 8008a88:	0800de84 	.word	0x0800de84
 8008a8c:	08007105 	.word	0x08007105
 8008a90:	080070d5 	.word	0x080070d5
 8008a94:	20000c38 	.word	0x20000c38

08008a98 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8008a98:	4b02      	ldr	r3, [pc, #8]	@ (8008aa4 <LoRaMacStart+0xc>)
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f8c3 0344 	str.w	r0, [r3, #836]	@ 0x344
    return LORAMAC_STATUS_OK;
}
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	2000065c 	.word	0x2000065c

08008aa8 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8008aa8:	b530      	push	{r4, r5, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8008b58 <LoRaMacQueryTxPossible+0xb0>)
{
 8008aac:	b089      	sub	sp, #36	@ 0x24
 8008aae:	4605      	mov	r5, r0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8008ab0:	f893 05d1 	ldrb.w	r0, [r3, #1489]	@ 0x5d1
 8008ab4:	f88d 0002 	strb.w	r0, [sp, #2]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008ab8:	f893 05d0 	ldrb.w	r0, [r3, #1488]	@ 0x5d0
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008abc:	f8d3 2534 	ldr.w	r2, [r3, #1332]	@ 0x534
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008ac0:	f88d 0003 	strb.w	r0, [sp, #3]
    size_t macCmdsSize = 0;
 8008ac4:	2000      	movs	r0, #0
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008ac6:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8008ac8:	9002      	str	r0, [sp, #8]

    if( txInfo == NULL )
 8008aca:	460c      	mov	r4, r1
 8008acc:	2900      	cmp	r1, #0
 8008ace:	d03f      	beq.n	8008b50 <LoRaMacQueryTxPossible+0xa8>

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
    adrNext.UpdateChanMask = false;
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008ad0:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008ad2:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8008ad6:	9206      	str	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008ad8:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	@ 0x544
    adrNext.Version = Nvm.MacGroup2.Version;
 8008adc:	f8d3 1618 	ldr.w	r1, [r3, #1560]	@ 0x618
 8008ae0:	9103      	str	r1, [sp, #12]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008ae2:	ba52      	rev16	r2, r2
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008ae4:	f893 160a 	ldrb.w	r1, [r3, #1546]	@ 0x60a
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008ae8:	f8ad 201c 	strh.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008aec:	f893 2580 	ldrb.w	r2, [r3, #1408]	@ 0x580
    adrNext.Region = Nvm.MacGroup2.Region;
 8008af0:	f893 354c 	ldrb.w	r3, [r3, #1356]	@ 0x54c
    adrNext.UpdateChanMask = false;
 8008af4:	f88d 0010 	strb.w	r0, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008af8:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008afc:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8008b00:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8008b04:	f10d 0203 	add.w	r2, sp, #3
 8008b08:	ab01      	add	r3, sp, #4
 8008b0a:	f10d 0102 	add.w	r1, sp, #2
 8008b0e:	a803      	add	r0, sp, #12
 8008b10:	f000 fd9e 	bl	8009650 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008b14:	f99d 0002 	ldrsb.w	r0, [sp, #2]
 8008b18:	f7fe fa24 	bl	8006f64 <GetMaxAppPayloadWithoutFOptsLength>
 8008b1c:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008b1e:	a802      	add	r0, sp, #8
 8008b20:	f000 fec8 	bl	80098b4 <LoRaMacCommandsGetSizeSerializedCmds>
 8008b24:	b9b0      	cbnz	r0, 8008b54 <LoRaMacQueryTxPossible+0xac>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8008b26:	9a02      	ldr	r2, [sp, #8]
 8008b28:	2a0f      	cmp	r2, #15
 8008b2a:	d80d      	bhi.n	8008b48 <LoRaMacQueryTxPossible+0xa0>
 8008b2c:	7863      	ldrb	r3, [r4, #1]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d80a      	bhi.n	8008b48 <LoRaMacQueryTxPossible+0xa0>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8008b32:	4415      	add	r5, r2
 8008b34:	42ab      	cmp	r3, r5
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8008b36:	eba3 0102 	sub.w	r1, r3, r2
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8008b3a:	bf2c      	ite	cs
 8008b3c:	2000      	movcs	r0, #0
 8008b3e:	2001      	movcc	r0, #1
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8008b40:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8008b42:	00c0      	lsls	r0, r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8008b44:	b009      	add	sp, #36	@ 0x24
 8008b46:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	7023      	strb	r3, [r4, #0]
           return LORAMAC_STATUS_LENGTH_ERROR;
 8008b4c:	2008      	movs	r0, #8
        return LORAMAC_STATUS_LENGTH_ERROR;
 8008b4e:	e7f9      	b.n	8008b44 <LoRaMacQueryTxPossible+0x9c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008b50:	2003      	movs	r0, #3
 8008b52:	e7f7      	b.n	8008b44 <LoRaMacQueryTxPossible+0x9c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008b54:	2013      	movs	r0, #19
 8008b56:	e7f5      	b.n	8008b44 <LoRaMacQueryTxPossible+0x9c>
 8008b58:	2000065c 	.word	0x2000065c

08008b5c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8008b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8008b5e:	4604      	mov	r4, r0
 8008b60:	2800      	cmp	r0, #0
 8008b62:	f000 80a7 	beq.w	8008cb4 <LoRaMacMibGetRequestConfirm+0x158>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 8008b66:	7803      	ldrb	r3, [r0, #0]
 8008b68:	2b28      	cmp	r3, #40	@ 0x28
 8008b6a:	f200 809e 	bhi.w	8008caa <LoRaMacMibGetRequestConfirm+0x14e>
 8008b6e:	e8df f003 	tbb	[pc, r3]
 8008b72:	1c15      	.short	0x1c15
 8008b74:	2b272420 	.word	0x2b272420
 8008b78:	9c9c9c30 	.word	0x9c9c9c30
 8008b7c:	9c9c9c9c 	.word	0x9c9c9c9c
 8008b80:	3c38349c 	.word	0x3c38349c
 8008b84:	53504d46 	.word	0x53504d46
 8008b88:	5e5a5658 	.word	0x5e5a5658
 8008b8c:	6e6a6662 	.word	0x6e6a6662
 8008b90:	7a7e7672 	.word	0x7a7e7672
 8008b94:	908a8682 	.word	0x908a8682
 8008b98:	9c8e      	.short	0x9c8e
 8008b9a:	94          	.byte	0x94
 8008b9b:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8008b9c:	4b46      	ldr	r3, [pc, #280]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008b9e:	f893 3608 	ldrb.w	r3, [r3, #1544]	@ 0x608
 8008ba2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8008ba4:	2000      	movs	r0, #0
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8008ba6:	b004      	add	sp, #16
 8008ba8:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8008baa:	4b43      	ldr	r3, [pc, #268]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008bac:	f893 361c 	ldrb.w	r3, [r3, #1564]	@ 0x61c
 8008bb0:	e7f7      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8008bb2:	f7fd fc53 	bl	800645c <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8008bb6:	6060      	str	r0, [r4, #4]
            break;
 8008bb8:	e7f4      	b.n	8008ba4 <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8008bba:	f7fd fc65 	bl	8006488 <SecureElementGetJoinEui>
 8008bbe:	e7fa      	b.n	8008bb6 <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8008bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008bc2:	f893 360a 	ldrb.w	r3, [r3, #1546]	@ 0x60a
 8008bc6:	e7ec      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8008bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008bca:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	@ 0x5d4
            mibGet->Param.Contexts = GetNvmData( );
 8008bce:	6063      	str	r3, [r4, #4]
            break;
 8008bd0:	e7e8      	b.n	8008ba4 <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8008bd2:	4b39      	ldr	r3, [pc, #228]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008bd4:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	@ 0x5d8
 8008bd8:	e7f9      	b.n	8008bce <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8008bda:	4b37      	ldr	r3, [pc, #220]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008bdc:	f893 3609 	ldrb.w	r3, [r3, #1545]	@ 0x609
 8008be0:	e7df      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8008be2:	4b35      	ldr	r3, [pc, #212]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008be4:	f893 358c 	ldrb.w	r3, [r3, #1420]	@ 0x58c
 8008be8:	e7db      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            getPhy.Attribute = PHY_CHANNELS;
 8008bea:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8008bec:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008bf0:	4b31      	ldr	r3, [pc, #196]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008bf2:	a902      	add	r1, sp, #8
 8008bf4:	f893 054c 	ldrb.w	r0, [r3, #1356]	@ 0x54c
 8008bf8:	f001 fbf3 	bl	800a3e2 <RegionGetPhyParam>
 8008bfc:	e7db      	b.n	8008bb6 <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8008bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8008cbc <LoRaMacMibGetRequestConfirm+0x160>)
 8008c00:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8008c02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c06:	e884 0003 	stmia.w	r4, {r0, r1}
            break;
 8008c0a:	e7cb      	b.n	8008ba4 <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8008c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8008cc0 <LoRaMacMibGetRequestConfirm+0x164>)
 8008c0e:	3404      	adds	r4, #4
 8008c10:	e7f7      	b.n	8008c02 <LoRaMacMibGetRequestConfirm+0xa6>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8008c12:	4b2c      	ldr	r3, [pc, #176]	@ (8008cc4 <LoRaMacMibGetRequestConfirm+0x168>)
 8008c14:	3404      	adds	r4, #4
 8008c16:	e7f4      	b.n	8008c02 <LoRaMacMibGetRequestConfirm+0xa6>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8008c18:	4b2b      	ldr	r3, [pc, #172]	@ (8008cc8 <LoRaMacMibGetRequestConfirm+0x16c>)
 8008c1a:	3404      	adds	r4, #4
 8008c1c:	e7f1      	b.n	8008c02 <LoRaMacMibGetRequestConfirm+0xa6>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8008c1e:	231b      	movs	r3, #27
 8008c20:	e7e4      	b.n	8008bec <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8008c22:	231a      	movs	r3, #26
 8008c24:	e7e2      	b.n	8008bec <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008c26:	4b24      	ldr	r3, [pc, #144]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c28:	f893 356c 	ldrb.w	r3, [r3, #1388]	@ 0x56c
 8008c2c:	e7b9      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8008c2e:	4b22      	ldr	r3, [pc, #136]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c30:	f8d3 3558 	ldr.w	r3, [r3, #1368]	@ 0x558
 8008c34:	e7cb      	b.n	8008bce <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8008c36:	4b20      	ldr	r3, [pc, #128]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c38:	f8d3 355c 	ldr.w	r3, [r3, #1372]	@ 0x55c
 8008c3c:	e7c7      	b.n	8008bce <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8008c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c40:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 8008c44:	e7c3      	b.n	8008bce <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8008c46:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c48:	f8d3 3564 	ldr.w	r3, [r3, #1380]	@ 0x564
 8008c4c:	e7bf      	b.n	8008bce <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c50:	f8d3 3568 	ldr.w	r3, [r3, #1384]	@ 0x568
 8008c54:	e7bb      	b.n	8008bce <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8008c56:	4b18      	ldr	r3, [pc, #96]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c58:	f893 35d1 	ldrb.w	r3, [r3, #1489]	@ 0x5d1
 8008c5c:	e7a1      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008c5e:	4b16      	ldr	r3, [pc, #88]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c60:	f893 3545 	ldrb.w	r3, [r3, #1349]	@ 0x545
 8008c64:	e79d      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008c66:	4b14      	ldr	r3, [pc, #80]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c68:	f893 35d0 	ldrb.w	r3, [r3, #1488]	@ 0x5d0
 8008c6c:	e799      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008c6e:	4b12      	ldr	r3, [pc, #72]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c70:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8008c74:	e795      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8008c76:	4b10      	ldr	r3, [pc, #64]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c78:	f8d3 3550 	ldr.w	r3, [r3, #1360]	@ 0x550
 8008c7c:	e7a7      	b.n	8008bce <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c80:	f893 3554 	ldrb.w	r3, [r3, #1364]	@ 0x554
 8008c84:	e78d      	b.n	8008ba2 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008c86:	4b11      	ldr	r3, [pc, #68]	@ (8008ccc <LoRaMacMibGetRequestConfirm+0x170>)
 8008c88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8008c8a:	6063      	str	r3, [r4, #4]
            break;
 8008c8c:	e78a      	b.n	8008ba4 <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.Contexts = GetNvmData( );
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ccc <LoRaMacMibGetRequestConfirm+0x170>)
 8008c90:	e79d      	b.n	8008bce <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8008c92:	4b0e      	ldr	r3, [pc, #56]	@ (8008ccc <LoRaMacMibGetRequestConfirm+0x170>)
 8008c94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c98:	e7f7      	b.n	8008c8a <LoRaMacMibGetRequestConfirm+0x12e>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8008c9a:	4b07      	ldr	r3, [pc, #28]	@ (8008cb8 <LoRaMacMibGetRequestConfirm+0x15c>)
 8008c9c:	f8d3 3618 	ldr.w	r3, [r3, #1560]	@ 0x618
 8008ca0:	6043      	str	r3, [r0, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8008ca2:	f001 fc4b 	bl	800a53c <RegionGetVersion>
 8008ca6:	60a0      	str	r0, [r4, #8]
            break;
 8008ca8:	e77c      	b.n	8008ba4 <LoRaMacMibGetRequestConfirm+0x48>
}
 8008caa:	b004      	add	sp, #16
 8008cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8008cb0:	f000 bd54 	b.w	800975c <LoRaMacClassBMibGetRequestConfirm>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008cb4:	2003      	movs	r0, #3
 8008cb6:	e776      	b.n	8008ba6 <LoRaMacMibGetRequestConfirm+0x4a>
 8008cb8:	2000065c 	.word	0x2000065c
 8008cbc:	20000bcc 	.word	0x20000bcc
 8008cc0:	20000c0c 	.word	0x20000c0c
 8008cc4:	20000bd4 	.word	0x20000bd4
 8008cc8:	20000c14 	.word	0x20000c14
 8008ccc:	20000b68 	.word	0x20000b68

08008cd0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8008cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	b910      	cbnz	r0, 8008cdc <LoRaMacMibSetRequestConfirm+0xc>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008cd6:	2003      	movs	r0, #3
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    return status;
}
 8008cd8:	b002      	add	sp, #8
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8008cdc:	4da8      	ldr	r5, [pc, #672]	@ (8008f80 <LoRaMacMibSetRequestConfirm+0x2b0>)
 8008cde:	f8d5 3344 	ldr.w	r3, [r5, #836]	@ 0x344
 8008ce2:	079a      	lsls	r2, r3, #30
 8008ce4:	f100 820d 	bmi.w	8009102 <LoRaMacMibSetRequestConfirm+0x432>
    switch( mibSet->Type )
 8008ce8:	7802      	ldrb	r2, [r0, #0]
 8008cea:	2a27      	cmp	r2, #39	@ 0x27
 8008cec:	f200 8204 	bhi.w	80090f8 <LoRaMacMibSetRequestConfirm+0x428>
 8008cf0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008cf4:	002e0028 	.word	0x002e0028
 8008cf8:	003b0035 	.word	0x003b0035
 8008cfc:	0043003f 	.word	0x0043003f
 8008d00:	004b0047 	.word	0x004b0047
 8008d04:	005a0055 	.word	0x005a0055
 8008d08:	0064005f 	.word	0x0064005f
 8008d0c:	006e0069 	.word	0x006e0069
 8008d10:	007a0074 	.word	0x007a0074
 8008d14:	02020083 	.word	0x02020083
 8008d18:	00a80087 	.word	0x00a80087
 8008d1c:	00df00ba 	.word	0x00df00ba
 8008d20:	00f100ff 	.word	0x00f100ff
 8008d24:	010b0103 	.word	0x010b0103
 8008d28:	0113010f 	.word	0x0113010f
 8008d2c:	011b0117 	.word	0x011b0117
 8008d30:	0130011f 	.word	0x0130011f
 8008d34:	01520163 	.word	0x01520163
 8008d38:	017a0174 	.word	0x017a0174
 8008d3c:	01840180 	.word	0x01840180
 8008d40:	01f70189 	.word	0x01f70189
            status = SwitchClass( mibSet->Param.Class );
 8008d44:	7900      	ldrb	r0, [r0, #4]
}
 8008d46:	b002      	add	sp, #8
 8008d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            status = SwitchClass( mibSet->Param.Class );
 8008d4c:	f7fe bc7a 	b.w	8007644 <SwitchClass>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8008d50:	7903      	ldrb	r3, [r0, #4]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d0bf      	beq.n	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8008d56:	f885 361c 	strb.w	r3, [r5, #1564]	@ 0x61c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	e7bc      	b.n	8008cd8 <LoRaMacMibSetRequestConfirm+0x8>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8008d5e:	6840      	ldr	r0, [r0, #4]
 8008d60:	f7fd fb6e 	bl	8006440 <SecureElementSetDevEui>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d0f8      	beq.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
 8008d68:	e7b5      	b.n	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
 8008d6a:	6840      	ldr	r0, [r0, #4]
 8008d6c:	f7fd fb7c 	bl	8006468 <SecureElementSetJoinEui>
 8008d70:	e7f8      	b.n	8008d64 <LoRaMacMibSetRequestConfirm+0x94>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8008d72:	7903      	ldrb	r3, [r0, #4]
 8008d74:	f885 360a 	strb.w	r3, [r5, #1546]	@ 0x60a
            break;
 8008d78:	e7ef      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8008d7a:	6843      	ldr	r3, [r0, #4]
 8008d7c:	f8c5 35d4 	str.w	r3, [r5, #1492]	@ 0x5d4
            break;
 8008d80:	e7eb      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8008d82:	6843      	ldr	r3, [r0, #4]
 8008d84:	f8c5 35d8 	str.w	r3, [r5, #1496]	@ 0x5d8
            break;
 8008d88:	e7e7      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            if( mibSet->Param.AppKey != NULL )
 8008d8a:	6841      	ldr	r1, [r0, #4]
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d0a2      	beq.n	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8008d90:	2000      	movs	r0, #0
 8008d92:	f001 f94d 	bl	800a030 <LoRaMacCryptoSetKey>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d0df      	beq.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008d9a:	2011      	movs	r0, #17
 8008d9c:	e79c      	b.n	8008cd8 <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NwkKey != NULL )
 8008d9e:	6841      	ldr	r1, [r0, #4]
 8008da0:	2900      	cmp	r1, #0
 8008da2:	d098      	beq.n	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8008da4:	2001      	movs	r0, #1
 8008da6:	e7f4      	b.n	8008d92 <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.NwkSKey != NULL )
 8008da8:	6841      	ldr	r1, [r0, #4]
 8008daa:	2900      	cmp	r1, #0
 8008dac:	d093      	beq.n	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8008dae:	2002      	movs	r0, #2
 8008db0:	e7ef      	b.n	8008d92 <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.AppSKey != NULL )
 8008db2:	6841      	ldr	r1, [r0, #4]
 8008db4:	2900      	cmp	r1, #0
 8008db6:	d08e      	beq.n	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8008db8:	2003      	movs	r0, #3
 8008dba:	e7ea      	b.n	8008d92 <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.McKEKey != NULL )
 8008dbc:	6841      	ldr	r1, [r0, #4]
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d089      	beq.n	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8008dc2:	207f      	movs	r0, #127	@ 0x7f
 8008dc4:	e7e5      	b.n	8008d92 <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.McKey0 != NULL )
 8008dc6:	6841      	ldr	r1, [r0, #4]
 8008dc8:	2900      	cmp	r1, #0
 8008dca:	d084      	beq.n	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8008dcc:	2080      	movs	r0, #128	@ 0x80
 8008dce:	e7e0      	b.n	8008d92 <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.McAppSKey0 != NULL )
 8008dd0:	6841      	ldr	r1, [r0, #4]
 8008dd2:	2900      	cmp	r1, #0
 8008dd4:	f43f af7f 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8008dd8:	2081      	movs	r0, #129	@ 0x81
 8008dda:	e7da      	b.n	8008d92 <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8008ddc:	6841      	ldr	r1, [r0, #4]
 8008dde:	2900      	cmp	r1, #0
 8008de0:	f43f af79 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8008de4:	2082      	movs	r0, #130	@ 0x82
 8008de6:	e7d4      	b.n	8008d92 <LoRaMacMibSetRequestConfirm+0xc2>
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8008de8:	4c66      	ldr	r4, [pc, #408]	@ (8008f84 <LoRaMacMibSetRequestConfirm+0x2b4>)
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8008dea:	7900      	ldrb	r0, [r0, #4]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8008dec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8008dee:	f885 0609 	strb.w	r0, [r5, #1545]	@ 0x609
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8008df2:	4798      	blx	r3
            Radio.Sleep( );
 8008df4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008df6:	4798      	blx	r3
            break;
 8008df8:	e7af      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8008dfa:	7903      	ldrb	r3, [r0, #4]
 8008dfc:	f885 358c 	strb.w	r3, [r5, #1420]	@ 0x58c
            break;
 8008e00:	e7ab      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008e02:	7a03      	ldrb	r3, [r0, #8]
 8008e04:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8008e08:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008e0c:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
 8008e10:	f88d 3001 	strb.w	r3, [sp, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8008e14:	2207      	movs	r2, #7
 8008e16:	4669      	mov	r1, sp
 8008e18:	f001 faf9 	bl	800a40e <RegionVerify>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	f43f af5a 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8008e22:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8008e24:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8008e28:	9300      	str	r3, [sp, #0]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	4669      	mov	r1, sp
 8008e2e:	f001 faee 	bl	800a40e <RegionVerify>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f43f af4f 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8008e38:	4b53      	ldr	r3, [pc, #332]	@ (8008f88 <LoRaMacMibSetRequestConfirm+0x2b8>)
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8008e3a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8008e3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008e42:	e78a      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008e44:	7a03      	ldrb	r3, [r0, #8]
 8008e46:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008e4a:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008e4e:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
 8008e52:	f88d 3001 	strb.w	r3, [sp, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008e56:	2207      	movs	r2, #7
 8008e58:	4669      	mov	r1, sp
 8008e5a:	f001 fad8 	bl	800a40e <RegionVerify>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	f43f af39 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8008e64:	4b49      	ldr	r3, [pc, #292]	@ (8008f8c <LoRaMacMibSetRequestConfirm+0x2bc>)
 8008e66:	e7e8      	b.n	8008e3a <LoRaMacMibSetRequestConfirm+0x16a>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8008e68:	7a03      	ldrb	r3, [r0, #8]
 8008e6a:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008e6e:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008e72:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
 8008e76:	f88d 3001 	strb.w	r3, [sp, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008e7a:	2207      	movs	r2, #7
 8008e7c:	4669      	mov	r1, sp
 8008e7e:	f001 fac6 	bl	800a40e <RegionVerify>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f43f af27 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8008e88:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8008e8c:	4b40      	ldr	r3, [pc, #256]	@ (8008f90 <LoRaMacMibSetRequestConfirm+0x2c0>)
 8008e8e:	e883 0003 	stmia.w	r3, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8008e92:	f895 3608 	ldrb.w	r3, [r5, #1544]	@ 0x608
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	f47f af5f 	bne.w	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
 8008e9c:	f895 361c 	ldrb.w	r3, [r5, #1564]	@ 0x61c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f43f af5a 	beq.w	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
                    Radio.Sleep( );
 8008ea6:	4b37      	ldr	r3, [pc, #220]	@ (8008f84 <LoRaMacMibSetRequestConfirm+0x2b4>)
 8008ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eaa:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 8008eac:	f7fe fba0 	bl	80075f0 <OpenContinuousRxCWindow>
 8008eb0:	e753      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8008eb2:	7a03      	ldrb	r3, [r0, #8]
 8008eb4:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008eb8:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ebc:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
 8008ec0:	f88d 3001 	strb.w	r3, [sp, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008ec4:	2207      	movs	r2, #7
 8008ec6:	4669      	mov	r1, sp
 8008ec8:	f001 faa1 	bl	800a40e <RegionVerify>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f43f af02 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8008ed2:	4b30      	ldr	r3, [pc, #192]	@ (8008f94 <LoRaMacMibSetRequestConfirm+0x2c4>)
 8008ed4:	e7b1      	b.n	8008e3a <LoRaMacMibSetRequestConfirm+0x16a>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8008ed6:	6843      	ldr	r3, [r0, #4]
 8008ed8:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8008eda:	2301      	movs	r3, #1
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8008edc:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8008ee0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8008ee4:	4669      	mov	r1, sp
 8008ee6:	f001 faa1 	bl	800a42c <RegionChanMaskSet>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f47f af35 	bne.w	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
 8008ef0:	e6f1      	b.n	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8008ef2:	6843      	ldr	r3, [r0, #4]
 8008ef4:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e7f0      	b.n	8008edc <LoRaMacMibSetRequestConfirm+0x20c>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8008efa:	7903      	ldrb	r3, [r0, #4]
 8008efc:	1e5a      	subs	r2, r3, #1
 8008efe:	2a0e      	cmp	r2, #14
 8008f00:	f63f aee9 	bhi.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8008f04:	f885 356c 	strb.w	r3, [r5, #1388]	@ 0x56c
 8008f08:	e727      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8008f0a:	6843      	ldr	r3, [r0, #4]
 8008f0c:	f8c5 3558 	str.w	r3, [r5, #1368]	@ 0x558
            break;
 8008f10:	e723      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8008f12:	6843      	ldr	r3, [r0, #4]
 8008f14:	f8c5 355c 	str.w	r3, [r5, #1372]	@ 0x55c
            break;
 8008f18:	e71f      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8008f1a:	6843      	ldr	r3, [r0, #4]
 8008f1c:	f8c5 3560 	str.w	r3, [r5, #1376]	@ 0x560
            break;
 8008f20:	e71b      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8008f22:	6843      	ldr	r3, [r0, #4]
 8008f24:	f8c5 3564 	str.w	r3, [r5, #1380]	@ 0x564
            break;
 8008f28:	e717      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8008f2a:	6843      	ldr	r3, [r0, #4]
 8008f2c:	f8c5 3568 	str.w	r3, [r5, #1384]	@ 0x568
            break;
 8008f30:	e713      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8008f32:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8008f34:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8008f38:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8008f3c:	2206      	movs	r2, #6
 8008f3e:	4669      	mov	r1, sp
 8008f40:	f001 fa65 	bl	800a40e <RegionVerify>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	f43f aec6 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8008f4a:	f89d 3000 	ldrb.w	r3, [sp]
 8008f4e:	f885 35d1 	strb.w	r3, [r5, #1489]	@ 0x5d1
 8008f52:	e702      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8008f54:	7903      	ldrb	r3, [r0, #4]
 8008f56:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8008f5a:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008f5e:	f895 3580 	ldrb.w	r3, [r5, #1408]	@ 0x580
 8008f62:	f88d 3002 	strb.w	r3, [sp, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8008f66:	2205      	movs	r2, #5
 8008f68:	4669      	mov	r1, sp
 8008f6a:	f001 fa50 	bl	800a40e <RegionVerify>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f43f aeb1 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008f74:	f89d 3000 	ldrb.w	r3, [sp]
 8008f78:	f885 3545 	strb.w	r3, [r5, #1349]	@ 0x545
 8008f7c:	e6ed      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
 8008f7e:	bf00      	nop
 8008f80:	2000065c 	.word	0x2000065c
 8008f84:	0800de84 	.word	0x0800de84
 8008f88:	20000bcc 	.word	0x20000bcc
 8008f8c:	20000c0c 	.word	0x20000c0c
 8008f90:	20000bd4 	.word	0x20000bd4
 8008f94:	20000c14 	.word	0x20000c14
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8008f98:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8008f9a:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8008f9e:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8008fa2:	220a      	movs	r2, #10
 8008fa4:	4669      	mov	r1, sp
 8008fa6:	f001 fa32 	bl	800a40e <RegionVerify>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f43f ae93 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8008fb0:	f89d 3000 	ldrb.w	r3, [sp]
 8008fb4:	f885 35d0 	strb.w	r3, [r5, #1488]	@ 0x5d0
 8008fb8:	e6cf      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8008fba:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8008fbc:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8008fc0:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8008fc4:	2209      	movs	r2, #9
 8008fc6:	4669      	mov	r1, sp
 8008fc8:	f001 fa21 	bl	800a40e <RegionVerify>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f43f ae82 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8008fd2:	f89d 3000 	ldrb.w	r3, [sp]
 8008fd6:	f885 3544 	strb.w	r3, [r5, #1348]	@ 0x544
 8008fda:	e6be      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8008fdc:	6843      	ldr	r3, [r0, #4]
 8008fde:	f8c5 3590 	str.w	r3, [r5, #1424]	@ 0x590
 8008fe2:	f8c5 3550 	str.w	r3, [r5, #1360]	@ 0x550
            break;
 8008fe6:	e6b8      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8008fe8:	7903      	ldrb	r3, [r0, #4]
 8008fea:	f885 3594 	strb.w	r3, [r5, #1428]	@ 0x594
 8008fee:	f885 3554 	strb.w	r3, [r5, #1364]	@ 0x554
            break;
 8008ff2:	e6b2      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8008ff4:	4b44      	ldr	r3, [pc, #272]	@ (8009108 <LoRaMacMibSetRequestConfirm+0x438>)
 8008ff6:	6842      	ldr	r2, [r0, #4]
 8008ff8:	67da      	str	r2, [r3, #124]	@ 0x7c
            break;
 8008ffa:	e6ae      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8008ffc:	4b42      	ldr	r3, [pc, #264]	@ (8009108 <LoRaMacMibSetRequestConfirm+0x438>)
 8008ffe:	6842      	ldr	r2, [r0, #4]
 8009000:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
            break;
 8009004:	e6a9      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            if( mibSet->Param.Contexts != 0 )
 8009006:	6844      	ldr	r4, [r0, #4]
 8009008:	2c00      	cmp	r4, #0
 800900a:	f43f ae64 	beq.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800900e:	2b01      	cmp	r3, #1
 8009010:	d177      	bne.n	8009102 <LoRaMacMibSetRequestConfirm+0x432>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8009012:	2124      	movs	r1, #36	@ 0x24
 8009014:	4620      	mov	r0, r4
 8009016:	f002 fb85 	bl	800b724 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 800901a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800901c:	4298      	cmp	r0, r3
 800901e:	d104      	bne.n	800902a <LoRaMacMibSetRequestConfirm+0x35a>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8009020:	4839      	ldr	r0, [pc, #228]	@ (8009108 <LoRaMacMibSetRequestConfirm+0x438>)
 8009022:	2228      	movs	r2, #40	@ 0x28
 8009024:	4621      	mov	r1, r4
 8009026:	f002 fb67 	bl	800b6f8 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800902a:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 800902e:	2114      	movs	r1, #20
 8009030:	4630      	mov	r0, r6
 8009032:	f002 fb77 	bl	800b724 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 8009036:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009038:	4298      	cmp	r0, r3
 800903a:	d104      	bne.n	8009046 <LoRaMacMibSetRequestConfirm+0x376>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800903c:	4833      	ldr	r0, [pc, #204]	@ (800910c <LoRaMacMibSetRequestConfirm+0x43c>)
 800903e:	2218      	movs	r2, #24
 8009040:	4631      	mov	r1, r6
 8009042:	f002 fb59 	bl	800b6f8 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8009046:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 800904a:	21d4      	movs	r1, #212	@ 0xd4
 800904c:	4630      	mov	r0, r6
 800904e:	f002 fb69 	bl	800b724 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8009052:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 8009056:	4298      	cmp	r0, r3
 8009058:	d114      	bne.n	8009084 <LoRaMacMibSetRequestConfirm+0x3b4>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800905a:	482d      	ldr	r0, [pc, #180]	@ (8009110 <LoRaMacMibSetRequestConfirm+0x440>)
 800905c:	22d8      	movs	r2, #216	@ 0xd8
 800905e:	4631      	mov	r1, r6
 8009060:	f002 fb4a 	bl	800b6f8 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009064:	f895 3419 	ldrb.w	r3, [r5, #1049]	@ 0x419
 8009068:	f885 33e4 	strb.w	r3, [r5, #996]	@ 0x3e4
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800906c:	f8d5 3578 	ldr.w	r3, [r5, #1400]	@ 0x578
 8009070:	f8c5 33e8 	str.w	r3, [r5, #1000]	@ 0x3e8
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009074:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
 8009078:	f885 33f4 	strb.w	r3, [r5, #1012]	@ 0x3f4
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800907c:	f240 2301 	movw	r3, #513	@ 0x201
 8009080:	f8a5 33f6 	strh.w	r3, [r5, #1014]	@ 0x3f6
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8009084:	f504 758c 	add.w	r5, r4, #280	@ 0x118
 8009088:	21bc      	movs	r1, #188	@ 0xbc
 800908a:	4628      	mov	r0, r5
 800908c:	f002 fb4a 	bl	800b724 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8009090:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
 8009094:	4298      	cmp	r0, r3
 8009096:	d104      	bne.n	80090a2 <LoRaMacMibSetRequestConfirm+0x3d2>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8009098:	481e      	ldr	r0, [pc, #120]	@ (8009114 <LoRaMacMibSetRequestConfirm+0x444>)
 800909a:	22c0      	movs	r2, #192	@ 0xc0
 800909c:	4629      	mov	r1, r5
 800909e:	f002 fb2b 	bl	800b6f8 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 80090a2:	f504 75ec 	add.w	r5, r4, #472	@ 0x1d8
 80090a6:	2190      	movs	r1, #144	@ 0x90
 80090a8:	4628      	mov	r0, r5
 80090aa:	f002 fb3b 	bl	800b724 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 80090ae:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 80090b2:	4298      	cmp	r0, r3
 80090b4:	d104      	bne.n	80090c0 <LoRaMacMibSetRequestConfirm+0x3f0>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80090b6:	4818      	ldr	r0, [pc, #96]	@ (8009118 <LoRaMacMibSetRequestConfirm+0x448>)
 80090b8:	2294      	movs	r2, #148	@ 0x94
 80090ba:	4629      	mov	r1, r5
 80090bc:	f002 fb1c 	bl	800b6f8 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 80090c0:	f504 754d 	add.w	r5, r4, #820	@ 0x334
 80090c4:	2114      	movs	r1, #20
 80090c6:	4628      	mov	r0, r5
 80090c8:	f002 fb2c 	bl	800b724 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 80090cc:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 80090d0:	4298      	cmp	r0, r3
 80090d2:	f47f ae42 	bne.w	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 80090d6:	4811      	ldr	r0, [pc, #68]	@ (800911c <LoRaMacMibSetRequestConfirm+0x44c>)
 80090d8:	2218      	movs	r2, #24
 80090da:	4629      	mov	r1, r5
 80090dc:	f002 fb0c 	bl	800b6f8 <memcpy1>
 80090e0:	e63b      	b.n	8008d5a <LoRaMacMibSetRequestConfirm+0x8a>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80090e2:	7983      	ldrb	r3, [r0, #6]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	f63f adf6 	bhi.w	8008cd6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80090ea:	6843      	ldr	r3, [r0, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80090ec:	6840      	ldr	r0, [r0, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80090ee:	f8c5 3618 	str.w	r3, [r5, #1560]	@ 0x618
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80090f2:	f000 fe2f 	bl	8009d54 <LoRaMacCryptoSetLrWanVersion>
 80090f6:	e64e      	b.n	8008d96 <LoRaMacMibSetRequestConfirm+0xc6>
}
 80090f8:	b002      	add	sp, #8
 80090fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80090fe:	f000 bb2f 	b.w	8009760 <LoRaMacMibClassBSetRequestConfirm>
        return LORAMAC_STATUS_BUSY;
 8009102:	2001      	movs	r0, #1
 8009104:	e5e8      	b.n	8008cd8 <LoRaMacMibSetRequestConfirm+0x8>
 8009106:	bf00      	nop
 8009108:	20000b68 	.word	0x20000b68
 800910c:	20000b90 	.word	0x20000b90
 8009110:	20000ba8 	.word	0x20000ba8
 8009114:	20000c80 	.word	0x20000c80
 8009118:	20000d40 	.word	0x20000d40
 800911c:	20000e9c 	.word	0x20000e9c

08009120 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8009120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009122:	b087      	sub	sp, #28
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009124:	2300      	movs	r3, #0
 8009126:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800912a:	4606      	mov	r6, r0
 800912c:	2800      	cmp	r0, #0
 800912e:	f000 80dc 	beq.w	80092ea <LoRaMacMlmeRequest+0x1ca>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8009132:	f7fe fe25 	bl	8007d80 <LoRaMacIsBusy>
 8009136:	b118      	cbz	r0, 8009140 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 8009138:	2501      	movs	r5, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800913a:	4628      	mov	r0, r5
 800913c:	b007      	add	sp, #28
 800913e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009140:	f000 fcf2 	bl	8009b28 <LoRaMacConfirmQueueIsFull>
 8009144:	2800      	cmp	r0, #0
 8009146:	d1f7      	bne.n	8009138 <LoRaMacMlmeRequest+0x18>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009148:	f000 fce8 	bl	8009b1c <LoRaMacConfirmQueueGetCnt>
 800914c:	4601      	mov	r1, r0
 800914e:	b918      	cbnz	r0, 8009158 <LoRaMacMlmeRequest+0x38>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009150:	4867      	ldr	r0, [pc, #412]	@ (80092f0 <LoRaMacMlmeRequest+0x1d0>)
 8009152:	2214      	movs	r2, #20
 8009154:	f002 fae4 	bl	800b720 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009158:	4c66      	ldr	r4, [pc, #408]	@ (80092f4 <LoRaMacMlmeRequest+0x1d4>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800915a:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800915e:	2201      	movs	r2, #1
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009160:	f043 0304 	orr.w	r3, r3, #4
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009164:	f884 2451 	strb.w	r2, [r4, #1105]	@ 0x451
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009168:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    queueElement.Request = mlmeRequest->Type;
 800916c:	7833      	ldrb	r3, [r6, #0]
 800916e:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.RestrictCommonReadyToHandle = false;
 8009172:	2100      	movs	r1, #0
    switch( mlmeRequest->Type )
 8009174:	3b01      	subs	r3, #1
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009176:	f88d 2005 	strb.w	r2, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800917a:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( mlmeRequest->Type )
 800917e:	2b0d      	cmp	r3, #13
 8009180:	f200 80ab 	bhi.w	80092da <LoRaMacMlmeRequest+0x1ba>
 8009184:	e8df f003 	tbb	[pc, r3]
 8009188:	56a9a907 	.word	0x56a9a907
 800918c:	a9a97f5e 	.word	0xa9a97f5e
 8009190:	9da987a9 	.word	0x9da987a9
 8009194:	998b      	.short	0x998b
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8009196:	f8d4 5344 	ldr.w	r5, [r4, #836]	@ 0x344
 800919a:	f015 0520 	ands.w	r5, r5, #32
 800919e:	d1cb      	bne.n	8009138 <LoRaMacMlmeRequest+0x18>
            ResetMacParameters( );
 80091a0:	f7fe f81a 	bl	80071d8 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80091a4:	462a      	mov	r2, r5
 80091a6:	f996 1004 	ldrsb.w	r1, [r6, #4]
 80091aa:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80091ae:	4f52      	ldr	r7, [pc, #328]	@ (80092f8 <LoRaMacMlmeRequest+0x1d8>)
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80091b0:	f001 f996 	bl	800a4e0 <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80091b4:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80091b6:	f884 0545 	strb.w	r0, [r4, #1349]	@ 0x545
            SwitchClass( CLASS_A );
 80091ba:	4628      	mov	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80091bc:	f88d 3005 	strb.w	r3, [sp, #5]
            SwitchClass( CLASS_A );
 80091c0:	f7fe fa40 	bl	8007644 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80091c4:	23ff      	movs	r3, #255	@ 0xff
 80091c6:	f8a4 3110 	strh.w	r3, [r4, #272]	@ 0x110
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80091ca:	f884 5108 	strb.w	r5, [r4, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80091ce:	f8c4 710c 	str.w	r7, [r4, #268]	@ 0x10c
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80091d2:	f7fd f959 	bl	8006488 <SecureElementGetJoinEui>
 80091d6:	2208      	movs	r2, #8
 80091d8:	4601      	mov	r1, r0
 80091da:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 80091de:	f002 fa8b 	bl	800b6f8 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80091e2:	f7fd f93b 	bl	800645c <SecureElementGetDevEui>
 80091e6:	2208      	movs	r2, #8
 80091e8:	4601      	mov	r1, r0
 80091ea:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 80091ee:	f002 fa83 	bl	800b6f8 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 80091f2:	4628      	mov	r0, r5
 80091f4:	f7fe f884 	bl	8007300 <ScheduleTx>
            if( status != LORAMAC_STATUS_OK )
 80091f8:	4605      	mov	r5, r0
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d041      	beq.n	8009282 <LoRaMacMlmeRequest+0x162>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80091fe:	f996 1004 	ldrsb.w	r1, [r6, #4]
 8009202:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8009206:	2201      	movs	r2, #1
 8009208:	f001 f96a 	bl	800a4e0 <RegionAlternateDr>
 800920c:	f884 0545 	strb.w	r0, [r4, #1349]	@ 0x545
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009210:	f8d4 3488 	ldr.w	r3, [r4, #1160]	@ 0x488
 8009214:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 8009216:	2d00      	cmp	r5, #0
 8009218:	d063      	beq.n	80092e2 <LoRaMacMlmeRequest+0x1c2>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800921a:	f000 fc7f 	bl	8009b1c <LoRaMacConfirmQueueGetCnt>
 800921e:	2800      	cmp	r0, #0
 8009220:	d18b      	bne.n	800913a <LoRaMacMlmeRequest+0x1a>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009222:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
            MacCtx.NodeAckRequested = false;
 8009226:	f884 0418 	strb.w	r0, [r4, #1048]	@ 0x418
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800922a:	f360 0382 	bfi	r3, r0, #2, #1
 800922e:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
 8009232:	e782      	b.n	800913a <LoRaMacMlmeRequest+0x1a>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009234:	2200      	movs	r2, #0
 8009236:	4669      	mov	r1, sp
 8009238:	2002      	movs	r0, #2
 800923a:	f000 faad 	bl	8009798 <LoRaMacCommandsAddCmd>
 800923e:	b300      	cbz	r0, 8009282 <LoRaMacMlmeRequest+0x162>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009240:	2513      	movs	r5, #19
 8009242:	e7e5      	b.n	8009210 <LoRaMacMlmeRequest+0xf0>
    continuousWave.Channel = MacCtx.Channel;
 8009244:	f894 3419 	ldrb.w	r3, [r4, #1049]	@ 0x419
 8009248:	f88d 3008 	strb.w	r3, [sp, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800924c:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
 8009250:	f88d 3009 	strb.w	r3, [sp, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009254:	f894 3544 	ldrb.w	r3, [r4, #1348]	@ 0x544
 8009258:	f88d 300a 	strb.w	r3, [sp, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800925c:	4b27      	ldr	r3, [pc, #156]	@ (80092fc <LoRaMacMlmeRequest+0x1dc>)
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800925e:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009260:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8009262:	9103      	str	r1, [sp, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009266:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800926a:	9304      	str	r3, [sp, #16]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800926c:	a902      	add	r1, sp, #8
    continuousWave.Timeout = timeout;
 800926e:	f8ad 2014 	strh.w	r2, [sp, #20]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009272:	f001 f94e 	bl	800a512 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009276:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 800927a:	f043 0302 	orr.w	r3, r3, #2
 800927e:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009282:	2500      	movs	r5, #0
 8009284:	e7c4      	b.n	8009210 <LoRaMacMlmeRequest+0xf0>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009286:	4b1e      	ldr	r3, [pc, #120]	@ (8009300 <LoRaMacMlmeRequest+0x1e0>)
 8009288:	88b2      	ldrh	r2, [r6, #4]
 800928a:	f996 100c 	ldrsb.w	r1, [r6, #12]
 800928e:	68b0      	ldr	r0, [r6, #8]
 8009290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009292:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009294:	e7ef      	b.n	8009276 <LoRaMacMlmeRequest+0x156>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009296:	2200      	movs	r2, #0
 8009298:	4669      	mov	r1, sp
 800929a:	200d      	movs	r0, #13
 800929c:	e7cd      	b.n	800923a <LoRaMacMlmeRequest+0x11a>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800929e:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 80092a2:	b9d3      	cbnz	r3, 80092da <LoRaMacMlmeRequest+0x1ba>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80092a4:	7935      	ldrb	r5, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80092a6:	f005 0007 	and.w	r0, r5, #7
 80092aa:	f000 fa52 	bl	8009752 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80092ae:	f88d 5000 	strb.w	r5, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80092b2:	2201      	movs	r2, #1
 80092b4:	4669      	mov	r1, sp
 80092b6:	2010      	movs	r0, #16
 80092b8:	e7bf      	b.n	800923a <LoRaMacMlmeRequest+0x11a>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80092ba:	2200      	movs	r2, #0
 80092bc:	4669      	mov	r1, sp
 80092be:	2012      	movs	r0, #18
 80092c0:	e7bb      	b.n	800923a <LoRaMacMlmeRequest+0x11a>
            queueElement.RestrictCommonReadyToHandle = true;
 80092c2:	f88d 2007 	strb.w	r2, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80092c6:	f000 fa35 	bl	8009734 <LoRaMacClassBIsAcquisitionInProgress>
 80092ca:	4605      	mov	r5, r0
 80092cc:	b938      	cbnz	r0, 80092de <LoRaMacMlmeRequest+0x1be>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80092ce:	f000 fa2e 	bl	800972e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80092d2:	4628      	mov	r0, r5
 80092d4:	f000 fa30 	bl	8009738 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 80092d8:	e7d3      	b.n	8009282 <LoRaMacMlmeRequest+0x162>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80092da:	2502      	movs	r5, #2
 80092dc:	e798      	b.n	8009210 <LoRaMacMlmeRequest+0xf0>
                status = LORAMAC_STATUS_BUSY;
 80092de:	2501      	movs	r5, #1
 80092e0:	e796      	b.n	8009210 <LoRaMacMlmeRequest+0xf0>
        LoRaMacConfirmQueueAdd( &queueElement );
 80092e2:	a801      	add	r0, sp, #4
 80092e4:	f000 fb72 	bl	80099cc <LoRaMacConfirmQueueAdd>
 80092e8:	e727      	b.n	800913a <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80092ea:	2503      	movs	r5, #3
 80092ec:	e725      	b.n	800913a <LoRaMacMlmeRequest+0x1a>
 80092ee:	bf00      	nop
 80092f0:	20000aac 	.word	0x20000aac
 80092f4:	2000065c 	.word	0x2000065c
 80092f8:	20000662 	.word	0x20000662
 80092fc:	20000b68 	.word	0x20000b68
 8009300:	0800de84 	.word	0x0800de84

08009304 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8009304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009308:	b091      	sub	sp, #68	@ 0x44
 800930a:	2600      	movs	r6, #0
 800930c:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800930e:	4605      	mov	r5, r0
 8009310:	b918      	cbnz	r0, 800931a <LoRaMacMcpsRequest+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009312:	2003      	movs	r0, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8009314:	b011      	add	sp, #68	@ 0x44
 8009316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacIsBusy( ) == true )
 800931a:	f7fe fd31 	bl	8007d80 <LoRaMacIsBusy>
 800931e:	4683      	mov	fp, r0
 8009320:	2800      	cmp	r0, #0
 8009322:	f040 817a 	bne.w	800961a <LoRaMacMcpsRequest+0x316>
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009326:	4cbe      	ldr	r4, [pc, #760]	@ (8009620 <LoRaMacMcpsRequest+0x31c>)
 8009328:	4601      	mov	r1, r0
 800932a:	2214      	movs	r2, #20
    macHdr.Value = 0;
 800932c:	4607      	mov	r7, r0
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800932e:	f204 403c 	addw	r0, r4, #1084	@ 0x43c
 8009332:	f002 f9f5 	bl	800b720 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009336:	2201      	movs	r2, #1
 8009338:	f884 243d 	strb.w	r2, [r4, #1085]	@ 0x43d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800933c:	f884 2416 	strb.w	r2, [r4, #1046]	@ 0x416
    switch( mcpsRequest->Type )
 8009340:	7829      	ldrb	r1, [r5, #0]
 8009342:	4291      	cmp	r1, r2
 8009344:	f000 8109 	beq.w	800955a <LoRaMacMcpsRequest+0x256>
 8009348:	2903      	cmp	r1, #3
 800934a:	f000 8118 	beq.w	800957e <LoRaMacMcpsRequest+0x27a>
 800934e:	2900      	cmp	r1, #0
 8009350:	f040 8122 	bne.w	8009598 <LoRaMacMcpsRequest+0x294>
            MacCtx.AckTimeoutRetries = 1;
 8009354:	f884 2415 	strb.w	r2, [r4, #1045]	@ 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009358:	2302      	movs	r3, #2
 800935a:	f363 1747 	bfi	r7, r3, #5, #3
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800935e:	f895 9004 	ldrb.w	r9, [r5, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8009362:	f8d5 8008 	ldr.w	r8, [r5, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8009366:	89ae      	ldrh	r6, [r5, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8009368:	f995 300e 	ldrsb.w	r3, [r5, #14]
            readyToSend = true;
 800936c:	4693      	mov	fp, r2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800936e:	f894 2580 	ldrb.w	r2, [r4, #1408]	@ 0x580
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009372:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8009376:	9300      	str	r3, [sp, #0]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009378:	f04f 0a02 	mov.w	sl, #2
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800937c:	a909      	add	r1, sp, #36	@ 0x24
    getPhy.Attribute = PHY_MIN_TX_DR;
 800937e:	f88d a024 	strb.w	sl, [sp, #36]	@ 0x24
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009382:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009386:	f001 f82c 	bl	800a3e2 <RegionGetPhyParam>
    if( readyToSend == true )
 800938a:	f1bb 0f00 	cmp.w	fp, #0
 800938e:	f000 8142 	beq.w	8009616 <LoRaMacMcpsRequest+0x312>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8009392:	f894 260a 	ldrb.w	r2, [r4, #1546]	@ 0x60a
 8009396:	b9b2      	cbnz	r2, 80093c6 <LoRaMacMcpsRequest+0xc2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009398:	9b00      	ldr	r3, [sp, #0]
 800939a:	b240      	sxtb	r0, r0
 800939c:	4298      	cmp	r0, r3
 800939e:	bfb8      	it	lt
 80093a0:	4618      	movlt	r0, r3
            verify.DatarateParams.Datarate = datarate;
 80093a2:	f88d 0014 	strb.w	r0, [sp, #20]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80093a6:	f894 3580 	ldrb.w	r3, [r4, #1408]	@ 0x580
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80093aa:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80093ae:	f88d 3016 	strb.w	r3, [sp, #22]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80093b2:	2205      	movs	r2, #5
 80093b4:	a905      	add	r1, sp, #20
 80093b6:	f001 f82a 	bl	800a40e <RegionVerify>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d0a9      	beq.n	8009312 <LoRaMacMcpsRequest+0xe>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80093be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80093c2:	f884 3545 	strb.w	r3, [r4, #1349]	@ 0x545
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80093c6:	f8b4 2544 	ldrh.w	r2, [r4, #1348]	@ 0x544
 80093ca:	f8b4 3544 	ldrh.w	r3, [r4, #1348]	@ 0x544
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80093ce:	f894 161c 	ldrb.w	r1, [r4, #1564]	@ 0x61c
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80093d2:	9201      	str	r2, [sp, #4]
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80093d4:	f8d4 2534 	ldr.w	r2, [r4, #1332]	@ 0x534
 80093d8:	9206      	str	r2, [sp, #24]
 80093da:	ba5b      	rev16	r3, r3
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80093dc:	2900      	cmp	r1, #0
 80093de:	f000 8116 	beq.w	800960e <LoRaMacMcpsRequest+0x30a>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80093e2:	f894 160b 	ldrb.w	r1, [r4, #1547]	@ 0x60b
 80093e6:	b909      	cbnz	r1, 80093ec <LoRaMacMcpsRequest+0xe8>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80093e8:	f8c4 153c 	str.w	r1, [r4, #1340]	@ 0x53c
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80093ec:	f894 1608 	ldrb.w	r1, [r4, #1544]	@ 0x608
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80093f0:	920d      	str	r2, [sp, #52]	@ 0x34
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80093f2:	1e48      	subs	r0, r1, #1
 80093f4:	4241      	negs	r1, r0
 80093f6:	4141      	adcs	r1, r0
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80093f8:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	@ 0x3f8
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80093fc:	9102      	str	r1, [sp, #8]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80093fe:	f894 1546 	ldrb.w	r1, [r4, #1350]	@ 0x546
 8009402:	9100      	str	r1, [sp, #0]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009404:	920e      	str	r2, [sp, #56]	@ 0x38
    adrNext.Version = Nvm.MacGroup2.Version;
 8009406:	f8d4 1618 	ldr.w	r1, [r4, #1560]	@ 0x618
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800940a:	4a86      	ldr	r2, [pc, #536]	@ (8009624 <LoRaMacMcpsRequest+0x320>)
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800940c:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009410:	f894 3580 	ldrb.w	r3, [r4, #1408]	@ 0x580
    adrNext.Version = Nvm.MacGroup2.Version;
 8009414:	910b      	str	r1, [sp, #44]	@ 0x2c
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009416:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
    adrNext.UpdateChanMask = true;
 800941a:	f04f 0101 	mov.w	r1, #1
    adrNext.Region = Nvm.MacGroup2.Region;
 800941e:	f894 354c 	ldrb.w	r3, [r4, #1356]	@ 0x54c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009422:	f894 b60a 	ldrb.w	fp, [r4, #1546]	@ 0x60a
    adrNext.UpdateChanMask = true;
 8009426:	f88d 1030 	strb.w	r1, [sp, #48]	@ 0x30
    adrNext.Region = Nvm.MacGroup2.Region;
 800942a:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800942e:	1c51      	adds	r1, r2, #1
 8009430:	ab06      	add	r3, sp, #24
 8009432:	a80b      	add	r0, sp, #44	@ 0x2c
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009434:	f88d b031 	strb.w	fp, [sp, #49]	@ 0x31
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009438:	f000 f90a 	bl	8009650 <LoRaMacAdrCalcNext>
 800943c:	9b02      	ldr	r3, [sp, #8]
 800943e:	9a00      	ldr	r2, [sp, #0]
    fCtrl.Value = 0;
 8009440:	f04f 0a00 	mov.w	sl, #0
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009444:	011b      	lsls	r3, r3, #4
        fBufferSize = 0;
 8009446:	45d0      	cmp	r8, sl
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009448:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    MacCtx.PktBufferLen = 0;
 800944c:	f8a4 a004 	strh.w	sl, [r4, #4]
    MacCtx.NodeAckRequested = false;
 8009450:	f884 a418 	strb.w	sl, [r4, #1048]	@ 0x418
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009454:	4c72      	ldr	r4, [pc, #456]	@ (8009620 <LoRaMacMcpsRequest+0x31c>)
        fBufferSize = 0;
 8009456:	bf08      	it	eq
 8009458:	4656      	moveq	r6, sl
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800945a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800945e:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009462:	4632      	mov	r2, r6
 8009464:	4641      	mov	r1, r8
 8009466:	f504 709e 	add.w	r0, r4, #316	@ 0x13c
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800946a:	469b      	mov	fp, r3
 800946c:	9300      	str	r3, [sp, #0]
    size_t macCmdsSize = 0;
 800946e:	e9cd aa07 	strd	sl, sl, [sp, #28]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009472:	f002 f941 	bl	800b6f8 <memcpy1>
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009476:	b2f9      	uxtb	r1, r7
 8009478:	71a7      	strb	r7, [r4, #6]
    switch( macHdr->Bits.MType )
 800947a:	f3c7 1742 	ubfx	r7, r7, #5, #3
    MacCtx.AppDataSize = fBufferSize;
 800947e:	b2f2      	uxtb	r2, r6
    switch( macHdr->Bits.MType )
 8009480:	2f04      	cmp	r7, #4
 8009482:	9b00      	ldr	r3, [sp, #0]
    MacCtx.AppDataSize = fBufferSize;
 8009484:	f884 223b 	strb.w	r2, [r4, #571]	@ 0x23b
    switch( macHdr->Bits.MType )
 8009488:	f000 808a 	beq.w	80095a0 <LoRaMacMcpsRequest+0x29c>
 800948c:	2f07      	cmp	r7, #7
 800948e:	f000 80ac 	beq.w	80095ea <LoRaMacMcpsRequest+0x2e6>
 8009492:	2f02      	cmp	r7, #2
 8009494:	f040 80b9 	bne.w	800960a <LoRaMacMcpsRequest+0x306>
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009498:	4f63      	ldr	r7, [pc, #396]	@ (8009628 <LoRaMacMcpsRequest+0x324>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800949a:	f884 1111 	strb.w	r1, [r4, #273]	@ 0x111
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800949e:	2004      	movs	r0, #4
 80094a0:	f884 0108 	strb.w	r0, [r4, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80094a4:	20ff      	movs	r0, #255	@ 0xff
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80094a6:	f8d4 15d8 	ldr.w	r1, [r4, #1496]	@ 0x5d8
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80094aa:	f884 0110 	strb.w	r0, [r4, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80094ae:	f884 3118 	strb.w	r3, [r4, #280]	@ 0x118
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80094b2:	a807      	add	r0, sp, #28
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80094b4:	f507 739b 	add.w	r3, r7, #310	@ 0x136
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80094b8:	f8c4 710c 	str.w	r7, [r4, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80094bc:	f884 912c 	strb.w	r9, [r4, #300]	@ 0x12c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80094c0:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80094c4:	f884 2134 	strb.w	r2, [r4, #308]	@ 0x134
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80094c8:	f8c4 3130 	str.w	r3, [r4, #304]	@ 0x130
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80094cc:	f000 fc4a 	bl	8009d64 <LoRaMacCryptoGetFCntUp>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	f040 8098 	bne.w	8009606 <LoRaMacMcpsRequest+0x302>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80094d6:	9b07      	ldr	r3, [sp, #28]
            MacCtx.McpsConfirm.AckReceived = false;
 80094d8:	f8a4 0440 	strh.w	r0, [r4, #1088]	@ 0x440
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80094dc:	a808      	add	r0, sp, #32
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80094de:	f8a4 311a 	strh.w	r3, [r4, #282]	@ 0x11a
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80094e2:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80094e6:	f000 f9e5 	bl	80098b4 <LoRaMacCommandsGetSizeSerializedCmds>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d164      	bne.n	80095b8 <LoRaMacMcpsRequest+0x2b4>
            if( macCmdsSize > 0 )
 80094ee:	9b08      	ldr	r3, [sp, #32]
 80094f0:	b1bb      	cbz	r3, 8009522 <LoRaMacMcpsRequest+0x21e>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80094f2:	f994 0545 	ldrsb.w	r0, [r4, #1349]	@ 0x545
 80094f6:	f7fd fd35 	bl	8006f64 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80094fa:	f894 323b 	ldrb.w	r3, [r4, #571]	@ 0x23b
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d063      	beq.n	80095ca <LoRaMacMcpsRequest+0x2c6>
 8009502:	9b08      	ldr	r3, [sp, #32]
 8009504:	2b0f      	cmp	r3, #15
 8009506:	d850      	bhi.n	80095aa <LoRaMacMcpsRequest+0x2a6>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009508:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 800950c:	a908      	add	r1, sp, #32
 800950e:	200f      	movs	r0, #15
 8009510:	f000 f9dc 	bl	80098cc <LoRaMacCommandsSerializeCmds>
 8009514:	2800      	cmp	r0, #0
 8009516:	d14f      	bne.n	80095b8 <LoRaMacMcpsRequest+0x2b4>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009518:	9b08      	ldr	r3, [sp, #32]
 800951a:	f363 0b03 	bfi	fp, r3, #0, #4
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800951e:	f884 b118 	strb.w	fp, [r4, #280]	@ 0x118
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009522:	9803      	ldr	r0, [sp, #12]
 8009524:	f7fd feec 	bl	8007300 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 8009528:	2800      	cmp	r0, #0
 800952a:	d146      	bne.n	80095ba <LoRaMacMcpsRequest+0x2b6>
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800952c:	9b06      	ldr	r3, [sp, #24]
        Nvm.MacGroup1.SrvAckRequested = false;
 800952e:	f884 0546 	strb.w	r0, [r4, #1350]	@ 0x546
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009532:	f8c4 3534 	str.w	r3, [r4, #1332]	@ 0x534
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009536:	f000 f99d 	bl	8009874 <LoRaMacCommandsRemoveNoneStickyCmds>
 800953a:	2800      	cmp	r0, #0
 800953c:	d169      	bne.n	8009612 <LoRaMacMcpsRequest+0x30e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800953e:	782b      	ldrb	r3, [r5, #0]
 8009540:	f884 343c 	strb.w	r3, [r4, #1084]	@ 0x43c
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8009544:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8009548:	f043 0301 	orr.w	r3, r3, #1
 800954c:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009550:	4b33      	ldr	r3, [pc, #204]	@ (8009620 <LoRaMacMcpsRequest+0x31c>)
 8009552:	f8d3 3488 	ldr.w	r3, [r3, #1160]	@ 0x488
 8009556:	612b      	str	r3, [r5, #16]
    return status;
 8009558:	e6dc      	b.n	8009314 <LoRaMacMcpsRequest+0x10>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800955a:	7beb      	ldrb	r3, [r5, #15]
 800955c:	2b08      	cmp	r3, #8
 800955e:	bf28      	it	cs
 8009560:	2308      	movcs	r3, #8
 8009562:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009566:	2304      	movs	r3, #4
 8009568:	f363 1747 	bfi	r7, r3, #5, #3
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800956c:	f895 9004 	ldrb.w	r9, [r5, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8009570:	f8d5 8008 	ldr.w	r8, [r5, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8009574:	89ae      	ldrh	r6, [r5, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009576:	f995 300e 	ldrsb.w	r3, [r5, #14]
            readyToSend = true;
 800957a:	468b      	mov	fp, r1
            break;
 800957c:	e6f7      	b.n	800936e <LoRaMacMcpsRequest+0x6a>
            MacCtx.AckTimeoutRetries = 1;
 800957e:	f884 2415 	strb.w	r2, [r4, #1045]	@ 0x415
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009582:	f8d5 8004 	ldr.w	r8, [r5, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8009586:	892e      	ldrh	r6, [r5, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8009588:	f995 300a 	ldrsb.w	r3, [r5, #10]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800958c:	f067 071f 	orn	r7, r7, #31
            readyToSend = true;
 8009590:	4693      	mov	fp, r2
    uint8_t fPort = 0;
 8009592:	f04f 0900 	mov.w	r9, #0
            break;
 8009596:	e6ea      	b.n	800936e <LoRaMacMcpsRequest+0x6a>
    switch( mcpsRequest->Type )
 8009598:	465b      	mov	r3, fp
 800959a:	46d8      	mov	r8, fp
 800959c:	46d9      	mov	r9, fp
 800959e:	e6e6      	b.n	800936e <LoRaMacMcpsRequest+0x6a>
            MacCtx.NodeAckRequested = true;
 80095a0:	f04f 0001 	mov.w	r0, #1
 80095a4:	f884 0418 	strb.w	r0, [r4, #1048]	@ 0x418
 80095a8:	e776      	b.n	8009498 <LoRaMacMcpsRequest+0x194>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80095aa:	f207 4286 	addw	r2, r7, #1158	@ 0x486
 80095ae:	a908      	add	r1, sp, #32
 80095b0:	f000 f98c 	bl	80098cc <LoRaMacCommandsSerializeCmds>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d0b4      	beq.n	8009522 <LoRaMacMcpsRequest+0x21e>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80095b8:	2013      	movs	r0, #19
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80095ba:	9b01      	ldr	r3, [sp, #4]
 80095bc:	f8a4 3544 	strh.w	r3, [r4, #1348]	@ 0x544
            MacCtx.NodeAckRequested = false;
 80095c0:	4b17      	ldr	r3, [pc, #92]	@ (8009620 <LoRaMacMcpsRequest+0x31c>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 80095c8:	e7c2      	b.n	8009550 <LoRaMacMcpsRequest+0x24c>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80095ca:	f207 4786 	addw	r7, r7, #1158	@ 0x486
 80095ce:	463a      	mov	r2, r7
 80095d0:	a908      	add	r1, sp, #32
 80095d2:	f000 f97b 	bl	80098cc <LoRaMacCommandsSerializeCmds>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d1ee      	bne.n	80095b8 <LoRaMacMcpsRequest+0x2b4>
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80095da:	9b08      	ldr	r3, [sp, #32]
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80095dc:	f884 012c 	strb.w	r0, [r4, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80095e0:	f8c4 7130 	str.w	r7, [r4, #304]	@ 0x130
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80095e4:	f884 3134 	strb.w	r3, [r4, #308]	@ 0x134
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80095e8:	e79b      	b.n	8009522 <LoRaMacMcpsRequest+0x21e>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80095ea:	f1b8 0f00 	cmp.w	r8, #0
 80095ee:	d098      	beq.n	8009522 <LoRaMacMcpsRequest+0x21e>
 80095f0:	2a00      	cmp	r2, #0
 80095f2:	d096      	beq.n	8009522 <LoRaMacMcpsRequest+0x21e>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80095f4:	4641      	mov	r1, r8
 80095f6:	1de0      	adds	r0, r4, #7
 80095f8:	f002 f87e 	bl	800b6f8 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80095fc:	f894 323b 	ldrb.w	r3, [r4, #571]	@ 0x23b
 8009600:	3301      	adds	r3, #1
 8009602:	80a3      	strh	r3, [r4, #4]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009604:	e78d      	b.n	8009522 <LoRaMacMcpsRequest+0x21e>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009606:	2012      	movs	r0, #18
 8009608:	e7d7      	b.n	80095ba <LoRaMacMcpsRequest+0x2b6>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800960a:	2002      	movs	r0, #2
 800960c:	e7d5      	b.n	80095ba <LoRaMacMcpsRequest+0x2b6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800960e:	2007      	movs	r0, #7
 8009610:	e7d6      	b.n	80095c0 <LoRaMacMcpsRequest+0x2bc>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009612:	2013      	movs	r0, #19
 8009614:	e7d4      	b.n	80095c0 <LoRaMacMcpsRequest+0x2bc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009616:	4650      	mov	r0, sl
 8009618:	e79a      	b.n	8009550 <LoRaMacMcpsRequest+0x24c>
        return LORAMAC_STATUS_BUSY;
 800961a:	2001      	movs	r0, #1
 800961c:	e67a      	b.n	8009314 <LoRaMacMcpsRequest+0x10>
 800961e:	bf00      	nop
 8009620:	2000065c 	.word	0x2000065c
 8009624:	20000ba0 	.word	0x20000ba0
 8009628:	20000662 	.word	0x20000662

0800962c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800962c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800962e:	4d07      	ldr	r5, [pc, #28]	@ (800964c <LoRaMacTestSetDutyCycleOn+0x20>)
    verify.DutyCycle = enable;
 8009630:	f88d 0004 	strb.w	r0, [sp, #4]
{
 8009634:	4604      	mov	r4, r0
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8009636:	220f      	movs	r2, #15
 8009638:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
 800963c:	a901      	add	r1, sp, #4
 800963e:	f000 fee6 	bl	800a40e <RegionVerify>
 8009642:	b108      	cbz	r0, 8009648 <LoRaMacTestSetDutyCycleOn+0x1c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8009644:	f885 460c 	strb.w	r4, [r5, #1548]	@ 0x60c
    }
}
 8009648:	b003      	add	sp, #12
 800964a:	bd30      	pop	{r4, r5, pc}
 800964c:	2000065c 	.word	0x2000065c

08009650 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	b08b      	sub	sp, #44	@ 0x2c
 8009656:	4604      	mov	r4, r0
 8009658:	9201      	str	r2, [sp, #4]
    if( adrNext->Version.Fields.Minor == 0 )
 800965a:	7882      	ldrb	r2, [r0, #2]
{
 800965c:	468a      	mov	sl, r1
 800965e:	4699      	mov	r9, r3
    if( adrNext->Version.Fields.Minor == 0 )
 8009660:	2a00      	cmp	r2, #0
 8009662:	d161      	bne.n	8009728 <LoRaMacAdrCalcNext+0xd8>
    if( adrNext->AdrEnabled == true )
 8009664:	7946      	ldrb	r6, [r0, #5]
    *adrAckCounter = adrNext->AdrAckCounter;
 8009666:	6881      	ldr	r1, [r0, #8]
    int8_t datarate = adrNext->Datarate;
 8009668:	f990 3010 	ldrsb.w	r3, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800966c:	f990 8011 	ldrsb.w	r8, [r0, #17]
    *adrAckCounter = adrNext->AdrAckCounter;
 8009670:	f8c9 1000 	str.w	r1, [r9]
    if( adrNext->AdrEnabled == true )
 8009674:	2e00      	cmp	r6, #0
 8009676:	d055      	beq.n	8009724 <LoRaMacAdrCalcNext+0xd4>
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009678:	7c81      	ldrb	r1, [r0, #18]
 800967a:	f88d 1016 	strb.w	r1, [sp, #22]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800967e:	7cc0      	ldrb	r0, [r0, #19]
        getPhy.Attribute = PHY_MIN_TX_DR;
 8009680:	f04f 0b02 	mov.w	fp, #2
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009684:	a905      	add	r1, sp, #20
 8009686:	e9cd 3202 	strd	r3, r2, [sp, #8]
        getPhy.Attribute = PHY_MIN_TX_DR;
 800968a:	f88d b014 	strb.w	fp, [sp, #20]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800968e:	f000 fea8 	bl	800a3e2 <RegionGetPhyParam>
        datarate = MAX( datarate, minTxDatarate );
 8009692:	9b02      	ldr	r3, [sp, #8]
        minTxDatarate = phyParam.Value;
 8009694:	b247      	sxtb	r7, r0
        datarate = MAX( datarate, minTxDatarate );
 8009696:	42bb      	cmp	r3, r7
 8009698:	461d      	mov	r5, r3
 800969a:	bfb8      	it	lt
 800969c:	463d      	movlt	r5, r7
        if( datarate == minTxDatarate )
 800969e:	42bb      	cmp	r3, r7
 80096a0:	dc0c      	bgt.n	80096bc <LoRaMacAdrCalcNext+0x6c>
            *adrAckCounter = 0;
 80096a2:	9a03      	ldr	r2, [sp, #12]
 80096a4:	f8c9 2000 	str.w	r2, [r9]
                        adrAckReq = false;
 80096a8:	2600      	movs	r6, #0
    *txPowOut = txPower;
 80096aa:	9b01      	ldr	r3, [sp, #4]
    *drOut = datarate;
 80096ac:	f88a 5000 	strb.w	r5, [sl]
    *txPowOut = txPower;
 80096b0:	f883 8000 	strb.w	r8, [r3]
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
}
 80096b4:	4630      	mov	r0, r6
 80096b6:	b00b      	add	sp, #44	@ 0x2c
 80096b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80096bc:	68a2      	ldr	r2, [r4, #8]
 80096be:	89a1      	ldrh	r1, [r4, #12]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80096c0:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80096c2:	428a      	cmp	r2, r1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80096c4:	440b      	add	r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80096c6:	bf34      	ite	cc
 80096c8:	2600      	movcc	r6, #0
 80096ca:	2601      	movcs	r6, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d3ec      	bcc.n	80096aa <LoRaMacAdrCalcNext+0x5a>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80096d0:	2308      	movs	r3, #8
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80096d2:	a905      	add	r1, sp, #20
 80096d4:	7ce0      	ldrb	r0, [r4, #19]
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80096d6:	f88d 3014 	strb.w	r3, [sp, #20]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80096da:	f000 fe82 	bl	800a3e2 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80096de:	89e2      	ldrh	r2, [r4, #14]
 80096e0:	68a3      	ldr	r3, [r4, #8]
 80096e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80096e6:	fb02 3311 	mls	r3, r2, r1, r3
 80096ea:	2b01      	cmp	r3, #1
                txPower = phyParam.Value;
 80096ec:	fa4f f880 	sxtb.w	r8, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80096f0:	d1db      	bne.n	80096aa <LoRaMacAdrCalcNext+0x5a>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80096f2:	2322      	movs	r3, #34	@ 0x22
 80096f4:	f88d 3014 	strb.w	r3, [sp, #20]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80096f8:	7ce0      	ldrb	r0, [r4, #19]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80096fa:	7ca3      	ldrb	r3, [r4, #18]
                    getPhy.Datarate = datarate;
 80096fc:	f88d 5015 	strb.w	r5, [sp, #21]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009700:	a905      	add	r1, sp, #20
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009702:	f88d 3016 	strb.w	r3, [sp, #22]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009706:	f000 fe6c 	bl	800a3e2 <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800970a:	b245      	sxtb	r5, r0
                    if( datarate == minTxDatarate )
 800970c:	42af      	cmp	r7, r5
 800970e:	d1cc      	bne.n	80096aa <LoRaMacAdrCalcNext+0x5a>
                        if( adrNext->UpdateChanMask == true )
 8009710:	7923      	ldrb	r3, [r4, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0c8      	beq.n	80096a8 <LoRaMacAdrCalcNext+0x58>
                            RegionInitDefaults( adrNext->Region, &params );
 8009716:	7ce0      	ldrb	r0, [r4, #19]
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8009718:	f88d b024 	strb.w	fp, [sp, #36]	@ 0x24
                            RegionInitDefaults( adrNext->Region, &params );
 800971c:	a907      	add	r1, sp, #28
 800971e:	f000 fe70 	bl	800a402 <RegionInitDefaults>
 8009722:	e7c1      	b.n	80096a8 <LoRaMacAdrCalcNext+0x58>
    int8_t datarate = adrNext->Datarate;
 8009724:	461d      	mov	r5, r3
 8009726:	e7c0      	b.n	80096aa <LoRaMacAdrCalcNext+0x5a>
    return false;
 8009728:	2600      	movs	r6, #0
 800972a:	e7c3      	b.n	80096b4 <LoRaMacAdrCalcNext+0x64>

0800972c <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800972c:	4770      	bx	lr

0800972e <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800972e:	4770      	bx	lr

08009730 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
 8009730:	4770      	bx	lr

08009732 <LoRaMacClassBSetMulticastSlotState>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
 8009732:	4770      	bx	lr

08009734 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009734:	2000      	movs	r0, #0
 8009736:	4770      	bx	lr

08009738 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009738:	4770      	bx	lr

0800973a <LoRaMacClassBPingSlotTimerEvent>:
        TimerStart( &Ctx.BeaconTimer );
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
 800973a:	4770      	bx	lr

0800973c <LoRaMacClassBMulticastSlotTimerEvent>:
        }
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
 800973c:	4770      	bx	lr

0800973e <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800973e:	2000      	movs	r0, #0
 8009740:	4770      	bx	lr

08009742 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
 8009742:	2000      	movs	r0, #0
 8009744:	4770      	bx	lr

08009746 <LoRaMacClassBIsPingExpected>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsPingExpected( void )
 8009746:	2000      	movs	r0, #0
 8009748:	4770      	bx	lr

0800974a <LoRaMacClassBIsMulticastExpected>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsMulticastExpected( void )
 800974a:	2000      	movs	r0, #0
 800974c:	4770      	bx	lr

0800974e <LoRaMacClassBIsBeaconModeActive>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
 800974e:	2000      	movs	r0, #0
 8009750:	4770      	bx	lr

08009752 <LoRaMacClassBSetPingSlotInfo>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
 8009752:	4770      	bx	lr

08009754 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009754:	4770      	bx	lr

08009756 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
 8009756:	4770      	bx	lr

08009758 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009758:	2002      	movs	r0, #2
 800975a:	4770      	bx	lr

0800975c <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800975c:	2002      	movs	r0, #2
 800975e:	4770      	bx	lr

08009760 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
 8009760:	2002      	movs	r0, #2
 8009762:	4770      	bx	lr

08009764 <LoRaMacClassBPingSlotInfoAns>:
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBPingSlotInfoAns( void )
 8009764:	4770      	bx	lr

08009766 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009766:	2000      	movs	r0, #0
 8009768:	4770      	bx	lr

0800976a <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800976a:	4770      	bx	lr

0800976c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
 800976c:	4770      	bx	lr

0800976e <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800976e:	2000      	movs	r0, #0
 8009770:	4770      	bx	lr

08009772 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009772:	2000      	movs	r0, #0
 8009774:	4770      	bx	lr

08009776 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
 8009776:	4770      	bx	lr

08009778 <LoRaMacClassBProcess>:
        multicastChannel->PingPeriod = CalcPingPeriod( multicastChannel->PingNb );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
 8009778:	4770      	bx	lr
	...

0800977c <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800977c:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800977e:	4c05      	ldr	r4, [pc, #20]	@ (8009794 <LoRaMacCommandsInit+0x18>)
 8009780:	22fc      	movs	r2, #252	@ 0xfc
 8009782:	4620      	mov	r0, r4
 8009784:	2100      	movs	r1, #0
 8009786:	f001 ffcb 	bl	800b720 <memset1>
    list->First = NULL;
 800978a:	2000      	movs	r0, #0
    list->Last = NULL;
 800978c:	e9c4 0000 	strd	r0, r0, [r4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 8009790:	bd10      	pop	{r4, pc}
 8009792:	bf00      	nop
 8009794:	20000ec8 	.word	0x20000ec8

08009798 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8009798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979c:	4680      	mov	r8, r0
 800979e:	4616      	mov	r6, r2
    if( payload == NULL )
 80097a0:	2900      	cmp	r1, #0
 80097a2:	d037      	beq.n	8009814 <LoRaMacCommandsAddCmd+0x7c>
 80097a4:	4c1c      	ldr	r4, [pc, #112]	@ (8009818 <LoRaMacCommandsAddCmd+0x80>)
 80097a6:	230f      	movs	r3, #15
 80097a8:	4622      	mov	r2, r4
 80097aa:	f104 0010 	add.w	r0, r4, #16
        if( mem[size] != 0x00 )
 80097ae:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 80097b2:	bb37      	cbnz	r7, 8009802 <LoRaMacCommandsAddCmd+0x6a>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80097b4:	4282      	cmp	r2, r0
 80097b6:	d1fa      	bne.n	80097ae <LoRaMacCommandsAddCmd+0x16>
    if( list->First == NULL )
 80097b8:	4d18      	ldr	r5, [pc, #96]	@ (800981c <LoRaMacCommandsAddCmd+0x84>)
 80097ba:	682b      	ldr	r3, [r5, #0]
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80097bc:	3401      	adds	r4, #1
    if( list->First == NULL )
 80097be:	b903      	cbnz	r3, 80097c2 <LoRaMacCommandsAddCmd+0x2a>
        list->First = element;
 80097c0:	602c      	str	r4, [r5, #0]
    if( list->Last )
 80097c2:	686b      	ldr	r3, [r5, #4]
 80097c4:	b103      	cbz	r3, 80097c8 <LoRaMacCommandsAddCmd+0x30>
        list->Last->Next = element;
 80097c6:	601c      	str	r4, [r3, #0]
    element->Next = NULL;
 80097c8:	2300      	movs	r3, #0
 80097ca:	6023      	str	r3, [r4, #0]
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 80097cc:	60a6      	str	r6, [r4, #8]
    list->Last = element;
 80097ce:	606c      	str	r4, [r5, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80097d0:	b2b2      	uxth	r2, r6
    newCmd->CID = cid;
 80097d2:	f884 8004 	strb.w	r8, [r4, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80097d6:	1d60      	adds	r0, r4, #5
 80097d8:	f001 ff8e 	bl	800b6f8 <memcpy1>
    switch( cid )
 80097dc:	f1b8 0f05 	cmp.w	r8, #5
 80097e0:	d016      	beq.n	8009810 <LoRaMacCommandsAddCmd+0x78>
 80097e2:	f1a8 0008 	sub.w	r0, r8, #8
 80097e6:	2802      	cmp	r0, #2
 80097e8:	bf8c      	ite	hi
 80097ea:	2000      	movhi	r0, #0
 80097ec:	2001      	movls	r0, #1
    newCmd->IsSticky = IsSticky( cid );

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80097ee:	f8d5 30f8 	ldr.w	r3, [r5, #248]	@ 0xf8
    newCmd->IsSticky = IsSticky( cid );
 80097f2:	7320      	strb	r0, [r4, #12]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80097f4:	3301      	adds	r3, #1
 80097f6:	4433      	add	r3, r6
 80097f8:	f8c5 30f8 	str.w	r3, [r5, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
}
 80097fc:	4638      	mov	r0, r7
 80097fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 8009802:	3b01      	subs	r3, #1
 8009804:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8009808:	4604      	mov	r4, r0
 800980a:	d1cd      	bne.n	80097a8 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800980c:	2702      	movs	r7, #2
 800980e:	e7f5      	b.n	80097fc <LoRaMacCommandsAddCmd+0x64>
            return true;
 8009810:	2001      	movs	r0, #1
 8009812:	e7ec      	b.n	80097ee <LoRaMacCommandsAddCmd+0x56>
        return LORAMAC_COMMANDS_ERROR_NPE;
 8009814:	2701      	movs	r7, #1
 8009816:	e7f1      	b.n	80097fc <LoRaMacCommandsAddCmd+0x64>
 8009818:	20000ecf 	.word	0x20000ecf
 800981c:	20000ec8 	.word	0x20000ec8

08009820 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8009820:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 8009822:	b318      	cbz	r0, 800986c <LoRaMacCommandsRemoveCmd+0x4c>
    curElement = list->First;
 8009824:	4a12      	ldr	r2, [pc, #72]	@ (8009870 <LoRaMacCommandsRemoveCmd+0x50>)
 8009826:	6813      	ldr	r3, [r2, #0]
    if( element != curElement )
 8009828:	4298      	cmp	r0, r3
 800982a:	d104      	bne.n	8009836 <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 800982c:	6803      	ldr	r3, [r0, #0]
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	2300      	movs	r3, #0
 8009832:	e005      	b.n	8009840 <LoRaMacCommandsRemoveCmd+0x20>
 8009834:	460b      	mov	r3, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0fa      	beq.n	8009830 <LoRaMacCommandsRemoveCmd+0x10>
 800983a:	6819      	ldr	r1, [r3, #0]
 800983c:	4288      	cmp	r0, r1
 800983e:	d1f9      	bne.n	8009834 <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 8009840:	6851      	ldr	r1, [r2, #4]
 8009842:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 8009844:	bf08      	it	eq
 8009846:	6053      	streq	r3, [r2, #4]
    if( PrevElement != NULL )
 8009848:	b10b      	cbz	r3, 800984e <LoRaMacCommandsRemoveCmd+0x2e>
        PrevElement->Next = element->Next;
 800984a:	6801      	ldr	r1, [r0, #0]
 800984c:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800984e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
 8009852:	6881      	ldr	r1, [r0, #8]
 8009854:	3b01      	subs	r3, #1
    element->Next = NULL;
 8009856:	2400      	movs	r4, #0
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8009858:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 800985a:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800985c:	4621      	mov	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800985e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8009862:	2210      	movs	r2, #16
 8009864:	f001 ff5c 	bl	800b720 <memset1>
    return true;
 8009868:	4620      	mov	r0, r4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800986a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800986c:	2001      	movs	r0, #1
 800986e:	e7fc      	b.n	800986a <LoRaMacCommandsRemoveCmd+0x4a>
 8009870:	20000ec8 	.word	0x20000ec8

08009874 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8009874:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8009876:	4b05      	ldr	r3, [pc, #20]	@ (800988c <LoRaMacCommandsRemoveNoneStickyCmds+0x18>)
 8009878:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800987a:	b900      	cbnz	r0, 800987e <LoRaMacCommandsRemoveNoneStickyCmds+0xa>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800987c:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 800987e:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 8009880:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 8009882:	b90b      	cbnz	r3, 8009888 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            LoRaMacCommandsRemoveCmd( curElement );
 8009884:	f7ff ffcc 	bl	8009820 <LoRaMacCommandsRemoveCmd>
{
 8009888:	4620      	mov	r0, r4
 800988a:	e7f6      	b.n	800987a <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800988c:	20000ec8 	.word	0x20000ec8

08009890 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8009890:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8009892:	4b07      	ldr	r3, [pc, #28]	@ (80098b0 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>)
 8009894:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8009896:	b900      	cbnz	r0, 800989a <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8009898:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
 800989a:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 800989c:	6804      	ldr	r4, [r0, #0]
    switch( cid )
 800989e:	2b05      	cmp	r3, #5
 80098a0:	d002      	beq.n	80098a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x18>
 80098a2:	3b08      	subs	r3, #8
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d801      	bhi.n	80098ac <LoRaMacCommandsRemoveStickyAnsCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
 80098a8:	f7ff ffba 	bl	8009820 <LoRaMacCommandsRemoveCmd>
{
 80098ac:	4620      	mov	r0, r4
 80098ae:	e7f2      	b.n	8009896 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 80098b0:	20000ec8 	.word	0x20000ec8

080098b4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 80098b4:	b128      	cbz	r0, 80098c2 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80098b6:	4b04      	ldr	r3, [pc, #16]	@ (80098c8 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 80098b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80098bc:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80098be:	2000      	movs	r0, #0
 80098c0:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 80098c2:	2001      	movs	r0, #1
}
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	20000ec8 	.word	0x20000ec8

080098cc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80098cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	4607      	mov	r7, r0
 80098d2:	460e      	mov	r6, r1
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80098d4:	4615      	mov	r5, r2
 80098d6:	b342      	cbz	r2, 800992a <LoRaMacCommandsSerializeCmds+0x5e>
 80098d8:	b339      	cbz	r1, 800992a <LoRaMacCommandsSerializeCmds+0x5e>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80098da:	4b15      	ldr	r3, [pc, #84]	@ (8009930 <LoRaMacCommandsSerializeCmds+0x64>)
 80098dc:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 80098de:	2300      	movs	r3, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 80098e0:	b92c      	cbnz	r4, 80098ee <LoRaMacCommandsSerializeCmds+0x22>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7ff ffe6 	bl	80098b4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80098e8:	2000      	movs	r0, #0
}
 80098ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80098ee:	68a2      	ldr	r2, [r4, #8]
 80098f0:	1af9      	subs	r1, r7, r3
 80098f2:	3201      	adds	r2, #1
 80098f4:	4291      	cmp	r1, r2
 80098f6:	d315      	bcc.n	8009924 <LoRaMacCommandsSerializeCmds+0x58>
            buffer[itr++] = curElement->CID;
 80098f8:	7922      	ldrb	r2, [r4, #4]
 80098fa:	54ea      	strb	r2, [r5, r3]
 80098fc:	1c58      	adds	r0, r3, #1
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80098fe:	8922      	ldrh	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
 8009900:	fa5f f880 	uxtb.w	r8, r0
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8009904:	1d61      	adds	r1, r4, #5
 8009906:	fa55 f080 	uxtab	r0, r5, r0
 800990a:	f001 fef5 	bl	800b6f8 <memcpy1>
            itr += curElement->PayloadSize;
 800990e:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 8009910:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 8009912:	4498      	add	r8, r3
 8009914:	fa5f f388 	uxtb.w	r3, r8
        curElement = curElement->Next;
 8009918:	e7e2      	b.n	80098e0 <LoRaMacCommandsSerializeCmds+0x14>
        LoRaMacCommandsRemoveCmd( curElement );
 800991a:	4620      	mov	r0, r4
        nextElement = curElement->Next;
 800991c:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800991e:	f7ff ff7f 	bl	8009820 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8009922:	462c      	mov	r4, r5
    while( curElement != NULL )
 8009924:	2c00      	cmp	r4, #0
 8009926:	d1f8      	bne.n	800991a <LoRaMacCommandsSerializeCmds+0x4e>
 8009928:	e7db      	b.n	80098e2 <LoRaMacCommandsSerializeCmds+0x16>
        return LORAMAC_COMMANDS_ERROR_NPE;
 800992a:	2001      	movs	r0, #1
 800992c:	e7dd      	b.n	80098ea <LoRaMacCommandsSerializeCmds+0x1e>
 800992e:	bf00      	nop
 8009930:	20000ec8 	.word	0x20000ec8

08009934 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 8009934:	b160      	cbz	r0, 8009950 <LoRaMacCommandsStickyCmdsPending+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8009936:	4b07      	ldr	r3, [pc, #28]	@ (8009954 <LoRaMacCommandsStickyCmdsPending+0x20>)

    *cmdsPending = false;
 8009938:	2200      	movs	r2, #0
    curElement = CommandsCtx.MacCommandList.First;
 800993a:	681b      	ldr	r3, [r3, #0]
    *cmdsPending = false;
 800993c:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800993e:	b11b      	cbz	r3, 8009948 <LoRaMacCommandsStickyCmdsPending+0x14>
    {
        if( curElement->IsSticky == true )
 8009940:	7b1a      	ldrb	r2, [r3, #12]
 8009942:	b11a      	cbz	r2, 800994c <LoRaMacCommandsStickyCmdsPending+0x18>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8009944:	2301      	movs	r3, #1
 8009946:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8009948:	2000      	movs	r0, #0
 800994a:	4770      	bx	lr
        }
        curElement = curElement->Next;
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	e7f6      	b.n	800993e <LoRaMacCommandsStickyCmdsPending+0xa>
        return LORAMAC_COMMANDS_ERROR_NPE;
 8009950:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8009952:	4770      	bx	lr
 8009954:	20000ec8 	.word	0x20000ec8

08009958 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 8009958:	3802      	subs	r0, #2
 800995a:	b2c0      	uxtb	r0, r0
 800995c:	2811      	cmp	r0, #17
 800995e:	bf9a      	itte	ls
 8009960:	4b01      	ldrls	r3, [pc, #4]	@ (8009968 <LoRaMacCommandsGetCmdSize+0x10>)
 8009962:	5c18      	ldrbls	r0, [r3, r0]
{
 8009964:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 8009966:	4770      	bx	lr
 8009968:	0800dd10 	.word	0x0800dd10

0800996c <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800996c:	b530      	push	{r4, r5, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800996e:	4b0b      	ldr	r3, [pc, #44]	@ (800999c <GetElement.constprop.0+0x30>)
 8009970:	f893 2020 	ldrb.w	r2, [r3, #32]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 8009974:	4604      	mov	r4, r0
 8009976:	4608      	mov	r0, r1
    if( count == 0 )
 8009978:	b172      	cbz	r2, 8009998 <GetElement.constprop.0+0x2c>
 800997a:	2100      	movs	r1, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800997c:	331c      	adds	r3, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800997e:	7805      	ldrb	r5, [r0, #0]
 8009980:	42a5      	cmp	r5, r4
 8009982:	d008      	beq.n	8009996 <GetElement.constprop.0+0x2a>
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8009984:	3101      	adds	r1, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8009986:	4298      	cmp	r0, r3
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8009988:	b2cd      	uxtb	r5, r1
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800998a:	bf0c      	ite	eq
 800998c:	4804      	ldreq	r0, [pc, #16]	@ (80099a0 <GetElement.constprop.0+0x34>)
        bufferPointer++;
 800998e:	3004      	addne	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8009990:	42aa      	cmp	r2, r5
 8009992:	d8f4      	bhi.n	800997e <GetElement.constprop.0+0x12>
        return NULL;
 8009994:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 8009996:	bd30      	pop	{r4, r5, pc}
        return NULL;
 8009998:	4610      	mov	r0, r2
 800999a:	e7fc      	b.n	8009996 <GetElement.constprop.0+0x2a>
 800999c:	20000fc4 	.word	0x20000fc4
 80099a0:	20000fd0 	.word	0x20000fd0

080099a4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80099a4:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 80099a6:	4c08      	ldr	r4, [pc, #32]	@ (80099c8 <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80099a8:	2300      	movs	r3, #0
    ConfirmQueueCtx.Primitives = primitives;
 80099aa:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80099ac:	2214      	movs	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80099ae:	f104 000c 	add.w	r0, r4, #12
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80099b2:	21ff      	movs	r1, #255	@ 0xff
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80099b4:	f884 3020 	strb.w	r3, [r4, #32]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80099b8:	e9c4 0001 	strd	r0, r0, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80099bc:	f001 feb0 	bl	800b720 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 80099c6:	bd10      	pop	{r4, pc}
 80099c8:	20000fc4 	.word	0x20000fc4

080099cc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80099cc:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80099ce:	4a0e      	ldr	r2, [pc, #56]	@ (8009a08 <LoRaMacConfirmQueueAdd+0x3c>)
 80099d0:	f892 1020 	ldrb.w	r1, [r2, #32]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80099d4:	2904      	cmp	r1, #4
 80099d6:	d815      	bhi.n	8009a04 <LoRaMacConfirmQueueAdd+0x38>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80099d8:	6893      	ldr	r3, [r2, #8]
 80099da:	7804      	ldrb	r4, [r0, #0]
 80099dc:	701c      	strb	r4, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80099de:	7844      	ldrb	r4, [r0, #1]
 80099e0:	705c      	strb	r4, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80099e2:	78c0      	ldrb	r0, [r0, #3]
 80099e4:	70d8      	strb	r0, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80099e6:	3101      	adds	r1, #1
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80099e8:	2000      	movs	r0, #0
 80099ea:	7098      	strb	r0, [r3, #2]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80099ec:	f882 1020 	strb.w	r1, [r2, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80099f0:	f102 011c 	add.w	r1, r2, #28
 80099f4:	428b      	cmp	r3, r1
        bufferPointer++;
 80099f6:	bf14      	ite	ne
 80099f8:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80099fa:	f102 030c 	addeq.w	r3, r2, #12
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80099fe:	6093      	str	r3, [r2, #8]

    return true;
 8009a00:	2001      	movs	r0, #1
}
 8009a02:	bd10      	pop	{r4, pc}
        return false;
 8009a04:	2000      	movs	r0, #0
 8009a06:	e7fc      	b.n	8009a02 <LoRaMacConfirmQueueAdd+0x36>
 8009a08:	20000fc4 	.word	0x20000fc4

08009a0c <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8009a0c:	4b09      	ldr	r3, [pc, #36]	@ (8009a34 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 8009a0e:	f893 0020 	ldrb.w	r0, [r3, #32]
    if( count == 0 )
 8009a12:	b168      	cbz	r0, 8009a30 <LoRaMacConfirmQueueRemoveFirst+0x24>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8009a14:	685a      	ldr	r2, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8009a16:	f103 011c 	add.w	r1, r3, #28
 8009a1a:	428a      	cmp	r2, r1
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8009a1c:	f100 30ff 	add.w	r0, r0, #4294967295
        bufferPointer++;
 8009a20:	bf14      	ite	ne
 8009a22:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8009a24:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8009a28:	f883 0020 	strb.w	r0, [r3, #32]
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8009a2c:	605a      	str	r2, [r3, #4]

    return true;
 8009a2e:	2001      	movs	r0, #1
}
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	20000fc4 	.word	0x20000fc4

08009a38 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8009a38:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8009a3a:	4b07      	ldr	r3, [pc, #28]	@ (8009a58 <LoRaMacConfirmQueueSetStatus+0x20>)
    if( count == 0 )
 8009a3c:	f893 2020 	ldrb.w	r2, [r3, #32]
{
 8009a40:	4604      	mov	r4, r0
 8009a42:	4608      	mov	r0, r1
    if( count == 0 )
 8009a44:	b132      	cbz	r2, 8009a54 <LoRaMacConfirmQueueSetStatus+0x1c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8009a46:	6859      	ldr	r1, [r3, #4]
 8009a48:	f7ff ff90 	bl	800996c <GetElement.constprop.0>
        if( element != NULL )
 8009a4c:	b110      	cbz	r0, 8009a54 <LoRaMacConfirmQueueSetStatus+0x1c>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 8009a4e:	2301      	movs	r3, #1
            element->Status = status;
 8009a50:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 8009a52:	7083      	strb	r3, [r0, #2]
        }
    }
}
 8009a54:	bd10      	pop	{r4, pc}
 8009a56:	bf00      	nop
 8009a58:	20000fc4 	.word	0x20000fc4

08009a5c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8009a5c:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8009a5e:	4b06      	ldr	r3, [pc, #24]	@ (8009a78 <LoRaMacConfirmQueueGetStatus+0x1c>)
    if( count == 0 )
 8009a60:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009a64:	b12a      	cbz	r2, 8009a72 <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8009a66:	6859      	ldr	r1, [r3, #4]
 8009a68:	f7ff ff80 	bl	800996c <GetElement.constprop.0>
        if( element != NULL )
 8009a6c:	b108      	cbz	r0, 8009a72 <LoRaMacConfirmQueueGetStatus+0x16>
        {
            return element->Status;
 8009a6e:	7840      	ldrb	r0, [r0, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
 8009a70:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009a72:	2001      	movs	r0, #1
 8009a74:	e7fc      	b.n	8009a70 <LoRaMacConfirmQueueGetStatus+0x14>
 8009a76:	bf00      	nop
 8009a78:	20000fc4 	.word	0x20000fc4

08009a7c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8009a7c:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8009a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8009aa8 <LoRaMacConfirmQueueSetStatusCmn+0x2c>)
    if( count == 0 )
 8009a80:	f892 1020 	ldrb.w	r1, [r2, #32]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8009a84:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8009a86:	f882 0021 	strb.w	r0, [r2, #33]	@ 0x21
    if( count == 0 )
 8009a8a:	b161      	cbz	r1, 8009aa6 <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 8009a8c:	6891      	ldr	r1, [r2, #8]
                element->ReadyToHandle = true;
 8009a8e:	2401      	movs	r4, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8009a90:	321c      	adds	r2, #28
            if( element->RestrictCommonReadyToHandle == false )
 8009a92:	78dd      	ldrb	r5, [r3, #3]
            element->Status = status;
 8009a94:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 8009a96:	b905      	cbnz	r5, 8009a9a <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 8009a98:	709c      	strb	r4, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8009a9a:	4293      	cmp	r3, r2
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8009a9c:	bf0c      	ite	eq
 8009a9e:	4b03      	ldreq	r3, [pc, #12]	@ (8009aac <LoRaMacConfirmQueueSetStatusCmn+0x30>)
        bufferPointer++;
 8009aa0:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 8009aa2:	4299      	cmp	r1, r3
 8009aa4:	d1f5      	bne.n	8009a92 <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 8009aa6:	bd30      	pop	{r4, r5, pc}
 8009aa8:	20000fc4 	.word	0x20000fc4
 8009aac:	20000fd0 	.word	0x20000fd0

08009ab0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8009ab0:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8009ab2:	4b04      	ldr	r3, [pc, #16]	@ (8009ac4 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 8009ab4:	6859      	ldr	r1, [r3, #4]
 8009ab6:	f7ff ff59 	bl	800996c <GetElement.constprop.0>
    {
        return true;
    }
    return false;
}
 8009aba:	3800      	subs	r0, #0
 8009abc:	bf18      	it	ne
 8009abe:	2001      	movne	r0, #1
 8009ac0:	bd08      	pop	{r3, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20000fc4 	.word	0x20000fc4

08009ac8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8009ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8009aca:	4e13      	ldr	r6, [pc, #76]	@ (8009b18 <LoRaMacConfirmQueueHandleCb+0x50>)
 8009acc:	f896 7020 	ldrb.w	r7, [r6, #32]
{
 8009ad0:	4604      	mov	r4, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8009ad2:	2500      	movs	r5, #0
 8009ad4:	b2eb      	uxtb	r3, r5
 8009ad6:	429f      	cmp	r7, r3
 8009ad8:	d801      	bhi.n	8009ade <LoRaMacConfirmQueueHandleCb+0x16>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 8009ada:	b003      	add	sp, #12
 8009adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8009ade:	6873      	ldr	r3, [r6, #4]
 8009ae0:	7819      	ldrb	r1, [r3, #0]
 8009ae2:	7021      	strb	r1, [r4, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8009ae4:	785a      	ldrb	r2, [r3, #1]
 8009ae6:	7062      	strb	r2, [r4, #1]
        if( readyToHandle == true )
 8009ae8:	7898      	ldrb	r0, [r3, #2]
 8009aea:	b138      	cbz	r0, 8009afc <LoRaMacConfirmQueueHandleCb+0x34>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8009aec:	6833      	ldr	r3, [r6, #0]
 8009aee:	4620      	mov	r0, r4
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 8009af4:	f7ff ff8a 	bl	8009a0c <LoRaMacConfirmQueueRemoveFirst>
    for( uint8_t i = 0; i < nbElements; i++ )
 8009af8:	3501      	adds	r5, #1
 8009afa:	e7eb      	b.n	8009ad4 <LoRaMacConfirmQueueHandleCb+0xc>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8009afc:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8009afe:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8009b02:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8009b06:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacConfirmQueueRemoveFirst( );
 8009b0a:	f7ff ff7f 	bl	8009a0c <LoRaMacConfirmQueueRemoveFirst>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8009b0e:	a801      	add	r0, sp, #4
 8009b10:	f7ff ff5c 	bl	80099cc <LoRaMacConfirmQueueAdd>
 8009b14:	e7f0      	b.n	8009af8 <LoRaMacConfirmQueueHandleCb+0x30>
 8009b16:	bf00      	nop
 8009b18:	20000fc4 	.word	0x20000fc4

08009b1c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 8009b1c:	4b01      	ldr	r3, [pc, #4]	@ (8009b24 <LoRaMacConfirmQueueGetCnt+0x8>)
 8009b1e:	f893 0020 	ldrb.w	r0, [r3, #32]
 8009b22:	4770      	bx	lr
 8009b24:	20000fc4 	.word	0x20000fc4

08009b28 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8009b28:	4b03      	ldr	r3, [pc, #12]	@ (8009b38 <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8009b2a:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
 8009b2e:	2804      	cmp	r0, #4
 8009b30:	bf94      	ite	ls
 8009b32:	2000      	movls	r0, #0
 8009b34:	2001      	movhi	r0, #1
 8009b36:	4770      	bx	lr
 8009b38:	20000fc4 	.word	0x20000fc4

08009b3c <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8009b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t compBase[16] = { 0 };
 8009b3e:	2400      	movs	r4, #0
 8009b40:	e9cd 4402 	strd	r4, r4, [sp, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8009b44:	1e44      	subs	r4, r0, #1
 8009b46:	f88d 4000 	strb.w	r4, [sp]
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8009b4a:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8009b4e:	0a0c      	lsrs	r4, r1, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8009b50:	f8ad 2004 	strh.w	r2, [sp, #4]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8009b54:	0c09      	lsrs	r1, r1, #16
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8009b56:	0c12      	lsrs	r2, r2, #16
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8009b58:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8009b5c:	f88d 2006 	strb.w	r2, [sp, #6]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8009b60:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8009b64:	4602      	mov	r2, r0
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8009b66:	0a1b      	lsrs	r3, r3, #8
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8009b68:	2101      	movs	r1, #1
 8009b6a:	4668      	mov	r0, sp
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8009b6c:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8009b70:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8009b74:	f7fc fbfd 	bl	8006372 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009b78:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8009b7a:	bf18      	it	ne
 8009b7c:	200f      	movne	r0, #15
 8009b7e:	b004      	add	sp, #16
 8009b80:	bd10      	pop	{r4, pc}

08009b82 <PayloadEncrypt>:
{
 8009b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	4690      	mov	r8, r2
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    if( buffer == 0 )
 8009b8e:	4607      	mov	r7, r0
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d047      	beq.n	8009c24 <PayloadEncrypt+0xa2>
    uint8_t sBlock[16] = { 0 };
 8009b94:	2400      	movs	r4, #0
    aBlock[0] = 0x01;
 8009b96:	2101      	movs	r1, #1
    uint8_t aBlock[16] = { 0 };
 8009b98:	e9cd 4404 	strd	r4, r4, [sp, #16]
    aBlock[0] = 0x01;
 8009b9c:	f88d 1010 	strb.w	r1, [sp, #16]
    aBlock[5] = dir;
 8009ba0:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8009ba4:	f88d 1015 	strb.w	r1, [sp, #21]
    aBlock[6] = address & 0xFF;
 8009ba8:	f8ad 3016 	strh.w	r3, [sp, #22]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8009bac:	0c19      	lsrs	r1, r3, #16
    uint8_t sBlock[16] = { 0 };
 8009bae:	e9cd 4400 	strd	r4, r4, [sp]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8009bb2:	0e1b      	lsrs	r3, r3, #24
    uint8_t sBlock[16] = { 0 };
 8009bb4:	e9cd 4402 	strd	r4, r4, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8009bb8:	f88d 3019 	strb.w	r3, [sp, #25]
    aBlock[10] = frameCounter & 0xFF;
 8009bbc:	f8ad 201a 	strh.w	r2, [sp, #26]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8009bc0:	0c13      	lsrs	r3, r2, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8009bc2:	0e12      	lsrs	r2, r2, #24
    uint8_t aBlock[16] = { 0 };
 8009bc4:	9407      	str	r4, [sp, #28]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8009bc6:	f88d 1018 	strb.w	r1, [sp, #24]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8009bca:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8009bce:	f88d 201d 	strb.w	r2, [sp, #29]
    while( size > 0 )
 8009bd2:	b2e3      	uxtb	r3, r4
 8009bd4:	011e      	lsls	r6, r3, #4
 8009bd6:	2d00      	cmp	r5, #0
 8009bd8:	b2f6      	uxtb	r6, r6
 8009bda:	dc03      	bgt.n	8009be4 <PayloadEncrypt+0x62>
    return LORAMAC_CRYPTO_SUCCESS;
 8009bdc:	2000      	movs	r0, #0
}
 8009bde:	b008      	add	sp, #32
 8009be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        aBlock[15] = ctr & 0xFF;
 8009be4:	3301      	adds	r3, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8009be6:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 8009be8:	f88d 301f 	strb.w	r3, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8009bec:	4642      	mov	r2, r8
 8009bee:	466b      	mov	r3, sp
 8009bf0:	eb0d 0001 	add.w	r0, sp, r1
 8009bf4:	f7fc fb51 	bl	800629a <SecureElementAesEncrypt>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	b9a8      	cbnz	r0, 8009c28 <PayloadEncrypt+0xa6>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8009bfc:	2d10      	cmp	r5, #16
 8009bfe:	4628      	mov	r0, r5
 8009c00:	443e      	add	r6, r7
 8009c02:	bfa8      	it	ge
 8009c04:	2010      	movge	r0, #16
 8009c06:	4669      	mov	r1, sp
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8009c08:	7832      	ldrb	r2, [r6, #0]
 8009c0a:	f811 cb01 	ldrb.w	ip, [r1], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8009c0e:	3301      	adds	r3, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8009c10:	ea82 020c 	eor.w	r2, r2, ip
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8009c14:	4298      	cmp	r0, r3
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8009c16:	f806 2b01 	strb.w	r2, [r6], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8009c1a:	dcf5      	bgt.n	8009c08 <PayloadEncrypt+0x86>
        size -= 16;
 8009c1c:	3d10      	subs	r5, #16
 8009c1e:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 8009c20:	3401      	adds	r4, #1
 8009c22:	e7d6      	b.n	8009bd2 <PayloadEncrypt+0x50>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009c24:	200a      	movs	r0, #10
 8009c26:	e7da      	b.n	8009bde <PayloadEncrypt+0x5c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009c28:	200f      	movs	r0, #15
 8009c2a:	e7d8      	b.n	8009bde <PayloadEncrypt+0x5c>

08009c2c <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 8009c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 8009c2e:	2300      	movs	r3, #0

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8009c30:	227f      	movs	r2, #127	@ 0x7f
 8009c32:	2104      	movs	r1, #4
 8009c34:	4668      	mov	r0, sp
    uint8_t compBase[16] = { 0 };
 8009c36:	e9cd 3300 	strd	r3, r3, [sp]
 8009c3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8009c3e:	f7fc fb98 	bl	8006372 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009c42:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8009c44:	bf18      	it	ne
 8009c46:	200f      	movne	r0, #15
 8009c48:	b005      	add	sp, #20
 8009c4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009c50 <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 8009c50:	3801      	subs	r0, #1
 8009c52:	2803      	cmp	r0, #3
 8009c54:	d817      	bhi.n	8009c86 <GetLastFcntDown.constprop.0+0x36>
 8009c56:	e8df f000 	tbb	[pc, r0]
 8009c5a:	0902      	.short	0x0902
 8009c5c:	110d      	.short	0x110d
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c8c <GetLastFcntDown.constprop.0+0x3c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691a      	ldr	r2, [r3, #16]
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8009c64:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8009c66:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 8009c68:	2000      	movs	r0, #0
 8009c6a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8009c6c:	4b07      	ldr	r3, [pc, #28]	@ (8009c8c <GetLastFcntDown.constprop.0+0x3c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	695a      	ldr	r2, [r3, #20]
 8009c72:	e7f7      	b.n	8009c64 <GetLastFcntDown.constprop.0+0x14>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8009c74:	4b05      	ldr	r3, [pc, #20]	@ (8009c8c <GetLastFcntDown.constprop.0+0x3c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	699a      	ldr	r2, [r3, #24]
 8009c7a:	e7f3      	b.n	8009c64 <GetLastFcntDown.constprop.0+0x14>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8009c7c:	4b03      	ldr	r3, [pc, #12]	@ (8009c8c <GetLastFcntDown.constprop.0+0x3c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	600b      	str	r3, [r1, #0]
            break;
 8009c84:	e7f0      	b.n	8009c68 <GetLastFcntDown.constprop.0+0x18>
    switch( fCntID )
 8009c86:	2005      	movs	r0, #5
}
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	20000fe8 	.word	0x20000fe8

08009c90 <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8009c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c94:	b0c4      	sub	sp, #272	@ 0x110
 8009c96:	460c      	mov	r4, r1
 8009c98:	9e4a      	ldr	r6, [sp, #296]	@ 0x128
 8009c9a:	4617      	mov	r7, r2
 8009c9c:	461d      	mov	r5, r3
    if( msg == 0 )
 8009c9e:	4680      	mov	r8, r0
 8009ca0:	b3b8      	cbz	r0, 8009d12 <VerifyCmacB0.constprop.0.isra.0+0x82>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8009ca2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009ca6:	d836      	bhi.n	8009d16 <VerifyCmacB0.constprop.0.isra.0+0x86>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8009ca8:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8009cac:	2100      	movs	r1, #0
 8009cae:	4668      	mov	r0, sp
 8009cb0:	f001 fd36 	bl	800b720 <memset1>
    b0[0] = 0x49;
 8009cb4:	2349      	movs	r3, #73	@ 0x49
 8009cb6:	9300      	str	r3, [sp, #0]
    b0[4] = 0x00;
 8009cb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cbc:	f8ad 3004 	strh.w	r3, [sp, #4]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8009cc0:	0c2b      	lsrs	r3, r5, #16
 8009cc2:	f88d 3008 	strb.w	r3, [sp, #8]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8009cc6:	0c33      	lsrs	r3, r6, #16
    b0[6] = devAddr & 0xFF;
 8009cc8:	f8ad 5006 	strh.w	r5, [sp, #6]
    b0[10] = fCnt & 0xFF;
 8009ccc:	f8ad 600a 	strh.w	r6, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8009cd0:	f88d 300c 	strb.w	r3, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8009cd4:	4622      	mov	r2, r4
    b0[14] = 0x00;
 8009cd6:	2300      	movs	r3, #0
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8009cd8:	4641      	mov	r1, r8
 8009cda:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8009cdc:	0e2d      	lsrs	r5, r5, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8009cde:	0e36      	lsrs	r6, r6, #24
    b0[14] = 0x00;
 8009ce0:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8009ce4:	f88d 5009 	strb.w	r5, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8009ce8:	f88d 600d 	strb.w	r6, [sp, #13]
    b0[15] = msgLen & 0xFF;
 8009cec:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8009cf0:	f001 fd02 	bl	800b6f8 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8009cf4:	f104 0110 	add.w	r1, r4, #16
 8009cf8:	9a4b      	ldr	r2, [sp, #300]	@ 0x12c
 8009cfa:	463b      	mov	r3, r7
 8009cfc:	b289      	uxth	r1, r1
 8009cfe:	4668      	mov	r0, sp
 8009d00:	f7fc fab5 	bl	800626e <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8009d04:	b110      	cbz	r0, 8009d0c <VerifyCmacB0.constprop.0.isra.0+0x7c>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009d06:	2801      	cmp	r0, #1
 8009d08:	bf18      	it	ne
 8009d0a:	200f      	movne	r0, #15
}
 8009d0c:	b044      	add	sp, #272	@ 0x110
 8009d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009d12:	200a      	movs	r0, #10
 8009d14:	e7fa      	b.n	8009d0c <VerifyCmacB0.constprop.0.isra.0+0x7c>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8009d16:	200e      	movs	r0, #14
 8009d18:	e7f8      	b.n	8009d0c <VerifyCmacB0.constprop.0.isra.0+0x7c>
	...

08009d1c <LoRaMacCryptoInit>:
{
 8009d1c:	b510      	push	{r4, lr}
    if( nvm == NULL )
 8009d1e:	b190      	cbz	r0, 8009d46 <LoRaMacCryptoInit+0x2a>
    CryptoNvm = nvm;
 8009d20:	4c0a      	ldr	r4, [pc, #40]	@ (8009d4c <LoRaMacCryptoInit+0x30>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8009d22:	2228      	movs	r2, #40	@ 0x28
 8009d24:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 8009d26:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8009d28:	f001 fcfa 	bl	800b720 <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8009d2c:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8009d2e:	4a08      	ldr	r2, [pc, #32]	@ (8009d50 <LoRaMacCryptoInit+0x34>)
 8009d30:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8009d32:	2000      	movs	r0, #0
 8009d34:	f04f 32ff 	mov.w	r2, #4294967295
 8009d38:	e9c3 0203 	strd	r0, r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8009d3c:	e9c3 2205 	strd	r2, r2, [r3, #20]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8009d40:	e9c3 2207 	strd	r2, r2, [r3, #28]
}
 8009d44:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8009d46:	2009      	movs	r0, #9
 8009d48:	e7fc      	b.n	8009d44 <LoRaMacCryptoInit+0x28>
 8009d4a:	bf00      	nop
 8009d4c:	20000fe8 	.word	0x20000fe8
 8009d50:	01010100 	.word	0x01010100

08009d54 <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 8009d54:	4b02      	ldr	r3, [pc, #8]	@ (8009d60 <LoRaMacCryptoSetLrWanVersion+0xc>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6018      	str	r0, [r3, #0]
}
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	20000fe8 	.word	0x20000fe8

08009d64 <LoRaMacCryptoGetFCntUp>:
    if( currentUp == NULL )
 8009d64:	b130      	cbz	r0, 8009d74 <LoRaMacCryptoGetFCntUp+0x10>
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8009d66:	4b04      	ldr	r3, [pc, #16]	@ (8009d78 <LoRaMacCryptoGetFCntUp+0x14>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8009d70:	2000      	movs	r0, #0
 8009d72:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009d74:	200a      	movs	r0, #10
}
 8009d76:	4770      	bx	lr
 8009d78:	20000fe8 	.word	0x20000fe8

08009d7c <LoRaMacCryptoGetFCntDown>:
{
 8009d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d7e:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 8009d80:	2200      	movs	r2, #0
{
 8009d82:	460e      	mov	r6, r1
    uint32_t lastDown = 0;
 8009d84:	9201      	str	r2, [sp, #4]
    if( currentDown == NULL )
 8009d86:	461d      	mov	r5, r3
 8009d88:	b333      	cbz	r3, 8009dd8 <LoRaMacCryptoGetFCntDown+0x5c>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8009d8a:	a901      	add	r1, sp, #4
 8009d8c:	f7ff ff60 	bl	8009c50 <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009d90:	b9d0      	cbnz	r0, 8009dc8 <LoRaMacCryptoGetFCntDown+0x4c>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8009d92:	9a01      	ldr	r2, [sp, #4]
 8009d94:	1c53      	adds	r3, r2, #1
 8009d96:	d004      	beq.n	8009da2 <LoRaMacCryptoGetFCntDown+0x26>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8009d98:	b293      	uxth	r3, r2
 8009d9a:	1ae3      	subs	r3, r4, r3
        if( fCntDiff > 0 )
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd10      	ble.n	8009dc2 <LoRaMacCryptoGetFCntDown+0x46>
            *currentDown = lastDown + fCntDiff;
 8009da0:	18d4      	adds	r4, r2, r3
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8009da2:	4b0e      	ldr	r3, [pc, #56]	@ (8009ddc <LoRaMacCryptoGetFCntDown+0x60>)
        *currentDown = frameFcnt;
 8009da4:	602c      	str	r4, [r5, #0]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	789b      	ldrb	r3, [r3, #2]
 8009daa:	b96b      	cbnz	r3, 8009dc8 <LoRaMacCryptoGetFCntDown+0x4c>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8009dac:	1aa4      	subs	r4, r4, r2
 8009dae:	eb63 0303 	sbc.w	r3, r3, r3
 8009db2:	42b4      	cmp	r4, r6
 8009db4:	f173 0300 	sbcs.w	r3, r3, #0
 8009db8:	bfac      	ite	ge
 8009dba:	2001      	movge	r0, #1
 8009dbc:	2000      	movlt	r0, #0
 8009dbe:	00c0      	lsls	r0, r0, #3
 8009dc0:	e002      	b.n	8009dc8 <LoRaMacCryptoGetFCntDown+0x4c>
        else if( fCntDiff == 0 )
 8009dc2:	d103      	bne.n	8009dcc <LoRaMacCryptoGetFCntDown+0x50>
            *currentDown = lastDown;
 8009dc4:	602a      	str	r2, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8009dc6:	2007      	movs	r0, #7
}
 8009dc8:	b002      	add	sp, #8
 8009dca:	bd70      	pop	{r4, r5, r6, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8009dcc:	0c13      	lsrs	r3, r2, #16
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8009dd4:	441c      	add	r4, r3
 8009dd6:	e7e4      	b.n	8009da2 <LoRaMacCryptoGetFCntDown+0x26>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009dd8:	200a      	movs	r0, #10
 8009dda:	e7f5      	b.n	8009dc8 <LoRaMacCryptoGetFCntDown+0x4c>
 8009ddc:	20000fe8 	.word	0x20000fe8

08009de0 <LoRaMacCryptoSetMulticastReference>:
    if( multicastList == NULL )
 8009de0:	b128      	cbz	r0, 8009dee <LoRaMacCryptoSetMulticastReference+0xe>
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8009de2:	4b04      	ldr	r3, [pc, #16]	@ (8009df4 <LoRaMacCryptoSetMulticastReference+0x14>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	331c      	adds	r3, #28
 8009de8:	6203      	str	r3, [r0, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 8009dea:	2000      	movs	r0, #0
 8009dec:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009dee:	200a      	movs	r0, #10
}
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20000fe8 	.word	0x20000fe8

08009df8 <LoRaMacCryptoPrepareJoinRequest>:
{
 8009df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( macMsg == 0 )
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	b300      	cbz	r0, 8009e40 <LoRaMacCryptoPrepareJoinRequest+0x48>
    uint32_t devNonce = 0;
 8009dfe:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 8009e00:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 8009e02:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 8009e04:	f7fc fb0e 	bl	8006424 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8009e08:	4a0f      	ldr	r2, [pc, #60]	@ (8009e48 <LoRaMacCryptoPrepareJoinRequest+0x50>)
 8009e0a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009e0e:	6812      	ldr	r2, [r2, #0]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009e10:	4620      	mov	r0, r4
    CryptoNvm->DevNonce = devNonce;
 8009e12:	8093      	strh	r3, [r2, #4]
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8009e14:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009e16:	f000 fa40 	bl	800a29a <LoRaMacSerializerJoinRequest>
 8009e1a:	b110      	cbz	r0, 8009e22 <LoRaMacCryptoPrepareJoinRequest+0x2a>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009e1c:	2011      	movs	r0, #17
}
 8009e1e:	b004      	add	sp, #16
 8009e20:	bd10      	pop	{r4, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8009e22:	f104 0318 	add.w	r3, r4, #24
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	6821      	ldr	r1, [r4, #0]
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	2213      	movs	r2, #19
 8009e2e:	f7fc fa11 	bl	8006254 <SecureElementComputeAesCmac>
 8009e32:	b938      	cbnz	r0, 8009e44 <LoRaMacCryptoPrepareJoinRequest+0x4c>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009e34:	4620      	mov	r0, r4
 8009e36:	f000 fa30 	bl	800a29a <LoRaMacSerializerJoinRequest>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d0ef      	beq.n	8009e1e <LoRaMacCryptoPrepareJoinRequest+0x26>
 8009e3e:	e7ed      	b.n	8009e1c <LoRaMacCryptoPrepareJoinRequest+0x24>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009e40:	200a      	movs	r0, #10
 8009e42:	e7ec      	b.n	8009e1e <LoRaMacCryptoPrepareJoinRequest+0x26>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009e44:	200f      	movs	r0, #15
 8009e46:	e7ea      	b.n	8009e1e <LoRaMacCryptoPrepareJoinRequest+0x26>
 8009e48:	20000fe8 	.word	0x20000fe8

08009e4c <LoRaMacCryptoSecureMessage>:
{
 8009e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e4e:	4605      	mov	r5, r0
 8009e50:	b087      	sub	sp, #28
    if( macMsg == NULL )
 8009e52:	461c      	mov	r4, r3
 8009e54:	b913      	cbnz	r3, 8009e5c <LoRaMacCryptoSecureMessage+0x10>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009e56:	200a      	movs	r0, #10
}
 8009e58:	b007      	add	sp, #28
 8009e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8009e5c:	4e2d      	ldr	r6, [pc, #180]	@ (8009f14 <LoRaMacCryptoSecureMessage+0xc8>)
 8009e5e:	6833      	ldr	r3, [r6, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	4283      	cmp	r3, r0
 8009e64:	d854      	bhi.n	8009f10 <LoRaMacCryptoSecureMessage+0xc4>
    if( macMsg->FPort == 0 )
 8009e66:	f894 2020 	ldrb.w	r2, [r4, #32]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	bf0c      	ite	eq
 8009e6e:	2202      	moveq	r2, #2
 8009e70:	2203      	movne	r2, #3
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8009e72:	4283      	cmp	r3, r0
 8009e74:	d305      	bcc.n	8009e82 <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009e76:	4620      	mov	r0, r4
 8009e78:	f000 fa43 	bl	800a302 <LoRaMacSerializerData>
 8009e7c:	b168      	cbz	r0, 8009e9a <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009e7e:	2011      	movs	r0, #17
 8009e80:	e7ea      	b.n	8009e58 <LoRaMacCryptoSecureMessage+0xc>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8009e82:	2300      	movs	r3, #0
 8009e84:	9001      	str	r0, [sp, #4]
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	68a3      	ldr	r3, [r4, #8]
 8009e8a:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8009e8e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009e90:	f7ff fe77 	bl	8009b82 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d0ee      	beq.n	8009e76 <LoRaMacCryptoSecureMessage+0x2a>
 8009e98:	e7de      	b.n	8009e58 <LoRaMacCryptoSecureMessage+0xc>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8009e9a:	7923      	ldrb	r3, [r4, #4]
 8009e9c:	6821      	ldr	r1, [r4, #0]
 8009e9e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8009ea2:	68a7      	ldr	r7, [r4, #8]
 8009ea4:	3b04      	subs	r3, #4
 8009ea6:	b29a      	uxth	r2, r3
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	d0d4      	beq.n	8009e56 <LoRaMacCryptoSecureMessage+0xa>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8009eac:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8009eb0:	d82c      	bhi.n	8009f0c <LoRaMacCryptoSecureMessage+0xc0>
    b0[6] = devAddr & 0xFF;
 8009eb2:	f8ad c00e 	strh.w	ip, [sp, #14]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8009eb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8009eba:	0e3f      	lsrs	r7, r7, #24
 8009ebc:	f88d 7011 	strb.w	r7, [sp, #17]
    b0[15] = msgLen & 0xFF;
 8009ec0:	f88d 3017 	strb.w	r3, [sp, #23]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8009ec4:	0c2f      	lsrs	r7, r5, #16
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8009ec6:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
    b0[0] = 0x49;
 8009eca:	f04f 0e49 	mov.w	lr, #73	@ 0x49
    b0[4] = 0x00;
 8009ece:	f8ad 000c 	strh.w	r0, [sp, #12]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8009ed2:	f88d 7014 	strb.w	r7, [sp, #20]
    b0[14] = 0x00;
 8009ed6:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8009eda:	0e2f      	lsrs	r7, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	a802      	add	r0, sp, #8
 8009ee0:	2302      	movs	r3, #2
    b0[0] = 0x49;
 8009ee2:	f8cd e008 	str.w	lr, [sp, #8]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8009ee6:	f88d c010 	strb.w	ip, [sp, #16]
    b0[10] = fCnt & 0xFF;
 8009eea:	f8ad 5012 	strh.w	r5, [sp, #18]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8009eee:	f88d 7015 	strb.w	r7, [sp, #21]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8009ef2:	f7fc f9af 	bl	8006254 <SecureElementComputeAesCmac>
 8009ef6:	b108      	cbz	r0, 8009efc <LoRaMacCryptoSecureMessage+0xb0>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009ef8:	200f      	movs	r0, #15
 8009efa:	e7ad      	b.n	8009e58 <LoRaMacCryptoSecureMessage+0xc>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 fa00 	bl	800a302 <LoRaMacSerializerData>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d1bb      	bne.n	8009e7e <LoRaMacCryptoSecureMessage+0x32>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 8009f06:	6833      	ldr	r3, [r6, #0]
 8009f08:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 8009f0a:	e7a5      	b.n	8009e58 <LoRaMacCryptoSecureMessage+0xc>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8009f0c:	200e      	movs	r0, #14
 8009f0e:	e7a3      	b.n	8009e58 <LoRaMacCryptoSecureMessage+0xc>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8009f10:	2006      	movs	r0, #6
 8009f12:	e7a1      	b.n	8009e58 <LoRaMacCryptoSecureMessage+0xc>
 8009f14:	20000fe8 	.word	0x20000fe8

08009f18 <LoRaMacCryptoUnsecureMessage>:
{
 8009f18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009f1c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009f1e:	4680      	mov	r8, r0
 8009f20:	460f      	mov	r7, r1
 8009f22:	4616      	mov	r6, r2
 8009f24:	461c      	mov	r4, r3
    if( macMsg == 0 )
 8009f26:	2d00      	cmp	r5, #0
 8009f28:	d059      	beq.n	8009fde <LoRaMacCryptoUnsecureMessage+0xc6>
    uint32_t lastDown = 0;
 8009f2a:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8009f2c:	a903      	add	r1, sp, #12
 8009f2e:	4610      	mov	r0, r2
    uint32_t lastDown = 0;
 8009f30:	9303      	str	r3, [sp, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8009f32:	f7ff fe8d 	bl	8009c50 <GetLastFcntDown.constprop.0>
 8009f36:	b118      	cbz	r0, 8009f40 <LoRaMacCryptoUnsecureMessage+0x28>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8009f38:	2006      	movs	r0, #6
}
 8009f3a:	b004      	add	sp, #16
 8009f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( currentDown > lastDown ) ||
 8009f40:	9b03      	ldr	r3, [sp, #12]
 8009f42:	429c      	cmp	r4, r3
 8009f44:	d801      	bhi.n	8009f4a <LoRaMacCryptoUnsecureMessage+0x32>
 8009f46:	3301      	adds	r3, #1
 8009f48:	d1f6      	bne.n	8009f38 <LoRaMacCryptoUnsecureMessage+0x20>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 f94a 	bl	800a1e4 <LoRaMacParserData>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d146      	bne.n	8009fe2 <LoRaMacCryptoUnsecureMessage+0xca>
        if( KeyAddrList[i].AddrID == addrID )
 8009f54:	4b26      	ldr	r3, [pc, #152]	@ (8009ff0 <LoRaMacCryptoUnsecureMessage+0xd8>)
 8009f56:	781a      	ldrb	r2, [r3, #0]
 8009f58:	4542      	cmp	r2, r8
 8009f5a:	d003      	beq.n	8009f64 <LoRaMacCryptoUnsecureMessage+0x4c>
 8009f5c:	791a      	ldrb	r2, [r3, #4]
 8009f5e:	4542      	cmp	r2, r8
 8009f60:	d141      	bne.n	8009fe6 <LoRaMacCryptoUnsecureMessage+0xce>
 8009f62:	2001      	movs	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 8009f64:	68aa      	ldr	r2, [r5, #8]
 8009f66:	42ba      	cmp	r2, r7
 8009f68:	d13f      	bne.n	8009fea <LoRaMacCryptoUnsecureMessage+0xd2>
    payloadDecryptionKeyID = curItem->AppSkey;
 8009f6a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8009f6e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 8009f70:	f892 8001 	ldrb.w	r8, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8009f74:	7929      	ldrb	r1, [r5, #4]
 8009f76:	e9cd 4300 	strd	r4, r3, [sp]
 8009f7a:	3904      	subs	r1, #4
 8009f7c:	7892      	ldrb	r2, [r2, #2]
 8009f7e:	6828      	ldr	r0, [r5, #0]
 8009f80:	463b      	mov	r3, r7
 8009f82:	b289      	uxth	r1, r1
 8009f84:	f7ff fe84 	bl	8009c90 <VerifyCmacB0.constprop.0.isra.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d1d6      	bne.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
    if( macMsg->FPort == 0 )
 8009f8c:	f895 3020 	ldrb.w	r3, [r5, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8009f90:	9401      	str	r4, [sp, #4]
        payloadDecryptionKeyID = NWK_S_KEY;
 8009f92:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8009f94:	f04f 0301 	mov.w	r3, #1
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	bf14      	ite	ne
 8009f9c:	4642      	movne	r2, r8
 8009f9e:	2202      	moveq	r2, #2
 8009fa0:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 8009fa4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8009fa6:	463b      	mov	r3, r7
 8009fa8:	f7ff fdeb 	bl	8009b82 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d1c4      	bne.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
    switch( fCntID )
 8009fb0:	3e01      	subs	r6, #1
 8009fb2:	2e03      	cmp	r6, #3
 8009fb4:	d8c1      	bhi.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
 8009fb6:	e8df f006 	tbb	[pc, r6]
 8009fba:	0602      	.short	0x0602
 8009fbc:	0e0a      	.short	0x0e0a
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <LoRaMacCryptoUnsecureMessage+0xdc>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	611c      	str	r4, [r3, #16]
            break;
 8009fc4:	e7b9      	b.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8009fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff4 <LoRaMacCryptoUnsecureMessage+0xdc>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	615c      	str	r4, [r3, #20]
            break;
 8009fcc:	e7b5      	b.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
            CryptoNvm->FCntList.FCntDown = currentDown;
 8009fce:	4b09      	ldr	r3, [pc, #36]	@ (8009ff4 <LoRaMacCryptoUnsecureMessage+0xdc>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	619c      	str	r4, [r3, #24]
            break;
 8009fd4:	e7b1      	b.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8009fd6:	4b07      	ldr	r3, [pc, #28]	@ (8009ff4 <LoRaMacCryptoUnsecureMessage+0xdc>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	61dc      	str	r4, [r3, #28]
            break;
 8009fdc:	e7ad      	b.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009fde:	200a      	movs	r0, #10
 8009fe0:	e7ab      	b.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8009fe2:	2010      	movs	r0, #16
 8009fe4:	e7a9      	b.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8009fe6:	200c      	movs	r0, #12
 8009fe8:	e7a7      	b.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8009fea:	2002      	movs	r0, #2
 8009fec:	e7a5      	b.n	8009f3a <LoRaMacCryptoUnsecureMessage+0x22>
 8009fee:	bf00      	nop
 8009ff0:	200000c4 	.word	0x200000c4
 8009ff4:	20000fe8 	.word	0x20000fe8

08009ff8 <LoRaMacCryptoDeriveMcRootKey>:
{
 8009ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( keyID != APP_KEY )
 8009ffa:	b9b1      	cbnz	r1, 800a02a <LoRaMacCryptoDeriveMcRootKey+0x32>
    if( versionMinor == 1 )
 8009ffc:	2801      	cmp	r0, #1
    uint8_t compBase[16] = { 0 };
 8009ffe:	e9cd 1100 	strd	r1, r1, [sp]
        compBase[0] = 0x20;
 800a002:	bf08      	it	eq
 800a004:	2320      	moveq	r3, #32
    uint8_t compBase[16] = { 0 };
 800a006:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a00a:	f04f 0204 	mov.w	r2, #4
 800a00e:	f04f 0100 	mov.w	r1, #0
 800a012:	4668      	mov	r0, sp
        compBase[0] = 0x20;
 800a014:	bf08      	it	eq
 800a016:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a01a:	f7fc f9aa 	bl	8006372 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a01e:	2800      	cmp	r0, #0
 800a020:	bf18      	it	ne
 800a022:	200f      	movne	r0, #15
}
 800a024:	b005      	add	sp, #20
 800a026:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800a02a:	200b      	movs	r0, #11
 800a02c:	e7fa      	b.n	800a024 <LoRaMacCryptoDeriveMcRootKey+0x2c>
	...

0800a030 <LoRaMacCryptoSetKey>:
{
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4605      	mov	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800a034:	f7fc f998 	bl	8006368 <SecureElementSetKey>
 800a038:	4604      	mov	r4, r0
 800a03a:	b110      	cbz	r0, 800a042 <LoRaMacCryptoSetKey+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a03c:	240f      	movs	r4, #15
}
 800a03e:	4620      	mov	r0, r4
 800a040:	bd38      	pop	{r3, r4, r5, pc}
    if( keyID == APP_KEY )
 800a042:	2d00      	cmp	r5, #0
 800a044:	d1fb      	bne.n	800a03e <LoRaMacCryptoSetKey+0xe>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800a046:	4b06      	ldr	r3, [pc, #24]	@ (800a060 <LoRaMacCryptoSetKey+0x30>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4601      	mov	r1, r0
 800a04c:	7898      	ldrb	r0, [r3, #2]
 800a04e:	f7ff ffd3 	bl	8009ff8 <LoRaMacCryptoDeriveMcRootKey>
 800a052:	2800      	cmp	r0, #0
 800a054:	d1f2      	bne.n	800a03c <LoRaMacCryptoSetKey+0xc>
    if( keyID != MC_ROOT_KEY )
 800a056:	f7ff fde9 	bl	8009c2c <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d0ef      	beq.n	800a03e <LoRaMacCryptoSetKey+0xe>
 800a05e:	e7ed      	b.n	800a03c <LoRaMacCryptoSetKey+0xc>
 800a060:	20000fe8 	.word	0x20000fe8

0800a064 <LoRaMacCryptoHandleJoinAccept>:
{
 800a064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a068:	4680      	mov	r8, r0
 800a06a:	b08f      	sub	sp, #60	@ 0x3c
 800a06c:	460d      	mov	r5, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800a06e:	4614      	mov	r4, r2
 800a070:	2a00      	cmp	r2, #0
 800a072:	d05f      	beq.n	800a134 <LoRaMacCryptoHandleJoinAccept+0xd0>
 800a074:	2900      	cmp	r1, #0
 800a076:	d05d      	beq.n	800a134 <LoRaMacCryptoHandleJoinAccept+0xd0>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800a078:	2600      	movs	r6, #0
 800a07a:	4631      	mov	r1, r6
 800a07c:	221d      	movs	r2, #29
 800a07e:	a806      	add	r0, sp, #24
 800a080:	9605      	str	r6, [sp, #20]
 800a082:	f003 fb71 	bl	800d768 <memset>
    uint8_t versionMinor         = 0;
 800a086:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800a08a:	4e2e      	ldr	r6, [pc, #184]	@ (800a144 <LoRaMacCryptoHandleJoinAccept+0xe0>)
 800a08c:	6833      	ldr	r3, [r6, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800a08e:	f10d 0914 	add.w	r9, sp, #20
    uint16_t nonce               = CryptoNvm->DevNonce;
 800a092:	889f      	ldrh	r7, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800a094:	f8cd 9004 	str.w	r9, [sp, #4]
 800a098:	f10d 0313 	add.w	r3, sp, #19
 800a09c:	9302      	str	r3, [sp, #8]
 800a09e:	7923      	ldrb	r3, [r4, #4]
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	463a      	mov	r2, r7
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	f7fc f97e 	bl	80063aa <SecureElementProcessJoinAccept>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d142      	bne.n	800a138 <LoRaMacCryptoHandleJoinAccept+0xd4>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	7922      	ldrb	r2, [r4, #4]
 800a0b6:	6820      	ldr	r0, [r4, #0]
 800a0b8:	f001 fb1e 	bl	800b6f8 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f000 f843 	bl	800a148 <LoRaMacParserJoinAccept>
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d139      	bne.n	800a13c <LoRaMacCryptoHandleJoinAccept+0xd8>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800a0c8:	7a25      	ldrb	r5, [r4, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800a0ca:	79e2      	ldrb	r2, [r4, #7]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800a0cc:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800a0ce:	042d      	lsls	r5, r5, #16
 800a0d0:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800a0d4:	431d      	orrs	r5, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800a0d6:	6833      	ldr	r3, [r6, #0]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	42aa      	cmp	r2, r5
 800a0dc:	d030      	beq.n	800a140 <LoRaMacCryptoHandleJoinAccept+0xdc>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800a0de:	f89d 0013 	ldrb.w	r0, [sp, #19]
        CryptoNvm->JoinNonce = currentJoinNonce;
 800a0e2:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800a0e4:	f7ff ff88 	bl	8009ff8 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a0e8:	bb08      	cbnz	r0, 800a12e <LoRaMacCryptoHandleJoinAccept+0xca>
    if( keyID != MC_ROOT_KEY )
 800a0ea:	f7ff fd9f 	bl	8009c2c <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a0ee:	b9f0      	cbnz	r0, 800a12e <LoRaMacCryptoHandleJoinAccept+0xca>
        netID = ( uint32_t )macMsg->NetID[0];
 800a0f0:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800a0f2:	7aa2      	ldrb	r2, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800a0f4:	7ae4      	ldrb	r4, [r4, #11]
 800a0f6:	0424      	lsls	r4, r4, #16
 800a0f8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800a0fc:	431c      	orrs	r4, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800a0fe:	4622      	mov	r2, r4
 800a100:	463b      	mov	r3, r7
 800a102:	4629      	mov	r1, r5
 800a104:	2003      	movs	r0, #3
 800a106:	f7ff fd19 	bl	8009b3c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a10a:	b980      	cbnz	r0, 800a12e <LoRaMacCryptoHandleJoinAccept+0xca>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800a10c:	463b      	mov	r3, r7
 800a10e:	4622      	mov	r2, r4
 800a110:	4629      	mov	r1, r5
 800a112:	2002      	movs	r0, #2
 800a114:	f7ff fd12 	bl	8009b3c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a118:	b948      	cbnz	r0, 800a12e <LoRaMacCryptoHandleJoinAccept+0xca>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800a11a:	6833      	ldr	r3, [r6, #0]
 800a11c:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800a120:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a122:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a126:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoNvm->FCntList.FCntUp = 0;
 800a12a:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a12c:	619a      	str	r2, [r3, #24]
}
 800a12e:	b00f      	add	sp, #60	@ 0x3c
 800a130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a134:	200a      	movs	r0, #10
 800a136:	e7fa      	b.n	800a12e <LoRaMacCryptoHandleJoinAccept+0xca>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a138:	200f      	movs	r0, #15
 800a13a:	e7f8      	b.n	800a12e <LoRaMacCryptoHandleJoinAccept+0xca>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800a13c:	2010      	movs	r0, #16
 800a13e:	e7f6      	b.n	800a12e <LoRaMacCryptoHandleJoinAccept+0xca>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800a140:	2003      	movs	r0, #3
 800a142:	e7f4      	b.n	800a12e <LoRaMacCryptoHandleJoinAccept+0xca>
 800a144:	20000fe8 	.word	0x20000fe8

0800a148 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800a148:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800a14a:	4604      	mov	r4, r0
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d045      	beq.n	800a1dc <LoRaMacParserJoinAccept+0x94>
 800a150:	6801      	ldr	r1, [r0, #0]
 800a152:	2900      	cmp	r1, #0
 800a154:	d042      	beq.n	800a1dc <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800a156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800a15c:	2203      	movs	r2, #3
 800a15e:	3006      	adds	r0, #6
 800a160:	f001 faca 	bl	800b6f8 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800a164:	4620      	mov	r0, r4
 800a166:	2203      	movs	r2, #3
 800a168:	f850 1b09 	ldr.w	r1, [r0], #9
 800a16c:	3104      	adds	r1, #4
 800a16e:	f001 fac3 	bl	800b6f8 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800a172:	6821      	ldr	r1, [r4, #0]
 800a174:	79cb      	ldrb	r3, [r1, #7]
 800a176:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800a178:	7a0a      	ldrb	r2, [r1, #8]
 800a17a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a17e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800a180:	7a4a      	ldrb	r2, [r1, #9]
 800a182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a186:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800a188:	7a8a      	ldrb	r2, [r1, #10]
 800a18a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a18e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800a190:	7acb      	ldrb	r3, [r1, #11]
 800a192:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800a194:	7b0b      	ldrb	r3, [r1, #12]
 800a196:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800a198:	7923      	ldrb	r3, [r4, #4]
 800a19a:	2b21      	cmp	r3, #33	@ 0x21
 800a19c:	d11a      	bne.n	800a1d4 <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800a19e:	2210      	movs	r2, #16
 800a1a0:	310d      	adds	r1, #13
 800a1a2:	f104 0012 	add.w	r0, r4, #18
 800a1a6:	f001 faa7 	bl	800b6f8 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800a1aa:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800a1ac:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800a1ae:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800a1b0:	5c8b      	ldrb	r3, [r1, r2]
 800a1b2:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800a1b4:	5c08      	ldrb	r0, [r1, r0]
 800a1b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800a1ba:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800a1bc:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800a1be:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800a1c0:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800a1c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a1c6:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800a1c8:	5c8a      	ldrb	r2, [r1, r2]
 800a1ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1ce:	6263      	str	r3, [r4, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 800a1d0:	2000      	movs	r0, #0
}
 800a1d2:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800a1d4:	2b11      	cmp	r3, #17
 800a1d6:	dc03      	bgt.n	800a1e0 <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800a1d8:	220d      	movs	r2, #13
 800a1da:	e7e7      	b.n	800a1ac <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 800a1dc:	2002      	movs	r0, #2
 800a1de:	e7f8      	b.n	800a1d2 <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	e7f6      	b.n	800a1d2 <LoRaMacParserJoinAccept+0x8a>

0800a1e4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800a1e4:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d054      	beq.n	800a296 <LoRaMacParserData+0xb2>
 800a1ec:	6801      	ldr	r1, [r0, #0]
 800a1ee:	2900      	cmp	r1, #0
 800a1f0:	d051      	beq.n	800a296 <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800a1f2:	780b      	ldrb	r3, [r1, #0]
 800a1f4:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800a1f6:	784b      	ldrb	r3, [r1, #1]
 800a1f8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800a1fa:	788a      	ldrb	r2, [r1, #2]
 800a1fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a200:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800a202:	78ca      	ldrb	r2, [r1, #3]
 800a204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a208:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800a20a:	790a      	ldrb	r2, [r1, #4]
 800a20c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a210:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800a212:	794b      	ldrb	r3, [r1, #5]
 800a214:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800a216:	798b      	ldrb	r3, [r1, #6]
 800a218:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800a21a:	79ca      	ldrb	r2, [r1, #7]
 800a21c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800a220:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800a222:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800a224:	f002 020f 	and.w	r2, r2, #15
 800a228:	3108      	adds	r1, #8
 800a22a:	3010      	adds	r0, #16
 800a22c:	f001 fa64 	bl	800b6f8 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a230:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800a232:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a234:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 800a238:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800a23c:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800a240:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a242:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800a246:	1a11      	subs	r1, r2, r0
 800a248:	2904      	cmp	r1, #4
 800a24a:	dd0d      	ble.n	800a268 <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800a24c:	6821      	ldr	r1, [r4, #0]
 800a24e:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800a250:	3a04      	subs	r2, #4
 800a252:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800a254:	5c08      	ldrb	r0, [r1, r0]
 800a256:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800a25a:	b2d2      	uxtb	r2, r2
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800a25c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800a25e:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800a262:	4419      	add	r1, r3
 800a264:	f001 fa48 	bl	800b6f8 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800a268:	7923      	ldrb	r3, [r4, #4]
 800a26a:	6822      	ldr	r2, [r4, #0]
 800a26c:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800a26e:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800a270:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800a274:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800a276:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800a27a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a27e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800a280:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800a284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a288:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800a28a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800a28e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a292:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800a294:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 800a296:	2002      	movs	r0, #2
 800a298:	e7fc      	b.n	800a294 <LoRaMacParserData+0xb0>

0800a29a <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800a29a:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800a29c:	4604      	mov	r4, r0
 800a29e:	b360      	cbz	r0, 800a2fa <LoRaMacSerializerJoinRequest+0x60>
 800a2a0:	6803      	ldr	r3, [r0, #0]
 800a2a2:	b353      	cbz	r3, 800a2fa <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800a2a4:	7902      	ldrb	r2, [r0, #4]
 800a2a6:	2a16      	cmp	r2, #22
 800a2a8:	d929      	bls.n	800a2fe <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800a2aa:	7942      	ldrb	r2, [r0, #5]
 800a2ac:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	f851 0b06 	ldr.w	r0, [r1], #6
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f001 fa28 	bl	800b70c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800a2bc:	4621      	mov	r1, r4
 800a2be:	2208      	movs	r2, #8
 800a2c0:	f851 0b0e 	ldr.w	r0, [r1], #14
 800a2c4:	3009      	adds	r0, #9
 800a2c6:	f001 fa21 	bl	800b70c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	8ae2      	ldrh	r2, [r4, #22]
 800a2ce:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800a2d0:	8ae3      	ldrh	r3, [r4, #22]
 800a2d2:	6822      	ldr	r2, [r4, #0]
 800a2d4:	0a1b      	lsrs	r3, r3, #8
 800a2d6:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	69a2      	ldr	r2, [r4, #24]
 800a2dc:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800a2de:	69a3      	ldr	r3, [r4, #24]
 800a2e0:	6822      	ldr	r2, [r4, #0]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	8b62      	ldrh	r2, [r4, #26]
 800a2ea:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	7ee2      	ldrb	r2, [r4, #27]
 800a2f0:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800a2f2:	2317      	movs	r3, #23
 800a2f4:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800a2f6:	2000      	movs	r0, #0
}
 800a2f8:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800a2fa:	2001      	movs	r0, #1
 800a2fc:	e7fc      	b.n	800a2f8 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800a2fe:	2002      	movs	r0, #2
 800a300:	e7fa      	b.n	800a2f8 <LoRaMacSerializerJoinRequest+0x5e>

0800a302 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800a302:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800a304:	4604      	mov	r4, r0
 800a306:	2800      	cmp	r0, #0
 800a308:	d063      	beq.n	800a3d2 <LoRaMacSerializerData+0xd0>
 800a30a:	6801      	ldr	r1, [r0, #0]
 800a30c:	2900      	cmp	r1, #0
 800a30e:	d060      	beq.n	800a3d2 <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a310:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800a312:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a316:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	d157      	bne.n	800a3ce <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a31e:	3308      	adds	r3, #8
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
 800a320:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800a322:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
 800a324:	4413      	add	r3, r2
 800a326:	4298      	cmp	r0, r3
 800a328:	d355      	bcc.n	800a3d6 <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800a32a:	7963      	ldrb	r3, [r4, #5]
 800a32c:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	68a2      	ldr	r2, [r4, #8]
 800a332:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800a334:	68a3      	ldr	r3, [r4, #8]
 800a336:	6822      	ldr	r2, [r4, #0]
 800a338:	0a1b      	lsrs	r3, r3, #8
 800a33a:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	8962      	ldrh	r2, [r4, #10]
 800a340:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	7ae2      	ldrb	r2, [r4, #11]
 800a346:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	7b22      	ldrb	r2, [r4, #12]
 800a34c:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	89e2      	ldrh	r2, [r4, #14]
 800a352:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800a354:	89e3      	ldrh	r3, [r4, #14]
 800a356:	6822      	ldr	r2, [r4, #0]
 800a358:	0a1b      	lsrs	r3, r3, #8

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800a35a:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800a35c:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800a35e:	7b22      	ldrb	r2, [r4, #12]
 800a360:	f851 0b10 	ldr.w	r0, [r1], #16
 800a364:	f002 020f 	and.w	r2, r2, #15
 800a368:	3008      	adds	r0, #8
 800a36a:	f001 f9c5 	bl	800b6f8 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a36e:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800a370:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a374:	f003 030f 	and.w	r3, r3, #15
 800a378:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 800a37c:	b12a      	cbz	r2, 800a38a <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800a37e:	6822      	ldr	r2, [r4, #0]
 800a380:	f894 1020 	ldrb.w	r1, [r4, #32]
 800a384:	5551      	strb	r1, [r2, r5]
 800a386:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800a38a:	6820      	ldr	r0, [r4, #0]
 800a38c:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800a390:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a392:	4428      	add	r0, r5
 800a394:	f001 f9b0 	bl	800b6f8 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800a398:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800a39c:	6822      	ldr	r2, [r4, #0]
 800a39e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800a3a0:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800a3a2:	54d1      	strb	r1, [r2, r3]
 800a3a4:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800a3a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a3a8:	6820      	ldr	r0, [r4, #0]
 800a3aa:	b292      	uxth	r2, r2
 800a3ac:	0a09      	lsrs	r1, r1, #8
 800a3ae:	5481      	strb	r1, [r0, r2]
 800a3b0:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800a3b2:	6821      	ldr	r1, [r4, #0]
 800a3b4:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
 800a3b6:	b292      	uxth	r2, r2
 800a3b8:	5488      	strb	r0, [r1, r2]
 800a3ba:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800a3bc:	6821      	ldr	r1, [r4, #0]
 800a3be:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
 800a3c2:	b292      	uxth	r2, r2
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800a3c8:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800a3ca:	2000      	movs	r0, #0
}
 800a3cc:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800a3ce:	3309      	adds	r3, #9
 800a3d0:	e7a6      	b.n	800a320 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e7fa      	b.n	800a3cc <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800a3d6:	2002      	movs	r0, #2
 800a3d8:	e7f8      	b.n	800a3cc <LoRaMacSerializerData+0xca>

0800a3da <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 800a3da:	1f43      	subs	r3, r0, #5
 800a3dc:	4258      	negs	r0, r3
 800a3de:	4158      	adcs	r0, r3
 800a3e0:	4770      	bx	lr

0800a3e2 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    PhyParam_t phyParam = { 0 };
    switch( region )
 800a3e2:	2805      	cmp	r0, #5
{
 800a3e4:	b082      	sub	sp, #8
    switch( region )
 800a3e6:	d103      	bne.n	800a3f0 <RegionGetPhyParam+0xe>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 800a3e8:	4608      	mov	r0, r1
        default:
        {
            return phyParam;
        }
    }
}
 800a3ea:	b002      	add	sp, #8
        EU868_GET_PHY_PARAM( );
 800a3ec:	f000 bc62 	b.w	800acb4 <RegionEU868GetPhyParam>
}
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	b002      	add	sp, #8
 800a3f4:	4770      	bx	lr

0800a3f6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800a3f6:	2805      	cmp	r0, #5
 800a3f8:	d102      	bne.n	800a400 <RegionSetBandTxDone+0xa>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	f000 bcf6 	b.w	800adec <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800a400:	4770      	bx	lr

0800a402 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800a402:	2805      	cmp	r0, #5
 800a404:	d102      	bne.n	800a40c <RegionInitDefaults+0xa>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800a406:	4608      	mov	r0, r1
 800a408:	f000 bd08 	b.w	800ae1c <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800a40c:	4770      	bx	lr

0800a40e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800a40e:	4603      	mov	r3, r0
    switch( region )
 800a410:	2b05      	cmp	r3, #5
{
 800a412:	4608      	mov	r0, r1
 800a414:	4611      	mov	r1, r2
    switch( region )
 800a416:	d101      	bne.n	800a41c <RegionVerify+0xe>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 800a418:	f000 bd62 	b.w	800aee0 <RegionEU868Verify>
        default:
        {
            return false;
        }
    }
}
 800a41c:	2000      	movs	r0, #0
 800a41e:	4770      	bx	lr

0800a420 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800a420:	2805      	cmp	r0, #5
 800a422:	d102      	bne.n	800a42a <RegionApplyCFList+0xa>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800a424:	4608      	mov	r0, r1
 800a426:	f001 b8b5 	b.w	800b594 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800a42a:	4770      	bx	lr

0800a42c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800a42c:	2805      	cmp	r0, #5
 800a42e:	d102      	bne.n	800a436 <RegionChanMaskSet+0xa>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 800a430:	4608      	mov	r0, r1
 800a432:	f000 bd7b 	b.w	800af2c <RegionEU868ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 800a436:	2000      	movs	r0, #0
 800a438:	4770      	bx	lr

0800a43a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800a43a:	b410      	push	{r4}
 800a43c:	4604      	mov	r4, r0
    switch( region )
 800a43e:	2c05      	cmp	r4, #5
{
 800a440:	4608      	mov	r0, r1
 800a442:	4611      	mov	r1, r2
 800a444:	461a      	mov	r2, r3
 800a446:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 800a448:	d103      	bne.n	800a452 <RegionComputeRxWindowParameters+0x18>
        default:
        {
            break;
        }
    }
}
 800a44a:	f85d 4b04 	ldr.w	r4, [sp], #4
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800a44e:	f000 bd87 	b.w	800af60 <RegionEU868ComputeRxWindowParameters>
}
 800a452:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800a458:	4603      	mov	r3, r0
    switch( region )
 800a45a:	2b05      	cmp	r3, #5
{
 800a45c:	4608      	mov	r0, r1
 800a45e:	4611      	mov	r1, r2
    switch( region )
 800a460:	d101      	bne.n	800a466 <RegionRxConfig+0xe>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 800a462:	f000 bdaf 	b.w	800afc4 <RegionEU868RxConfig>
        default:
        {
            return false;
        }
    }
}
 800a466:	2000      	movs	r0, #0
 800a468:	4770      	bx	lr

0800a46a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800a46a:	b410      	push	{r4}
 800a46c:	4604      	mov	r4, r0
    switch( region )
 800a46e:	2c05      	cmp	r4, #5
{
 800a470:	4608      	mov	r0, r1
 800a472:	4611      	mov	r1, r2
 800a474:	461a      	mov	r2, r3
    switch( region )
 800a476:	d103      	bne.n	800a480 <RegionTxConfig+0x16>
        default:
        {
            return false;
        }
    }
}
 800a478:	f85d 4b04 	ldr.w	r4, [sp], #4
        EU868_TX_CONFIG( );
 800a47c:	f000 be20 	b.w	800b0c0 <RegionEU868TxConfig>
}
 800a480:	2000      	movs	r0, #0
 800a482:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800a488:	b430      	push	{r4, r5}
 800a48a:	4605      	mov	r5, r0
    switch( region )
 800a48c:	2d05      	cmp	r5, #5
{
 800a48e:	4608      	mov	r0, r1
 800a490:	4611      	mov	r1, r2
 800a492:	461a      	mov	r2, r3
 800a494:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    switch( region )
 800a498:	d103      	bne.n	800a4a2 <RegionLinkAdrReq+0x1a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 800a49a:	9402      	str	r4, [sp, #8]
        default:
        {
            return 0;
        }
    }
}
 800a49c:	bc30      	pop	{r4, r5}
        EU868_LINK_ADR_REQ( );
 800a49e:	f000 be97 	b.w	800b1d0 <RegionEU868LinkAdrReq>
}
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	bc30      	pop	{r4, r5}
 800a4a6:	4770      	bx	lr

0800a4a8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800a4a8:	2805      	cmp	r0, #5
 800a4aa:	d102      	bne.n	800a4b2 <RegionRxParamSetupReq+0xa>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	f000 bf3d 	b.w	800b32c <RegionEU868RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	4770      	bx	lr

0800a4b6 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800a4b6:	2805      	cmp	r0, #5
 800a4b8:	d102      	bne.n	800a4c0 <RegionNewChannelReq+0xa>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 800a4ba:	4608      	mov	r0, r1
 800a4bc:	f001 b8a8 	b.w	800b610 <RegionEU868NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	4770      	bx	lr

0800a4c4 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800a4c4:	2805      	cmp	r0, #5
 800a4c6:	d102      	bne.n	800a4ce <RegionTxParamSetupReq+0xa>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	f000 bf4d 	b.w	800b368 <RegionEU868TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	4770      	bx	lr

0800a4d2 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800a4d2:	2805      	cmp	r0, #5
 800a4d4:	d102      	bne.n	800a4dc <RegionDlChannelReq+0xa>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	f000 bf4a 	b.w	800b370 <RegionEU868DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800a4dc:	2000      	movs	r0, #0
 800a4de:	4770      	bx	lr

0800a4e0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800a4e0:	4603      	mov	r3, r0
    switch( region )
 800a4e2:	2b05      	cmp	r3, #5
{
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	4611      	mov	r1, r2
    switch( region )
 800a4e8:	d101      	bne.n	800a4ee <RegionAlternateDr+0xe>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 800a4ea:	f000 bf61 	b.w	800b3b0 <RegionEU868AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	4770      	bx	lr

0800a4f2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800a4f2:	b410      	push	{r4}
 800a4f4:	4604      	mov	r4, r0
    switch( region )
 800a4f6:	2c05      	cmp	r4, #5
{
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 800a500:	d103      	bne.n	800a50a <RegionNextChannel+0x18>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800a502:	f85d 4b04 	ldr.w	r4, [sp], #4
        EU868_NEXT_CHANNEL( );
 800a506:	f000 bf55 	b.w	800b3b4 <RegionEU868NextChannel>
}
 800a50a:	2009      	movs	r0, #9
 800a50c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <RegionSetContinuousWave>:
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 800a512:	2805      	cmp	r0, #5
 800a514:	d102      	bne.n	800a51c <RegionSetContinuousWave+0xa>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800a516:	4608      	mov	r0, r1
 800a518:	f001 b89c 	b.w	800b654 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800a51c:	4770      	bx	lr

0800a51e <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800a51e:	b410      	push	{r4}
 800a520:	4604      	mov	r4, r0
    switch( region )
 800a522:	2c05      	cmp	r4, #5
{
 800a524:	4608      	mov	r0, r1
 800a526:	4611      	mov	r1, r2
 800a528:	461a      	mov	r2, r3
    switch( region )
 800a52a:	d103      	bne.n	800a534 <RegionApplyDrOffset+0x16>
        default:
        {
            return dr;
        }
    }
}
 800a52c:	f85d 4b04 	ldr.w	r4, [sp], #4
        EU868_APPLY_DR_OFFSET( );
 800a530:	f001 b8ba 	b.w	800b6a8 <RegionEU868ApplyDrOffset>
}
 800a534:	b2c8      	uxtb	r0, r1
 800a536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800a53c:	4800      	ldr	r0, [pc, #0]	@ (800a540 <RegionGetVersion+0x4>)
 800a53e:	4770      	bx	lr
 800a540:	01000300 	.word	0x01000300

0800a544 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800a544:	b5f0      	push	{r4, r5, r6, r7, lr}
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800a546:	429a      	cmp	r2, r3
{
 800a548:	9d06      	ldr	r5, [sp, #24]
    if( ( value >= min ) && ( value <= max ) )
 800a54a:	db03      	blt.n	800a554 <RegionCommonChanVerifyDr+0x10>
 800a54c:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 800a550:	429a      	cmp	r2, r3
 800a552:	dd20      	ble.n	800a596 <RegionCommonChanVerifyDr+0x52>
        return false;
 800a554:	2000      	movs	r0, #0
}
 800a556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800a55c:	f831 c014 	ldrh.w	ip, [r1, r4, lsl #1]
 800a560:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a564:	2600      	movs	r6, #0
 800a566:	fa4c f706 	asr.w	r7, ip, r6
 800a56a:	07ff      	lsls	r7, r7, #31
 800a56c:	d507      	bpl.n	800a57e <RegionCommonChanVerifyDr+0x3a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800a56e:	7a1f      	ldrb	r7, [r3, #8]
    if( ( value >= min ) && ( value <= max ) )
 800a570:	f007 0e0f 	and.w	lr, r7, #15
 800a574:	4596      	cmp	lr, r2
 800a576:	dc02      	bgt.n	800a57e <RegionCommonChanVerifyDr+0x3a>
 800a578:	ebb2 1f17 	cmp.w	r2, r7, lsr #4
 800a57c:	dd0d      	ble.n	800a59a <RegionCommonChanVerifyDr+0x56>
        for( uint8_t j = 0; j < 16; j++ )
 800a57e:	3601      	adds	r6, #1
 800a580:	2e10      	cmp	r6, #16
 800a582:	f103 030c 	add.w	r3, r3, #12
 800a586:	d1ee      	bne.n	800a566 <RegionCommonChanVerifyDr+0x22>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a588:	3401      	adds	r4, #1
 800a58a:	b2e4      	uxtb	r4, r4
 800a58c:	0123      	lsls	r3, r4, #4
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	4298      	cmp	r0, r3
 800a592:	d8e1      	bhi.n	800a558 <RegionCommonChanVerifyDr+0x14>
 800a594:	e7de      	b.n	800a554 <RegionCommonChanVerifyDr+0x10>
 800a596:	2400      	movs	r4, #0
 800a598:	e7f8      	b.n	800a58c <RegionCommonChanVerifyDr+0x48>
                    return true;
 800a59a:	2001      	movs	r0, #1
 800a59c:	e7db      	b.n	800a556 <RegionCommonChanVerifyDr+0x12>

0800a59e <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 800a59e:	4288      	cmp	r0, r1
 800a5a0:	db04      	blt.n	800a5ac <RegionCommonValueInRange+0xe>
 800a5a2:	4290      	cmp	r0, r2
 800a5a4:	bfcc      	ite	gt
 800a5a6:	2000      	movgt	r0, #0
 800a5a8:	2001      	movle	r0, #1
 800a5aa:	4770      	bx	lr
    {
        return 1;
    }
    return 0;
 800a5ac:	2000      	movs	r0, #0
}
 800a5ae:	4770      	bx	lr

0800a5b0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800a5b0:	b510      	push	{r4, lr}
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800a5b2:	0914      	lsrs	r4, r2, #4
 800a5b4:	ebb4 1f11 	cmp.w	r4, r1, lsr #4
{
 800a5b8:	4603      	mov	r3, r0
    uint8_t index = id / 16;
 800a5ba:	ea4f 1011 	mov.w	r0, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800a5be:	d30e      	bcc.n	800a5de <RegionCommonChanDisable+0x2e>
 800a5c0:	4291      	cmp	r1, r2
 800a5c2:	d20c      	bcs.n	800a5de <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800a5c4:	b202      	sxth	r2, r0
 800a5c6:	f001 010f 	and.w	r1, r1, #15
 800a5ca:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	fa00 f101 	lsl.w	r1, r0, r1
 800a5d4:	ea24 0101 	bic.w	r1, r4, r1
 800a5d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    return true;
}
 800a5dc:	bd10      	pop	{r4, pc}
        return false;
 800a5de:	2000      	movs	r0, #0
 800a5e0:	e7fc      	b.n	800a5dc <RegionCommonChanDisable+0x2c>

0800a5e2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800a5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800a5e4:	b128      	cbz	r0, 800a5f2 <RegionCommonCountChannels+0x10>
 800a5e6:	eb00 0541 	add.w	r5, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800a5ea:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
 800a5ec:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a5ee:	4291      	cmp	r1, r2
 800a5f0:	d300      	bcc.n	800a5f4 <RegionCommonCountChannels+0x12>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800a5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a5f4:	2400      	movs	r4, #0
 800a5f6:	f835 cb02 	ldrh.w	ip, [r5], #2
    uint8_t nbActiveBits = 0;
 800a5fa:	4623      	mov	r3, r4
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800a5fc:	fa07 f604 	lsl.w	r6, r7, r4
 800a600:	ea36 060c 	bics.w	r6, r6, ip
            nbActiveBits++;
 800a604:	bf08      	it	eq
 800a606:	3301      	addeq	r3, #1
    for( uint8_t j = 0; j < nbBits; j++ )
 800a608:	f104 0401 	add.w	r4, r4, #1
            nbActiveBits++;
 800a60c:	bf08      	it	eq
 800a60e:	b2db      	uxtbeq	r3, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800a610:	2c10      	cmp	r4, #16
 800a612:	d1f3      	bne.n	800a5fc <RegionCommonCountChannels+0x1a>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a614:	4418      	add	r0, r3
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a616:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a618:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a61a:	b2c9      	uxtb	r1, r1
 800a61c:	e7e7      	b.n	800a5ee <RegionCommonCountChannels+0xc>

0800a61e <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800a61e:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800a620:	b100      	cbz	r0, 800a624 <RegionCommonChanMaskCopy+0x6>
 800a622:	b949      	cbnz	r1, 800a638 <RegionCommonChanMaskCopy+0x1a>
        for( uint8_t i = 0; i < len; i++ )
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800a624:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800a626:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 800a62a:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800a62e:	3301      	adds	r3, #1
 800a630:	b2dc      	uxtb	r4, r3
 800a632:	42a2      	cmp	r2, r4
 800a634:	d8f7      	bhi.n	800a626 <RegionCommonChanMaskCopy+0x8>
 800a636:	e7f5      	b.n	800a624 <RegionCommonChanMaskCopy+0x6>
 800a638:	2300      	movs	r3, #0
 800a63a:	e7f9      	b.n	800a630 <RegionCommonChanMaskCopy+0x12>

0800a63c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800a63c:	b082      	sub	sp, #8
 800a63e:	b530      	push	{r4, r5, lr}
 800a640:	8804      	ldrh	r4, [r0, #0]
 800a642:	9304      	str	r3, [sp, #16]
    if( joined == false )
 800a644:	b9d2      	cbnz	r2, 800a67c <RegionCommonSetBandTxDone+0x40>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800a646:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800a64a:	d315      	bcc.n	800a678 <RegionCommonSetBandTxDone+0x3c>
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800a64c:	f649 25af 	movw	r5, #39599	@ 0x9aaf
 800a650:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a654:	42ab      	cmp	r3, r5
 800a656:	bf98      	it	ls
 800a658:	f44f 727a 	movls.w	r2, #1000	@ 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800a65c:	4294      	cmp	r4, r2
 800a65e:	bf38      	it	cc
 800a660:	4614      	movcc	r4, r2
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800a662:	4361      	muls	r1, r4
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800a664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800a668:	68c3      	ldr	r3, [r0, #12]
 800a66a:	428b      	cmp	r3, r1
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800a66c:	bf8c      	ite	hi
 800a66e:	1a5b      	subhi	r3, r3, r1
        band->TimeCredits = 0;
 800a670:	2300      	movls	r3, #0
 800a672:	60c3      	str	r3, [r0, #12]
}
 800a674:	b002      	add	sp, #8
 800a676:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800a678:	2264      	movs	r2, #100	@ 0x64
 800a67a:	e7ef      	b.n	800a65c <RegionCommonSetBandTxDone+0x20>
    if( dutyCycle == 0 )
 800a67c:	2c01      	cmp	r4, #1
 800a67e:	bf38      	it	cc
 800a680:	2401      	movcc	r4, #1
 800a682:	e7ee      	b.n	800a662 <RegionCommonSetBandTxDone+0x26>

0800a684 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a688:	b08f      	sub	sp, #60	@ 0x3c
 800a68a:	4615      	mov	r5, r2
 800a68c:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800a68e:	9303      	str	r3, [sp, #12]
 800a690:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800a694:	9307      	str	r3, [sp, #28]
 800a696:	460c      	mov	r4, r1
 800a698:	4680      	mov	r8, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800a69a:	f002 fe19 	bl	800d2d0 <UTIL_TIMER_GetCurrentTime>
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800a69e:	4a6a      	ldr	r2, [pc, #424]	@ (800a848 <RegionCommonUpdateBandTimeOff+0x1c4>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800a6a0:	9005      	str	r0, [sp, #20]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800a6a2:	f5a7 33f6 	sub.w	r3, r7, #125952	@ 0x1ec00
 800a6a6:	3b30      	subs	r3, #48	@ 0x30
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800a6a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6ac:	4353      	muls	r3, r2
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800a6ae:	f503 3bf6 	add.w	fp, r3, #125952	@ 0x1ec00
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	2318      	movs	r3, #24
 800a6b6:	fb13 4305 	smlabb	r3, r3, r5, r4
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800a6ba:	f10b 0b30 	add.w	fp, fp, #48	@ 0x30
 800a6be:	9306      	str	r3, [sp, #24]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800a6c0:	2500      	movs	r5, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800a6c2:	f04f 3aff 	mov.w	sl, #4294967295

    for( uint8_t i = 0; i < nbBands; i++ )
 800a6c6:	9b06      	ldr	r3, [sp, #24]
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	d107      	bne.n	800a6dc <RegionCommonUpdateBandTimeOff+0x58>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800a6cc:	2d00      	cmp	r5, #0
    }
    return minTimeToWait;
}
 800a6ce:	bf14      	ite	ne
 800a6d0:	4650      	movne	r0, sl
 800a6d2:	f04f 30ff 	moveq.w	r0, #4294967295
 800a6d6:	b00f      	add	sp, #60	@ 0x3c
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800a6dc:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
 800a6e0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800a6e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6e6:	9719      	str	r7, [sp, #100]	@ 0x64
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	9708      	str	r7, [sp, #32]
 800a6ec:	f002 fd80 	bl	800d1f0 <SysTimeToMs>
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800a6f0:	8826      	ldrh	r6, [r4, #0]
    if( joined == false )
 800a6f2:	f1b8 0f00 	cmp.w	r8, #0
 800a6f6:	d15f      	bne.n	800a7b8 <RegionCommonUpdateBandTimeOff+0x134>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800a6f8:	f5b7 6f61 	cmp.w	r7, #3600	@ 0xe10
 800a6fc:	d35a      	bcc.n	800a7b4 <RegionCommonUpdateBandTimeOff+0x130>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800a6fe:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800a702:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a706:	4297      	cmp	r7, r2
 800a708:	bf98      	it	ls
 800a70a:	f44f 737a 	movls.w	r3, #1000	@ 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800a70e:	429e      	cmp	r6, r3
 800a710:	bf38      	it	cc
 800a712:	461e      	movcc	r6, r3
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800a714:	2e64      	cmp	r6, #100	@ 0x64
 800a716:	d159      	bne.n	800a7cc <RegionCommonUpdateBandTimeOff+0x148>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800a718:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 800a854 <RegionCommonUpdateBandTimeOff+0x1d0>
            band->LastMaxCreditAssignTime = elapsedTime;
 800a71c:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800a71e:	68a1      	ldr	r1, [r4, #8]
 800a720:	a80c      	add	r0, sp, #48	@ 0x30
 800a722:	f002 fd87 	bl	800d234 <SysTimeFromMs>
 800a726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800a72e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a730:	a80a      	add	r0, sp, #40	@ 0x28
 800a732:	f002 fcde 	bl	800d0f2 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800a736:	9a03      	ldr	r2, [sp, #12]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800a738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800a73a:	b90a      	cbnz	r2, 800a740 <RegionCommonUpdateBandTimeOff+0xbc>
 800a73c:	9a07      	ldr	r2, [sp, #28]
 800a73e:	b12a      	cbz	r2, 800a74c <RegionCommonUpdateBandTimeOff+0xc8>
 800a740:	6922      	ldr	r2, [r4, #16]
 800a742:	454a      	cmp	r2, r9
 800a744:	d102      	bne.n	800a74c <RegionCommonUpdateBandTimeOff+0xc8>
            ( band->MaxTimeCredits != maxCredits ) ||
 800a746:	4a41      	ldr	r2, [pc, #260]	@ (800a84c <RegionCommonUpdateBandTimeOff+0x1c8>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d90e      	bls.n	800a76a <RegionCommonUpdateBandTimeOff+0xe6>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800a74c:	4b40      	ldr	r3, [pc, #256]	@ (800a850 <RegionCommonUpdateBandTimeOff+0x1cc>)
            band->TimeCredits = maxCredits;
 800a74e:	f8c4 900c 	str.w	r9, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800a752:	429f      	cmp	r7, r3
 800a754:	d909      	bls.n	800a76a <RegionCommonUpdateBandTimeOff+0xe6>
                timeDiff.SubSeconds = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800a75c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a75e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a762:	4658      	mov	r0, fp
 800a764:	f002 fd44 	bl	800d1f0 <SysTimeToMs>
 800a768:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 800a76a:	6860      	ldr	r0, [r4, #4]
 800a76c:	b908      	cbnz	r0, 800a772 <RegionCommonUpdateBandTimeOff+0xee>
        band->TimeCredits = maxCredits;
 800a76e:	f8c4 900c 	str.w	r9, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800a772:	f8c4 9010 	str.w	r9, [r4, #16]
    if( joined == true )
 800a776:	f1b8 0f00 	cmp.w	r8, #0
 800a77a:	d004      	beq.n	800a786 <RegionCommonUpdateBandTimeOff+0x102>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800a77c:	f002 fdb2 	bl	800d2e4 <UTIL_TIMER_GetElapsedTime>
 800a780:	68e3      	ldr	r3, [r4, #12]
 800a782:	4403      	add	r3, r0
 800a784:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800a786:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800a78a:	4293      	cmp	r3, r2
    band->LastBandUpdateTime = currentTime;
 800a78c:	9b05      	ldr	r3, [sp, #20]
        band->TimeCredits = band->MaxTimeCredits;
 800a78e:	bf88      	it	hi
 800a790:	60e2      	strhi	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800a792:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800a794:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800a796:	68e1      	ldr	r1, [r4, #12]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800a798:	4373      	muls	r3, r6
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800a79a:	4299      	cmp	r1, r3
 800a79c:	d804      	bhi.n	800a7a8 <RegionCommonUpdateBandTimeOff+0x124>
 800a79e:	9803      	ldr	r0, [sp, #12]
 800a7a0:	b9e8      	cbnz	r0, 800a7de <RegionCommonUpdateBandTimeOff+0x15a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800a7a2:	f1b8 0f00 	cmp.w	r8, #0
 800a7a6:	d01a      	beq.n	800a7de <RegionCommonUpdateBandTimeOff+0x15a>
            bands[i].ReadyForTransmission = true;
 800a7a8:	2301      	movs	r3, #1
            validBands++;
 800a7aa:	441d      	add	r5, r3
            bands[i].ReadyForTransmission = true;
 800a7ac:	7523      	strb	r3, [r4, #20]
            validBands++;
 800a7ae:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < nbBands; i++ )
 800a7b0:	3418      	adds	r4, #24
 800a7b2:	e788      	b.n	800a6c6 <RegionCommonUpdateBandTimeOff+0x42>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800a7b4:	2364      	movs	r3, #100	@ 0x64
 800a7b6:	e7aa      	b.n	800a70e <RegionCommonUpdateBandTimeOff+0x8a>
        if( dutyCycleEnabled == false )
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	b90b      	cbnz	r3, 800a7c0 <RegionCommonUpdateBandTimeOff+0x13c>
            band->TimeCredits = maxCredits;
 800a7bc:	4b25      	ldr	r3, [pc, #148]	@ (800a854 <RegionCommonUpdateBandTimeOff+0x1d0>)
 800a7be:	60e3      	str	r3, [r4, #12]
 800a7c0:	2e01      	cmp	r6, #1
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800a7c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a854 <RegionCommonUpdateBandTimeOff+0x1d0>
 800a7c6:	bf38      	it	cc
 800a7c8:	2601      	movcc	r6, #1
 800a7ca:	e7ce      	b.n	800a76a <RegionCommonUpdateBandTimeOff+0xe6>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800a7cc:	f5b6 7f7a 	cmp.w	r6, #1000	@ 0x3e8
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800a7d0:	bf0a      	itet	eq
 800a7d2:	f8df 9088 	ldreq.w	r9, [pc, #136]	@ 800a85c <RegionCommonUpdateBandTimeOff+0x1d8>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800a7d6:	f8df 9088 	ldrne.w	r9, [pc, #136]	@ 800a860 <RegionCommonUpdateBandTimeOff+0x1dc>
            band->LastMaxCreditAssignTime = elapsedTime;
 800a7da:	60a0      	streq	r0, [r4, #8]
 800a7dc:	e79f      	b.n	800a71e <RegionCommonUpdateBandTimeOff+0x9a>
            bands[i].ReadyForTransmission = false;
 800a7de:	2000      	movs	r0, #0
            if( bands[i].MaxTimeCredits > creditCosts )
 800a7e0:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
 800a7e2:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800a7e4:	d206      	bcs.n	800a7f4 <RegionCommonUpdateBandTimeOff+0x170>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800a7e6:	1a5b      	subs	r3, r3, r1
 800a7e8:	459a      	cmp	sl, r3
                validBands++;
 800a7ea:	f105 0501 	add.w	r5, r5, #1
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800a7ee:	bf28      	it	cs
 800a7f0:	469a      	movcs	sl, r3
                validBands++;
 800a7f2:	b2ed      	uxtb	r5, r5
            if( joined == false )
 800a7f4:	f1b8 0f00 	cmp.w	r8, #0
 800a7f8:	d1da      	bne.n	800a7b0 <RegionCommonUpdateBandTimeOff+0x12c>
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800a7fa:	2e64      	cmp	r6, #100	@ 0x64
 800a7fc:	4a16      	ldr	r2, [pc, #88]	@ (800a858 <RegionCommonUpdateBandTimeOff+0x1d4>)
                SysTime_t backoffTimeRange = {
 800a7fe:	f8ad 802c 	strh.w	r8, [sp, #44]	@ 0x2c
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800a802:	d01d      	beq.n	800a840 <RegionCommonUpdateBandTimeOff+0x1bc>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800a804:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 800a808:	f5b6 7f7a 	cmp.w	r6, #1000	@ 0x3e8
 800a80c:	bf18      	it	ne
 800a80e:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800a810:	4297      	cmp	r7, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800a812:	bf81      	itttt	hi
 800a814:	9a04      	ldrhi	r2, [sp, #16]
 800a816:	f502 32a8 	addhi.w	r2, r2, #86016	@ 0x15000
 800a81a:	f502 72c0 	addhi.w	r2, r2, #384	@ 0x180
 800a81e:	189b      	addhi	r3, r3, r2
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800a820:	930a      	str	r3, [sp, #40]	@ 0x28
 800a822:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	ae0a      	add	r6, sp, #40	@ 0x28
 800a828:	e896 0006 	ldmia.w	r6, {r1, r2}
 800a82c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a82e:	4630      	mov	r0, r6
 800a830:	f002 fc5f 	bl	800d0f2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800a834:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a838:	f002 fcda 	bl	800d1f0 <SysTimeToMs>
 800a83c:	4682      	mov	sl, r0
 800a83e:	e7b7      	b.n	800a7b0 <RegionCommonUpdateBandTimeOff+0x12c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800a840:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800a844:	e7e4      	b.n	800a810 <RegionCommonUpdateBandTimeOff+0x18c>
 800a846:	bf00      	nop
 800a848:	00015180 	.word	0x00015180
 800a84c:	0001517f 	.word	0x0001517f
 800a850:	0001ec2f 	.word	0x0001ec2f
 800a854:	001b7740 	.word	0x001b7740
 800a858:	0001ec30 	.word	0x0001ec30
 800a85c:	0112a880 	.word	0x0112a880
 800a860:	02932e00 	.word	0x02932e00

0800a864 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800a864:	7803      	ldrb	r3, [r0, #0]
 800a866:	2b03      	cmp	r3, #3
 800a868:	d114      	bne.n	800a894 <RegionCommonParseLinkAdrReq+0x30>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800a86a:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800a86c:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800a870:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800a872:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800a874:	704b      	strb	r3, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800a876:	7883      	ldrb	r3, [r0, #2]
 800a878:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800a87a:	78c2      	ldrb	r2, [r0, #3]
 800a87c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a880:	808b      	strh	r3, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800a882:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800a884:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 800a888:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800a88c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800a88e:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800a890:	2005      	movs	r0, #5
 800a892:	4770      	bx	lr
    uint8_t retIndex = 0;
 800a894:	2000      	movs	r0, #0
    }
    return retIndex;
}
 800a896:	4770      	bx	lr

0800a898 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800a898:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a89c:	4698      	mov	r8, r3
    int8_t datarate = verifyParams->Datarate;
    int8_t txPower = verifyParams->TxPower;
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800a89e:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 800a8a0:	7905      	ldrb	r5, [r0, #4]
    int8_t txPower = verifyParams->TxPower;
 800a8a2:	f990 7007 	ldrsb.w	r7, [r0, #7]
{
 800a8a6:	4691      	mov	r9, r2
 800a8a8:	4604      	mov	r4, r0
    int8_t datarate = verifyParams->Datarate;
 800a8aa:	f990 2006 	ldrsb.w	r2, [r0, #6]
{
 800a8ae:	468a      	mov	sl, r1
    if( verifyParams->AdrEnabled == false )
 800a8b0:	b323      	cbz	r3, 800a8fc <RegionCommonLinkAdrReqVerifyParams+0x64>
    int8_t nbRepetitions = verifyParams->NbRep;
 800a8b2:	f990 6008 	ldrsb.w	r6, [r0, #8]
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800a8b6:	b1bd      	cbz	r5, 800a8e8 <RegionCommonLinkAdrReqVerifyParams+0x50>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800a8b8:	69a3      	ldr	r3, [r4, #24]
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800a8c6:	6921      	ldr	r1, [r4, #16]
 800a8c8:	7b20      	ldrb	r0, [r4, #12]
 800a8ca:	f7ff fe3b 	bl	800a544 <RegionCommonChanVerifyDr>
 800a8ce:	b908      	cbnz	r0, 800a8d4 <RegionCommonLinkAdrReqVerifyParams+0x3c>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800a8d0:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800a8d4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    if( ( value >= min ) && ( value <= max ) )
 800a8d8:	42bb      	cmp	r3, r7
 800a8da:	dc16      	bgt.n	800a90a <RegionCommonLinkAdrReqVerifyParams+0x72>
 800a8dc:	f994 301c 	ldrsb.w	r3, [r4, #28]
 800a8e0:	42bb      	cmp	r3, r7
 800a8e2:	da13      	bge.n	800a90c <RegionCommonLinkAdrReqVerifyParams+0x74>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800a8e4:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800a8e8:	4628      	mov	r0, r5
    *dr = datarate;
 800a8ea:	f88a 2000 	strb.w	r2, [sl]
    *txPow = txPower;
 800a8ee:	f889 7000 	strb.w	r7, [r9]
    *nbRep = nbRepetitions;
 800a8f2:	f888 6000 	strb.w	r6, [r8]
}
 800a8f6:	b002      	add	sp, #8
 800a8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nbRepetitions = verifyParams->CurrentNbRep;
 800a8fc:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800a900:	f990 2009 	ldrsb.w	r2, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800a904:	f990 700a 	ldrsb.w	r7, [r0, #10]
 800a908:	e7d5      	b.n	800a8b6 <RegionCommonLinkAdrReqVerifyParams+0x1e>
 800a90a:	461f      	mov	r7, r3
    if( status == 0x07 )
 800a90c:	2d07      	cmp	r5, #7
 800a90e:	d1eb      	bne.n	800a8e8 <RegionCommonLinkAdrReqVerifyParams+0x50>
            nbRepetitions = 1;
 800a910:	2e00      	cmp	r6, #0
 800a912:	bf08      	it	eq
 800a914:	2601      	moveq	r6, #1
 800a916:	e7e7      	b.n	800a8e8 <RegionCommonLinkAdrReqVerifyParams+0x50>

0800a918 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800a918:	4b02      	ldr	r3, [pc, #8]	@ (800a924 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800a91a:	fa03 f000 	lsl.w	r0, r3, r0
}
 800a91e:	fbb0 f0f1 	udiv	r0, r0, r1
 800a922:	4770      	bx	lr
 800a924:	000f4240 	.word	0x000f4240

0800a928 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800a928:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800a92c:	fbb3 f0f0 	udiv	r0, r3, r0
 800a930:	4770      	bx	lr

0800a932 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800a932:	b530      	push	{r4, r5, lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800a934:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 800a938:	1f0c      	subs	r4, r1, #4
 800a93a:	436a      	muls	r2, r5
 800a93c:	fb00 2204 	mla	r2, r0, r4, r2
 800a940:	0052      	lsls	r2, r2, #1
 800a942:	bf1e      	ittt	ne
 800a944:	f100 34ff 	addne.w	r4, r0, #4294967295
 800a948:	1912      	addne	r2, r2, r4
 800a94a:	fbb2 f2f0 	udivne	r2, r2, r0
 800a94e:	4291      	cmp	r1, r2
 800a950:	bf38      	it	cc
 800a952:	4611      	movcc	r1, r2
 800a954:	9a03      	ldr	r2, [sp, #12]
 800a956:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800a958:	0082      	lsls	r2, r0, #2
 800a95a:	4348      	muls	r0, r1
 800a95c:	bf1c      	itt	ne
 800a95e:	3001      	addne	r0, #1
 800a960:	0840      	lsrne	r0, r0, #1
 800a962:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a966:	1a12      	subs	r2, r2, r0
 800a968:	fb01 2313 	mls	r3, r1, r3, r2
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	bfca      	itet	gt
 800a970:	f203 33e7 	addwgt	r3, r3, #999	@ 0x3e7
 800a974:	fb93 f1f1 	sdivle	r1, r3, r1
 800a978:	fbb3 f1f1 	udivgt	r1, r3, r1
 800a97c:	9b04      	ldr	r3, [sp, #16]
 800a97e:	6019      	str	r1, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800a980:	bd30      	pop	{r4, r5, pc}

0800a982 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800a982:	0040      	lsls	r0, r0, #1
 800a984:	ee07 0a90 	vmov	s15, r0
 800a988:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 800a98c:	b508      	push	{r3, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800a98e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a992:	ee70 7a60 	vsub.f32	s15, s0, s1
 800a996:	ee17 0a90 	vmov	r0, s15
 800a99a:	f7f5 fd81 	bl	80004a0 <__aeabi_f2d>
 800a99e:	ec41 0b10 	vmov	d0, r0, r1
 800a9a2:	f002 ff1d 	bl	800d7e0 <floor>
 800a9a6:	ec51 0b10 	vmov	r0, r1, d0
 800a9aa:	f7f5 fe59 	bl	8000660 <__aeabi_d2iz>

    return phyTxPower;
}
 800a9ae:	b240      	sxtb	r0, r0
 800a9b0:	bd08      	pop	{r3, pc}

0800a9b2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800a9b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b6:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800a9b8:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800a9ba:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800a9bc:	469e      	mov	lr, r3
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800a9be:	8a04      	ldrh	r4, [r0, #16]
 800a9c0:	011e      	lsls	r6, r3, #4
 800a9c2:	b2f6      	uxtb	r6, r6
 800a9c4:	42b4      	cmp	r4, r6
 800a9c6:	d946      	bls.n	800aa56 <RegionCommonCountNbOfEnabledChannels+0xa4>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800a9c8:	eb06 0546 	add.w	r5, r6, r6, lsl #1
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800a9cc:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800a9d0:	00ad      	lsls	r5, r5, #2
 800a9d2:	2400      	movs	r4, #0
 800a9d4:	6847      	ldr	r7, [r0, #4]
 800a9d6:	f837 7009 	ldrh.w	r7, [r7, r9]
 800a9da:	4127      	asrs	r7, r4
 800a9dc:	07ff      	lsls	r7, r7, #31
 800a9de:	d529      	bpl.n	800aa34 <RegionCommonCountNbOfEnabledChannels+0x82>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800a9e0:	6887      	ldr	r7, [r0, #8]
 800a9e2:	eb07 0a05 	add.w	sl, r7, r5
 800a9e6:	597f      	ldr	r7, [r7, r5]
 800a9e8:	b327      	cbz	r7, 800aa34 <RegionCommonCountNbOfEnabledChannels+0x82>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800a9ea:	7807      	ldrb	r7, [r0, #0]
 800a9ec:	b937      	cbnz	r7, 800a9fc <RegionCommonCountNbOfEnabledChannels+0x4a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800a9ee:	6947      	ldr	r7, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800a9f0:	b127      	cbz	r7, 800a9fc <RegionCommonCountNbOfEnabledChannels+0x4a>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800a9f2:	f837 7009 	ldrh.w	r7, [r7, r9]
 800a9f6:	4127      	asrs	r7, r4
 800a9f8:	07ff      	lsls	r7, r7, #31
 800a9fa:	d51b      	bpl.n	800aa34 <RegionCommonCountNbOfEnabledChannels+0x82>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800a9fc:	f89a 7008 	ldrb.w	r7, [sl, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800aa00:	f990 b001 	ldrsb.w	fp, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800aa04:	f347 0803 	sbfx	r8, r7, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 800aa08:	fa4f f888 	sxtb.w	r8, r8
 800aa0c:	45d8      	cmp	r8, fp
 800aa0e:	dc11      	bgt.n	800aa34 <RegionCommonCountNbOfEnabledChannels+0x82>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800aa10:	f347 1703 	sbfx	r7, r7, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 800aa14:	b27f      	sxtb	r7, r7
 800aa16:	455f      	cmp	r7, fp
 800aa18:	db0c      	blt.n	800aa34 <RegionCommonCountNbOfEnabledChannels+0x82>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800aa1a:	f89a 7009 	ldrb.w	r7, [sl, #9]
 800aa1e:	eb07 0847 	add.w	r8, r7, r7, lsl #1
 800aa22:	68c7      	ldr	r7, [r0, #12]
 800aa24:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800aa28:	7d3f      	ldrb	r7, [r7, #20]
 800aa2a:	b95f      	cbnz	r7, 800aa44 <RegionCommonCountNbOfEnabledChannels+0x92>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 800aa2c:	f10c 0c01 	add.w	ip, ip, #1
 800aa30:	fa5f fc8c 	uxtb.w	ip, ip
        for( uint8_t j = 0; j < 16; j++ )
 800aa34:	3401      	adds	r4, #1
 800aa36:	2c10      	cmp	r4, #16
 800aa38:	f105 050c 	add.w	r5, r5, #12
 800aa3c:	d1ca      	bne.n	800a9d4 <RegionCommonCountNbOfEnabledChannels+0x22>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800aa3e:	3301      	adds	r3, #1
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	e7bc      	b.n	800a9be <RegionCommonCountNbOfEnabledChannels+0xc>
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800aa44:	f10e 0701 	add.w	r7, lr, #1
 800aa48:	eb06 0804 	add.w	r8, r6, r4
 800aa4c:	f801 800e 	strb.w	r8, [r1, lr]
 800aa50:	fa5f fe87 	uxtb.w	lr, r7
 800aa54:	e7ee      	b.n	800aa34 <RegionCommonCountNbOfEnabledChannels+0x82>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800aa56:	9b01      	ldr	r3, [sp, #4]
    *nbEnabledChannels = nbChannelCount;
 800aa58:	f882 e000 	strb.w	lr, [r2]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800aa5c:	f883 c000 	strb.w	ip, [r3]
}
 800aa60:	b003      	add	sp, #12
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa66 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800aa66:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa6a:	4604      	mov	r4, r0
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800aa6c:	6840      	ldr	r0, [r0, #4]
{
 800aa6e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	@ 0x30
 800aa72:	461d      	mov	r5, r3
 800aa74:	468a      	mov	sl, r1
 800aa76:	4691      	mov	r9, r2
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800aa78:	f002 fc34 	bl	800d2e4 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800aa7c:	6823      	ldr	r3, [r4, #0]
 800aa7e:	1a1b      	subs	r3, r3, r0
 800aa80:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
    *nbEnabledChannels = 0;
 800aa82:	f04f 0800 	mov.w	r8, #0
    *nbRestrictedChannels = 1;
 800aa86:	2301      	movs	r3, #1
 800aa88:	7033      	strb	r3, [r6, #0]
    *nbEnabledChannels = 0;
 800aa8a:	f885 8000 	strb.w	r8, [r5]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	b113      	cbz	r3, 800aa98 <RegionCommonIdentifyChannels+0x32>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	4283      	cmp	r3, r0
 800aa96:	d824      	bhi.n	800aae2 <RegionCommonIdentifyChannels+0x7c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800aa98:	f8d4 c01c 	ldr.w	ip, [r4, #28]
        *aggregatedTimeOff = 0;
 800aa9c:	f8ca 8000 	str.w	r8, [sl]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800aaa0:	69a3      	ldr	r3, [r4, #24]
 800aaa2:	f89c e000 	ldrb.w	lr, [ip]
 800aaa6:	9303      	str	r3, [sp, #12]
 800aaa8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800aaac:	ab01      	add	r3, sp, #4
 800aaae:	e883 0003 	stmia.w	r3, {r0, r1}
 800aab2:	7d23      	ldrb	r3, [r4, #20]
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800aaba:	7a23      	ldrb	r3, [r4, #8]
 800aabc:	7a62      	ldrb	r2, [r4, #9]
 800aabe:	4670      	mov	r0, lr
 800aac0:	f7ff fde0 	bl	800a684 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800aac4:	4633      	mov	r3, r6
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800aac6:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800aac8:	462a      	mov	r2, r5
 800aaca:	69e0      	ldr	r0, [r4, #28]
 800aacc:	4649      	mov	r1, r9
 800aace:	f7ff ff70 	bl	800a9b2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800aad2:	782b      	ldrb	r3, [r5, #0]
 800aad4:	b12b      	cbz	r3, 800aae2 <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
 800aad6:	f8c7 8000 	str.w	r8, [r7]
        return LORAMAC_STATUS_OK;
 800aada:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800aadc:	b004      	add	sp, #16
 800aade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( *nbRestrictedChannels > 0 )
 800aae2:	7833      	ldrb	r3, [r6, #0]
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bf0c      	ite	eq
 800aae8:	200c      	moveq	r0, #12
 800aaea:	200b      	movne	r0, #11
 800aaec:	e7f6      	b.n	800aadc <RegionCommonIdentifyChannels+0x76>

0800aaee <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800aaee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t drLocal = params->CurrentDr;
 800aaf0:	f990 2000 	ldrsb.w	r2, [r0]

    if( params->CurrentDr == params->MinDr )
 800aaf4:	f990 5002 	ldrsb.w	r5, [r0, #2]
 800aaf8:	4295      	cmp	r5, r2
{
 800aafa:	4604      	mov	r4, r0
    if( params->CurrentDr == params->MinDr )
 800aafc:	d00f      	beq.n	800ab1e <RegionCommonGetNextLowerTxDr+0x30>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800aafe:	3a01      	subs	r2, #1
 800ab00:	b252      	sxtb	r2, r2
        } while( ( drLocal != params->MinDr ) &&
 800ab02:	4295      	cmp	r5, r2
 800ab04:	d00b      	beq.n	800ab1e <RegionCommonGetNextLowerTxDr+0x30>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800ab06:	68a3      	ldr	r3, [r4, #8]
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	6861      	ldr	r1, [r4, #4]
 800ab12:	78e0      	ldrb	r0, [r4, #3]
 800ab14:	462b      	mov	r3, r5
 800ab16:	f7ff fd15 	bl	800a544 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d0ef      	beq.n	800aafe <RegionCommonGetNextLowerTxDr+0x10>

        return drLocal;
    }
}
 800ab1e:	4610      	mov	r0, r2
 800ab20:	b003      	add	sp, #12
 800ab22:	bd30      	pop	{r4, r5, pc}

0800ab24 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800ab24:	4288      	cmp	r0, r1
 800ab26:	bfb8      	it	lt
 800ab28:	4608      	movlt	r0, r1
 800ab2a:	4770      	bx	lr

0800ab2c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800ab2c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800ab30:	4b05      	ldr	r3, [pc, #20]	@ (800ab48 <RegionCommonGetBandwidth+0x1c>)
 800ab32:	4298      	cmp	r0, r3
 800ab34:	d005      	beq.n	800ab42 <RegionCommonGetBandwidth+0x16>
 800ab36:	4b05      	ldr	r3, [pc, #20]	@ (800ab4c <RegionCommonGetBandwidth+0x20>)
 800ab38:	1ac3      	subs	r3, r0, r3
 800ab3a:	4258      	negs	r0, r3
 800ab3c:	4158      	adcs	r0, r3
 800ab3e:	0040      	lsls	r0, r0, #1
 800ab40:	4770      	bx	lr
 800ab42:	2001      	movs	r0, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	0003d090 	.word	0x0003d090
 800ab4c:	0007a120 	.word	0x0007a120

0800ab50 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800ab50:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800ab52:	4d13      	ldr	r5, [pc, #76]	@ (800aba0 <RegionCommonRxConfigPrint+0x50>)
{
 800ab54:	4606      	mov	r6, r0
 800ab56:	460f      	mov	r7, r1
 800ab58:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800ab5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 800ab5c:	b08b      	sub	sp, #44	@ 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800ab5e:	ac04      	add	r4, sp, #16
 800ab60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab62:	e895 0003 	ldmia.w	r5, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 800ab66:	2e05      	cmp	r6, #5
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800ab68:	e884 0003 	stmia.w	r4, {r0, r1}
    if ( rxSlot < RX_SLOT_NONE )
 800ab6c:	d80f      	bhi.n	800ab8e <RegionCommonRxConfigPrint+0x3e>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800ab6e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab70:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800ab74:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	2100      	movs	r1, #0
 800ab82:	4b08      	ldr	r3, [pc, #32]	@ (800aba4 <RegionCommonRxConfigPrint+0x54>)
 800ab84:	2002      	movs	r0, #2
 800ab86:	f002 f8bf 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800ab8a:	b00b      	add	sp, #44	@ 0x2c
 800ab8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800ab8e:	e9cd 7c00 	strd	r7, ip, [sp]
 800ab92:	4b05      	ldr	r3, [pc, #20]	@ (800aba8 <RegionCommonRxConfigPrint+0x58>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	2100      	movs	r1, #0
 800ab98:	2002      	movs	r0, #2
 800ab9a:	f002 f8b5 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
}
 800ab9e:	e7f4      	b.n	800ab8a <RegionCommonRxConfigPrint+0x3a>
 800aba0:	0800dd24 	.word	0x0800dd24
 800aba4:	0800e3e0 	.word	0x0800e3e0
 800aba8:	0800e3ff 	.word	0x0800e3ff

0800abac <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800abac:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800abae:	4b05      	ldr	r3, [pc, #20]	@ (800abc4 <RegionCommonTxConfigPrint+0x18>)
 800abb0:	e9cd 0100 	strd	r0, r1, [sp]
 800abb4:	2201      	movs	r2, #1
 800abb6:	2100      	movs	r1, #0
 800abb8:	2002      	movs	r0, #2
 800abba:	f002 f8a5 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
}
 800abbe:	b003      	add	sp, #12
 800abc0:	f85d fb04 	ldr.w	pc, [sp], #4
 800abc4:	0800e41b 	.word	0x0800e41b

0800abc8 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abca:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800abcc:	4910      	ldr	r1, [pc, #64]	@ (800ac10 <GetTimeOnAir+0x48>)
{
 800abce:	b085      	sub	sp, #20
    int8_t phyDr = DataratesEU868[datarate];
 800abd0:	560f      	ldrsb	r7, [r1, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800abd2:	3108      	adds	r1, #8
{
 800abd4:	4605      	mov	r5, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800abd6:	f7ff ffa9 	bl	800ab2c <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800abda:	4b0e      	ldr	r3, [pc, #56]	@ (800ac14 <GetTimeOnAir+0x4c>)
 800abdc:	b2e4      	uxtb	r4, r4
 800abde:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
    if( datarate == DR_7 )
 800abe0:	2d07      	cmp	r5, #7
 800abe2:	f04f 0301 	mov.w	r3, #1
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800abe6:	e9cd 4302 	strd	r4, r3, [sp, #8]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800abea:	4601      	mov	r1, r0
    if( datarate == DR_7 )
 800abec:	d10a      	bne.n	800ac04 <GetTimeOnAir+0x3c>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800abee:	2205      	movs	r2, #5
 800abf0:	2300      	movs	r3, #0
 800abf2:	e9cd 2300 	strd	r2, r3, [sp]
 800abf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800abfa:	437a      	muls	r2, r7
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800abfc:	4618      	mov	r0, r3
 800abfe:	47b0      	blx	r6
    }
    return timeOnAir;
}
 800ac00:	b005      	add	sp, #20
 800ac02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ac04:	2208      	movs	r2, #8
 800ac06:	2000      	movs	r0, #0
 800ac08:	e9cd 2000 	strd	r2, r0, [sp]
 800ac0c:	463a      	mov	r2, r7
 800ac0e:	e7f5      	b.n	800abfc <GetTimeOnAir+0x34>
 800ac10:	0800dd3c 	.word	0x0800dd3c
 800ac14:	0800de84 	.word	0x0800de84

0800ac18 <VerifyRfFreq>:
{
 800ac18:	b538      	push	{r3, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800ac1a:	4b19      	ldr	r3, [pc, #100]	@ (800ac80 <VerifyRfFreq+0x68>)
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
{
 800ac1e:	4604      	mov	r4, r0
 800ac20:	460d      	mov	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 800ac22:	4798      	blx	r3
 800ac24:	b158      	cbz	r0, 800ac3e <VerifyRfFreq+0x26>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800ac26:	4b17      	ldr	r3, [pc, #92]	@ (800ac84 <VerifyRfFreq+0x6c>)
 800ac28:	4a17      	ldr	r2, [pc, #92]	@ (800ac88 <VerifyRfFreq+0x70>)
 800ac2a:	4423      	add	r3, r4
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d907      	bls.n	800ac40 <VerifyRfFreq+0x28>
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800ac30:	4b16      	ldr	r3, [pc, #88]	@ (800ac8c <VerifyRfFreq+0x74>)
 800ac32:	4a17      	ldr	r2, [pc, #92]	@ (800ac90 <VerifyRfFreq+0x78>)
 800ac34:	4423      	add	r3, r4
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d80c      	bhi.n	800ac54 <VerifyRfFreq+0x3c>
 800ac3a:	2300      	movs	r3, #0
        *band = 0;
 800ac3c:	702b      	strb	r3, [r5, #0]
}
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	2302      	movs	r3, #2
 800ac42:	e7fb      	b.n	800ac3c <VerifyRfFreq+0x24>
 800ac44:	2301      	movs	r3, #1
 800ac46:	e7f9      	b.n	800ac3c <VerifyRfFreq+0x24>
 800ac48:	2305      	movs	r3, #5
 800ac4a:	e7f7      	b.n	800ac3c <VerifyRfFreq+0x24>
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e7f5      	b.n	800ac3c <VerifyRfFreq+0x24>
 800ac50:	2304      	movs	r3, #4
 800ac52:	e7f3      	b.n	800ac3c <VerifyRfFreq+0x24>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800ac54:	4b0f      	ldr	r3, [pc, #60]	@ (800ac94 <VerifyRfFreq+0x7c>)
 800ac56:	4a10      	ldr	r2, [pc, #64]	@ (800ac98 <VerifyRfFreq+0x80>)
 800ac58:	4423      	add	r3, r4
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d9f2      	bls.n	800ac44 <VerifyRfFreq+0x2c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac9c <VerifyRfFreq+0x84>)
 800ac60:	4a0f      	ldr	r2, [pc, #60]	@ (800aca0 <VerifyRfFreq+0x88>)
 800ac62:	4423      	add	r3, r4
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d9ef      	bls.n	800ac48 <VerifyRfFreq+0x30>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800ac68:	4b0e      	ldr	r3, [pc, #56]	@ (800aca4 <VerifyRfFreq+0x8c>)
 800ac6a:	4a0f      	ldr	r2, [pc, #60]	@ (800aca8 <VerifyRfFreq+0x90>)
 800ac6c:	4423      	add	r3, r4
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d9ec      	bls.n	800ac4c <VerifyRfFreq+0x34>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800ac72:	4b0e      	ldr	r3, [pc, #56]	@ (800acac <VerifyRfFreq+0x94>)
 800ac74:	4a0e      	ldr	r2, [pc, #56]	@ (800acb0 <VerifyRfFreq+0x98>)
 800ac76:	4423      	add	r3, r4
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d9e9      	bls.n	800ac50 <VerifyRfFreq+0x38>
        return false;
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	e7de      	b.n	800ac3e <VerifyRfFreq+0x26>
 800ac80:	0800de84 	.word	0x0800de84
 800ac84:	cc8faa40 	.word	0xcc8faa40
 800ac88:	001e847f 	.word	0x001e847f
 800ac8c:	cc7125c0 	.word	0xcc7125c0
 800ac90:	002dc6c0 	.word	0x002dc6c0
 800ac94:	cc435eff 	.word	0xcc435eff
 800ac98:	000927bf 	.word	0x000927bf
 800ac9c:	cc38b0a0 	.word	0xcc38b0a0
 800aca0:	0007a120 	.word	0x0007a120
 800aca4:	cc2e0240 	.word	0xcc2e0240
 800aca8:	0003d090 	.word	0x0003d090
 800acac:	cc296e60 	.word	0xcc296e60
 800acb0:	000493e0 	.word	0x000493e0

0800acb4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800acb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800acb6:	2300      	movs	r3, #0
 800acb8:	9300      	str	r3, [sp, #0]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800acba:	7803      	ldrb	r3, [r0, #0]
 800acbc:	3b0b      	subs	r3, #11
 800acbe:	2b2e      	cmp	r3, #46	@ 0x2e
 800acc0:	d86f      	bhi.n	800ada2 <RegionEU868GetPhyParam+0xee>
 800acc2:	e8df f003 	tbb	[pc, r3]
 800acc6:	302d      	.short	0x302d
 800acc8:	42403932 	.word	0x42403932
 800accc:	4e4b4845 	.word	0x4e4b4845
 800acd0:	5c6e5451 	.word	0x5c6e5451
 800acd4:	66625e6e 	.word	0x66625e6e
 800acd8:	6b6e6e68 	.word	0x6b6e6e68
 800acdc:	6e6e1872 	.word	0x6e6e1872
 800ace0:	6e6e6e6e 	.word	0x6e6e6e6e
 800ace4:	6e6e6e6e 	.word	0x6e6e6e6e
 800ace8:	5c6e6e6e 	.word	0x5c6e6e6e
 800acec:	6e6e7974 	.word	0x6e6e7974
 800acf0:	7b6e795c 	.word	0x7b6e795c
 800acf4:	80          	.byte	0x80
 800acf5:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800acf6:	7843      	ldrb	r3, [r0, #1]
 800acf8:	f88d 3004 	strb.w	r3, [sp, #4]
 800acfc:	2307      	movs	r3, #7
 800acfe:	f88d 3005 	strb.w	r3, [sp, #5]
 800ad02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad06:	f8ad 3006 	strh.w	r3, [sp, #6]
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800ad0a:	4b32      	ldr	r3, [pc, #200]	@ (800add4 <RegionEU868GetPhyParam+0x120>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800ad0e:	a801      	add	r0, sp, #4
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800ad10:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ad14:	e9cd 2302 	strd	r2, r3, [sp, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800ad18:	f7ff fee9 	bl	800aaee <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ad1c:	9000      	str	r0, [sp, #0]
            break;
 800ad1e:	e040      	b.n	800ada2 <RegionEU868GetPhyParam+0xee>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800ad20:	2340      	movs	r3, #64	@ 0x40
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ad22:	9300      	str	r3, [sp, #0]
            break;
 800ad24:	e03d      	b.n	800ada2 <RegionEU868GetPhyParam+0xee>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800ad26:	2320      	movs	r3, #32
 800ad28:	e7fb      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800ad2a:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800ad2e:	4b2a      	ldr	r3, [pc, #168]	@ (800add8 <RegionEU868GetPhyParam+0x124>)
 800ad30:	4413      	add	r3, r2
 800ad32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad36:	e7f4      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800ad38:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800ad3c:	4b26      	ldr	r3, [pc, #152]	@ (800add8 <RegionEU868GetPhyParam+0x124>)
 800ad3e:	4413      	add	r3, r2
 800ad40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ad44:	e7ed      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e7eb      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800ad4a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ad4e:	e7e8      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800ad50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ad54:	e7e5      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800ad56:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800ad5a:	e7e2      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800ad5c:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ad60:	e7df      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800ad62:	f241 7370 	movw	r3, #6000	@ 0x1770
 800ad66:	e7dc      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800ad68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ad6c:	e7d9      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800ad6e:	481b      	ldr	r0, [pc, #108]	@ (800addc <RegionEU868GetPhyParam+0x128>)
 800ad70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ad74:	f000 fca4 	bl	800b6c0 <randr>
 800ad78:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800ad7c:	e7ce      	b.n	800ad1c <RegionEU868GetPhyParam+0x68>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800ad7e:	4b18      	ldr	r3, [pc, #96]	@ (800ade0 <RegionEU868GetPhyParam+0x12c>)
 800ad80:	e7cf      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ad82:	4b14      	ldr	r3, [pc, #80]	@ (800add4 <RegionEU868GetPhyParam+0x120>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	33c0      	adds	r3, #192	@ 0xc0
 800ad88:	e7cb      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ad8a:	4b12      	ldr	r3, [pc, #72]	@ (800add4 <RegionEU868GetPhyParam+0x120>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	33c2      	adds	r3, #194	@ 0xc2
 800ad90:	e7c7      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800ad92:	2310      	movs	r3, #16
 800ad94:	e7c5      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ad96:	4b0f      	ldr	r3, [pc, #60]	@ (800add4 <RegionEU868GetPhyParam+0x120>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	e7c2      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800ad9c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ada0:	9300      	str	r3, [sp, #0]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 800ada2:	9800      	ldr	r0, [sp, #0]
 800ada4:	b005      	add	sp, #20
 800ada6:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800adaa:	4b0e      	ldr	r3, [pc, #56]	@ (800ade4 <RegionEU868GetPhyParam+0x130>)
 800adac:	e7f8      	b.n	800ada0 <RegionEU868GetPhyParam+0xec>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800adae:	f240 2311 	movw	r3, #529	@ 0x211
 800adb2:	f8ad 3000 	strh.w	r3, [sp]
            break;
 800adb6:	e7f4      	b.n	800ada2 <RegionEU868GetPhyParam+0xee>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800adb8:	2303      	movs	r3, #3
 800adba:	e7b2      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800adbc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800adc0:	4a05      	ldr	r2, [pc, #20]	@ (800add8 <RegionEU868GetPhyParam+0x124>)
 800adc2:	5cd3      	ldrb	r3, [r2, r3]
 800adc4:	e7ad      	b.n	800ad22 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800adc6:	4908      	ldr	r1, [pc, #32]	@ (800ade8 <RegionEU868GetPhyParam+0x134>)
 800adc8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800adcc:	f7ff feae 	bl	800ab2c <RegionCommonGetBandwidth>
 800add0:	e7a4      	b.n	800ad1c <RegionEU868GetPhyParam+0x68>
 800add2:	bf00      	nop
 800add4:	20000fec 	.word	0x20000fec
 800add8:	0800dd3c 	.word	0x0800dd3c
 800addc:	fffffc18 	.word	0xfffffc18
 800ade0:	33d3e608 	.word	0x33d3e608
 800ade4:	4009999a 	.word	0x4009999a
 800ade8:	0800dd44 	.word	0x0800dd44

0800adec <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800adec:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800adee:	4a0a      	ldr	r2, [pc, #40]	@ (800ae18 <RegionEU868SetBandTxDone+0x2c>)
 800adf0:	7801      	ldrb	r1, [r0, #0]
 800adf2:	6813      	ldr	r3, [r2, #0]
 800adf4:	6855      	ldr	r5, [r2, #4]
 800adf6:	240c      	movs	r4, #12
 800adf8:	fb04 3301 	mla	r3, r4, r1, r3
 800adfc:	7a5b      	ldrb	r3, [r3, #9]
 800adfe:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800ae02:	6903      	ldr	r3, [r0, #16]
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	68c3      	ldr	r3, [r0, #12]
 800ae08:	7842      	ldrb	r2, [r0, #1]
 800ae0a:	6881      	ldr	r1, [r0, #8]
 800ae0c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800ae10:	f7ff fc14 	bl	800a63c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 800ae14:	b003      	add	sp, #12
 800ae16:	bd30      	pop	{r4, r5, pc}
 800ae18:	20000fec 	.word	0x20000fec

0800ae1c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800ae1c:	b530      	push	{r4, r5, lr}
 800ae1e:	b0a5      	sub	sp, #148	@ 0x94
 800ae20:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ae22:	228e      	movs	r2, #142	@ 0x8e
 800ae24:	2100      	movs	r1, #0
 800ae26:	f10d 0002 	add.w	r0, sp, #2
 800ae2a:	f002 fc9d 	bl	800d768 <memset>
 800ae2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ae32:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800ae36:	f8ad 2078 	strh.w	r2, [sp, #120]	@ 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800ae3a:	7a22      	ldrb	r2, [r4, #8]
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ae3c:	2364      	movs	r3, #100	@ 0x64
 800ae3e:	210a      	movs	r1, #10
    switch( params->Type )
 800ae40:	2a01      	cmp	r2, #1
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ae42:	f8ad 3000 	strh.w	r3, [sp]
 800ae46:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ae4a:	f8ad 1048 	strh.w	r1, [sp, #72]	@ 0x48
 800ae4e:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
    switch( params->Type )
 800ae52:	d02c      	beq.n	800aeae <RegionEU868InitDefaults+0x92>
 800ae54:	2a02      	cmp	r2, #2
 800ae56:	d034      	beq.n	800aec2 <RegionEU868InitDefaults+0xa6>
 800ae58:	bb3a      	cbnz	r2, 800aeaa <RegionEU868InitDefaults+0x8e>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800ae5a:	6820      	ldr	r0, [r4, #0]
 800ae5c:	b328      	cbz	r0, 800aeaa <RegionEU868InitDefaults+0x8e>
 800ae5e:	6863      	ldr	r3, [r4, #4]
 800ae60:	b31b      	cbz	r3, 800aeaa <RegionEU868InitDefaults+0x8e>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800ae62:	4c1d      	ldr	r4, [pc, #116]	@ (800aed8 <RegionEU868InitDefaults+0xbc>)
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800ae64:	2290      	movs	r2, #144	@ 0x90
 800ae66:	4669      	mov	r1, sp
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ae68:	e9c4 3000 	strd	r3, r0, [r4]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800ae6c:	f000 fc44 	bl	800b6f8 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800ae70:	4b1a      	ldr	r3, [pc, #104]	@ (800aedc <RegionEU868InitDefaults+0xc0>)
 800ae72:	6824      	ldr	r4, [r4, #0]
 800ae74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800ae7c:	f103 020c 	add.w	r2, r3, #12
 800ae80:	ca07      	ldmia	r2, {r0, r1, r2}
 800ae82:	f104 050c 	add.w	r5, r4, #12
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800ae86:	3318      	adds	r3, #24
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800ae88:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800ae8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae90:	f104 0518 	add.w	r5, r4, #24
 800ae94:	e885 0007 	stmia.w	r5, {r0, r1, r2}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ae98:	4621      	mov	r1, r4
 800ae9a:	2307      	movs	r3, #7
 800ae9c:	f821 3fc2 	strh.w	r3, [r1, #194]!

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800aea0:	2201      	movs	r2, #1
 800aea2:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800aea6:	f7ff fbba 	bl	800a61e <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800aeaa:	b025      	add	sp, #148	@ 0x94
 800aeac:	bd30      	pop	{r4, r5, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800aeae:	4b0a      	ldr	r3, [pc, #40]	@ (800aed8 <RegionEU868InitDefaults+0xbc>)
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800aeb6:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800aeb8:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800aeba:	f100 01c2 	add.w	r1, r0, #194	@ 0xc2
 800aebe:	30c0      	adds	r0, #192	@ 0xc0
 800aec0:	e7f1      	b.n	800aea6 <RegionEU868InitDefaults+0x8a>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800aec2:	4b05      	ldr	r3, [pc, #20]	@ (800aed8 <RegionEU868InitDefaults+0xbc>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 800aeca:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	@ 0xc2
 800aece:	430a      	orrs	r2, r1
 800aed0:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
            break;
 800aed4:	e7e9      	b.n	800aeaa <RegionEU868InitDefaults+0x8e>
 800aed6:	bf00      	nop
 800aed8:	20000fec 	.word	0x20000fec
 800aedc:	0800dd74 	.word	0x0800dd74

0800aee0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800aee0:	b507      	push	{r0, r1, r2, lr}
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800aee2:	290f      	cmp	r1, #15
 800aee4:	d81f      	bhi.n	800af26 <RegionEU868Verify+0x46>
 800aee6:	e8df f001 	tbb	[pc, r1]
 800aeea:	1e0c      	.short	0x1e0c
 800aeec:	1c1e1e1e 	.word	0x1c1e1e1e
 800aef0:	1c1e1c12 	.word	0x1c1e1c12
 800aef4:	1e1e1e1c 	.word	0x1e1e1e1c
 800aef8:	081e      	.short	0x081e
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 800aefa:	2001      	movs	r0, #1
            return false;
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800aefc:	b003      	add	sp, #12
 800aefe:	f85d fb04 	ldr.w	pc, [sp], #4
            return VerifyRfFreq( verify->Frequency, &band );
 800af02:	f10d 0107 	add.w	r1, sp, #7
 800af06:	6800      	ldr	r0, [r0, #0]
 800af08:	f7ff fe86 	bl	800ac18 <VerifyRfFreq>
 800af0c:	e7f6      	b.n	800aefc <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800af0e:	2205      	movs	r2, #5
 800af10:	f990 0000 	ldrsb.w	r0, [r0]
 800af14:	2100      	movs	r1, #0
 800af16:	f7ff fb42 	bl	800a59e <RegionCommonValueInRange>
 800af1a:	3800      	subs	r0, #0
 800af1c:	bf18      	it	ne
 800af1e:	2001      	movne	r0, #1
 800af20:	e7ec      	b.n	800aefc <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800af22:	2207      	movs	r2, #7
 800af24:	e7f4      	b.n	800af10 <RegionEU868Verify+0x30>
    switch( phyAttribute )
 800af26:	2000      	movs	r0, #0
 800af28:	e7e8      	b.n	800aefc <RegionEU868Verify+0x1c>
	...

0800af2c <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800af2c:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800af2e:	7902      	ldrb	r2, [r0, #4]
 800af30:	b11a      	cbz	r2, 800af3a <RegionEU868ChanMaskSet+0xe>
 800af32:	2a01      	cmp	r2, #1
 800af34:	d00b      	beq.n	800af4e <RegionEU868ChanMaskSet+0x22>
 800af36:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800af38:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800af3a:	4b08      	ldr	r3, [pc, #32]	@ (800af5c <RegionEU868ChanMaskSet+0x30>)
 800af3c:	6801      	ldr	r1, [r0, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2201      	movs	r2, #1
 800af42:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 800af46:	f7ff fb6a 	bl	800a61e <RegionCommonChanMaskCopy>
    return true;
 800af4a:	2001      	movs	r0, #1
 800af4c:	e7f4      	b.n	800af38 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800af4e:	4b03      	ldr	r3, [pc, #12]	@ (800af5c <RegionEU868ChanMaskSet+0x30>)
 800af50:	6801      	ldr	r1, [r0, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f103 00c2 	add.w	r0, r3, #194	@ 0xc2
 800af58:	e7f5      	b.n	800af46 <RegionEU868ChanMaskSet+0x1a>
 800af5a:	bf00      	nop
 800af5c:	20000fec 	.word	0x20000fec

0800af60 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800af60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800af62:	2807      	cmp	r0, #7
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800af64:	4d15      	ldr	r5, [pc, #84]	@ (800afbc <RegionEU868ComputeRxWindowParameters+0x5c>)
{
 800af66:	461c      	mov	r4, r3
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800af68:	bfa8      	it	ge
 800af6a:	2007      	movge	r0, #7
 800af6c:	7058      	strb	r0, [r3, #1]
{
 800af6e:	460e      	mov	r6, r1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800af70:	f105 0108 	add.w	r1, r5, #8
{
 800af74:	4617      	mov	r7, r2
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800af76:	f7ff fdd9 	bl	800ab2c <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
 800af7a:	f994 3001 	ldrsb.w	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800af7e:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
 800af80:	2b07      	cmp	r3, #7
 800af82:	d113      	bne.n	800afac <RegionEU868ComputeRxWindowParameters+0x4c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800af84:	2032      	movs	r0, #50	@ 0x32
 800af86:	f7ff fccf 	bl	800a928 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800af8a:	4b0d      	ldr	r3, [pc, #52]	@ (800afc0 <RegionEU868ComputeRxWindowParameters+0x60>)
 800af8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800af8e:	4605      	mov	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800af90:	4798      	blx	r3
 800af92:	f104 020c 	add.w	r2, r4, #12
 800af96:	3408      	adds	r4, #8
 800af98:	4603      	mov	r3, r0
 800af9a:	9201      	str	r2, [sp, #4]
 800af9c:	9400      	str	r4, [sp, #0]
 800af9e:	463a      	mov	r2, r7
 800afa0:	4631      	mov	r1, r6
 800afa2:	4628      	mov	r0, r5
 800afa4:	f7ff fcc5 	bl	800a932 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800afa8:	b003      	add	sp, #12
 800afaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800afac:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800afb0:	5ce8      	ldrb	r0, [r5, r3]
 800afb2:	6891      	ldr	r1, [r2, #8]
 800afb4:	f7ff fcb0 	bl	800a918 <RegionCommonComputeSymbolTimeLoRa>
 800afb8:	e7e7      	b.n	800af8a <RegionEU868ComputeRxWindowParameters+0x2a>
 800afba:	bf00      	nop
 800afbc:	0800dd3c 	.word	0x0800dd3c
 800afc0:	0800de84 	.word	0x0800de84

0800afc4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t dr = rxConfig->Datarate;
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800afc8:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 800b0bc <RegionEU868RxConfig+0xf8>
    int8_t dr = rxConfig->Datarate;
 800afcc:	f990 7001 	ldrsb.w	r7, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 800afd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    uint32_t frequency = rxConfig->Frequency;
 800afd4:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800afd8:	b08b      	sub	sp, #44	@ 0x2c
 800afda:	4604      	mov	r4, r0
 800afdc:	4689      	mov	r9, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 800afde:	4798      	blx	r3
 800afe0:	4605      	mov	r5, r0
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d161      	bne.n	800b0aa <RegionEU868RxConfig+0xe6>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800afe6:	7ce3      	ldrb	r3, [r4, #19]
 800afe8:	b973      	cbnz	r3, 800b008 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800afea:	4a31      	ldr	r2, [pc, #196]	@ (800b0b0 <RegionEU868RxConfig+0xec>)
 800afec:	7823      	ldrb	r3, [r4, #0]
 800afee:	6812      	ldr	r2, [r2, #0]
 800aff0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aff4:	0099      	lsls	r1, r3, #2
 800aff6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800affa:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800affe:	f1ba 0f00 	cmp.w	sl, #0
 800b002:	d101      	bne.n	800b008 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800b004:	f852 a001 	ldr.w	sl, [r2, r1]
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800b008:	4b2a      	ldr	r3, [pc, #168]	@ (800b0b4 <RegionEU868RxConfig+0xf0>)

    Radio.SetChannel( frequency );
 800b00a:	4650      	mov	r0, sl
    phyDr = DataratesEU868[dr];
 800b00c:	f913 b007 	ldrsb.w	fp, [r3, r7]
    Radio.SetChannel( frequency );
 800b010:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b014:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800b016:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b01a:	8920      	ldrh	r0, [r4, #8]
 800b01c:	461e      	mov	r6, r3
    if( dr == DR_7 )
 800b01e:	2f07      	cmp	r7, #7
 800b020:	7ca3      	ldrb	r3, [r4, #18]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800b022:	9309      	str	r3, [sp, #36]	@ 0x24
    if( dr == DR_7 )
 800b024:	d12b      	bne.n	800b07e <RegionEU868RxConfig+0xba>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800b026:	2300      	movs	r3, #0
 800b028:	2101      	movs	r1, #1
 800b02a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 800b02e:	4922      	ldr	r1, [pc, #136]	@ (800b0b8 <RegionEU868RxConfig+0xf4>)
 800b030:	9306      	str	r3, [sp, #24]
 800b032:	2205      	movs	r2, #5
 800b034:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b038:	e9cd 1200 	strd	r1, r2, [sp]
 800b03c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b040:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b044:	fb02 f20b 	mul.w	r2, r2, fp
 800b048:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b04c:	4618      	mov	r0, r3
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b04e:	47b0      	blx	r6
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800b050:	7c63      	ldrb	r3, [r4, #17]
 800b052:	b32b      	cbz	r3, 800b0a0 <RegionEU868RxConfig+0xdc>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800b054:	4b17      	ldr	r3, [pc, #92]	@ (800b0b4 <RegionEU868RxConfig+0xf0>)
 800b056:	19de      	adds	r6, r3, r7
 800b058:	f896 1030 	ldrb.w	r1, [r6, #48]	@ 0x30
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800b05c:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 800b060:	310d      	adds	r1, #13
 800b062:	b2c9      	uxtb	r1, r1
 800b064:	4628      	mov	r0, r5
 800b066:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800b068:	7ce0      	ldrb	r0, [r4, #19]
 800b06a:	463a      	mov	r2, r7
 800b06c:	4651      	mov	r1, sl
 800b06e:	f7ff fd6f 	bl	800ab50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800b072:	f889 7000 	strb.w	r7, [r9]
    return true;
 800b076:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800b078:	b00b      	add	sp, #44	@ 0x2c
 800b07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b07e:	2100      	movs	r1, #0
 800b080:	2501      	movs	r5, #1
 800b082:	2308      	movs	r3, #8
 800b084:	e9cd 1300 	strd	r1, r3, [sp]
 800b088:	e9cd 1507 	strd	r1, r5, [sp, #28]
 800b08c:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800b090:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	78a1      	ldrb	r1, [r4, #2]
 800b098:	462b      	mov	r3, r5
 800b09a:	465a      	mov	r2, fp
 800b09c:	4628      	mov	r0, r5
 800b09e:	e7d6      	b.n	800b04e <RegionEU868RxConfig+0x8a>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800b0a0:	4b04      	ldr	r3, [pc, #16]	@ (800b0b4 <RegionEU868RxConfig+0xf0>)
 800b0a2:	19de      	adds	r6, r3, r7
 800b0a4:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 800b0a8:	e7d8      	b.n	800b05c <RegionEU868RxConfig+0x98>
        return false;
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	e7e4      	b.n	800b078 <RegionEU868RxConfig+0xb4>
 800b0ae:	bf00      	nop
 800b0b0:	20000fec 	.word	0x20000fec
 800b0b4:	0800dd3c 	.word	0x0800dd3c
 800b0b8:	00014585 	.word	0x00014585
 800b0bc:	0800de84 	.word	0x0800de84

0800b0c0 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800b0c4:	4d3f      	ldr	r5, [pc, #252]	@ (800b1c4 <RegionEU868TxConfig+0x104>)
 800b0c6:	f990 3001 	ldrsb.w	r3, [r0, #1]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b0ca:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 800b1c8 <RegionEU868TxConfig+0x108>

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b0ce:	f8df a0fc 	ldr.w	sl, [pc, #252]	@ 800b1cc <RegionEU868TxConfig+0x10c>
{
 800b0d2:	b08f      	sub	sp, #60	@ 0x3c
 800b0d4:	4693      	mov	fp, r2
 800b0d6:	910b      	str	r1, [sp, #44]	@ 0x2c
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800b0d8:	56ea      	ldrsb	r2, [r5, r3]
 800b0da:	920d      	str	r2, [sp, #52]	@ 0x34
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b0dc:	e9d8 1300 	ldrd	r1, r3, [r8]
{
 800b0e0:	4604      	mov	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b0e2:	7800      	ldrb	r0, [r0, #0]
 800b0e4:	260c      	movs	r6, #12
 800b0e6:	fb06 1100 	mla	r1, r6, r0, r1
 800b0ea:	2018      	movs	r0, #24
 800b0ec:	7a49      	ldrb	r1, [r1, #9]
 800b0ee:	fb00 3301 	mla	r3, r0, r1, r3
 800b0f2:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800b0f6:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800b0fa:	f7ff fd13 	bl	800ab24 <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800b0fe:	f105 0108 	add.w	r1, r5, #8
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b102:	4607      	mov	r7, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800b104:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800b108:	f7ff fd10 	bl	800ab2c <RegionCommonGetBandwidth>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b10c:	edd4 0a02 	vldr	s1, [r4, #8]
 800b110:	ed94 0a01 	vldr	s0, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800b114:	900c      	str	r0, [sp, #48]	@ 0x30
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b116:	4638      	mov	r0, r7
 800b118:	f7ff fc33 	bl	800a982 <RegionCommonComputeTxPower>
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b11c:	7825      	ldrb	r5, [r4, #0]
 800b11e:	f8da 100c 	ldr.w	r1, [sl, #12]
 800b122:	4375      	muls	r5, r6
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b124:	4681      	mov	r9, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b126:	f8d8 0000 	ldr.w	r0, [r8]
 800b12a:	5940      	ldr	r0, [r0, r5]
 800b12c:	4788      	blx	r1

    if( txConfig->Datarate == DR_7 )
 800b12e:	f994 1001 	ldrsb.w	r1, [r4, #1]
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800b132:	f8da 301c 	ldr.w	r3, [sl, #28]
 800b136:	2500      	movs	r5, #0
    if( txConfig->Datarate == DR_7 )
 800b138:	2907      	cmp	r1, #7
 800b13a:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800b13e:	469c      	mov	ip, r3
 800b140:	e9cd 5107 	strd	r5, r1, [sp, #28]
    if( txConfig->Datarate == DR_7 )
 800b144:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	@ 0x30
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800b148:	e9cd 5505 	strd	r5, r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800b14c:	d12c      	bne.n	800b1a8 <RegionEU868TxConfig+0xe8>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800b14e:	2101      	movs	r1, #1
 800b150:	e9cd 5103 	strd	r5, r1, [sp, #12]
 800b154:	2105      	movs	r1, #5
 800b156:	e9cd 5101 	strd	r5, r1, [sp, #4]
 800b15a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b15e:	434a      	muls	r2, r1
 800b160:	9200      	str	r2, [sp, #0]
 800b162:	4666      	mov	r6, ip
 800b164:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800b168:	4649      	mov	r1, r9
 800b16a:	4628      	mov	r0, r5
 800b16c:	47b0      	blx	r6
        modem = MODEM_FSK;
 800b16e:	462e      	mov	r6, r5
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800b170:	7823      	ldrb	r3, [r4, #0]
 800b172:	f8d8 2000 	ldr.w	r2, [r8]
 800b176:	210c      	movs	r1, #12
 800b178:	434b      	muls	r3, r1
 800b17a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800b17e:	58d0      	ldr	r0, [r2, r3]
 800b180:	f7ff fd14 	bl	800abac <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800b184:	89a1      	ldrh	r1, [r4, #12]
 800b186:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800b18a:	f7ff fd1d 	bl	800abc8 <GetTimeOnAir>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800b18e:	f8da 3054 	ldr.w	r3, [sl, #84]	@ 0x54
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800b192:	f8cb 0000 	str.w	r0, [fp]
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800b196:	7b21      	ldrb	r1, [r4, #12]
 800b198:	4630      	mov	r0, r6
 800b19a:	4798      	blx	r3

    *txPower = txPowerLimited;
 800b19c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800b19e:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800b1a0:	701f      	strb	r7, [r3, #0]
}
 800b1a2:	b00f      	add	sp, #60	@ 0x3c
 800b1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800b1a8:	2601      	movs	r6, #1
 800b1aa:	2108      	movs	r1, #8
 800b1ac:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800b1b0:	e9cd 6101 	strd	r6, r1, [sp, #4]
 800b1b4:	9200      	str	r2, [sp, #0]
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	462a      	mov	r2, r5
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	4665      	mov	r5, ip
 800b1be:	47a8      	blx	r5
 800b1c0:	e7d6      	b.n	800b170 <RegionEU868TxConfig+0xb0>
 800b1c2:	bf00      	nop
 800b1c4:	0800dd3c 	.word	0x0800dd3c
 800b1c8:	20000fec 	.word	0x20000fec
 800b1cc:	0800de84 	.word	0x0800de84

0800b1d0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	b08d      	sub	sp, #52	@ 0x34
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800b1d6:	2400      	movs	r4, #0
{
 800b1d8:	4605      	mov	r5, r0
 800b1da:	468a      	mov	sl, r1
 800b1dc:	4691      	mov	r9, r2
 800b1de:	4698      	mov	r8, r3
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800b1e0:	9402      	str	r4, [sp, #8]
 800b1e2:	f8ad 400c 	strh.w	r4, [sp, #12]
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800b1e6:	f8ad 4006 	strh.w	r4, [sp, #6]
    uint8_t status = 0x07;
 800b1ea:	2607      	movs	r6, #7
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
                    {
                        chMask |= 1 << i;
 800b1ec:	f04f 0b01 	mov.w	fp, #1
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800b1f0:	7a2b      	ldrb	r3, [r5, #8]
 800b1f2:	42a3      	cmp	r3, r4
 800b1f4:	d906      	bls.n	800b204 <RegionEU868LinkAdrReq+0x34>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800b1f6:	6868      	ldr	r0, [r5, #4]
 800b1f8:	a902      	add	r1, sp, #8
 800b1fa:	4420      	add	r0, r4
 800b1fc:	f7ff fb32 	bl	800a864 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800b200:	2800      	cmp	r0, #0
 800b202:	d153      	bne.n	800b2ac <RegionEU868LinkAdrReq+0xdc>
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800b204:	7aab      	ldrb	r3, [r5, #10]
 800b206:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800b20a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b20e:	f88d 3016 	strb.w	r3, [sp, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800b212:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800b216:	f88d 3017 	strb.w	r3, [sp, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800b21a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b21e:	f88d 3018 	strb.w	r3, [sp, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800b222:	7aeb      	ldrb	r3, [r5, #11]
 800b224:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800b228:	7b2b      	ldrb	r3, [r5, #12]
 800b22a:	f88d 301a 	strb.w	r3, [sp, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800b22e:	7b6b      	ldrb	r3, [r5, #13]
 800b230:	f88d 301b 	strb.w	r3, [sp, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800b234:	2310      	movs	r3, #16
    linkAdrVerifyParams.Status = status;
 800b236:	f88d 6014 	strb.w	r6, [sp, #20]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800b23a:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800b23e:	4e3a      	ldr	r6, [pc, #232]	@ (800b328 <RegionEU868LinkAdrReq+0x158>)
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800b240:	f10d 0306 	add.w	r3, sp, #6
 800b244:	9308      	str	r3, [sp, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800b246:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800b24a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800b24e:	6833      	ldr	r3, [r6, #0]
 800b250:	930a      	str	r3, [sp, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800b252:	2307      	movs	r3, #7
 800b254:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	9304      	str	r3, [sp, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b25c:	f10d 020a 	add.w	r2, sp, #10
 800b260:	ab02      	add	r3, sp, #8
 800b262:	f10d 0109 	add.w	r1, sp, #9
 800b266:	a804      	add	r0, sp, #16
 800b268:	f7ff fb16 	bl	800a898 <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800b26c:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b26e:	4605      	mov	r5, r0
    if( status == 0x07 )
 800b270:	d10a      	bne.n	800b288 <RegionEU868LinkAdrReq+0xb8>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800b272:	6830      	ldr	r0, [r6, #0]
 800b274:	2202      	movs	r2, #2
 800b276:	2100      	movs	r1, #0
 800b278:	30c0      	adds	r0, #192	@ 0xc0
 800b27a:	f000 fa51 	bl	800b720 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800b27e:	6833      	ldr	r3, [r6, #0]
 800b280:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b284:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800b288:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b28c:	f88a 3000 	strb.w	r3, [sl]
    *txPowOut = linkAdrParams.TxPower;
 800b290:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800b294:	f889 3000 	strb.w	r3, [r9]
    *nbRepOut = linkAdrParams.NbRep;
 800b298:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b29c:	f888 3000 	strb.w	r3, [r8]
    *nbBytesParsed = bytesProcessed;
 800b2a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58

#endif /* REGION_EU868 */
    return status;
}
 800b2a2:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 800b2a4:	701c      	strb	r4, [r3, #0]
}
 800b2a6:	b00d      	add	sp, #52	@ 0x34
 800b2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800b2ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
        chMask = linkAdrParams.ChMask;
 800b2b0:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 800b2b4:	f8ad 7006 	strh.w	r7, [sp, #6]
        bytesProcessed += nextIndex;
 800b2b8:	4420      	add	r0, r4
 800b2ba:	b2c4      	uxtb	r4, r0
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800b2bc:	b9f3      	cbnz	r3, 800b2fc <RegionEU868LinkAdrReq+0x12c>
 800b2be:	b317      	cbz	r7, 800b306 <RegionEU868LinkAdrReq+0x136>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800b2c0:	4a19      	ldr	r2, [pc, #100]	@ (800b328 <RegionEU868LinkAdrReq+0x158>)
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	6811      	ldr	r1, [r2, #0]
 800b2c6:	2607      	movs	r6, #7
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	f04f 0c0c 	mov.w	ip, #12
                if( linkAdrParams.ChMaskCtrl == 6 )
 800b2ce:	2b06      	cmp	r3, #6
 800b2d0:	d11b      	bne.n	800b30a <RegionEU868LinkAdrReq+0x13a>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800b2d2:	fb0c fe00 	mul.w	lr, ip, r0
 800b2d6:	f851 e00e 	ldr.w	lr, [r1, lr]
 800b2da:	f1be 0f00 	cmp.w	lr, #0
 800b2de:	d004      	beq.n	800b2ea <RegionEU868LinkAdrReq+0x11a>
                        chMask |= 1 << i;
 800b2e0:	fa0b f200 	lsl.w	r2, fp, r0
 800b2e4:	433a      	orrs	r2, r7
 800b2e6:	b297      	uxth	r7, r2
 800b2e8:	2201      	movs	r2, #1
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	2810      	cmp	r0, #16
 800b2ee:	d1ee      	bne.n	800b2ce <RegionEU868LinkAdrReq+0xfe>
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	f43f af7d 	beq.w	800b1f0 <RegionEU868LinkAdrReq+0x20>
 800b2f6:	f8ad 7006 	strh.w	r7, [sp, #6]
 800b2fa:	e779      	b.n	800b1f0 <RegionEU868LinkAdrReq+0x20>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800b2fc:	1e5a      	subs	r2, r3, #1
 800b2fe:	2a04      	cmp	r2, #4
 800b300:	d901      	bls.n	800b306 <RegionEU868LinkAdrReq+0x136>
 800b302:	2b06      	cmp	r3, #6
 800b304:	d0dc      	beq.n	800b2c0 <RegionEU868LinkAdrReq+0xf0>
            status &= 0xFE; // Channel mask KO
 800b306:	2606      	movs	r6, #6
 800b308:	e772      	b.n	800b1f0 <RegionEU868LinkAdrReq+0x20>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800b30a:	fa47 fe00 	asr.w	lr, r7, r0
 800b30e:	f01e 0f01 	tst.w	lr, #1
 800b312:	d0ea      	beq.n	800b2ea <RegionEU868LinkAdrReq+0x11a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800b314:	fb0c fe00 	mul.w	lr, ip, r0
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800b318:	f851 e00e 	ldr.w	lr, [r1, lr]
                        status &= 0xFE; // Channel mask KO
 800b31c:	f1be 0f00 	cmp.w	lr, #0
 800b320:	bf08      	it	eq
 800b322:	2606      	moveq	r6, #6
 800b324:	e7e1      	b.n	800b2ea <RegionEU868LinkAdrReq+0x11a>
 800b326:	bf00      	nop
 800b328:	20000fec 	.word	0x20000fec

0800b32c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800b32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b32e:	4605      	mov	r5, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800b330:	f10d 0107 	add.w	r1, sp, #7
 800b334:	6840      	ldr	r0, [r0, #4]
 800b336:	f7ff fc6f 	bl	800ac18 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800b33a:	2207      	movs	r2, #7
 800b33c:	1d84      	adds	r4, r0, #6
 800b33e:	2100      	movs	r1, #0
 800b340:	f995 0000 	ldrsb.w	r0, [r5]
 800b344:	b2e4      	uxtb	r4, r4
 800b346:	f7ff f92a 	bl	800a59e <RegionCommonValueInRange>
 800b34a:	b908      	cbnz	r0, 800b350 <RegionEU868RxParamSetupReq+0x24>
    {
        status &= 0xFD; // Datarate KO
 800b34c:	f004 04fd 	and.w	r4, r4, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800b350:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800b354:	2205      	movs	r2, #5
 800b356:	2100      	movs	r1, #0
 800b358:	f7ff f921 	bl	800a59e <RegionCommonValueInRange>
 800b35c:	b908      	cbnz	r0, 800b362 <RegionEU868RxParamSetupReq+0x36>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800b35e:	f004 04fb 	and.w	r4, r4, #251	@ 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800b362:	4620      	mov	r0, r4
 800b364:	b003      	add	sp, #12
 800b366:	bd30      	pop	{r4, r5, pc}

0800b368 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800b368:	f04f 30ff 	mov.w	r0, #4294967295
 800b36c:	4770      	bx	lr
	...

0800b370 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800b370:	b513      	push	{r0, r1, r4, lr}
 800b372:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800b374:	f10d 0107 	add.w	r1, sp, #7
 800b378:	6840      	ldr	r0, [r0, #4]
 800b37a:	f7ff fc4d 	bl	800ac18 <VerifyRfFreq>
 800b37e:	7822      	ldrb	r2, [r4, #0]
 800b380:	490a      	ldr	r1, [pc, #40]	@ (800b3ac <RegionEU868DlChannelReq+0x3c>)
 800b382:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b386:	6809      	ldr	r1, [r1, #0]
 800b388:	1c83      	adds	r3, r0, #2
 800b38a:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800b38e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	b922      	cbnz	r2, 800b3a0 <RegionEU868DlChannelReq+0x30>
    {
        status &= 0xFD;
 800b396:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800b39a:	b258      	sxtb	r0, r3
 800b39c:	b002      	add	sp, #8
 800b39e:	bd10      	pop	{r4, pc}
    if( status == 0x03 )
 800b3a0:	2b03      	cmp	r3, #3
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800b3a2:	bf06      	itte	eq
 800b3a4:	6862      	ldreq	r2, [r4, #4]
 800b3a6:	6042      	streq	r2, [r0, #4]
 800b3a8:	2302      	movne	r3, #2
 800b3aa:	e7f6      	b.n	800b39a <RegionEU868DlChannelReq+0x2a>
 800b3ac:	20000fec 	.word	0x20000fec

0800b3b0 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800b3b0:	4770      	bx	lr
	...

0800b3b4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800b3b8:	4d39      	ldr	r5, [pc, #228]	@ (800b4a0 <RegionEU868NextChannel+0xec>)
{
 800b3ba:	4604      	mov	r4, r0
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800b3bc:	6828      	ldr	r0, [r5, #0]
{
 800b3be:	b096      	sub	sp, #88	@ 0x58
 800b3c0:	460e      	mov	r6, r1
 800b3c2:	4690      	mov	r8, r2
    uint8_t nbEnabledChannels = 0;
 800b3c4:	2100      	movs	r1, #0
{
 800b3c6:	461f      	mov	r7, r3
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800b3c8:	2201      	movs	r2, #1
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800b3ca:	2307      	movs	r3, #7
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800b3cc:	30c0      	adds	r0, #192	@ 0xc0
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800b3ce:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800b3d2:	e9cd 1106 	strd	r1, r1, [sp, #24]
    uint8_t nbEnabledChannels = 0;
 800b3d6:	f88d 100c 	strb.w	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 800b3da:	f88d 100d 	strb.w	r1, [sp, #13]
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800b3de:	f8ad 300e 	strh.w	r3, [sp, #14]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800b3e2:	f7ff f8fe 	bl	800a5e2 <RegionCommonCountChannels>
 800b3e6:	b930      	cbnz	r0, 800b3f6 <RegionEU868NextChannel+0x42>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800b3e8:	682a      	ldr	r2, [r5, #0]
 800b3ea:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	@ 0xc0
 800b3ee:	f043 0307 	orr.w	r3, r3, #7
 800b3f2:	f8a2 30c0 	strh.w	r3, [r2, #192]	@ 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800b3f6:	682a      	ldr	r2, [r5, #0]
    countChannelsParams.Joined = nextChanParams->Joined;
 800b3f8:	7a63      	ldrb	r3, [r4, #9]
 800b3fa:	f88d 3020 	strb.w	r3, [sp, #32]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800b3fe:	f102 01c0 	add.w	r1, r2, #192	@ 0xc0
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800b402:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800b406:	686a      	ldr	r2, [r5, #4]
 800b408:	920b      	str	r2, [sp, #44]	@ 0x2c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800b40a:	2210      	movs	r2, #16
 800b40c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
    countChannelsParams.JoinChannels = &joinChannels;
 800b410:	f10d 020e 	add.w	r2, sp, #14
 800b414:	920d      	str	r2, [sp, #52]	@ 0x34

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800b416:	6822      	ldr	r2, [r4, #0]
 800b418:	920e      	str	r2, [sp, #56]	@ 0x38
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800b41a:	6862      	ldr	r2, [r4, #4]
 800b41c:	920f      	str	r2, [sp, #60]	@ 0x3c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800b41e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800b422:	7aa2      	ldrb	r2, [r4, #10]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800b424:	f994 3008 	ldrsb.w	r3, [r4, #8]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800b428:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800b42c:	2206      	movs	r2, #6
 800b42e:	f88d 2041 	strb.w	r2, [sp, #65]	@ 0x41
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800b432:	aa11      	add	r2, sp, #68	@ 0x44
 800b434:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800b438:	7d22      	ldrb	r2, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b43a:	8ae1      	ldrh	r1, [r4, #22]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800b43c:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b440:	4618      	mov	r0, r3
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800b442:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b446:	f7ff fbbf 	bl	800abc8 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800b44a:	ab08      	add	r3, sp, #32
 800b44c:	9315      	str	r3, [sp, #84]	@ 0x54

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800b44e:	f10d 030d 	add.w	r3, sp, #13
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b452:	9014      	str	r0, [sp, #80]	@ 0x50
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	f8cd 8004 	str.w	r8, [sp, #4]
 800b45a:	ab03      	add	r3, sp, #12
 800b45c:	aa04      	add	r2, sp, #16
 800b45e:	4639      	mov	r1, r7
 800b460:	a80e      	add	r0, sp, #56	@ 0x38
 800b462:	f7ff fb00 	bl	800aa66 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800b466:	4604      	mov	r4, r0
 800b468:	b978      	cbnz	r0, 800b48a <RegionEU868NextChannel+0xd6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800b46a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800b46e:	3901      	subs	r1, #1
 800b470:	f000 f926 	bl	800b6c0 <randr>
 800b474:	f100 0358 	add.w	r3, r0, #88	@ 0x58
 800b478:	eb0d 0003 	add.w	r0, sp, r3
 800b47c:	f810 3c48 	ldrb.w	r3, [r0, #-72]
 800b480:	7033      	strb	r3, [r6, #0]
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800b482:	4620      	mov	r0, r4
 800b484:	b016      	add	sp, #88	@ 0x58
 800b486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800b48a:	280c      	cmp	r0, #12
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800b48c:	bf01      	itttt	eq
 800b48e:	682a      	ldreq	r2, [r5, #0]
 800b490:	f8b2 30c0 	ldrheq.w	r3, [r2, #192]	@ 0xc0
 800b494:	f043 0307 	orreq.w	r3, r3, #7
 800b498:	f8a2 30c0 	strheq.w	r3, [r2, #192]	@ 0xc0
 800b49c:	e7f1      	b.n	800b482 <RegionEU868NextChannel+0xce>
 800b49e:	bf00      	nop
 800b4a0:	20000fec 	.word	0x20000fec

0800b4a4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800b4a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    uint8_t band = 0;
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800b4a6:	7906      	ldrb	r6, [r0, #4]
    uint8_t band = 0;
 800b4a8:	2700      	movs	r7, #0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800b4aa:	2e02      	cmp	r6, #2
{
 800b4ac:	4605      	mov	r5, r0
    uint8_t band = 0;
 800b4ae:	f88d 7007 	strb.w	r7, [sp, #7]
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800b4b2:	d94d      	bls.n	800b550 <RegionEU868ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800b4b4:	2e0f      	cmp	r6, #15
 800b4b6:	d84d      	bhi.n	800b554 <RegionEU868ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800b4b8:	6803      	ldr	r3, [r0, #0]
 800b4ba:	7a18      	ldrb	r0, [r3, #8]
 800b4bc:	f340 0003 	sbfx	r0, r0, #0, #4
 800b4c0:	2207      	movs	r2, #7
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	b240      	sxtb	r0, r0
 800b4c6:	f7ff f86a 	bl	800a59e <RegionCommonValueInRange>
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800b4ca:	682b      	ldr	r3, [r5, #0]
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800b4cc:	4604      	mov	r4, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800b4ce:	7a18      	ldrb	r0, [r3, #8]
 800b4d0:	f340 1003 	sbfx	r0, r0, #4, #4
 800b4d4:	2207      	movs	r2, #7
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	b240      	sxtb	r0, r0
 800b4da:	f7ff f860 	bl	800a59e <RegionCommonValueInRange>
 800b4de:	b1d0      	cbz	r0, 800b516 <RegionEU868ChannelAdd+0x72>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800b4e0:	fab4 f484 	clz	r4, r4
 800b4e4:	0964      	lsrs	r4, r4, #5
    {
        drInvalid = true;
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800b4e6:	6828      	ldr	r0, [r5, #0]
 800b4e8:	7a03      	ldrb	r3, [r0, #8]
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800b4ea:	6800      	ldr	r0, [r0, #0]
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800b4ec:	f343 0203 	sbfx	r2, r3, #0, #4
 800b4f0:	f343 1303 	sbfx	r3, r3, #4, #4
 800b4f4:	b25b      	sxtb	r3, r3
 800b4f6:	b252      	sxtb	r2, r2
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800b4f8:	f10d 0107 	add.w	r1, sp, #7
        drInvalid = true;
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	bfc8      	it	gt
 800b500:	2401      	movgt	r4, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800b502:	f7ff fb89 	bl	800ac18 <VerifyRfFreq>
 800b506:	f080 0301 	eor.w	r3, r0, #1
 800b50a:	b2db      	uxtb	r3, r3
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800b50c:	b12c      	cbz	r4, 800b51a <RegionEU868ChannelAdd+0x76>
 800b50e:	3305      	adds	r3, #5
 800b510:	b2d8      	uxtb	r0, r3
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800b512:	b003      	add	sp, #12
 800b514:	bdf0      	pop	{r4, r5, r6, r7, pc}
        drInvalid = true;
 800b516:	2401      	movs	r4, #1
 800b518:	e7e5      	b.n	800b4e6 <RegionEU868ChannelAdd+0x42>
    if( freqInvalid == true )
 800b51a:	b9eb      	cbnz	r3, 800b558 <RegionEU868ChannelAdd+0xb4>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800b51c:	4f0f      	ldr	r7, [pc, #60]	@ (800b55c <RegionEU868ChannelAdd+0xb8>)
 800b51e:	6829      	ldr	r1, [r5, #0]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800b526:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b52a:	220c      	movs	r2, #12
 800b52c:	f000 f8e4 	bl	800b6f8 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b536:	230c      	movs	r3, #12
 800b538:	fb03 2306 	mla	r3, r3, r6, r2
    return LORAMAC_STATUS_OK;
 800b53c:	4620      	mov	r0, r4
    RegionNvmGroup2->Channels[id].Band = band;
 800b53e:	7259      	strb	r1, [r3, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800b540:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	@ 0xc0
 800b544:	2301      	movs	r3, #1
 800b546:	40b3      	lsls	r3, r6
 800b548:	430b      	orrs	r3, r1
 800b54a:	f8a2 30c0 	strh.w	r3, [r2, #192]	@ 0xc0
    return LORAMAC_STATUS_OK;
 800b54e:	e7e0      	b.n	800b512 <RegionEU868ChannelAdd+0x6e>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800b550:	2006      	movs	r0, #6
 800b552:	e7de      	b.n	800b512 <RegionEU868ChannelAdd+0x6e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b554:	2003      	movs	r0, #3
 800b556:	e7dc      	b.n	800b512 <RegionEU868ChannelAdd+0x6e>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800b558:	2004      	movs	r0, #4
 800b55a:	e7da      	b.n	800b512 <RegionEU868ChannelAdd+0x6e>
 800b55c:	20000fec 	.word	0x20000fec

0800b560 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800b560:	b410      	push	{r4}
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800b562:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800b564:	2902      	cmp	r1, #2
 800b566:	d90e      	bls.n	800b586 <RegionEU868ChannelsRemove+0x26>
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800b568:	4b09      	ldr	r3, [pc, #36]	@ (800b590 <RegionEU868ChannelsRemove+0x30>)
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	230c      	movs	r3, #12
 800b56e:	434b      	muls	r3, r1
 800b570:	18c4      	adds	r4, r0, r3
 800b572:	2200      	movs	r2, #0
 800b574:	50c2      	str	r2, [r0, r3]
 800b576:	e9c4 2201 	strd	r2, r2, [r4, #4]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800b57a:	30c0      	adds	r0, #192	@ 0xc0
#else
    return false;
#endif /* REGION_EU868 */
}
 800b57c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800b580:	2210      	movs	r2, #16
 800b582:	f7ff b815 	b.w	800a5b0 <RegionCommonChanDisable>
}
 800b586:	2000      	movs	r0, #0
 800b588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	20000fec 	.word	0x20000fec

0800b594 <RegionEU868ApplyCFList>:
{
 800b594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b598:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800b59a:	2350      	movs	r3, #80	@ 0x50
 800b59c:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800b5a0:	7903      	ldrb	r3, [r0, #4]
 800b5a2:	2b10      	cmp	r3, #16
{
 800b5a4:	4607      	mov	r7, r0
    if( applyCFList->Size != 16 )
 800b5a6:	d130      	bne.n	800b60a <RegionEU868ApplyCFList+0x76>
    if( applyCFList->Payload[15] != 0 )
 800b5a8:	6803      	ldr	r3, [r0, #0]
 800b5aa:	7bdd      	ldrb	r5, [r3, #15]
 800b5ac:	bb6d      	cbnz	r5, 800b60a <RegionEU868ApplyCFList+0x76>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800b5ae:	2403      	movs	r4, #3
            newChannel.Frequency = 0;
 800b5b0:	46a8      	mov	r8, r5
            newChannel.Frequency *= 100;
 800b5b2:	2664      	movs	r6, #100	@ 0x64
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800b5b4:	2c07      	cmp	r4, #7
 800b5b6:	d814      	bhi.n	800b5e2 <RegionEU868ApplyCFList+0x4e>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	5d53      	ldrb	r3, [r2, r5]
 800b5bc:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800b5be:	442a      	add	r2, r5
 800b5c0:	7851      	ldrb	r1, [r2, #1]
 800b5c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b5c6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800b5c8:	7892      	ldrb	r2, [r2, #2]
 800b5ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800b5ce:	4373      	muls	r3, r6
            newChannel.Rx1Frequency = 0;
 800b5d0:	e9cd 3803 	strd	r3, r8, [sp, #12]
        if( newChannel.Frequency != 0 )
 800b5d4:	b963      	cbnz	r3, 800b5f0 <RegionEU868ApplyCFList+0x5c>
            RegionEU868ChannelsRemove( &channelRemove );
 800b5d6:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800b5d8:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800b5dc:	f7ff ffc0 	bl	800b560 <RegionEU868ChannelsRemove>
 800b5e0:	e00d      	b.n	800b5fe <RegionEU868ApplyCFList+0x6a>
            newChannel.Frequency = 0;
 800b5e2:	f8cd 800c 	str.w	r8, [sp, #12]
            newChannel.DrRange.Value = 0;
 800b5e6:	f88d 8014 	strb.w	r8, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800b5ea:	f8cd 8010 	str.w	r8, [sp, #16]
        if( newChannel.Frequency != 0 )
 800b5ee:	e7f2      	b.n	800b5d6 <RegionEU868ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800b5f0:	ab03      	add	r3, sp, #12
            RegionEU868ChannelAdd( &channelAdd );
 800b5f2:	a801      	add	r0, sp, #4
            channelAdd.NewChannel = &newChannel;
 800b5f4:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800b5f6:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800b5fa:	f7ff ff53 	bl	800b4a4 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800b5fe:	3401      	adds	r4, #1
 800b600:	b2e4      	uxtb	r4, r4
 800b602:	2c10      	cmp	r4, #16
 800b604:	f105 0503 	add.w	r5, r5, #3
 800b608:	d1d4      	bne.n	800b5b4 <RegionEU868ApplyCFList+0x20>
}
 800b60a:	b006      	add	sp, #24
 800b60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b610 <RegionEU868NewChannelReq>:
{
 800b610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800b612:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800b614:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
 800b616:	6811      	ldr	r1, [r2, #0]
 800b618:	b949      	cbnz	r1, 800b62e <RegionEU868NewChannelReq+0x1e>
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800b61a:	a801      	add	r0, sp, #4
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800b61c:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800b620:	f7ff ff9e 	bl	800b560 <RegionEU868ChannelsRemove>
 800b624:	b178      	cbz	r0, 800b646 <RegionEU868NewChannelReq+0x36>
    uint8_t status = 0x03;
 800b626:	2003      	movs	r0, #3
}
 800b628:	b005      	add	sp, #20
 800b62a:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800b62e:	a802      	add	r0, sp, #8
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800b630:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800b632:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800b636:	f7ff ff35 	bl	800b4a4 <RegionEU868ChannelAdd>
 800b63a:	2804      	cmp	r0, #4
 800b63c:	d005      	beq.n	800b64a <RegionEU868NewChannelReq+0x3a>
 800b63e:	2805      	cmp	r0, #5
 800b640:	d005      	beq.n	800b64e <RegionEU868NewChannelReq+0x3e>
 800b642:	2800      	cmp	r0, #0
 800b644:	d0ef      	beq.n	800b626 <RegionEU868NewChannelReq+0x16>
{
 800b646:	2000      	movs	r0, #0
 800b648:	e7ee      	b.n	800b628 <RegionEU868NewChannelReq+0x18>
                status &= 0xFE;
 800b64a:	2002      	movs	r0, #2
 800b64c:	e7ec      	b.n	800b628 <RegionEU868NewChannelReq+0x18>
                status &= 0xFD;
 800b64e:	2001      	movs	r0, #1
 800b650:	e7ea      	b.n	800b628 <RegionEU868NewChannelReq+0x18>
	...

0800b654 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800b654:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800b656:	4d12      	ldr	r5, [pc, #72]	@ (800b6a0 <RegionEU868SetContinuousWave+0x4c>)
 800b658:	7801      	ldrb	r1, [r0, #0]
 800b65a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b65e:	260c      	movs	r6, #12
 800b660:	fb06 2201 	mla	r2, r6, r1, r2
 800b664:	2118      	movs	r1, #24
 800b666:	7a52      	ldrb	r2, [r2, #9]
 800b668:	fb01 3302 	mla	r3, r1, r2, r3
{
 800b66c:	4604      	mov	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800b66e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800b672:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800b676:	f7ff fa55 	bl	800ab24 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800b67a:	7823      	ldrb	r3, [r4, #0]
 800b67c:	682a      	ldr	r2, [r5, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800b67e:	edd4 0a02 	vldr	s1, [r4, #8]
 800b682:	ed94 0a01 	vldr	s0, [r4, #4]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800b686:	4373      	muls	r3, r6
 800b688:	58d5      	ldr	r5, [r2, r3]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800b68a:	f7ff f97a 	bl	800a982 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800b68e:	4b05      	ldr	r3, [pc, #20]	@ (800b6a4 <RegionEU868SetContinuousWave+0x50>)
 800b690:	89a2      	ldrh	r2, [r4, #12]
 800b692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800b694:	4601      	mov	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800b696:	4628      	mov	r0, r5
#endif /* REGION_EU868 */
}
 800b698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800b69c:	4718      	bx	r3
 800b69e:	bf00      	nop
 800b6a0:	20000fec 	.word	0x20000fec
 800b6a4:	0800de84 	.word	0x0800de84

0800b6a8 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800b6a8:	1a88      	subs	r0, r1, r2

    if( datarate < 0 )
 800b6aa:	b240      	sxtb	r0, r0
 800b6ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800b6b0:	b2c0      	uxtb	r0, r0
 800b6b2:	4770      	bx	lr

0800b6b4 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800b6b4:	4b01      	ldr	r3, [pc, #4]	@ (800b6bc <srand1+0x8>)
 800b6b6:	6018      	str	r0, [r3, #0]
}
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	200000cc 	.word	0x200000cc

0800b6c0 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800b6c0:	4a0b      	ldr	r2, [pc, #44]	@ (800b6f0 <randr+0x30>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800b6c2:	b530      	push	{r4, r5, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800b6c4:	6814      	ldr	r4, [r2, #0]
 800b6c6:	4d0b      	ldr	r5, [pc, #44]	@ (800b6f4 <randr+0x34>)
 800b6c8:	f243 0339 	movw	r3, #12345	@ 0x3039
 800b6cc:	fb05 3304 	mla	r3, r5, r4, r3
 800b6d0:	6013      	str	r3, [r2, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800b6d2:	1a09      	subs	r1, r1, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800b6d4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800b6d8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6dc:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800b6e0:	3101      	adds	r1, #1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800b6e2:	1a9b      	subs	r3, r3, r2
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800b6e4:	fb93 f2f1 	sdiv	r2, r3, r1
 800b6e8:	fb01 3312 	mls	r3, r1, r2, r3
}
 800b6ec:	4418      	add	r0, r3
 800b6ee:	bd30      	pop	{r4, r5, pc}
 800b6f0:	200000cc 	.word	0x200000cc
 800b6f4:	41c64e6d 	.word	0x41c64e6d

0800b6f8 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800b6f8:	3801      	subs	r0, #1
 800b6fa:	440a      	add	r2, r1
 800b6fc:	4291      	cmp	r1, r2
 800b6fe:	d100      	bne.n	800b702 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800b700:	4770      	bx	lr
        *dst++ = *src++;
 800b702:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b706:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b70a:	e7f7      	b.n	800b6fc <memcpy1+0x4>

0800b70c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
    while( size-- )
 800b70c:	4410      	add	r0, r2
 800b70e:	440a      	add	r2, r1
 800b710:	4291      	cmp	r1, r2
 800b712:	d100      	bne.n	800b716 <memcpyr+0xa>
    {
        *dst-- = *src++;
    }
}
 800b714:	4770      	bx	lr
        *dst-- = *src++;
 800b716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b71a:	f800 3d01 	strb.w	r3, [r0, #-1]!
 800b71e:	e7f7      	b.n	800b710 <memcpyr+0x4>

0800b720 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
    {
        *dst++ = value;
 800b720:	f002 b822 	b.w	800d768 <memset>

0800b724 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 800b724:	b530      	push	{r4, r5, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800b726:	b130      	cbz	r0, 800b736 <Crc32+0x12>
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800b728:	4d0a      	ldr	r5, [pc, #40]	@ (800b754 <Crc32+0x30>)
 800b72a:	4401      	add	r1, r0
    uint32_t crc = 0xFFFFFFFF;
 800b72c:	f04f 33ff 	mov.w	r3, #4294967295
    for( uint16_t i = 0; i < length; ++i )
 800b730:	4281      	cmp	r1, r0
 800b732:	d101      	bne.n	800b738 <Crc32+0x14>
        }
    }

    return ~crc;
 800b734:	43d8      	mvns	r0, r3
}
 800b736:	bd30      	pop	{r4, r5, pc}
        crc ^= ( uint32_t )buffer[i];
 800b738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b73c:	4053      	eors	r3, r2
 800b73e:	2208      	movs	r2, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800b740:	f343 0400 	sbfx	r4, r3, #0, #1
        for( uint16_t i = 0; i < 8; i++ )
 800b744:	3a01      	subs	r2, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800b746:	402c      	ands	r4, r5
        for( uint16_t i = 0; i < 8; i++ )
 800b748:	b292      	uxth	r2, r2
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800b74a:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800b74e:	2a00      	cmp	r2, #0
 800b750:	d1f6      	bne.n	800b740 <Crc32+0x1c>
 800b752:	e7ed      	b.n	800b730 <Crc32+0xc>
 800b754:	edb88320 	.word	0xedb88320

0800b758 <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800b758:	2001      	movs	r0, #1
 800b75a:	4770      	bx	lr

0800b75c <RadioOnTxTimeoutIrq>:
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800b75c:	4b03      	ldr	r3, [pc, #12]	@ (800b76c <RadioOnTxTimeoutIrq+0x10>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	b113      	cbz	r3, 800b768 <RadioOnTxTimeoutIrq+0xc>
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	b103      	cbz	r3, 800b768 <RadioOnTxTimeoutIrq+0xc>
    {
        RadioEvents->TxTimeout( );
 800b766:	4718      	bx	r3
    }
}
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	20000ff4 	.word	0x20000ff4

0800b770 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800b770:	4b03      	ldr	r3, [pc, #12]	@ (800b780 <RadioOnRxTimeoutIrq+0x10>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	b113      	cbz	r3, 800b77c <RadioOnRxTimeoutIrq+0xc>
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	b103      	cbz	r3, 800b77c <RadioOnRxTimeoutIrq+0xc>
    {
        RadioEvents->RxTimeout( );
 800b77a:	4718      	bx	r3
    }
}
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	20000ff4 	.word	0x20000ff4

0800b784 <RadioStandby>:
    SX126xSetStandby( STDBY_RC );
 800b784:	2000      	movs	r0, #0
 800b786:	f000 bd67 	b.w	800c258 <SX126xSetStandby>
	...

0800b78c <RadioGetStatus>:
{
 800b78c:	b508      	push	{r3, lr}
    switch( SX126xGetOperatingMode( ) )
 800b78e:	f000 fd05 	bl	800c19c <SX126xGetOperatingMode>
 800b792:	3804      	subs	r0, #4
 800b794:	b2c0      	uxtb	r0, r0
 800b796:	2803      	cmp	r0, #3
 800b798:	bf96      	itet	ls
 800b79a:	4b02      	ldrls	r3, [pc, #8]	@ (800b7a4 <RadioGetStatus+0x18>)
 800b79c:	2000      	movhi	r0, #0
 800b79e:	5c18      	ldrbls	r0, [r3, r0]
}
 800b7a0:	bd08      	pop	{r3, pc}
 800b7a2:	bf00      	nop
 800b7a4:	0800dd98 	.word	0x0800dd98

0800b7a8 <RadioSetChannel>:
    SX126xSetRfFrequency( freq );
 800b7a8:	f000 be80 	b.w	800c4ac <SX126xSetRfFrequency>

0800b7ac <RadioRead>:
    return SX126xReadRegister( addr );
 800b7ac:	b280      	uxth	r0, r0
 800b7ae:	f001 b8ce 	b.w	800c94e <SX126xReadRegister>

0800b7b2 <RadioWrite>:
    SX126xWriteRegister( addr, data );
 800b7b2:	b280      	uxth	r0, r0
 800b7b4:	f001 b832 	b.w	800c81c <SX126xWriteRegister>

0800b7b8 <RadioSend>:
{
 800b7b8:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800b7ba:	2300      	movs	r3, #0
{
 800b7bc:	460c      	mov	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800b7be:	f240 2101 	movw	r1, #513	@ 0x201
 800b7c2:	461a      	mov	r2, r3
{
 800b7c4:	4606      	mov	r6, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800b7c6:	4608      	mov	r0, r1
 800b7c8:	f000 fe14 	bl	800c3f4 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 800b7cc:	f000 fd04 	bl	800c1d8 <SX126xGetPacketType>
 800b7d0:	4d0a      	ldr	r5, [pc, #40]	@ (800b7fc <RadioSend+0x44>)
 800b7d2:	2801      	cmp	r0, #1
    SX126xSetPacketParams( &SX126x.PacketParams );
 800b7d4:	480a      	ldr	r0, [pc, #40]	@ (800b800 <RadioSend+0x48>)
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 800b7d6:	bf0c      	ite	eq
 800b7d8:	74ec      	strbeq	r4, [r5, #19]
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 800b7da:	732c      	strbne	r4, [r5, #12]
    SX126xSetPacketParams( &SX126x.PacketParams );
 800b7dc:	f000 ffc2 	bl	800c764 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f001 f998 	bl	800cb1a <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 800b7ea:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800b7ec:	4805      	ldr	r0, [pc, #20]	@ (800b804 <RadioSend+0x4c>)
 800b7ee:	f001 fe3b 	bl	800d468 <UTIL_TIMER_SetPeriod>
}
 800b7f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TimerStart( &TxTimeoutTimer );
 800b7f6:	4803      	ldr	r0, [pc, #12]	@ (800b804 <RadioSend+0x4c>)
 800b7f8:	f001 bdfc 	b.w	800d3f4 <UTIL_TIMER_Start>
 800b7fc:	20000ff4 	.word	0x20000ff4
 800b800:	20000ff8 	.word	0x20000ff8
 800b804:	20001038 	.word	0x20001038

0800b808 <RadioSleep>:
{
 800b808:	b508      	push	{r3, lr}
    SX126xSetSleep( params );
 800b80a:	f04f 0004 	mov.w	r0, #4
 800b80e:	f000 fd07 	bl	800c220 <SX126xSetSleep>
}
 800b812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RADIO_DELAY_MS( 2 );
 800b816:	2002      	movs	r0, #2
 800b818:	f7f6 b809 	b.w	800182e <HAL_Delay>

0800b81c <RadioSetRxDutyCycle>:
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 800b81c:	f000 bd4c 	b.w	800c2b8 <SX126xSetRxDutyCycle>

0800b820 <RadioReadBuffer>:
    SX126xReadRegisters( addr, buffer, size );
 800b820:	b280      	uxth	r0, r0
 800b822:	f001 b86f 	b.w	800c904 <SX126xReadRegisters>

0800b826 <RadioWriteBuffer>:
    SX126xWriteRegisters( addr, buffer, size );
 800b826:	b280      	uxth	r0, r0
 800b828:	f000 bf4e 	b.w	800c6c8 <SX126xWriteRegisters>

0800b82c <RadioStartCad>:
{
 800b82c:	b508      	push	{r3, lr}
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800b82e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800b832:	2300      	movs	r3, #0
 800b834:	461a      	mov	r2, r3
 800b836:	4608      	mov	r0, r1
 800b838:	f000 fddc 	bl	800c3f4 <SX126xSetDioIrqParams>
}
 800b83c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetCad( );
 800b840:	f000 bd56 	b.w	800c2f0 <SX126xSetCad>

0800b844 <RadioSetTxContinuousWave>:
{
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	460d      	mov	r5, r1
 800b848:	4614      	mov	r4, r2
    SX126xSetRfFrequency( freq );
 800b84a:	f000 fe2f 	bl	800c4ac <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 800b84e:	4628      	mov	r0, r5
    TimerSetValue( &TxTimeoutTimer, timeout );
 800b850:	4d07      	ldr	r5, [pc, #28]	@ (800b870 <RadioSetTxContinuousWave+0x2c>)
    SX126xSetRfTxPower( power );
 800b852:	f001 f91e 	bl	800ca92 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 800b856:	f000 fd57 	bl	800c308 <SX126xSetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800b85a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b85e:	4361      	muls	r1, r4
 800b860:	4628      	mov	r0, r5
 800b862:	f001 fe01 	bl	800d468 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800b866:	4628      	mov	r0, r5
}
 800b868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TimerStart( &TxTimeoutTimer );
 800b86c:	f001 bdc2 	b.w	800d3f4 <UTIL_TIMER_Start>
 800b870:	20001038 	.word	0x20001038

0800b874 <RadioRssi>:
{
 800b874:	b508      	push	{r3, lr}
    return SX126xGetRssiInst( );
 800b876:	f000 fedf 	bl	800c638 <SX126xGetRssiInst>
}
 800b87a:	bd08      	pop	{r3, pc}

0800b87c <RadioGetWakeupTime>:
{
 800b87c:	b508      	push	{r3, lr}
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800b87e:	f7f6 fb0d 	bl	8001e9c <SX1262DVK1DAS_RADIO_GetWakeUpTime>
}
 800b882:	3003      	adds	r0, #3
 800b884:	bd08      	pop	{r3, pc}
	...

0800b888 <RadioGetFskBandwidthRegValue>:
    if( bandwidth == 0 )
 800b888:	b190      	cbz	r0, 800b8b0 <RadioGetFskBandwidthRegValue+0x28>
 800b88a:	4a0a      	ldr	r2, [pc, #40]	@ (800b8b4 <RadioGetFskBandwidthRegValue+0x2c>)
 800b88c:	2301      	movs	r3, #1
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800b88e:	6811      	ldr	r1, [r2, #0]
 800b890:	4288      	cmp	r0, r1
 800b892:	d307      	bcc.n	800b8a4 <RadioGetFskBandwidthRegValue+0x1c>
 800b894:	6891      	ldr	r1, [r2, #8]
 800b896:	4288      	cmp	r0, r1
 800b898:	d204      	bcs.n	800b8a4 <RadioGetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i+1].RegValue;
 800b89a:	4a07      	ldr	r2, [pc, #28]	@ (800b8b8 <RadioGetFskBandwidthRegValue+0x30>)
 800b89c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8a0:	7a18      	ldrb	r0, [r3, #8]
 800b8a2:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	2b16      	cmp	r3, #22
 800b8a8:	f102 0208 	add.w	r2, r2, #8
 800b8ac:	d1ef      	bne.n	800b88e <RadioGetFskBandwidthRegValue+0x6>
    while( 1 );
 800b8ae:	e7fe      	b.n	800b8ae <RadioGetFskBandwidthRegValue+0x26>
        return( 0x1F );
 800b8b0:	201f      	movs	r0, #31
}
 800b8b2:	4770      	bx	lr
 800b8b4:	0800dd9c 	.word	0x0800dd9c
 800b8b8:	0800dd98 	.word	0x0800dd98

0800b8bc <RadioSetMaxPayloadLength>:
    if( modem == MODEM_LORA )
 800b8bc:	2801      	cmp	r0, #1
 800b8be:	4808      	ldr	r0, [pc, #32]	@ (800b8e0 <RadioSetMaxPayloadLength+0x24>)
 800b8c0:	d105      	bne.n	800b8ce <RadioSetMaxPayloadLength+0x12>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800b8c2:	4b08      	ldr	r3, [pc, #32]	@ (800b8e4 <RadioSetMaxPayloadLength+0x28>)
 800b8c4:	74c1      	strb	r1, [r0, #19]
 800b8c6:	7019      	strb	r1, [r3, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 800b8c8:	3004      	adds	r0, #4
 800b8ca:	f000 bf4b 	b.w	800c764 <SX126xSetPacketParams>
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800b8ce:	7ac3      	ldrb	r3, [r0, #11]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d103      	bne.n	800b8dc <RadioSetMaxPayloadLength+0x20>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800b8d4:	4b03      	ldr	r3, [pc, #12]	@ (800b8e4 <RadioSetMaxPayloadLength+0x28>)
 800b8d6:	7301      	strb	r1, [r0, #12]
 800b8d8:	7019      	strb	r1, [r3, #0]
 800b8da:	e7f5      	b.n	800b8c8 <RadioSetMaxPayloadLength+0xc>
}
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	20000ff4 	.word	0x20000ff4
 800b8e4:	200000d0 	.word	0x200000d0

0800b8e8 <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
{
 800b8ee:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800b8f0:	461a      	mov	r2, r3
{
 800b8f2:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800b8f4:	4608      	mov	r0, r1
 800b8f6:	f000 fd7d 	bl	800c3f4 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800b8fa:	b134      	cbz	r4, 800b90a <RadioRx+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800b8fc:	4809      	ldr	r0, [pc, #36]	@ (800b924 <RadioRx+0x3c>)
 800b8fe:	4621      	mov	r1, r4
 800b900:	f001 fdb2 	bl	800d468 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800b904:	4807      	ldr	r0, [pc, #28]	@ (800b924 <RadioRx+0x3c>)
 800b906:	f001 fd75 	bl	800d3f4 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800b90a:	4b07      	ldr	r3, [pc, #28]	@ (800b928 <RadioRx+0x40>)
 800b90c:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 800b910:	b12a      	cbz	r2, 800b91e <RadioRx+0x36>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800b912:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
}
 800b916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRx( RxTimeout << 6 );
 800b91a:	f000 bf8b 	b.w	800c834 <SX126xSetRx>
 800b91e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b920:	0180      	lsls	r0, r0, #6
 800b922:	e7f8      	b.n	800b916 <RadioRx+0x2e>
 800b924:	20001050 	.word	0x20001050
 800b928:	20000ff4 	.word	0x20000ff4

0800b92c <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800b92c:	2300      	movs	r3, #0
 800b92e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
{
 800b932:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800b934:	461a      	mov	r2, r3
{
 800b936:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800b938:	4608      	mov	r0, r1
 800b93a:	f000 fd5b 	bl	800c3f4 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800b93e:	b134      	cbz	r4, 800b94e <RadioRxBoosted+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800b940:	4809      	ldr	r0, [pc, #36]	@ (800b968 <RadioRxBoosted+0x3c>)
 800b942:	4621      	mov	r1, r4
 800b944:	f001 fd90 	bl	800d468 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800b948:	4807      	ldr	r0, [pc, #28]	@ (800b968 <RadioRxBoosted+0x3c>)
 800b94a:	f001 fd53 	bl	800d3f4 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800b94e:	4b07      	ldr	r3, [pc, #28]	@ (800b96c <RadioRxBoosted+0x40>)
 800b950:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 800b954:	b12a      	cbz	r2, 800b962 <RadioRxBoosted+0x36>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800b956:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
}
 800b95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRxBoosted( RxTimeout << 6 );
 800b95e:	f000 bf89 	b.w	800c874 <SX126xSetRxBoosted>
 800b962:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b964:	0180      	lsls	r0, r0, #6
 800b966:	e7f8      	b.n	800b95a <RadioRxBoosted+0x2e>
 800b968:	20001050 	.word	0x20001050
 800b96c:	20000ff4 	.word	0x20000ff4

0800b970 <RadioIrqProcess>:

  RadioIrqProcess();
}

void RadioIrqProcess( void )
{
 800b970:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b972:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b976:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN( );
    // Clear IRQ flag
    const bool isIrqFired = IrqFired;
 800b978:	4c6a      	ldr	r4, [pc, #424]	@ (800bb24 <RadioIrqProcess+0x1b4>)
    IrqFired = false;
 800b97a:	2600      	movs	r6, #0
    const bool isIrqFired = IrqFired;
 800b97c:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
    IrqFired = false;
 800b980:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b984:	f382 8810 	msr	PRIMASK, r2
    CRITICAL_SECTION_END( );

    if( isIrqFired == true )
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 80c8 	beq.w	800bb1e <RadioIrqProcess+0x1ae>
    {
        uint16_t irqRegs = SX126xGetIrqStatus( );
 800b98e:	f000 fe46 	bl	800c61e <SX126xGetIrqStatus>
 800b992:	4605      	mov	r5, r0
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 800b994:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b998:	f000 fe15 	bl	800c5c6 <SX126xClearIrqStatus>

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800b99c:	07e9      	lsls	r1, r5, #31
 800b99e:	d50e      	bpl.n	800b9be <RadioIrqProcess+0x4e>
        {
            TimerStop( &TxTimeoutTimer );
 800b9a0:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 800b9a4:	f001 fcd8 	bl	800d358 <UTIL_TIMER_Stop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	f000 fbfd 	bl	800c1a8 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	b12b      	cbz	r3, 800b9be <RadioIrqProcess+0x4e>
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	b11b      	cbz	r3, 800b9be <RadioIrqProcess+0x4e>
            {
                RadioEvents->TxDone( );
 800b9b6:	4798      	blx	r3
                Sx_Board_SetLedTx(false);
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f7f6 fad9 	bl	8001f70 <SX1262DVK1DAS_RADIO_BoardSetLedTx>
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 800b9be:	07aa      	lsls	r2, r5, #30
 800b9c0:	d513      	bpl.n	800b9ea <RadioIrqProcess+0x7a>
        {
            TimerStop( &RxTimeoutTimer );
 800b9c2:	4859      	ldr	r0, [pc, #356]	@ (800bb28 <RadioIrqProcess+0x1b8>)
 800b9c4:	f001 fcc8 	bl	800d358 <UTIL_TIMER_Stop>

            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800b9c8:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800b9cc:	f894 6074 	ldrb.w	r6, [r4, #116]	@ 0x74
 800b9d0:	d064      	beq.n	800ba9c <RadioIrqProcess+0x12c>
            {
                if( RxContinuous == false )
 800b9d2:	b916      	cbnz	r6, 800b9da <RadioIrqProcess+0x6a>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	f000 fbe7 	bl	800c1a8 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	b12b      	cbz	r3, 800b9ea <RadioIrqProcess+0x7a>
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	b11b      	cbz	r3, 800b9ea <RadioIrqProcess+0x7a>
                {
                    RadioEvents->RxError( );
 800b9e2:	4798      	blx	r3
                SX126xGetPayload( RadioRxPayload, &size , 255 );
                SX126xGetPacketStatus( &RadioPktStatus );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
                {
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                    Sx_Board_SetLedRx(false);
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	f7f6 facd 	bl	8001f84 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800b9ea:	062b      	lsls	r3, r5, #24
 800b9ec:	d50c      	bpl.n	800ba08 <RadioIrqProcess+0x98>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	f000 fbda 	bl	800c1a8 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	b13b      	cbz	r3, 800ba08 <RadioIrqProcess+0x98>
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	b12b      	cbz	r3, 800ba08 <RadioIrqProcess+0x98>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 800b9fc:	f3c5 2000 	ubfx	r0, r5, #8, #1
 800ba00:	4798      	blx	r3
                Sx_Board_SetLedRx(false);
 800ba02:	2000      	movs	r0, #0
 800ba04:	f7f6 fabe 	bl	8001f84 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800ba08:	05ae      	lsls	r6, r5, #22
 800ba0a:	d511      	bpl.n	800ba30 <RadioIrqProcess+0xc0>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 800ba0c:	f000 fbc6 	bl	800c19c <SX126xGetOperatingMode>
 800ba10:	2804      	cmp	r0, #4
 800ba12:	d16f      	bne.n	800baf4 <RadioIrqProcess+0x184>
            {
                TimerStop( &TxTimeoutTimer );
 800ba14:	4845      	ldr	r0, [pc, #276]	@ (800bb2c <RadioIrqProcess+0x1bc>)
 800ba16:	f001 fc9f 	bl	800d358 <UTIL_TIMER_Stop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800ba1a:	2001      	movs	r0, #1
 800ba1c:	f000 fbc4 	bl	800c1a8 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	b12b      	cbz	r3, 800ba30 <RadioIrqProcess+0xc0>
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	b11b      	cbz	r3, 800ba30 <RadioIrqProcess+0xc0>
                {
                    RadioEvents->TxTimeout( );
 800ba28:	4798      	blx	r3
                    Sx_Board_SetLedTx(false);
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	f7f6 faa0 	bl	8001f70 <SX1262DVK1DAS_RADIO_BoardSetLedTx>
                    Sx_Board_SetLedRx(false);
                }
            }
        }

        if( ( irqRegs & IRQ_PREAMBLE_DETECTED ) == IRQ_PREAMBLE_DETECTED )
 800ba30:	0768      	lsls	r0, r5, #29
 800ba32:	d505      	bpl.n	800ba40 <RadioIrqProcess+0xd0>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY PRE OK\n\r" );
 800ba34:	2200      	movs	r2, #0
 800ba36:	4b3e      	ldr	r3, [pc, #248]	@ (800bb30 <RadioIrqProcess+0x1c0>)
 800ba38:	4611      	mov	r1, r2
 800ba3a:	2003      	movs	r0, #3
 800ba3c:	f001 f964 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 800ba40:	0729      	lsls	r1, r5, #28
 800ba42:	d505      	bpl.n	800ba50 <RadioIrqProcess+0xe0>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY SYNC OK\n\r" );
 800ba44:	2200      	movs	r2, #0
 800ba46:	4b3b      	ldr	r3, [pc, #236]	@ (800bb34 <RadioIrqProcess+0x1c4>)
 800ba48:	4611      	mov	r1, r2
 800ba4a:	2003      	movs	r0, #3
 800ba4c:	f001 f95c 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800ba50:	06ea      	lsls	r2, r5, #27
 800ba52:	d505      	bpl.n	800ba60 <RadioIrqProcess+0xf0>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR OK\n\r" );
 800ba54:	2200      	movs	r2, #0
 800ba56:	4b38      	ldr	r3, [pc, #224]	@ (800bb38 <RadioIrqProcess+0x1c8>)
 800ba58:	4611      	mov	r1, r2
 800ba5a:	2003      	movs	r0, #3
 800ba5c:	f001 f954 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 800ba60:	06ab      	lsls	r3, r5, #26
 800ba62:	d55c      	bpl.n	800bb1e <RadioIrqProcess+0x1ae>
        {
            TimerStop( &RxTimeoutTimer );
 800ba64:	4830      	ldr	r0, [pc, #192]	@ (800bb28 <RadioIrqProcess+0x1b8>)
 800ba66:	f001 fc77 	bl	800d358 <UTIL_TIMER_Stop>
            if( RxContinuous == false )
 800ba6a:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800ba6e:	b913      	cbnz	r3, 800ba76 <RadioIrqProcess+0x106>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800ba70:	2001      	movs	r0, #1
 800ba72:	f000 fb99 	bl	800c1a8 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d050      	beq.n	800bb1e <RadioIrqProcess+0x1ae>
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d04d      	beq.n	800bb1e <RadioIrqProcess+0x1ae>
            {
                RadioEvents->RxTimeout( );
 800ba82:	4798      	blx	r3
                MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR KO\n\r" );
 800ba84:	2200      	movs	r2, #0
 800ba86:	4b2d      	ldr	r3, [pc, #180]	@ (800bb3c <RadioIrqProcess+0x1cc>)
 800ba88:	4611      	mov	r1, r2
 800ba8a:	2003      	movs	r0, #3
 800ba8c:	f001 f93c 	bl	800cd08 <UTIL_ADV_TRACE_COND_FSend>
                Sx_Board_SetLedRx(false);
 800ba90:	2000      	movs	r0, #0
            }
        }
    }
}
 800ba92:	b002      	add	sp, #8
 800ba94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                Sx_Board_SetLedRx(false);
 800ba98:	f7f6 ba74 	b.w	8001f84 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
                if( RxContinuous == false )
 800ba9c:	b996      	cbnz	r6, 800bac4 <RadioIrqProcess+0x154>
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 800ba9e:	2001      	movs	r0, #1
 800baa0:	f000 fb82 	bl	800c1a8 <SX126xSetOperatingMode>
                    SX126xWriteRegister( REG_RTC_CTRL, 0x00 );
 800baa4:	4631      	mov	r1, r6
 800baa6:	f640 1002 	movw	r0, #2306	@ 0x902
 800baaa:	f000 feb7 	bl	800c81c <SX126xWriteRegister>
                    SX126xWriteRegister( REG_EVT_CLR, SX126xReadRegister( REG_EVT_CLR ) | ( 1 << 1 ) );
 800baae:	f640 1044 	movw	r0, #2372	@ 0x944
 800bab2:	f000 ff4c 	bl	800c94e <SX126xReadRegister>
 800bab6:	f040 0102 	orr.w	r1, r0, #2
 800baba:	b2c9      	uxtb	r1, r1
 800babc:	f640 1044 	movw	r0, #2372	@ 0x944
 800bac0:	f000 feac 	bl	800c81c <SX126xWriteRegister>
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 800bac4:	22ff      	movs	r2, #255	@ 0xff
 800bac6:	f10d 0107 	add.w	r1, sp, #7
 800baca:	481d      	ldr	r0, [pc, #116]	@ (800bb40 <RadioIrqProcess+0x1d0>)
 800bacc:	f001 f850 	bl	800cb70 <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 800bad0:	481c      	ldr	r0, [pc, #112]	@ (800bb44 <RadioIrqProcess+0x1d4>)
 800bad2:	f000 fdbf 	bl	800c654 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d086      	beq.n	800b9ea <RadioIrqProcess+0x7a>
 800badc:	689e      	ldr	r6, [r3, #8]
 800bade:	2e00      	cmp	r6, #0
 800bae0:	d083      	beq.n	800b9ea <RadioIrqProcess+0x7a>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 800bae2:	f994 3189 	ldrsb.w	r3, [r4, #393]	@ 0x189
 800bae6:	f994 2188 	ldrsb.w	r2, [r4, #392]	@ 0x188
 800baea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800baee:	4814      	ldr	r0, [pc, #80]	@ (800bb40 <RadioIrqProcess+0x1d0>)
 800baf0:	47b0      	blx	r6
 800baf2:	e777      	b.n	800b9e4 <RadioIrqProcess+0x74>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 800baf4:	f000 fb52 	bl	800c19c <SX126xGetOperatingMode>
 800baf8:	2805      	cmp	r0, #5
 800bafa:	d199      	bne.n	800ba30 <RadioIrqProcess+0xc0>
                TimerStop( &RxTimeoutTimer );
 800bafc:	480a      	ldr	r0, [pc, #40]	@ (800bb28 <RadioIrqProcess+0x1b8>)
 800bafe:	f001 fc2b 	bl	800d358 <UTIL_TIMER_Stop>
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800bb02:	2001      	movs	r0, #1
 800bb04:	f000 fb50 	bl	800c1a8 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d090      	beq.n	800ba30 <RadioIrqProcess+0xc0>
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d08d      	beq.n	800ba30 <RadioIrqProcess+0xc0>
                    RadioEvents->RxTimeout( );
 800bb14:	4798      	blx	r3
                    Sx_Board_SetLedRx(false);
 800bb16:	2000      	movs	r0, #0
 800bb18:	f7f6 fa34 	bl	8001f84 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
 800bb1c:	e788      	b.n	800ba30 <RadioIrqProcess+0xc0>
}
 800bb1e:	b002      	add	sp, #8
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	bf00      	nop
 800bb24:	20000ff4 	.word	0x20000ff4
 800bb28:	20001050 	.word	0x20001050
 800bb2c:	20001038 	.word	0x20001038
 800bb30:	0800e447 	.word	0x0800e447
 800bb34:	0800e454 	.word	0x0800e454
 800bb38:	0800e462 	.word	0x0800e462
 800bb3c:	0800e46f 	.word	0x0800e46f
 800bb40:	20001071 	.word	0x20001071
 800bb44:	20001170 	.word	0x20001170

0800bb48 <RadioOnDioIrq>:
  IrqFired = true;
 800bb48:	4b02      	ldr	r3, [pc, #8]	@ (800bb54 <RadioOnDioIrq+0xc>)
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  RadioIrqProcess();
 800bb50:	f7ff bf0e 	b.w	800b970 <RadioIrqProcess>
 800bb54:	20000ff4 	.word	0x20000ff4

0800bb58 <RadioTimeOnAir>:
{
 800bb58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb5a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800bb5e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800bb62:	f89d e01c 	ldrb.w	lr, [sp, #28]
 800bb66:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
 800bb6a:	b140      	cbz	r0, 800bb7e <RadioTimeOnAir+0x26>
 800bb6c:	2801      	cmp	r0, #1
 800bb6e:	d014      	beq.n	800bb9a <RadioTimeOnAir+0x42>
 800bb70:	2201      	movs	r2, #1
 800bb72:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
 800bb74:	1898      	adds	r0, r3, r2
 800bb76:	3801      	subs	r0, #1
 800bb78:	fbb0 f0f2 	udiv	r0, r0, r2
}
 800bb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) +
 800bb7e:	f087 0701 	eor.w	r7, r7, #1
    return ( preambleLen << 3 ) +
 800bb82:	00e3      	lsls	r3, r4, #3
 800bb84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800bb88:	3318      	adds	r3, #24
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 800bb8a:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
             ( syncWordLength << 3 ) +
 800bb8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800bb92:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bb96:	434b      	muls	r3, r1
        break;
 800bb98:	e7ec      	b.n	800bb74 <RadioTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800bb9a:	1f50      	subs	r0, r2, #5
 800bb9c:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 800bb9e:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800bba2:	d802      	bhi.n	800bbaa <RadioTimeOnAir+0x52>
        if( preambleLen < 12 )
 800bba4:	2c0c      	cmp	r4, #12
 800bba6:	bf38      	it	cc
 800bba8:	240c      	movcc	r4, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bbaa:	b9d1      	cbnz	r1, 800bbe2 <RadioTimeOnAir+0x8a>
 800bbac:	f1a2 0c0b 	sub.w	ip, r2, #11
 800bbb0:	f1bc 0f01 	cmp.w	ip, #1
 800bbb4:	bf8c      	ite	hi
 800bbb6:	f04f 0c00 	movhi.w	ip, #0
 800bbba:	f04f 0c01 	movls.w	ip, #1
                            ( crcOn ? 16 : 0 ) -
 800bbbe:	0128      	lsls	r0, r5, #4
                            ( fixLen ? 0 : 20 );
 800bbc0:	2f00      	cmp	r7, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800bbc2:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
                            ( fixLen ? 0 : 20 );
 800bbc6:	bf0c      	ite	eq
 800bbc8:	2514      	moveq	r5, #20
 800bbca:	2500      	movne	r5, #0
                            ( crcOn ? 16 : 0 ) -
 800bbcc:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
 800bbd0:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
 800bbd2:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800bbd6:	4428      	add	r0, r5
            ceilDenominator = 4 * ( datarate - 2 );
 800bbd8:	f1a2 0702 	sub.w	r7, r2, #2
    if( datarate <= 6 )
 800bbdc:	d80d      	bhi.n	800bbfa <RadioTimeOnAir+0xa2>
            ceilDenominator = 4 * datarate;
 800bbde:	4635      	mov	r5, r6
 800bbe0:	e010      	b.n	800bc04 <RadioTimeOnAir+0xac>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bbe2:	2901      	cmp	r1, #1
 800bbe4:	d106      	bne.n	800bbf4 <RadioTimeOnAir+0x9c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800bbe6:	f1a2 000c 	sub.w	r0, r2, #12
 800bbea:	f1d0 0c00 	rsbs	ip, r0, #0
 800bbee:	eb4c 0c00 	adc.w	ip, ip, r0
 800bbf2:	e7e4      	b.n	800bbbe <RadioTimeOnAir+0x66>
    bool    lowDatareOptimize = false;
 800bbf4:	f04f 0c00 	mov.w	ip, #0
 800bbf8:	e7e1      	b.n	800bbbe <RadioTimeOnAir+0x66>
        ceilNumerator += 8;
 800bbfa:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 800bbfc:	f1bc 0f00 	cmp.w	ip, #0
 800bc00:	d0ed      	beq.n	800bbde <RadioTimeOnAir+0x86>
            ceilDenominator = 4 * ( datarate - 2 );
 800bc02:	00bd      	lsls	r5, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800bc04:	2800      	cmp	r0, #0
 800bc06:	bfac      	ite	ge
 800bc08:	182e      	addge	r6, r5, r0
 800bc0a:	1c2e      	addlt	r6, r5, #0
    if( datarate <= 6 )
 800bc0c:	2a06      	cmp	r2, #6
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800bc0e:	4a0d      	ldr	r2, [pc, #52]	@ (800bc44 <RadioTimeOnAir+0xec>)
 800bc10:	4411      	add	r1, r2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800bc12:	f106 30ff 	add.w	r0, r6, #4294967295
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800bc16:	f891 10b4 	ldrb.w	r1, [r1, #180]	@ 0xb4
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800bc1a:	fb90 f0f5 	sdiv	r0, r0, r5
 800bc1e:	fb03 4400 	mla	r4, r3, r0, r4
    int32_t intermediate =
 800bc22:	bf8c      	ite	hi
 800bc24:	340c      	addhi	r4, #12
        intermediate += 2;
 800bc26:	340e      	addls	r4, #14
    switch( bw )
 800bc28:	290a      	cmp	r1, #10
 800bc2a:	d80a      	bhi.n	800bc42 <RadioTimeOnAir+0xea>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800bc2c:	00a3      	lsls	r3, r4, #2
 800bc2e:	3301      	adds	r3, #1
 800bc30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800bc34:	40bb      	lsls	r3, r7
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800bc36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bc3a:	f8d2 20b8 	ldr.w	r2, [r2, #184]	@ 0xb8
 800bc3e:	4343      	muls	r3, r0
 800bc40:	e798      	b.n	800bb74 <RadioTimeOnAir+0x1c>
    return ( numerator + denominator - 1 ) / denominator;
 800bc42:	deff      	udf	#255	@ 0xff
 800bc44:	0800dd98 	.word	0x0800dd98

0800bc48 <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800bc48:	4b0e      	ldr	r3, [pc, #56]	@ (800bc84 <RadioSetPublicNetwork+0x3c>)
{
 800bc4a:	b510      	push	{r4, lr}
 800bc4c:	4604      	mov	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800bc4e:	f883 0190 	strb.w	r0, [r3, #400]	@ 0x190
 800bc52:	f883 0191 	strb.w	r0, [r3, #401]	@ 0x191
    switch( modem )
 800bc56:	f000 f817 	bl	800bc88 <RadioSetModem.part.0>
    if( enable == true )
 800bc5a:	b15c      	cbz	r4, 800bc74 <RadioSetPublicNetwork+0x2c>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800bc5c:	2134      	movs	r1, #52	@ 0x34
 800bc5e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800bc62:	f000 fddb 	bl	800c81c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800bc66:	2144      	movs	r1, #68	@ 0x44
}
 800bc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800bc6c:	f240 7041 	movw	r0, #1857	@ 0x741
 800bc70:	f000 bdd4 	b.w	800c81c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800bc74:	2114      	movs	r1, #20
 800bc76:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800bc7a:	f000 fdcf 	bl	800c81c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800bc7e:	2124      	movs	r1, #36	@ 0x24
 800bc80:	e7f2      	b.n	800bc68 <RadioSetPublicNetwork+0x20>
 800bc82:	bf00      	nop
 800bc84:	20000ff4 	.word	0x20000ff4

0800bc88 <RadioSetModem.part.0>:
void RadioSetModem( RadioModems_t modem )
 800bc88:	b508      	push	{r3, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800bc8a:	2001      	movs	r0, #1
 800bc8c:	f000 fc32 	bl	800c4f4 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 800bc90:	4b06      	ldr	r3, [pc, #24]	@ (800bcac <RadioSetModem.part.0+0x24>)
 800bc92:	f893 0190 	ldrb.w	r0, [r3, #400]	@ 0x190
 800bc96:	f893 2191 	ldrb.w	r2, [r3, #401]	@ 0x191
 800bc9a:	4282      	cmp	r2, r0
 800bc9c:	d005      	beq.n	800bcaa <RadioSetModem.part.0+0x22>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800bc9e:	f883 0191 	strb.w	r0, [r3, #401]	@ 0x191
}
 800bca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 800bca6:	f7ff bfcf 	b.w	800bc48 <RadioSetPublicNetwork>
}
 800bcaa:	bd08      	pop	{r3, pc}
 800bcac:	20000ff4 	.word	0x20000ff4

0800bcb0 <RadioSetModem>:
    switch( modem )
 800bcb0:	2801      	cmp	r0, #1
{
 800bcb2:	b508      	push	{r3, lr}
    switch( modem )
 800bcb4:	d007      	beq.n	800bcc6 <RadioSetModem+0x16>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	f000 fc1c 	bl	800c4f4 <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 800bcbc:	4b04      	ldr	r3, [pc, #16]	@ (800bcd0 <RadioSetModem+0x20>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
}
 800bcc4:	bd08      	pop	{r3, pc}
 800bcc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bcca:	f7ff bfdd 	b.w	800bc88 <RadioSetModem.part.0>
 800bcce:	bf00      	nop
 800bcd0:	20000ff4 	.word	0x20000ff4

0800bcd4 <RadioSetRxConfig>:
{
 800bcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd8:	b085      	sub	sp, #20
 800bcda:	460f      	mov	r7, r1
 800bcdc:	f89d 104c 	ldrb.w	r1, [sp, #76]	@ 0x4c
 800bce0:	9100      	str	r1, [sp, #0]
 800bce2:	f89d 105c 	ldrb.w	r1, [sp, #92]	@ 0x5c
 800bce6:	f89d a044 	ldrb.w	sl, [sp, #68]	@ 0x44
 800bcea:	f8bd 8040 	ldrh.w	r8, [sp, #64]	@ 0x40
    RxContinuous = rxContinuous;
 800bcee:	4c63      	ldr	r4, [pc, #396]	@ (800be7c <RadioSetRxConfig+0x1a8>)
 800bcf0:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800be8c <RadioSetRxConfig+0x1b8>
{
 800bcf4:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
    RxContinuous = rxContinuous;
 800bcf8:	f884 1074 	strb.w	r1, [r4, #116]	@ 0x74
        symbTimeout = 0;
 800bcfc:	2900      	cmp	r1, #0
 800bcfe:	bf18      	it	ne
 800bd00:	f04f 0800 	movne.w	r8, #0
        MaxPayloadLength = 0xFF;
 800bd04:	f1ba 0f00 	cmp.w	sl, #0
{
 800bd08:	4615      	mov	r5, r2
 800bd0a:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
        MaxPayloadLength = 0xFF;
 800bd0e:	bf08      	it	eq
 800bd10:	22ff      	moveq	r2, #255	@ 0xff
 800bd12:	f88b 2000 	strb.w	r2, [fp]
    switch( modem )
 800bd16:	4681      	mov	r9, r0
 800bd18:	b120      	cbz	r0, 800bd24 <RadioSetRxConfig+0x50>
 800bd1a:	2801      	cmp	r0, #1
 800bd1c:	d04d      	beq.n	800bdba <RadioSetRxConfig+0xe6>
}
 800bd1e:	b005      	add	sp, #20
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800bd24:	f000 fafc 	bl	800c320 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800bd28:	230b      	movs	r3, #11
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800bd2a:	0078      	lsls	r0, r7, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800bd2c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800bd30:	f884 902c 	strb.w	r9, [r4, #44]	@ 0x2c
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800bd34:	6325      	str	r5, [r4, #48]	@ 0x30
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800bd36:	f7ff fda7 	bl	800b888 <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800bd3a:	f641 0304 	movw	r3, #6148	@ 0x1804
 800bd3e:	8123      	strh	r3, [r4, #8]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800bd40:	f89b 3000 	ldrb.w	r3, [fp]
 800bd44:	7323      	strb	r3, [r4, #12]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800bd46:	9b00      	ldr	r3, [sp, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800bd48:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	bf0c      	ite	eq
 800bd50:	2301      	moveq	r3, #1
 800bd52:	23f2      	movne	r3, #242	@ 0xf2
 800bd54:	7363      	strb	r3, [r4, #13]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bd56:	00f6      	lsls	r6, r6, #3
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800bd58:	2301      	movs	r3, #1
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800bd5a:	f08a 0a01 	eor.w	sl, sl, #1
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800bd5e:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800bd60:	f884 9004 	strb.w	r9, [r4, #4]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bd64:	80e6      	strh	r6, [r4, #6]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800bd66:	f884 900a 	strb.w	r9, [r4, #10]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800bd6a:	f884 a00b 	strb.w	sl, [r4, #11]
            RadioStandby( );
 800bd6e:	f7ff fd09 	bl	800b784 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800bd72:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800bd76:	3800      	subs	r0, #0
 800bd78:	bf18      	it	ne
 800bd7a:	2001      	movne	r0, #1
 800bd7c:	f7ff ff98 	bl	800bcb0 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800bd80:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800bd84:	f000 fbc6 	bl	800c514 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800bd88:	1d20      	adds	r0, r4, #4
 800bd8a:	f000 fceb 	bl	800c764 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800bd8e:	4a3c      	ldr	r2, [pc, #240]	@ (800be80 <RadioSetRxConfig+0x1ac>)
 800bd90:	f8d2 00e4 	ldr.w	r0, [r2, #228]	@ 0xe4
 800bd94:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
 800bd98:	ab02      	add	r3, sp, #8
 800bd9a:	c303      	stmia	r3!, {r0, r1}
 800bd9c:	a802      	add	r0, sp, #8
 800bd9e:	f000 fcb4 	bl	800c70a <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 800bda2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800bda6:	f000 fddd 	bl	800c964 <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800bdaa:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800bdae:	fb03 f308 	mul.w	r3, r3, r8
 800bdb2:	fbb3 f3f5 	udiv	r3, r3, r5
 800bdb6:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800bdb8:	e7b1      	b.n	800bd1e <RadioSetRxConfig+0x4a>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800bdba:	2000      	movs	r0, #0
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	f000 faaf 	bl	800c320 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800bdc2:	492f      	ldr	r1, [pc, #188]	@ (800be80 <RadioSetRxConfig+0x1ac>)
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bdc4:	9b01      	ldr	r3, [sp, #4]
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800bdc6:	f884 902c 	strb.w	r9, [r4, #44]	@ 0x2c
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800bdca:	4439      	add	r1, r7
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800bdcc:	b2ea      	uxtb	r2, r5
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800bdce:	f891 10b4 	ldrb.w	r1, [r1, #180]	@ 0xb4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800bdd2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bdd6:	2f00      	cmp	r7, #0
 800bdd8:	d140      	bne.n	800be5c <RadioSetRxConfig+0x188>
 800bdda:	3d0b      	subs	r5, #11
 800bddc:	2d01      	cmp	r5, #1
 800bdde:	bf8c      	ite	hi
 800bde0:	2500      	movhi	r5, #0
 800bde2:	2501      	movls	r5, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bde4:	3a05      	subs	r2, #5
 800bde6:	2a01      	cmp	r2, #1
 800bde8:	d802      	bhi.n	800bdf0 <RadioSetRxConfig+0x11c>
                if( preambleLen < 12 )
 800bdea:	2e0c      	cmp	r6, #12
 800bdec:	bf38      	it	cc
 800bdee:	260c      	movcc	r6, #12
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800bdf0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	7123      	strb	r3, [r4, #4]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800bdf8:	f89b 3000 	ldrb.w	r3, [fp]
 800bdfc:	74e3      	strb	r3, [r4, #19]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800bdfe:	9b00      	ldr	r3, [sp, #0]
 800be00:	7523      	strb	r3, [r4, #20]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800be02:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800be06:	7563      	strb	r3, [r4, #21]
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800be08:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
 800be0c:	f884 503f 	strb.w	r5, [r4, #63]	@ 0x3f
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800be10:	8226      	strh	r6, [r4, #16]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800be12:	f884 a012 	strb.w	sl, [r4, #18]
            RadioStandby( );
 800be16:	f7ff fcb5 	bl	800b784 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800be1a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800be1e:	3800      	subs	r0, #0
 800be20:	bf18      	it	ne
 800be22:	2001      	movne	r0, #1
 800be24:	f7ff ff44 	bl	800bcb0 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800be28:	4816      	ldr	r0, [pc, #88]	@ (800be84 <RadioSetRxConfig+0x1b0>)
 800be2a:	f000 fb73 	bl	800c514 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800be2e:	4816      	ldr	r0, [pc, #88]	@ (800be88 <RadioSetRxConfig+0x1b4>)
 800be30:	f000 fc98 	bl	800c764 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 800be34:	fa5f f088 	uxtb.w	r0, r8
 800be38:	f000 fd38 	bl	800c8ac <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800be3c:	7d63      	ldrb	r3, [r4, #21]
 800be3e:	2b01      	cmp	r3, #1
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 800be40:	f240 7036 	movw	r0, #1846	@ 0x736
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800be44:	d113      	bne.n	800be6e <RadioSetRxConfig+0x19a>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 800be46:	f000 fd82 	bl	800c94e <SX126xReadRegister>
 800be4a:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 800be4e:	f240 7036 	movw	r0, #1846	@ 0x736
 800be52:	f000 fce3 	bl	800c81c <SX126xWriteRegister>
            break;
 800be56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be5a:	e7ac      	b.n	800bdb6 <RadioSetRxConfig+0xe2>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800be5c:	2f01      	cmp	r7, #1
 800be5e:	d104      	bne.n	800be6a <RadioSetRxConfig+0x196>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800be60:	f1a5 000c 	sub.w	r0, r5, #12
 800be64:	4245      	negs	r5, r0
 800be66:	4145      	adcs	r5, r0
 800be68:	e7bc      	b.n	800bde4 <RadioSetRxConfig+0x110>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800be6a:	2500      	movs	r5, #0
 800be6c:	e7ba      	b.n	800bde4 <RadioSetRxConfig+0x110>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 800be6e:	f000 fd6e 	bl	800c94e <SX126xReadRegister>
 800be72:	f040 0104 	orr.w	r1, r0, #4
 800be76:	b2c9      	uxtb	r1, r1
 800be78:	e7e9      	b.n	800be4e <RadioSetRxConfig+0x17a>
 800be7a:	bf00      	nop
 800be7c:	20000ff4 	.word	0x20000ff4
 800be80:	0800dd98 	.word	0x0800dd98
 800be84:	20001020 	.word	0x20001020
 800be88:	20000ff8 	.word	0x20000ff8
 800be8c:	200000d0 	.word	0x200000d0

0800be90 <RadioSetTxConfig>:
{
 800be90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800be96:	f8bd 7038 	ldrh.w	r7, [sp, #56]	@ 0x38
 800be9a:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 800be9e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 800bea2:	4c54      	ldr	r4, [pc, #336]	@ (800bff4 <RadioSetTxConfig+0x164>)
 800bea4:	4688      	mov	r8, r1
 800bea6:	4693      	mov	fp, r2
    switch( modem )
 800bea8:	4606      	mov	r6, r0
 800beaa:	b148      	cbz	r0, 800bec0 <RadioSetTxConfig+0x30>
 800beac:	2801      	cmp	r0, #1
 800beae:	d046      	beq.n	800bf3e <RadioSetTxConfig+0xae>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 800beb0:	f640 0089 	movw	r0, #2185	@ 0x889
 800beb4:	f000 fd4b 	bl	800c94e <SX126xReadRegister>
 800beb8:	f040 0104 	orr.w	r1, r0, #4
 800bebc:	b2c9      	uxtb	r1, r1
 800bebe:	e083      	b.n	800bfc8 <RadioSetTxConfig+0x138>
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800bec0:	220b      	movs	r2, #11
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800bec2:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800bec6:	0058      	lsls	r0, r3, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800bec8:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800becc:	6325      	str	r5, [r4, #48]	@ 0x30
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800bece:	f7ff fcdb 	bl	800b888 <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800bed2:	f641 0304 	movw	r3, #6148	@ 0x1804
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800bed6:	f1ba 0f00 	cmp.w	sl, #0
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800beda:	8123      	strh	r3, [r4, #8]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800bedc:	bf0c      	ite	eq
 800bede:	2301      	moveq	r3, #1
 800bee0:	23f2      	movne	r3, #242	@ 0xf2
 800bee2:	7363      	strb	r3, [r4, #13]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bee4:	00ff      	lsls	r7, r7, #3
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800bee6:	2301      	movs	r3, #1
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800bee8:	f089 0901 	eor.w	r9, r9, #1
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800beec:	73a3      	strb	r3, [r4, #14]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800beee:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 800bef2:	f8c4 b034 	str.w	fp, [r4, #52]	@ 0x34
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800bef6:	7126      	strb	r6, [r4, #4]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bef8:	80e7      	strh	r7, [r4, #6]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800befa:	72a6      	strb	r6, [r4, #10]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800befc:	f884 900b 	strb.w	r9, [r4, #11]
            RadioStandby( );
 800bf00:	f7ff fc40 	bl	800b784 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800bf04:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800bf08:	3800      	subs	r0, #0
 800bf0a:	bf18      	it	ne
 800bf0c:	2001      	movne	r0, #1
 800bf0e:	f7ff fecf 	bl	800bcb0 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800bf12:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800bf16:	f000 fafd 	bl	800c514 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800bf1a:	1d20      	adds	r0, r4, #4
 800bf1c:	f000 fc22 	bl	800c764 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800bf20:	4a35      	ldr	r2, [pc, #212]	@ (800bff8 <RadioSetTxConfig+0x168>)
 800bf22:	f8d2 00e4 	ldr.w	r0, [r2, #228]	@ 0xe4
 800bf26:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
 800bf2a:	466b      	mov	r3, sp
 800bf2c:	c303      	stmia	r3!, {r0, r1}
 800bf2e:	4668      	mov	r0, sp
 800bf30:	f000 fbeb 	bl	800c70a <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 800bf34:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800bf38:	f000 fd14 	bl	800c964 <SX126xSetWhiteningSeed>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800bf3c:	e7b8      	b.n	800beb0 <RadioSetTxConfig+0x20>
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800bf3e:	492e      	ldr	r1, [pc, #184]	@ (800bff8 <RadioSetTxConfig+0x168>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800bf40:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800bf44:	4419      	add	r1, r3
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800bf46:	b2ea      	uxtb	r2, r5
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800bf48:	f891 10b4 	ldrb.w	r1, [r1, #180]	@ 0xb4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800bf4c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d145      	bne.n	800bfe0 <RadioSetTxConfig+0x150>
 800bf54:	3d0b      	subs	r5, #11
 800bf56:	2d01      	cmp	r5, #1
 800bf58:	bf8c      	ite	hi
 800bf5a:	2500      	movhi	r5, #0
 800bf5c:	2501      	movls	r5, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bf5e:	3a05      	subs	r2, #5
 800bf60:	2a01      	cmp	r2, #1
 800bf62:	d802      	bhi.n	800bf6a <RadioSetTxConfig+0xda>
                if( preambleLen < 12 )
 800bf64:	2f0c      	cmp	r7, #12
 800bf66:	bf38      	it	cc
 800bf68:	270c      	movcc	r7, #12
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800bf6a:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 800bf6e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800bf72:	2301      	movs	r3, #1
 800bf74:	7123      	strb	r3, [r4, #4]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800bf76:	4b21      	ldr	r3, [pc, #132]	@ (800bffc <RadioSetTxConfig+0x16c>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800bf78:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	74e3      	strb	r3, [r4, #19]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800bf80:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800bf84:	7563      	strb	r3, [r4, #21]
 800bf86:	f884 503f 	strb.w	r5, [r4, #63]	@ 0x3f
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bf8a:	8227      	strh	r7, [r4, #16]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800bf8c:	f884 9012 	strb.w	r9, [r4, #18]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800bf90:	f884 a014 	strb.w	sl, [r4, #20]
            RadioStandby( );
 800bf94:	f7ff fbf6 	bl	800b784 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800bf98:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800bf9c:	3800      	subs	r0, #0
 800bf9e:	bf18      	it	ne
 800bfa0:	2001      	movne	r0, #1
 800bfa2:	f7ff fe85 	bl	800bcb0 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800bfa6:	4816      	ldr	r0, [pc, #88]	@ (800c000 <RadioSetTxConfig+0x170>)
 800bfa8:	f000 fab4 	bl	800c514 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800bfac:	4815      	ldr	r0, [pc, #84]	@ (800c004 <RadioSetTxConfig+0x174>)
 800bfae:	f000 fbd9 	bl	800c764 <SX126xSetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800bfb2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800bfb6:	2b06      	cmp	r3, #6
 800bfb8:	f47f af7a 	bne.w	800beb0 <RadioSetTxConfig+0x20>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) & ~( 1 << 2 ) );
 800bfbc:	f640 0089 	movw	r0, #2185	@ 0x889
 800bfc0:	f000 fcc5 	bl	800c94e <SX126xReadRegister>
 800bfc4:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 800bfc8:	f640 0089 	movw	r0, #2185	@ 0x889
 800bfcc:	f000 fc26 	bl	800c81c <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 800bfd0:	4640      	mov	r0, r8
 800bfd2:	f000 fd5e 	bl	800ca92 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 800bfd6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bfd8:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800bfda:	b003      	add	sp, #12
 800bfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d104      	bne.n	800bfee <RadioSetTxConfig+0x15e>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800bfe4:	f1a5 030c 	sub.w	r3, r5, #12
 800bfe8:	425d      	negs	r5, r3
 800bfea:	415d      	adcs	r5, r3
 800bfec:	e7b7      	b.n	800bf5e <RadioSetTxConfig+0xce>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800bfee:	2500      	movs	r5, #0
 800bff0:	e7b5      	b.n	800bf5e <RadioSetTxConfig+0xce>
 800bff2:	bf00      	nop
 800bff4:	20000ff4 	.word	0x20000ff4
 800bff8:	0800dd98 	.word	0x0800dd98
 800bffc:	200000d0 	.word	0x200000d0
 800c000:	20001020 	.word	0x20001020
 800c004:	20000ff8 	.word	0x20000ff8

0800c008 <RadioIsChannelFree>:
{
 800c008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c00c:	4604      	mov	r4, r0
 800c00e:	b08a      	sub	sp, #40	@ 0x28
    RadioSetModem( MODEM_FSK );
 800c010:	2000      	movs	r0, #0
{
 800c012:	460d      	mov	r5, r1
 800c014:	4617      	mov	r7, r2
 800c016:	461e      	mov	r6, r3
    RadioSetModem( MODEM_FSK );
 800c018:	f7ff fe4a 	bl	800bcb0 <RadioSetModem>
    SX126xSetRfFrequency( freq );
 800c01c:	4620      	mov	r0, r4
 800c01e:	f000 fa45 	bl	800c4ac <SX126xSetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800c022:	2400      	movs	r4, #0
 800c024:	f04f 0801 	mov.w	r8, #1
 800c028:	2303      	movs	r3, #3
 800c02a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800c02e:	4629      	mov	r1, r5
 800c030:	4620      	mov	r0, r4
 800c032:	e9cd 4808 	strd	r4, r8, [sp, #32]
 800c036:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800c03a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800c03e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800c042:	e9cd 5300 	strd	r5, r3, [sp]
 800c046:	4623      	mov	r3, r4
 800c048:	f7ff fe44 	bl	800bcd4 <RadioSetRxConfig>
    RadioRx( 0 );
 800c04c:	4620      	mov	r0, r4
 800c04e:	f7ff fc4b 	bl	800b8e8 <RadioRx>
    RADIO_DELAY_MS( 1 );
 800c052:	4640      	mov	r0, r8
 800c054:	f7f5 fbeb 	bl	800182e <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800c058:	f001 f93a 	bl	800d2d0 <UTIL_TIMER_GetCurrentTime>
 800c05c:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800c05e:	4620      	mov	r0, r4
 800c060:	f001 f940 	bl	800d2e4 <UTIL_TIMER_GetElapsedTime>
 800c064:	42b0      	cmp	r0, r6
 800c066:	d306      	bcc.n	800c076 <RadioIsChannelFree+0x6e>
    bool     status           = true;
 800c068:	2401      	movs	r4, #1
    RadioSleep( );
 800c06a:	f7ff fbcd 	bl	800b808 <RadioSleep>
}
 800c06e:	4620      	mov	r0, r4
 800c070:	b00a      	add	sp, #40	@ 0x28
 800c072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SX126xGetRssiInst( );
 800c076:	f000 fadf 	bl	800c638 <SX126xGetRssiInst>
        if( rssi > rssiThresh )
 800c07a:	4287      	cmp	r7, r0
 800c07c:	daef      	bge.n	800c05e <RadioIsChannelFree+0x56>
            status = false;
 800c07e:	2400      	movs	r4, #0
 800c080:	e7f3      	b.n	800c06a <RadioIsChannelFree+0x62>

0800c082 <RadioRandom>:
{
 800c082:	b510      	push	{r4, lr}
 800c084:	f7ff fe00 	bl	800bc88 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800c088:	2300      	movs	r3, #0
 800c08a:	461a      	mov	r2, r3
 800c08c:	4619      	mov	r1, r3
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 f9b0 	bl	800c3f4 <SX126xSetDioIrqParams>
    rnd = SX126xGetRandom( );
 800c094:	f000 fc82 	bl	800c99c <SX126xGetRandom>
 800c098:	4604      	mov	r4, r0
    Sx_Board_SetLedRx(false);
 800c09a:	2000      	movs	r0, #0
 800c09c:	f7f5 ff72 	bl	8001f84 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
}
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	bd10      	pop	{r4, pc}

0800c0a4 <RadioAddRegisterToRetentionList>:
{
 800c0a4:	b530      	push	{r4, r5, lr}
 800c0a6:	b085      	sub	sp, #20
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800c0a8:	a901      	add	r1, sp, #4
{
 800c0aa:	4604      	mov	r4, r0
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800c0ac:	2209      	movs	r2, #9
 800c0ae:	f240 209f 	movw	r0, #671	@ 0x29f
 800c0b2:	f000 fc27 	bl	800c904 <SX126xReadRegisters>
    const uint8_t nbOfRegisters = buffer[0];
 800c0b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 800c0ba:	a801      	add	r0, sp, #4
 800c0bc:	2100      	movs	r1, #0
 800c0be:	b2ca      	uxtb	r2, r1
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d817      	bhi.n	800c0f4 <RadioAddRegisterToRetentionList+0x50>
    if( nbOfRegisters < MAX_NB_REG_IN_RETENTION )
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	d820      	bhi.n	800c10a <RadioAddRegisterToRetentionList+0x66>
        buffer[0] += 1;
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	f88d 2004 	strb.w	r2, [sp, #4]
        registerList[2 * nbOfRegisters]     = ( uint8_t )( registerAddress >> 8 );
 800c0ce:	a904      	add	r1, sp, #16
 800c0d0:	2202      	movs	r2, #2
 800c0d2:	fb03 1102 	mla	r1, r3, r2, r1
 800c0d6:	0a20      	lsrs	r0, r4, #8
 800c0d8:	f801 0c0b 	strb.w	r0, [r1, #-11]
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 800c0dc:	a904      	add	r1, sp, #16
 800c0de:	fb02 1303 	mla	r3, r2, r3, r1
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800c0e2:	f240 209f 	movw	r0, #671	@ 0x29f
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 800c0e6:	f803 4c0a 	strb.w	r4, [r3, #-10]
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800c0ea:	2209      	movs	r2, #9
 800c0ec:	a901      	add	r1, sp, #4
 800c0ee:	f000 faeb 	bl	800c6c8 <SX126xWriteRegisters>
 800c0f2:	e00a      	b.n	800c10a <RadioAddRegisterToRetentionList+0x66>
        if( registerAddress == ( ( uint16_t ) registerList[2 * i] << 8 ) + registerList[2 * i + 1] )
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	7845      	ldrb	r5, [r0, #1]
 800c0f8:	7892      	ldrb	r2, [r2, #2]
 800c0fa:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 800c0fe:	4294      	cmp	r4, r2
 800c100:	f101 0101 	add.w	r1, r1, #1
 800c104:	f100 0002 	add.w	r0, r0, #2
 800c108:	d1d9      	bne.n	800c0be <RadioAddRegisterToRetentionList+0x1a>
}
 800c10a:	b005      	add	sp, #20
 800c10c:	bd30      	pop	{r4, r5, pc}
	...

0800c110 <RadioInit>:
{
 800c110:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800c112:	4d1e      	ldr	r5, [pc, #120]	@ (800c18c <RadioInit+0x7c>)
 800c114:	462e      	mov	r6, r5
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800c116:	2400      	movs	r4, #0
    RadioEvents = events;
 800c118:	f846 0b44 	str.w	r0, [r6], #68
    SX126xInit( RadioOnDioIrq );
 800c11c:	481c      	ldr	r0, [pc, #112]	@ (800c190 <RadioInit+0x80>)
 800c11e:	f000 f99f 	bl	800c460 <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 800c122:	2000      	movs	r0, #0
 800c124:	f000 f898 	bl	800c258 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 800c128:	2001      	movs	r0, #1
 800c12a:	f000 f905 	bl	800c338 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 800c12e:	2100      	movs	r1, #0
 800c130:	4608      	mov	r0, r1
 800c132:	f000 fa3b 	bl	800c5ac <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 800c136:	2104      	movs	r1, #4
 800c138:	2000      	movs	r0, #0
 800c13a:	f000 fc66 	bl	800ca0a <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800c13e:	2300      	movs	r3, #0
 800c140:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c144:	461a      	mov	r2, r3
 800c146:	4608      	mov	r0, r1
 800c148:	f000 f954 	bl	800c3f4 <SX126xSetDioIrqParams>
    RadioAddRegisterToRetentionList( REG_RX_GAIN );
 800c14c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800c150:	f7ff ffa8 	bl	800c0a4 <RadioAddRegisterToRetentionList>
    RadioAddRegisterToRetentionList( REG_TX_MODULATION );
 800c154:	f640 0089 	movw	r0, #2185	@ 0x889
 800c158:	f7ff ffa4 	bl	800c0a4 <RadioAddRegisterToRetentionList>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800c15c:	4622      	mov	r2, r4
 800c15e:	4b0d      	ldr	r3, [pc, #52]	@ (800c194 <RadioInit+0x84>)
 800c160:	9400      	str	r4, [sp, #0]
 800c162:	f04f 31ff 	mov.w	r1, #4294967295
 800c166:	4630      	mov	r0, r6
 800c168:	f001 f898 	bl	800d29c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800c16c:	4b0a      	ldr	r3, [pc, #40]	@ (800c198 <RadioInit+0x88>)
 800c16e:	9400      	str	r4, [sp, #0]
 800c170:	4622      	mov	r2, r4
 800c172:	f04f 31ff 	mov.w	r1, #4294967295
 800c176:	f105 005c 	add.w	r0, r5, #92	@ 0x5c
 800c17a:	f001 f88f 	bl	800d29c <UTIL_TIMER_Create>
    IrqFired = false;
 800c17e:	f885 407c 	strb.w	r4, [r5, #124]	@ 0x7c
}
 800c182:	b002      	add	sp, #8
 800c184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return ( uint32_t )RadioGetWakeupTime( ) ;
 800c188:	f7ff bb78 	b.w	800b87c <RadioGetWakeupTime>
 800c18c:	20000ff4 	.word	0x20000ff4
 800c190:	0800bb49 	.word	0x0800bb49
 800c194:	0800b75d 	.word	0x0800b75d
 800c198:	0800b771 	.word	0x0800b771

0800c19c <SX126xGetOperatingMode>:
}

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
}
 800c19c:	4b01      	ldr	r3, [pc, #4]	@ (800c1a4 <SX126xGetOperatingMode+0x8>)
 800c19e:	7818      	ldrb	r0, [r3, #0]
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	20001188 	.word	0x20001188

0800c1a8 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode( RadioOperatingModes_t mode )
{
    OperatingMode = mode;
 800c1a8:	4b01      	ldr	r3, [pc, #4]	@ (800c1b0 <SX126xSetOperatingMode+0x8>)
 800c1aa:	7018      	strb	r0, [r3, #0]
}
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	20001188 	.word	0x20001188

0800c1b4 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 800c1b4:	b508      	push	{r3, lr}
    return OperatingMode;
 800c1b6:	4b07      	ldr	r3, [pc, #28]	@ (800c1d4 <SX126xCheckDeviceReady+0x20>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 800c1ba:	b10b      	cbz	r3, 800c1c0 <SX126xCheckDeviceReady+0xc>
 800c1bc:	2b06      	cmp	r3, #6
 800c1be:	d104      	bne.n	800c1ca <SX126xCheckDeviceReady+0x16>
    {
        Sx_Board_WakeUp( );
 800c1c0:	f7f5 fefb 	bl	8001fba <SX1262DVK1DAS_RADIO_WakeUp>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        Sx_Board_SetAntSw( RFSW_ON );
 800c1c4:	2005      	movs	r0, #5
 800c1c6:	f7f5 fec7 	bl	8001f58 <SX1262DVK1DAS_RADIO_SetAntSw>
    }
    Sx_Board_WaitOnBusy( );
}
 800c1ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Sx_Board_WaitOnBusy( );
 800c1ce:	f7f5 bea3 	b.w	8001f18 <SX1262DVK1DAS_RADIO_WaitOnBusy>
 800c1d2:	bf00      	nop
 800c1d4:	20001188 	.word	0x20001188

0800c1d8 <SX126xGetPacketType>:
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
}
 800c1d8:	4b01      	ldr	r3, [pc, #4]	@ (800c1e0 <SX126xGetPacketType+0x8>)
 800c1da:	7858      	ldrb	r0, [r3, #1]
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	20001188 	.word	0x20001188

0800c1e4 <SX126xWriteCommand>:
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
             SX126X_PLL_STEP_SCALED );
}

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800c1e4:	b570      	push	{r4, r5, r6, lr}
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	4615      	mov	r5, r2
 800c1ea:	4606      	mov	r6, r0
    SX126xCheckDeviceReady( );
 800c1ec:	f7ff ffe2 	bl	800c1b4 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	f7f5 fe9d 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f7f5 fed0 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>

    for( uint16_t i = 0; i < size; i++ )
 800c1fc:	4425      	add	r5, r4
 800c1fe:	42ac      	cmp	r4, r5
 800c200:	d108      	bne.n	800c214 <SX126xWriteCommand+0x30>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800c202:	2001      	movs	r0, #1
 800c204:	f7f5 fe94 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    if( command != RADIO_SET_SLEEP )
 800c208:	2e84      	cmp	r6, #132	@ 0x84
 800c20a:	d008      	beq.n	800c21e <SX126xWriteCommand+0x3a>
    {
        Sx_Board_WaitOnBusy( );
    }
}
 800c20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Sx_Board_WaitOnBusy( );
 800c210:	f7f5 be82 	b.w	8001f18 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        Sx_Board_SendRecv(  buffer[i] );
 800c214:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c218:	f7f5 fec0 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800c21c:	e7ef      	b.n	800c1fe <SX126xWriteCommand+0x1a>
}
 800c21e:	bd70      	pop	{r4, r5, r6, pc}

0800c220 <SX126xSetSleep>:
{
 800c220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c222:	4d0c      	ldr	r5, [pc, #48]	@ (800c254 <SX126xSetSleep+0x34>)
 800c224:	4604      	mov	r4, r0
    Sx_Board_SetAntSw( RFSW_OFF );
 800c226:	2000      	movs	r0, #0
 800c228:	f7f5 fe96 	bl	8001f58 <SX1262DVK1DAS_RADIO_SetAntSw>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800c22c:	f004 0307 	and.w	r3, r4, #7
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800c230:	2201      	movs	r2, #1
    if( sleepConfig.Fields.WarmStart == 0 )
 800c232:	f014 0404 	ands.w	r4, r4, #4
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800c236:	f10d 0107 	add.w	r1, sp, #7
 800c23a:	f04f 0084 	mov.w	r0, #132	@ 0x84
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800c23e:	f88d 3007 	strb.w	r3, [sp, #7]
        ImageCalibrated = false;
 800c242:	bf08      	it	eq
 800c244:	70ac      	strbeq	r4, [r5, #2]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800c246:	f7ff ffcd 	bl	800c1e4 <SX126xWriteCommand>
    OperatingMode = mode;
 800c24a:	2300      	movs	r3, #0
 800c24c:	702b      	strb	r3, [r5, #0]
}
 800c24e:	b003      	add	sp, #12
 800c250:	bd30      	pop	{r4, r5, pc}
 800c252:	bf00      	nop
 800c254:	20001188 	.word	0x20001188

0800c258 <SX126xSetStandby>:
{
 800c258:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800c25a:	2201      	movs	r2, #1
{
 800c25c:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800c260:	f10d 0107 	add.w	r1, sp, #7
 800c264:	2080      	movs	r0, #128	@ 0x80
 800c266:	f7ff ffbd 	bl	800c1e4 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 800c26a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    OperatingMode = mode;
 800c26e:	2b00      	cmp	r3, #0
 800c270:	4b03      	ldr	r3, [pc, #12]	@ (800c280 <SX126xSetStandby+0x28>)
 800c272:	bf14      	ite	ne
 800c274:	2202      	movne	r2, #2
 800c276:	2201      	moveq	r2, #1
 800c278:	701a      	strb	r2, [r3, #0]
}
 800c27a:	b003      	add	sp, #12
 800c27c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c280:	20001188 	.word	0x20001188

0800c284 <SX126xSetTx>:
{
 800c284:	b507      	push	{r0, r1, r2, lr}
    OperatingMode = mode;
 800c286:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b4 <SX126xSetTx+0x30>)
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800c288:	f88d 0006 	strb.w	r0, [sp, #6]
    OperatingMode = mode;
 800c28c:	2204      	movs	r2, #4
 800c28e:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c290:	0c03      	lsrs	r3, r0, #16
 800c292:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800c296:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c298:	0a03      	lsrs	r3, r0, #8
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800c29a:	a901      	add	r1, sp, #4
 800c29c:	2083      	movs	r0, #131	@ 0x83
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c29e:	f88d 3005 	strb.w	r3, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800c2a2:	f7ff ff9f 	bl	800c1e4 <SX126xWriteCommand>
    Sx_Board_SetLedTx(true);
 800c2a6:	2001      	movs	r0, #1
}
 800c2a8:	b003      	add	sp, #12
 800c2aa:	f85d eb04 	ldr.w	lr, [sp], #4
    Sx_Board_SetLedTx(true);
 800c2ae:	f7f5 be5f 	b.w	8001f70 <SX1262DVK1DAS_RADIO_BoardSetLedTx>
 800c2b2:	bf00      	nop
 800c2b4:	20001188 	.word	0x20001188

0800c2b8 <SX126xSetRxDutyCycle>:
{
 800c2b8:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800c2ba:	0c03      	lsrs	r3, r0, #16
 800c2bc:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800c2c0:	0a03      	lsrs	r3, r0, #8
 800c2c2:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800c2c6:	0c0b      	lsrs	r3, r1, #16
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800c2c8:	ba49      	rev16	r1, r1
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800c2ca:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800c2ce:	f8ad 1004 	strh.w	r1, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800c2d2:	2206      	movs	r2, #6
 800c2d4:	4669      	mov	r1, sp
 800c2d6:	2094      	movs	r0, #148	@ 0x94
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800c2d8:	f88d 3003 	strb.w	r3, [sp, #3]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800c2dc:	f7ff ff82 	bl	800c1e4 <SX126xWriteCommand>
    OperatingMode = mode;
 800c2e0:	4b02      	ldr	r3, [pc, #8]	@ (800c2ec <SX126xSetRxDutyCycle+0x34>)
 800c2e2:	2206      	movs	r2, #6
 800c2e4:	701a      	strb	r2, [r3, #0]
}
 800c2e6:	b003      	add	sp, #12
 800c2e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2ec:	20001188 	.word	0x20001188

0800c2f0 <SX126xSetCad>:
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 800c2f0:	2200      	movs	r2, #0
{
 800c2f2:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	20c5      	movs	r0, #197	@ 0xc5
 800c2f8:	f7ff ff74 	bl	800c1e4 <SX126xWriteCommand>
    OperatingMode = mode;
 800c2fc:	4b01      	ldr	r3, [pc, #4]	@ (800c304 <SX126xSetCad+0x14>)
 800c2fe:	2207      	movs	r2, #7
 800c300:	701a      	strb	r2, [r3, #0]
}
 800c302:	bd08      	pop	{r3, pc}
 800c304:	20001188 	.word	0x20001188

0800c308 <SX126xSetTxContinuousWave>:
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800c308:	2200      	movs	r2, #0
{
 800c30a:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800c30c:	4611      	mov	r1, r2
 800c30e:	20d1      	movs	r0, #209	@ 0xd1
 800c310:	f7ff ff68 	bl	800c1e4 <SX126xWriteCommand>
    OperatingMode = mode;
 800c314:	4b01      	ldr	r3, [pc, #4]	@ (800c31c <SX126xSetTxContinuousWave+0x14>)
 800c316:	2204      	movs	r2, #4
 800c318:	701a      	strb	r2, [r3, #0]
}
 800c31a:	bd08      	pop	{r3, pc}
 800c31c:	20001188 	.word	0x20001188

0800c320 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 800c320:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800c322:	2201      	movs	r2, #1
{
 800c324:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800c328:	f10d 0107 	add.w	r1, sp, #7
 800c32c:	209f      	movs	r0, #159	@ 0x9f
 800c32e:	f7ff ff59 	bl	800c1e4 <SX126xWriteCommand>
}
 800c332:	b003      	add	sp, #12
 800c334:	f85d fb04 	ldr.w	pc, [sp], #4

0800c338 <SX126xSetRegulatorMode>:
{
 800c338:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800c33a:	2201      	movs	r2, #1
{
 800c33c:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800c340:	f10d 0107 	add.w	r1, sp, #7
 800c344:	2096      	movs	r0, #150	@ 0x96
 800c346:	f7ff ff4d 	bl	800c1e4 <SX126xWriteCommand>
}
 800c34a:	b003      	add	sp, #12
 800c34c:	f85d fb04 	ldr.w	pc, [sp], #4

0800c350 <SX126xCalibrate>:
{
 800c350:	b507      	push	{r0, r1, r2, lr}
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800c352:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800c356:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 800c35a:	2201      	movs	r2, #1
 800c35c:	f10d 0107 	add.w	r1, sp, #7
 800c360:	2089      	movs	r0, #137	@ 0x89
 800c362:	f7ff ff3f 	bl	800c1e4 <SX126xWriteCommand>
}
 800c366:	b003      	add	sp, #12
 800c368:	f85d fb04 	ldr.w	pc, [sp], #4

0800c36c <SX126xCalibrateImage>:
    if( freq > 900000000 )
 800c36c:	4b13      	ldr	r3, [pc, #76]	@ (800c3bc <SX126xCalibrateImage+0x50>)
 800c36e:	4298      	cmp	r0, r3
{
 800c370:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 800c372:	d90b      	bls.n	800c38c <SX126xCalibrateImage+0x20>
        calFreq[0] = 0xE1;
 800c374:	f64e 13e1 	movw	r3, #59873	@ 0xe9e1
        calFreq[0] = 0x6B;
 800c378:	f8ad 3004 	strh.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800c37c:	2202      	movs	r2, #2
 800c37e:	a901      	add	r1, sp, #4
 800c380:	2098      	movs	r0, #152	@ 0x98
 800c382:	f7ff ff2f 	bl	800c1e4 <SX126xWriteCommand>
}
 800c386:	b003      	add	sp, #12
 800c388:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800c38c:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c0 <SX126xCalibrateImage+0x54>)
 800c38e:	4298      	cmp	r0, r3
 800c390:	d902      	bls.n	800c398 <SX126xCalibrateImage+0x2c>
        calFreq[0] = 0xD7;
 800c392:	f64d 33d7 	movw	r3, #56279	@ 0xdbd7
 800c396:	e7ef      	b.n	800c378 <SX126xCalibrateImage+0xc>
    else if( freq > 770000000 )
 800c398:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c4 <SX126xCalibrateImage+0x58>)
 800c39a:	4298      	cmp	r0, r3
 800c39c:	d902      	bls.n	800c3a4 <SX126xCalibrateImage+0x38>
        calFreq[0] = 0xC1;
 800c39e:	f24c 53c1 	movw	r3, #50625	@ 0xc5c1
 800c3a2:	e7e9      	b.n	800c378 <SX126xCalibrateImage+0xc>
    else if( freq > 460000000 )
 800c3a4:	4b08      	ldr	r3, [pc, #32]	@ (800c3c8 <SX126xCalibrateImage+0x5c>)
 800c3a6:	4298      	cmp	r0, r3
 800c3a8:	d902      	bls.n	800c3b0 <SX126xCalibrateImage+0x44>
        calFreq[0] = 0x75;
 800c3aa:	f248 1375 	movw	r3, #33141	@ 0x8175
 800c3ae:	e7e3      	b.n	800c378 <SX126xCalibrateImage+0xc>
    else if( freq > 425000000 )
 800c3b0:	4b06      	ldr	r3, [pc, #24]	@ (800c3cc <SX126xCalibrateImage+0x60>)
 800c3b2:	4298      	cmp	r0, r3
 800c3b4:	d9e2      	bls.n	800c37c <SX126xCalibrateImage+0x10>
        calFreq[0] = 0x6B;
 800c3b6:	f646 736b 	movw	r3, #28523	@ 0x6f6b
 800c3ba:	e7dd      	b.n	800c378 <SX126xCalibrateImage+0xc>
 800c3bc:	35a4e900 	.word	0x35a4e900
 800c3c0:	32a9f880 	.word	0x32a9f880
 800c3c4:	2de54480 	.word	0x2de54480
 800c3c8:	1b6b0b00 	.word	0x1b6b0b00
 800c3cc:	1954fc40 	.word	0x1954fc40

0800c3d0 <SX126xSetPaConfig>:
{
 800c3d0:	b507      	push	{r0, r1, r2, lr}
    buf[2] = deviceSel;
 800c3d2:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800c3d6:	2204      	movs	r2, #4
    buf[0] = paDutyCycle;
 800c3d8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800c3dc:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800c3e0:	2095      	movs	r0, #149	@ 0x95
 800c3e2:	eb0d 0102 	add.w	r1, sp, r2
    buf[3] = paLut;
 800c3e6:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800c3ea:	f7ff fefb 	bl	800c1e4 <SX126xWriteCommand>
}
 800c3ee:	b003      	add	sp, #12
 800c3f0:	f85d fb04 	ldr.w	pc, [sp], #4

0800c3f4 <SX126xSetDioIrqParams>:
{
 800c3f4:	b507      	push	{r0, r1, r2, lr}
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800c3f6:	ba52      	rev16	r2, r2
 800c3f8:	f8ad 2004 	strh.w	r2, [sp, #4]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800c3fc:	ba40      	rev16	r0, r0
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800c3fe:	2208      	movs	r2, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800c400:	ba49      	rev16	r1, r1
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800c402:	f8ad 0000 	strh.w	r0, [sp]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800c406:	f8ad 1002 	strh.w	r1, [sp, #2]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800c40a:	ba5b      	rev16	r3, r3
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800c40c:	4669      	mov	r1, sp
 800c40e:	4610      	mov	r0, r2
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800c410:	f8ad 3006 	strh.w	r3, [sp, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800c414:	f7ff fee6 	bl	800c1e4 <SX126xWriteCommand>
}
 800c418:	b003      	add	sp, #12
 800c41a:	f85d fb04 	ldr.w	pc, [sp], #4

0800c41e <SX126xSetDio2AsRfSwitchCtrl>:
{
 800c41e:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800c420:	2201      	movs	r2, #1
{
 800c422:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800c426:	f10d 0107 	add.w	r1, sp, #7
 800c42a:	209d      	movs	r0, #157	@ 0x9d
 800c42c:	f7ff feda 	bl	800c1e4 <SX126xWriteCommand>
}
 800c430:	b003      	add	sp, #12
 800c432:	f85d fb04 	ldr.w	pc, [sp], #4

0800c436 <SX126xSetDio3AsTcxoCtrl>:
{
 800c436:	b507      	push	{r0, r1, r2, lr}
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c438:	0c0b      	lsrs	r3, r1, #16
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800c43a:	2204      	movs	r2, #4
    buf[0] = tcxoVoltage & 0x07;
 800c43c:	f000 0007 	and.w	r0, r0, #7
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c440:	ba49      	rev16	r1, r1
    buf[0] = tcxoVoltage & 0x07;
 800c442:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c446:	f8ad 1006 	strh.w	r1, [sp, #6]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800c44a:	2097      	movs	r0, #151	@ 0x97
 800c44c:	eb0d 0102 	add.w	r1, sp, r2
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c450:	f88d 3005 	strb.w	r3, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800c454:	f7ff fec6 	bl	800c1e4 <SX126xWriteCommand>
}
 800c458:	b003      	add	sp, #12
 800c45a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c460 <SX126xInit>:
{
 800c460:	b507      	push	{r0, r1, r2, lr}
 800c462:	9001      	str	r0, [sp, #4]
    Sx_Board_Reset( );
 800c464:	f7f5 fd1c 	bl	8001ea0 <SX1262DVK1DAS_RADIO_Reset>
    Sx_Board_IoIrqInit( &dioIrq );
 800c468:	a801      	add	r0, sp, #4
 800c46a:	f7f5 fcfd 	bl	8001e68 <SX1262DVK1DAS_RADIO_IoIrqInit>
    Sx_Board_WakeUp( );
 800c46e:	f7f5 fda4 	bl	8001fba <SX1262DVK1DAS_RADIO_WakeUp>
    SX126xSetStandby( STDBY_RC );
 800c472:	2000      	movs	r0, #0
 800c474:	f7ff fef0 	bl	800c258 <SX126xSetStandby>
    if (Sx_Board_IsTcxo()  == true )
 800c478:	f7f5 fd78 	bl	8001f6c <SX1262DVK1DAS_RADIO_BoardIsTcxo>
 800c47c:	b148      	cbz	r0, 800c492 <SX126xInit+0x32>
      SX126xSetDio3AsTcxoCtrl( TCXO_CTRL_1_7V, Sx_Board_GetWakeUpTime( ) << 6 ); // convert from ms to SX126x time base
 800c47e:	f7f5 fd0d 	bl	8001e9c <SX1262DVK1DAS_RADIO_GetWakeUpTime>
 800c482:	0181      	lsls	r1, r0, #6
 800c484:	2001      	movs	r0, #1
 800c486:	f7ff ffd6 	bl	800c436 <SX126xSetDio3AsTcxoCtrl>
      SX126xCalibrate( calibParam );
 800c48a:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 800c48e:	f7ff ff5f 	bl	800c350 <SX126xCalibrate>
    SX126xSetDio2AsRfSwitchCtrl( true );
 800c492:	2001      	movs	r0, #1
 800c494:	f7ff ffc3 	bl	800c41e <SX126xSetDio2AsRfSwitchCtrl>
    ImageCalibrated = false;
 800c498:	4b03      	ldr	r3, [pc, #12]	@ (800c4a8 <SX126xInit+0x48>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	709a      	strb	r2, [r3, #2]
    OperatingMode = mode;
 800c49e:	2201      	movs	r2, #1
 800c4a0:	701a      	strb	r2, [r3, #0]
}
 800c4a2:	b003      	add	sp, #12
 800c4a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4a8:	20001188 	.word	0x20001188

0800c4ac <SX126xSetRfFrequency>:
{
 800c4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 800c4ae:	4d10      	ldr	r5, [pc, #64]	@ (800c4f0 <SX126xSetRfFrequency+0x44>)
 800c4b0:	78ab      	ldrb	r3, [r5, #2]
{
 800c4b2:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800c4b4:	b91b      	cbnz	r3, 800c4be <SX126xSetRfFrequency+0x12>
        SX126xCalibrateImage( frequency );
 800c4b6:	f7ff ff59 	bl	800c36c <SX126xCalibrateImage>
        ImageCalibrated = true;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	70ab      	strb	r3, [r5, #2]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800c4be:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800c4c2:	f641 6384 	movw	r3, #7812	@ 0x1e84
 800c4c6:	fbb4 f1f2 	udiv	r1, r4, r2
 800c4ca:	fb02 4411 	mls	r4, r2, r1, r4
 800c4ce:	eb03 3384 	add.w	r3, r3, r4, lsl #14
 800c4d2:	fbb3 f3f2 	udiv	r3, r3, r2
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800c4d6:	2204      	movs	r2, #4
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 800c4d8:	eb03 3381 	add.w	r3, r3, r1, lsl #14
 800c4dc:	ba1b      	rev	r3, r3
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800c4de:	eb0d 0102 	add.w	r1, sp, r2
 800c4e2:	2086      	movs	r0, #134	@ 0x86
    buf[0] = ( uint8_t )( ( freqInPllSteps >> 24 ) & 0xFF );
 800c4e4:	9301      	str	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800c4e6:	f7ff fe7d 	bl	800c1e4 <SX126xWriteCommand>
}
 800c4ea:	b003      	add	sp, #12
 800c4ec:	bd30      	pop	{r4, r5, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20001188 	.word	0x20001188

0800c4f4 <SX126xSetPacketType>:
{
 800c4f4:	b507      	push	{r0, r1, r2, lr}
    PacketType = packetType;
 800c4f6:	4b06      	ldr	r3, [pc, #24]	@ (800c510 <SX126xSetPacketType+0x1c>)
{
 800c4f8:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800c4fc:	7058      	strb	r0, [r3, #1]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800c4fe:	2201      	movs	r2, #1
 800c500:	f10d 0107 	add.w	r1, sp, #7
 800c504:	208a      	movs	r0, #138	@ 0x8a
 800c506:	f7ff fe6d 	bl	800c1e4 <SX126xWriteCommand>
}
 800c50a:	b003      	add	sp, #12
 800c50c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c510:	20001188 	.word	0x20001188

0800c514 <SX126xSetModulationParams>:
{
 800c514:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c516:	4a22      	ldr	r2, [pc, #136]	@ (800c5a0 <SX126xSetModulationParams+0x8c>)
{
 800c518:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c51a:	6851      	ldr	r1, [r2, #4]
 800c51c:	6810      	ldr	r0, [r2, #0]
 800c51e:	466b      	mov	r3, sp
 800c520:	c303      	stmia	r3!, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800c522:	4b20      	ldr	r3, [pc, #128]	@ (800c5a4 <SX126xSetModulationParams+0x90>)
 800c524:	7820      	ldrb	r0, [r4, #0]
 800c526:	785b      	ldrb	r3, [r3, #1]
 800c528:	4283      	cmp	r3, r0
 800c52a:	d001      	beq.n	800c530 <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 800c52c:	f7ff ffe2 	bl	800c4f4 <SX126xSetPacketType>
    switch( modulationParams->PacketType )
 800c530:	7823      	ldrb	r3, [r4, #0]
 800c532:	b11b      	cbz	r3, 800c53c <SX126xSetModulationParams+0x28>
 800c534:	2b01      	cmp	r3, #1
 800c536:	d02e      	beq.n	800c596 <SX126xSetModulationParams+0x82>
}
 800c538:	b002      	add	sp, #8
 800c53a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t )( 32 * SX126X_XTAL_FREQ / modulationParams->Params.Gfsk.BitRate );
 800c53c:	6862      	ldr	r2, [r4, #4]
 800c53e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a8 <SX126xSetModulationParams+0x94>)
 800c540:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c544:	0c1a      	lsrs	r2, r3, #16
 800c546:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c54a:	0a1a      	lsrs	r2, r3, #8
 800c54c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800c550:	f88d 3002 	strb.w	r3, [sp, #2]
        tempVal = SX126xConvertFreqInHzToPllStep( modulationParams->Params.Gfsk.Fdev );
 800c554:	68a2      	ldr	r2, [r4, #8]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c556:	7b23      	ldrb	r3, [r4, #12]
 800c558:	f88d 3003 	strb.w	r3, [sp, #3]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800c55c:	f643 5109 	movw	r1, #15625	@ 0x3d09
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c560:	7b63      	ldrb	r3, [r4, #13]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800c562:	fbb2 f0f1 	udiv	r0, r2, r1
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c566:	f88d 3004 	strb.w	r3, [sp, #4]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800c56a:	fb01 2210 	mls	r2, r1, r0, r2
 800c56e:	f641 6384 	movw	r3, #7812	@ 0x1e84
 800c572:	eb03 3382 	add.w	r3, r3, r2, lsl #14
 800c576:	fbb3 f3f1 	udiv	r3, r3, r1
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 800c57a:	eb03 3380 	add.w	r3, r3, r0, lsl #14
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800c57e:	0c1a      	lsrs	r2, r3, #16
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800c580:	ba5b      	rev16	r3, r3
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800c582:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800c586:	f8ad 3006 	strh.w	r3, [sp, #6]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c58a:	2208      	movs	r2, #8
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c58c:	4669      	mov	r1, sp
 800c58e:	208b      	movs	r0, #139	@ 0x8b
 800c590:	f7ff fe28 	bl	800c1e4 <SX126xWriteCommand>
        break;
 800c594:	e7d0      	b.n	800c538 <SX126xSetModulationParams+0x24>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800c596:	6923      	ldr	r3, [r4, #16]
 800c598:	9300      	str	r3, [sp, #0]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c59a:	2204      	movs	r2, #4
 800c59c:	e7f6      	b.n	800c58c <SX126xSetModulationParams+0x78>
 800c59e:	bf00      	nop
 800c5a0:	0800def0 	.word	0x0800def0
 800c5a4:	20001188 	.word	0x20001188
 800c5a8:	3d090000 	.word	0x3d090000

0800c5ac <SX126xSetBufferBaseAddress>:
{
 800c5ac:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800c5ae:	2202      	movs	r2, #2
    buf[0] = txBaseAddress;
 800c5b0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800c5b4:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800c5b8:	208f      	movs	r0, #143	@ 0x8f
 800c5ba:	a901      	add	r1, sp, #4
 800c5bc:	f7ff fe12 	bl	800c1e4 <SX126xWriteCommand>
}
 800c5c0:	b003      	add	sp, #12
 800c5c2:	f85d fb04 	ldr.w	pc, [sp], #4

0800c5c6 <SX126xClearIrqStatus>:
{
 800c5c6:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800c5c8:	2202      	movs	r2, #2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 800c5ca:	ba40      	rev16	r0, r0
 800c5cc:	f8ad 0004 	strh.w	r0, [sp, #4]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800c5d0:	a901      	add	r1, sp, #4
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	f7ff fe06 	bl	800c1e4 <SX126xWriteCommand>
}
 800c5d8:	b003      	add	sp, #12
 800c5da:	f85d fb04 	ldr.w	pc, [sp], #4

0800c5de <SX126xReadCommand>:

uint8_t SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800c5de:	b570      	push	{r4, r5, r6, lr}
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	4615      	mov	r5, r2
 800c5e4:	4606      	mov	r6, r0
    uint8_t status = 0;

    SX126xCheckDeviceReady( );
 800c5e6:	f7ff fde5 	bl	800c1b4 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	f7f5 fca0 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7f5 fcd3 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    status = Sx_Board_SendRecv(  0x00 );
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	f7f5 fcd0 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
 800c5fc:	4425      	add	r5, r4
 800c5fe:	b2c6      	uxtb	r6, r0
    for( uint16_t i = 0; i < size; i++ )
 800c600:	42ac      	cmp	r4, r5
 800c602:	d106      	bne.n	800c612 <SX126xReadCommand+0x34>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }

    Sx_Board_ChipSelect( 1 );
 800c604:	2001      	movs	r0, #1
 800c606:	f7f5 fc93 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800c60a:	f7f5 fc85 	bl	8001f18 <SX1262DVK1DAS_RADIO_WaitOnBusy>

    return status;
}
 800c60e:	4630      	mov	r0, r6
 800c610:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800c612:	2000      	movs	r0, #0
 800c614:	f7f5 fcc2 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
 800c618:	f804 0b01 	strb.w	r0, [r4], #1
    for( uint16_t i = 0; i < size; i++ )
 800c61c:	e7f0      	b.n	800c600 <SX126xReadCommand+0x22>

0800c61e <SX126xGetIrqStatus>:
{
 800c61e:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800c620:	2202      	movs	r2, #2
 800c622:	a901      	add	r1, sp, #4
 800c624:	2012      	movs	r0, #18
 800c626:	f7ff ffda 	bl	800c5de <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 800c62a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800c62e:	ba40      	rev16	r0, r0
}
 800c630:	b280      	uxth	r0, r0
 800c632:	b003      	add	sp, #12
 800c634:	f85d fb04 	ldr.w	pc, [sp], #4

0800c638 <SX126xGetRssiInst>:
{
 800c638:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800c63a:	2201      	movs	r2, #1
 800c63c:	a901      	add	r1, sp, #4
 800c63e:	2015      	movs	r0, #21
 800c640:	f7ff ffcd 	bl	800c5de <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 800c644:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800c648:	4240      	negs	r0, r0
}
 800c64a:	1040      	asrs	r0, r0, #1
 800c64c:	b003      	add	sp, #12
 800c64e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c654 <SX126xGetPacketStatus>:
{
 800c654:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800c656:	2203      	movs	r2, #3
{
 800c658:	4604      	mov	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800c65a:	a901      	add	r1, sp, #4
 800c65c:	2014      	movs	r0, #20
 800c65e:	f7ff ffbe 	bl	800c5de <SX126xReadCommand>
    return PacketType;
 800c662:	4918      	ldr	r1, [pc, #96]	@ (800c6c4 <SX126xGetPacketStatus+0x70>)
 800c664:	784a      	ldrb	r2, [r1, #1]
    pktStatus->packetType = SX126xGetPacketType( );
 800c666:	7022      	strb	r2, [r4, #0]
    switch( pktStatus->packetType )
 800c668:	b14a      	cbz	r2, 800c67e <SX126xGetPacketStatus+0x2a>
 800c66a:	2a01      	cmp	r2, #1
 800c66c:	d017      	beq.n	800c69e <SX126xGetPacketStatus+0x4a>
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 800c66e:	2213      	movs	r2, #19
 800c670:	2100      	movs	r1, #0
 800c672:	1c60      	adds	r0, r4, #1
 800c674:	f001 f878 	bl	800d768 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800c678:	230f      	movs	r3, #15
 800c67a:	7023      	strb	r3, [r4, #0]
}
 800c67c:	e00d      	b.n	800c69a <SX126xGetPacketStatus+0x46>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800c67e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c682:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800c684:	f89d 3005 	ldrb.w	r3, [sp, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800c688:	60a2      	str	r2, [r4, #8]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800c68a:	425b      	negs	r3, r3
 800c68c:	105b      	asrs	r3, r3, #1
 800c68e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800c690:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c694:	425b      	negs	r3, r3
 800c696:	105b      	asrs	r3, r3, #1
 800c698:	7163      	strb	r3, [r4, #5]
}
 800c69a:	b002      	add	sp, #8
 800c69c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800c69e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c6a2:	425b      	negs	r3, r3
 800c6a4:	105b      	asrs	r3, r3, #1
 800c6a6:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800c6a8:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800c6ac:	3302      	adds	r3, #2
 800c6ae:	109b      	asrs	r3, r3, #2
 800c6b0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800c6b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c6b6:	425b      	negs	r3, r3
 800c6b8:	105b      	asrs	r3, r3, #1
 800c6ba:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800c6bc:	684b      	ldr	r3, [r1, #4]
 800c6be:	6123      	str	r3, [r4, #16]
            break;
 800c6c0:	e7eb      	b.n	800c69a <SX126xGetPacketStatus+0x46>
 800c6c2:	bf00      	nop
 800c6c4:	20001188 	.word	0x20001188

0800c6c8 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	4615      	mov	r5, r2
 800c6ce:	4606      	mov	r6, r0
    SX126xCheckDeviceReady( );
 800c6d0:	f7ff fd70 	bl	800c1b4 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	f7f5 fc2b 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>
    
    Sx_Board_SendRecv(  RADIO_WRITE_REGISTER );
 800c6da:	200d      	movs	r0, #13
 800c6dc:	f7f5 fc5e 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800c6e0:	0a30      	lsrs	r0, r6, #8
 800c6e2:	f7f5 fc5b 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800c6e6:	b2f0      	uxtb	r0, r6
 800c6e8:	f7f5 fc58 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    
    for( uint16_t i = 0; i < size; i++ )
 800c6ec:	4425      	add	r5, r4
 800c6ee:	42ac      	cmp	r4, r5
 800c6f0:	d106      	bne.n	800c700 <SX126xWriteRegisters+0x38>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800c6f2:	2001      	movs	r0, #1
 800c6f4:	f7f5 fc1c 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
}
 800c6f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_WaitOnBusy( );
 800c6fc:	f7f5 bc0c 	b.w	8001f18 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        Sx_Board_SendRecv(  buffer[i] );
 800c700:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c704:	f7f5 fc4a 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800c708:	e7f1      	b.n	800c6ee <SX126xWriteRegisters+0x26>

0800c70a <SX126xSetSyncWord>:
{
 800c70a:	b508      	push	{r3, lr}
 800c70c:	4601      	mov	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800c70e:	2208      	movs	r2, #8
 800c710:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800c714:	f7ff ffd8 	bl	800c6c8 <SX126xWriteRegisters>
}
 800c718:	2000      	movs	r0, #0
 800c71a:	bd08      	pop	{r3, pc}

0800c71c <SX126xSetCrcSeed>:
{
 800c71c:	b507      	push	{r0, r1, r2, lr}
    return PacketType;
 800c71e:	4b07      	ldr	r3, [pc, #28]	@ (800c73c <SX126xSetCrcSeed+0x20>)
    switch( SX126xGetPacketType( ) )
 800c720:	785b      	ldrb	r3, [r3, #1]
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800c722:	ba40      	rev16	r0, r0
 800c724:	f8ad 0004 	strh.w	r0, [sp, #4]
    switch( SX126xGetPacketType( ) )
 800c728:	b92b      	cbnz	r3, 800c736 <SX126xSetCrcSeed+0x1a>
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800c72a:	2202      	movs	r2, #2
 800c72c:	a901      	add	r1, sp, #4
 800c72e:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800c732:	f7ff ffc9 	bl	800c6c8 <SX126xWriteRegisters>
}
 800c736:	b003      	add	sp, #12
 800c738:	f85d fb04 	ldr.w	pc, [sp], #4
 800c73c:	20001188 	.word	0x20001188

0800c740 <SX126xSetCrcPolynomial>:
{
 800c740:	b507      	push	{r0, r1, r2, lr}
    return PacketType;
 800c742:	4b07      	ldr	r3, [pc, #28]	@ (800c760 <SX126xSetCrcPolynomial+0x20>)
    switch( SX126xGetPacketType( ) )
 800c744:	785b      	ldrb	r3, [r3, #1]
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800c746:	ba40      	rev16	r0, r0
 800c748:	f8ad 0004 	strh.w	r0, [sp, #4]
    switch( SX126xGetPacketType( ) )
 800c74c:	b92b      	cbnz	r3, 800c75a <SX126xSetCrcPolynomial+0x1a>
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800c74e:	2202      	movs	r2, #2
 800c750:	a901      	add	r1, sp, #4
 800c752:	f240 60be 	movw	r0, #1726	@ 0x6be
 800c756:	f7ff ffb7 	bl	800c6c8 <SX126xWriteRegisters>
}
 800c75a:	b003      	add	sp, #12
 800c75c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c760:	20001188 	.word	0x20001188

0800c764 <SX126xSetPacketParams>:
{
 800c764:	b530      	push	{r4, r5, lr}
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c766:	4a2b      	ldr	r2, [pc, #172]	@ (800c814 <SX126xSetPacketParams+0xb0>)
    if( PacketType != packetParams->PacketType )
 800c768:	4d2b      	ldr	r5, [pc, #172]	@ (800c818 <SX126xSetPacketParams+0xb4>)
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c76a:	68d1      	ldr	r1, [r2, #12]
{
 800c76c:	4604      	mov	r4, r0
 800c76e:	b085      	sub	sp, #20
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c770:	6890      	ldr	r0, [r2, #8]
 800c772:	7c12      	ldrb	r2, [r2, #16]
 800c774:	ab01      	add	r3, sp, #4
 800c776:	c303      	stmia	r3!, {r0, r1}
    if( PacketType != packetParams->PacketType )
 800c778:	7820      	ldrb	r0, [r4, #0]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c77a:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800c77c:	786b      	ldrb	r3, [r5, #1]
 800c77e:	4283      	cmp	r3, r0
 800c780:	d001      	beq.n	800c786 <SX126xSetPacketParams+0x22>
        SX126xSetPacketType( packetParams->PacketType );
 800c782:	f7ff feb7 	bl	800c4f4 <SX126xSetPacketType>
    switch( packetParams->PacketType )
 800c786:	7823      	ldrb	r3, [r4, #0]
 800c788:	b11b      	cbz	r3, 800c792 <SX126xSetPacketParams+0x2e>
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d031      	beq.n	800c7f2 <SX126xSetPacketParams+0x8e>
}
 800c78e:	b005      	add	sp, #20
 800c790:	bd30      	pop	{r4, r5, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800c792:	7a63      	ldrb	r3, [r4, #9]
 800c794:	2bf1      	cmp	r3, #241	@ 0xf1
 800c796:	d120      	bne.n	800c7da <SX126xSetPacketParams+0x76>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 800c798:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800c79c:	f7ff ffbe 	bl	800c71c <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800c7a0:	f248 0005 	movw	r0, #32773	@ 0x8005
 800c7a4:	f7ff ffcc 	bl	800c740 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800c7a8:	2302      	movs	r3, #2
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800c7aa:	8862      	ldrh	r2, [r4, #2]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800c7ac:	88a1      	ldrh	r1, [r4, #4]
 800c7ae:	f8ad 1006 	strh.w	r1, [sp, #6]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800c7b2:	ba52      	rev16	r2, r2
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800c7b4:	88e1      	ldrh	r1, [r4, #6]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800c7b6:	f8ad 2004 	strh.w	r2, [sp, #4]
        buf[7] = crcVal;
 800c7ba:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800c7be:	7a22      	ldrb	r2, [r4, #8]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800c7c0:	7aa3      	ldrb	r3, [r4, #10]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800c7c2:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800c7c6:	f8ad 1008 	strh.w	r1, [sp, #8]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800c7ca:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800c7ce:	2209      	movs	r2, #9
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800c7d0:	a901      	add	r1, sp, #4
 800c7d2:	208c      	movs	r0, #140	@ 0x8c
 800c7d4:	f7ff fd06 	bl	800c1e4 <SX126xWriteCommand>
 800c7d8:	e7d9      	b.n	800c78e <SX126xSetPacketParams+0x2a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800c7da:	2bf2      	cmp	r3, #242	@ 0xf2
 800c7dc:	d1e5      	bne.n	800c7aa <SX126xSetPacketParams+0x46>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 800c7de:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800c7e2:	f7ff ff9b 	bl	800c71c <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800c7e6:	f241 0021 	movw	r0, #4129	@ 0x1021
 800c7ea:	f7ff ffa9 	bl	800c740 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800c7ee:	2306      	movs	r3, #6
 800c7f0:	e7db      	b.n	800c7aa <SX126xSetPacketParams+0x46>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800c7f2:	89a3      	ldrh	r3, [r4, #12]
 800c7f4:	ba5b      	rev16	r3, r3
 800c7f6:	f8ad 3004 	strh.w	r3, [sp, #4]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800c7fa:	7ba3      	ldrb	r3, [r4, #14]
 800c7fc:	722b      	strb	r3, [r5, #8]
 800c7fe:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800c802:	7be3      	ldrb	r3, [r4, #15]
 800c804:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800c808:	8a23      	ldrh	r3, [r4, #16]
 800c80a:	f8ad 3008 	strh.w	r3, [sp, #8]
        n = 6;
 800c80e:	2206      	movs	r2, #6
        break;
 800c810:	e7de      	b.n	800c7d0 <SX126xSetPacketParams+0x6c>
 800c812:	bf00      	nop
 800c814:	0800def0 	.word	0x0800def0
 800c818:	20001188 	.word	0x20001188

0800c81c <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 800c81c:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteRegisters( address, &value, 1 );
 800c81e:	2201      	movs	r2, #1
{
 800c820:	f88d 1007 	strb.w	r1, [sp, #7]
    SX126xWriteRegisters( address, &value, 1 );
 800c824:	f10d 0107 	add.w	r1, sp, #7
 800c828:	f7ff ff4e 	bl	800c6c8 <SX126xWriteRegisters>
}
 800c82c:	b003      	add	sp, #12
 800c82e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c834 <SX126xSetRx>:
{
 800c834:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = mode;
 800c836:	4b0e      	ldr	r3, [pc, #56]	@ (800c870 <SX126xSetRx+0x3c>)
{
 800c838:	4604      	mov	r4, r0
    OperatingMode = mode;
 800c83a:	2205      	movs	r2, #5
    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 800c83c:	2194      	movs	r1, #148	@ 0x94
 800c83e:	f640 00ac 	movw	r0, #2220	@ 0x8ac
    OperatingMode = mode;
 800c842:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 800c844:	f7ff ffea 	bl	800c81c <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c848:	0c23      	lsrs	r3, r4, #16
 800c84a:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800c84e:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c850:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800c852:	a901      	add	r1, sp, #4
 800c854:	2082      	movs	r0, #130	@ 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c856:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800c85a:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800c85e:	f7ff fcc1 	bl	800c1e4 <SX126xWriteCommand>
    Sx_Board_SetLedRx(true);
 800c862:	2001      	movs	r0, #1
}
 800c864:	b002      	add	sp, #8
 800c866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Sx_Board_SetLedRx(true);
 800c86a:	f7f5 bb8b 	b.w	8001f84 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
 800c86e:	bf00      	nop
 800c870:	20001188 	.word	0x20001188

0800c874 <SX126xSetRxBoosted>:
{
 800c874:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = mode;
 800c876:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a8 <SX126xSetRxBoosted+0x34>)
{
 800c878:	4604      	mov	r4, r0
    OperatingMode = mode;
 800c87a:	2205      	movs	r2, #5
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800c87c:	2196      	movs	r1, #150	@ 0x96
 800c87e:	f640 00ac 	movw	r0, #2220	@ 0x8ac
    OperatingMode = mode;
 800c882:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800c884:	f7ff ffca 	bl	800c81c <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c888:	0c23      	lsrs	r3, r4, #16
 800c88a:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800c88e:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c890:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800c892:	a901      	add	r1, sp, #4
 800c894:	2082      	movs	r0, #130	@ 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c896:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800c89a:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800c89e:	f7ff fca1 	bl	800c1e4 <SX126xWriteCommand>
}
 800c8a2:	b002      	add	sp, #8
 800c8a4:	bd10      	pop	{r4, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20001188 	.word	0x20001188

0800c8ac <SX126xSetLoRaSymbNumTimeout>:
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 800c8ac:	28f8      	cmp	r0, #248	@ 0xf8
{
 800c8ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	bf28      	it	cs
 800c8b4:	24f8      	movcs	r4, #248	@ 0xf8
                       symbNum ) + 1 ) >> 1;
 800c8b6:	3401      	adds	r4, #1
 800c8b8:	f3c4 0346 	ubfx	r3, r4, #1, #7
    while( mant > 31 )
 800c8bc:	2b1f      	cmp	r3, #31
    uint8_t mant = ( ( ( symbNum > SX126X_MAX_LORA_SYMB_NUM_TIMEOUT ) ?
 800c8be:	461c      	mov	r4, r3
        mant = ( mant + 3 ) >> 2;
 800c8c0:	bfc6      	itte	gt
 800c8c2:	3403      	addgt	r4, #3
        exp++;
 800c8c4:	2501      	movgt	r5, #1
    uint8_t exp  = 0;
 800c8c6:	2500      	movle	r5, #0
    reg = mant << ( 2 * exp + 1 );
 800c8c8:	f04f 0201 	mov.w	r2, #1
        mant = ( mant + 3 ) >> 2;
 800c8cc:	bfc8      	it	gt
 800c8ce:	f3c4 0487 	ubfxgt	r4, r4, #2, #8
    reg = mant << ( 2 * exp + 1 );
 800c8d2:	eb02 0345 	add.w	r3, r2, r5, lsl #1
{
 800c8d6:	4606      	mov	r6, r0
    reg = mant << ( 2 * exp + 1 );
 800c8d8:	fa04 f303 	lsl.w	r3, r4, r3
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 800c8dc:	f10d 0107 	add.w	r1, sp, #7
 800c8e0:	20a0      	movs	r0, #160	@ 0xa0
    reg = mant << ( 2 * exp + 1 );
 800c8e2:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 800c8e6:	f7ff fc7d 	bl	800c1e4 <SX126xWriteCommand>
    if( symbNum != 0 )
 800c8ea:	b14e      	cbz	r6, 800c900 <SX126xSetLoRaSymbNumTimeout+0x54>
        reg = exp + ( mant << 3 );
 800c8ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800c8f0:	b2c9      	uxtb	r1, r1
 800c8f2:	f240 7006 	movw	r0, #1798	@ 0x706
}
 800c8f6:	b002      	add	sp, #8
 800c8f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800c8fc:	f7ff bf8e 	b.w	800c81c <SX126xWriteRegister>
}
 800c900:	b002      	add	sp, #8
 800c902:	bd70      	pop	{r4, r5, r6, pc}

0800c904 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	460c      	mov	r4, r1
 800c908:	4615      	mov	r5, r2
 800c90a:	4606      	mov	r6, r0
    SX126xCheckDeviceReady( );
 800c90c:	f7ff fc52 	bl	800c1b4 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800c910:	2000      	movs	r0, #0
 800c912:	f7f5 fb0d 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_REGISTER );
 800c916:	201d      	movs	r0, #29
 800c918:	f7f5 fb40 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800c91c:	0a30      	lsrs	r0, r6, #8
 800c91e:	f7f5 fb3d 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800c922:	b2f0      	uxtb	r0, r6
 800c924:	f7f5 fb3a 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800c928:	2000      	movs	r0, #0
 800c92a:	f7f5 fb37 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800c92e:	4425      	add	r5, r4
 800c930:	42ac      	cmp	r4, r5
 800c932:	d106      	bne.n	800c942 <SX126xReadRegisters+0x3e>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800c934:	2001      	movs	r0, #1
 800c936:	f7f5 fafb 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
}
 800c93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_WaitOnBusy( );
 800c93e:	f7f5 baeb 	b.w	8001f18 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        buffer[i] = Sx_Board_SendRecv(  0 );
 800c942:	2000      	movs	r0, #0
 800c944:	f7f5 fb2a 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
 800c948:	f804 0b01 	strb.w	r0, [r4], #1
    for( uint16_t i = 0; i < size; i++ )
 800c94c:	e7f0      	b.n	800c930 <SX126xReadRegisters+0x2c>

0800c94e <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 800c94e:	b507      	push	{r0, r1, r2, lr}
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 800c950:	2201      	movs	r2, #1
 800c952:	f10d 0107 	add.w	r1, sp, #7
 800c956:	f7ff ffd5 	bl	800c904 <SX126xReadRegisters>
    return data;
}
 800c95a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c95e:	b003      	add	sp, #12
 800c960:	f85d fb04 	ldr.w	pc, [sp], #4

0800c964 <SX126xSetWhiteningSeed>:
{
 800c964:	b510      	push	{r4, lr}
    return PacketType;
 800c966:	4b0c      	ldr	r3, [pc, #48]	@ (800c998 <SX126xSetWhiteningSeed+0x34>)
    switch( SX126xGetPacketType( ) )
 800c968:	785b      	ldrb	r3, [r3, #1]
{
 800c96a:	4604      	mov	r4, r0
    switch( SX126xGetPacketType( ) )
 800c96c:	b99b      	cbnz	r3, 800c996 <SX126xSetWhiteningSeed+0x32>
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800c96e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800c972:	f7ff ffec 	bl	800c94e <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800c976:	f3c4 2100 	ubfx	r1, r4, #8, #1
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800c97a:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800c97e:	4301      	orrs	r1, r0
 800c980:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800c984:	f7ff ff4a 	bl	800c81c <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 800c988:	b2e1      	uxtb	r1, r4
 800c98a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
}
 800c98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 800c992:	f7ff bf43 	b.w	800c81c <SX126xWriteRegister>
}
 800c996:	bd10      	pop	{r4, pc}
 800c998:	20001188 	.word	0x20001188

0800c99c <SX126xGetRandom>:
{
 800c99c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t number = 0;
 800c99e:	2600      	movs	r6, #0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800c9a0:	f640 00e2 	movw	r0, #2274	@ 0x8e2
    uint32_t number = 0;
 800c9a4:	9601      	str	r6, [sp, #4]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800c9a6:	f7ff ffd2 	bl	800c94e <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800c9aa:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800c9ae:	4605      	mov	r5, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800c9b0:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800c9b4:	f7ff ff32 	bl	800c81c <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800c9b8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800c9bc:	f7ff ffc7 	bl	800c94e <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800c9c0:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800c9c4:	4604      	mov	r4, r0
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800c9c6:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800c9ca:	f7ff ff27 	bl	800c81c <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800c9ce:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800c9d2:	f7ff ff2f 	bl	800c834 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800c9d6:	2204      	movs	r2, #4
 800c9d8:	eb0d 0102 	add.w	r1, sp, r2
 800c9dc:	f640 0019 	movw	r0, #2073	@ 0x819
 800c9e0:	f7ff ff90 	bl	800c904 <SX126xReadRegisters>
    SX126xSetStandby( STDBY_RC );
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7ff fc37 	bl	800c258 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800c9f0:	f7ff ff14 	bl	800c81c <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800c9fa:	f7ff ff0f 	bl	800c81c <SX126xWriteRegister>
    Sx_Board_SetLedRx(false);
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7f5 fac0 	bl	8001f84 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
}
 800ca04:	9801      	ldr	r0, [sp, #4]
 800ca06:	b002      	add	sp, #8
 800ca08:	bd70      	pop	{r4, r5, r6, pc}

0800ca0a <SX126xSetTxParams>:
{
 800ca0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca0c:	4604      	mov	r4, r0
    if( Sx_Board_GetPaSelect( 0 ) == SX1261 )
 800ca0e:	2000      	movs	r0, #0
{
 800ca10:	460d      	mov	r5, r1
    if( Sx_Board_GetPaSelect( 0 ) == SX1261 )
 800ca12:	f7f5 fa97 	bl	8001f44 <SX1262DVK1DAS_RADIO_GetPaSelect>
 800ca16:	2801      	cmp	r0, #1
 800ca18:	4603      	mov	r3, r0
 800ca1a:	d120      	bne.n	800ca5e <SX126xSetTxParams+0x54>
        if( power == 15 )
 800ca1c:	2c0f      	cmp	r4, #15
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800ca1e:	4602      	mov	r2, r0
 800ca20:	f04f 0100 	mov.w	r1, #0
        if( power == 15 )
 800ca24:	d10e      	bne.n	800ca44 <SX126xSetTxParams+0x3a>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800ca26:	2006      	movs	r0, #6
 800ca28:	f7ff fcd2 	bl	800c3d0 <SX126xSetPaConfig>
            power = 14;
 800ca2c:	240e      	movs	r4, #14
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800ca2e:	2202      	movs	r2, #2
 800ca30:	a901      	add	r1, sp, #4
 800ca32:	208e      	movs	r0, #142	@ 0x8e
    buf[0] = power;
 800ca34:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 800ca38:	f88d 5005 	strb.w	r5, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800ca3c:	f7ff fbd2 	bl	800c1e4 <SX126xWriteCommand>
}
 800ca40:	b003      	add	sp, #12
 800ca42:	bd30      	pop	{r4, r5, pc}
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800ca44:	2004      	movs	r0, #4
 800ca46:	f7ff fcc3 	bl	800c3d0 <SX126xSetPaConfig>
        if( power >= 14 )
 800ca4a:	f06f 0310 	mvn.w	r3, #16
 800ca4e:	42a3      	cmp	r3, r4
 800ca50:	bfb8      	it	lt
 800ca52:	4623      	movlt	r3, r4
 800ca54:	2b0e      	cmp	r3, #14
 800ca56:	bfa8      	it	ge
 800ca58:	230e      	movge	r3, #14
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	e7e7      	b.n	800ca2e <SX126xSetTxParams+0x24>
        SX126xWriteRegister( REG_TX_CLAMP_CFG, SX126xReadRegister( REG_TX_CLAMP_CFG ) | ( 0x0F << 1 ) );
 800ca5e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800ca62:	f7ff ff74 	bl	800c94e <SX126xReadRegister>
 800ca66:	f040 011e 	orr.w	r1, r0, #30
 800ca6a:	b2c9      	uxtb	r1, r1
 800ca6c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800ca70:	f7ff fed4 	bl	800c81c <SX126xWriteRegister>
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800ca74:	2301      	movs	r3, #1
 800ca76:	2200      	movs	r2, #0
 800ca78:	2107      	movs	r1, #7
 800ca7a:	2004      	movs	r0, #4
 800ca7c:	f7ff fca8 	bl	800c3d0 <SX126xSetPaConfig>
        if( power > 22 )
 800ca80:	f06f 0308 	mvn.w	r3, #8
 800ca84:	429c      	cmp	r4, r3
 800ca86:	bfb8      	it	lt
 800ca88:	461c      	movlt	r4, r3
 800ca8a:	2c16      	cmp	r4, #22
 800ca8c:	bfa8      	it	ge
 800ca8e:	2416      	movge	r4, #22
 800ca90:	e7cd      	b.n	800ca2e <SX126xSetTxParams+0x24>

0800ca92 <SX126xSetRfTxPower>:
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800ca92:	2102      	movs	r1, #2
 800ca94:	f7ff bfb9 	b.w	800ca0a <SX126xSetTxParams>

0800ca98 <SX126xGetRxBufferStatus>:
{
 800ca98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ca9a:	2202      	movs	r2, #2
{
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	460c      	mov	r4, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800caa0:	2013      	movs	r0, #19
 800caa2:	a901      	add	r1, sp, #4
 800caa4:	f7ff fd9b 	bl	800c5de <SX126xReadCommand>
    return PacketType;
 800caa8:	4b09      	ldr	r3, [pc, #36]	@ (800cad0 <SX126xGetRxBufferStatus+0x38>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800caaa:	785a      	ldrb	r2, [r3, #1]
 800caac:	2a01      	cmp	r2, #1
 800caae:	d10c      	bne.n	800caca <SX126xGetRxBufferStatus+0x32>
 800cab0:	7a1b      	ldrb	r3, [r3, #8]
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d109      	bne.n	800caca <SX126xGetRxBufferStatus+0x32>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 800cab6:	f240 7002 	movw	r0, #1794	@ 0x702
 800caba:	f7ff ff48 	bl	800c94e <SX126xReadRegister>
    *rxStartBufferPointer = status[1];
 800cabe:	f89d 3005 	ldrb.w	r3, [sp, #5]
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 800cac2:	7028      	strb	r0, [r5, #0]
    *rxStartBufferPointer = status[1];
 800cac4:	7023      	strb	r3, [r4, #0]
}
 800cac6:	b003      	add	sp, #12
 800cac8:	bd30      	pop	{r4, r5, pc}
        *payloadLength = status[0];
 800caca:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800cace:	e7f6      	b.n	800cabe <SX126xGetRxBufferStatus+0x26>
 800cad0:	20001188 	.word	0x20001188

0800cad4 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	460c      	mov	r4, r1
 800cad8:	4615      	mov	r5, r2
 800cada:	4606      	mov	r6, r0
    SX126xCheckDeviceReady( );
 800cadc:	f7ff fb6a 	bl	800c1b4 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800cae0:	2000      	movs	r0, #0
 800cae2:	f7f5 fa25 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_WRITE_BUFFER );
 800cae6:	200e      	movs	r0, #14
 800cae8:	f7f5 fa58 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800caec:	4630      	mov	r0, r6
 800caee:	f7f5 fa55 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800caf2:	4425      	add	r5, r4
 800caf4:	42ac      	cmp	r4, r5
 800caf6:	d106      	bne.n	800cb06 <SX126xWriteBuffer+0x32>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }
    Sx_Board_ChipSelect( 1 );
 800caf8:	2001      	movs	r0, #1
 800cafa:	f7f5 fa19 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
}
 800cafe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_WaitOnBusy( );
 800cb02:	f7f5 ba09 	b.w	8001f18 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        Sx_Board_SendRecv(  buffer[i] );
 800cb06:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cb0a:	f7f5 fa47 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800cb0e:	e7f1      	b.n	800caf4 <SX126xWriteBuffer+0x20>

0800cb10 <SX126xSetPayload>:
{
 800cb10:	460a      	mov	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 800cb12:	4601      	mov	r1, r0
 800cb14:	2000      	movs	r0, #0
 800cb16:	f7ff bfdd 	b.w	800cad4 <SX126xWriteBuffer>

0800cb1a <SX126xSendPayload>:
{
 800cb1a:	b510      	push	{r4, lr}
 800cb1c:	4614      	mov	r4, r2
    SX126xSetPayload( payload, size );
 800cb1e:	f7ff fff7 	bl	800cb10 <SX126xSetPayload>
    SX126xSetTx( timeout );
 800cb22:	4620      	mov	r0, r4
}
 800cb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX126xSetTx( timeout );
 800cb28:	f7ff bbac 	b.w	800c284 <SX126xSetTx>

0800cb2c <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	460c      	mov	r4, r1
 800cb30:	4615      	mov	r5, r2
 800cb32:	4606      	mov	r6, r0
    SX126xCheckDeviceReady( );
 800cb34:	f7ff fb3e 	bl	800c1b4 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800cb38:	2000      	movs	r0, #0
 800cb3a:	f7f5 f9f9 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_BUFFER );
 800cb3e:	201e      	movs	r0, #30
 800cb40:	f7f5 fa2c 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800cb44:	4630      	mov	r0, r6
 800cb46:	f7f5 fa29 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	f7f5 fa26 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800cb50:	4425      	add	r5, r4
 800cb52:	42ac      	cmp	r4, r5
 800cb54:	d106      	bne.n	800cb64 <SX126xReadBuffer+0x38>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800cb56:	2001      	movs	r0, #1
 800cb58:	f7f5 f9ea 	bl	8001f30 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
}
 800cb5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_WaitOnBusy( );
 800cb60:	f7f5 b9da 	b.w	8001f18 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        buffer[i] = Sx_Board_SendRecv(  0 );
 800cb64:	2000      	movs	r0, #0
 800cb66:	f7f5 fa19 	bl	8001f9c <SX1262DVK1DAS_RADIO_SendRecv>
 800cb6a:	f804 0b01 	strb.w	r0, [r4], #1
    for( uint16_t i = 0; i < size; i++ )
 800cb6e:	e7f0      	b.n	800cb52 <SX126xReadBuffer+0x26>

0800cb70 <SX126xGetPayload>:
{
 800cb70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb72:	460d      	mov	r5, r1
 800cb74:	4606      	mov	r6, r0
    uint8_t offset = 0;
 800cb76:	2400      	movs	r4, #0
    SX126xGetRxBufferStatus( size, &offset );
 800cb78:	f10d 0107 	add.w	r1, sp, #7
 800cb7c:	4628      	mov	r0, r5
{
 800cb7e:	4617      	mov	r7, r2
    uint8_t offset = 0;
 800cb80:	f88d 4007 	strb.w	r4, [sp, #7]
    SX126xGetRxBufferStatus( size, &offset );
 800cb84:	f7ff ff88 	bl	800ca98 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 800cb88:	782a      	ldrb	r2, [r5, #0]
 800cb8a:	42ba      	cmp	r2, r7
 800cb8c:	d807      	bhi.n	800cb9e <SX126xGetPayload+0x2e>
    SX126xReadBuffer( offset, buffer, *size );
 800cb8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cb92:	4631      	mov	r1, r6
 800cb94:	f7ff ffca 	bl	800cb2c <SX126xReadBuffer>
    return 0;
 800cb98:	4620      	mov	r0, r4
}
 800cb9a:	b003      	add	sp, #12
 800cb9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 1;
 800cb9e:	2001      	movs	r0, #1
 800cba0:	e7fb      	b.n	800cb9a <SX126xGetPayload+0x2a>
	...

0800cba4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800cba4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cba6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cbaa:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800cbac:	4b14      	ldr	r3, [pc, #80]	@ (800cc00 <TRACE_AllocateBufer+0x5c>)
 800cbae:	8a5c      	ldrh	r4, [r3, #18]
 800cbb0:	8a1a      	ldrh	r2, [r3, #16]
 800cbb2:	4294      	cmp	r4, r2
 800cbb4:	d113      	bne.n	800cbde <TRACE_AllocateBufer+0x3a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800cbb6:	f5c4 6280 	rsb	r2, r4, #1024	@ 0x400
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800cbba:	b292      	uxth	r2, r2
 800cbbc:	4290      	cmp	r0, r2
 800cbbe:	d306      	bcc.n	800cbce <TRACE_AllocateBufer+0x2a>
 800cbc0:	4284      	cmp	r4, r0
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800cbc2:	d918      	bls.n	800cbf6 <TRACE_AllocateBufer+0x52>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800cbc8:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800cbca:	801c      	strh	r4, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800cbcc:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800cbce:	8a5a      	ldrh	r2, [r3, #18]
 800cbd0:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cbd2:	4402      	add	r2, r0
 800cbd4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800cbd8:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e00d      	b.n	800cbfa <TRACE_AllocateBufer+0x56>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800cbde:	d906      	bls.n	800cbee <TRACE_AllocateBufer+0x4a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800cbe0:	f5c4 6580 	rsb	r5, r4, #1024	@ 0x400
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800cbe4:	b2ad      	uxth	r5, r5
 800cbe6:	4285      	cmp	r5, r0
 800cbe8:	d8f1      	bhi.n	800cbce <TRACE_AllocateBufer+0x2a>
 800cbea:	4282      	cmp	r2, r0
 800cbec:	e7e9      	b.n	800cbc2 <TRACE_AllocateBufer+0x1e>
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800cbee:	1b12      	subs	r2, r2, r4
  if(freesize > Size)
 800cbf0:	b292      	uxth	r2, r2
 800cbf2:	4282      	cmp	r2, r0
 800cbf4:	d8eb      	bhi.n	800cbce <TRACE_AllocateBufer+0x2a>
  int16_t ret = -1;
 800cbf6:	f04f 30ff 	mov.w	r0, #4294967295
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbfa:	f386 8810 	msr	PRIMASK, r6
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}
 800cc00:	20001194 	.word	0x20001194

0800cc04 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc04:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cc08:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800cc0a:	4a03      	ldr	r2, [pc, #12]	@ (800cc18 <TRACE_Lock+0x14>)
 800cc0c:	8ad3      	ldrh	r3, [r2, #22]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc12:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cc16:	4770      	bx	lr
 800cc18:	20001194 	.word	0x20001194

0800cc1c <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc1c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cc20:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800cc22:	4a03      	ldr	r2, [pc, #12]	@ (800cc30 <TRACE_UnLock+0x14>)
 800cc24:	8ad3      	ldrh	r3, [r2, #22]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc2a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cc2e:	4770      	bx	lr
 800cc30:	20001194 	.word	0x20001194

0800cc34 <UTIL_ADV_TRACE_Init>:
{
 800cc34:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800cc36:	4c09      	ldr	r4, [pc, #36]	@ (800cc5c <UTIL_ADV_TRACE_Init+0x28>)
 800cc38:	2218      	movs	r2, #24
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	f000 f983 	bl	800cf48 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800cc42:	f104 0018 	add.w	r0, r4, #24
 800cc46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	f000 f97c 	bl	800cf48 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800cc50:	4b03      	ldr	r3, [pc, #12]	@ (800cc60 <UTIL_ADV_TRACE_Init+0x2c>)
 800cc52:	4804      	ldr	r0, [pc, #16]	@ (800cc64 <UTIL_ADV_TRACE_Init+0x30>)
 800cc54:	681b      	ldr	r3, [r3, #0]
}
 800cc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800cc5a:	4718      	bx	r3
 800cc5c:	20001194 	.word	0x20001194
 800cc60:	0800d978 	.word	0x0800d978
 800cc64:	0800cdd5 	.word	0x0800cdd5

0800cc68 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800cc68:	4b01      	ldr	r3, [pc, #4]	@ (800cc70 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800cc6a:	6058      	str	r0, [r3, #4]
}
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	20001194 	.word	0x20001194

0800cc74 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800cc74:	4b01      	ldr	r3, [pc, #4]	@ (800cc7c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800cc76:	7218      	strb	r0, [r3, #8]
}
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	20001194 	.word	0x20001194

0800cc80 <TRACE_Send>:
{
 800cc80:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc82:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cc86:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800cc88:	4c1c      	ldr	r4, [pc, #112]	@ (800ccfc <TRACE_Send+0x7c>)
  if(TRACE_IsLocked() == 0u)
 800cc8a:	8ae0      	ldrh	r0, [r4, #22]
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d12f      	bne.n	800ccf0 <TRACE_Send+0x70>
    TRACE_Lock();
 800cc90:	f7ff ffb8 	bl	800cc04 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800cc94:	8a21      	ldrh	r1, [r4, #16]
 800cc96:	8a62      	ldrh	r2, [r4, #18]
 800cc98:	4291      	cmp	r1, r2
 800cc9a:	d027      	beq.n	800ccec <TRACE_Send+0x6c>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800cc9c:	78a3      	ldrb	r3, [r4, #2]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d112      	bne.n	800ccc8 <TRACE_Send+0x48>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800cca2:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800cca4:	8020      	strh	r0, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800cca6:	1a5b      	subs	r3, r3, r1
 800cca8:	b29b      	uxth	r3, r3
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ccaa:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800ccac:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ccae:	70a1      	strb	r1, [r4, #2]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800ccb0:	b963      	cbnz	r3, 800cccc <TRACE_Send+0x4c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ccb2:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ccb4:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ccb6:	8a23      	ldrh	r3, [r4, #16]
 800ccb8:	429a      	cmp	r2, r3
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800ccba:	bf8b      	itete	hi
 800ccbc:	1ad2      	subhi	r2, r2, r3
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ccbe:	f5c3 6380 	rsbls	r3, r3, #1024	@ 0x400
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800ccc2:	82a2      	strhhi	r2, [r4, #20]
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ccc4:	82a3      	strhls	r3, [r4, #20]
 800ccc6:	e001      	b.n	800cccc <TRACE_Send+0x4c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d0f4      	beq.n	800ccb6 <TRACE_Send+0x36>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800cccc:	8a23      	ldrh	r3, [r4, #16]
 800ccce:	4e0c      	ldr	r6, [pc, #48]	@ (800cd00 <TRACE_Send+0x80>)
 800ccd0:	441e      	add	r6, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccd2:	f385 8810 	msr	PRIMASK, r5
      UTIL_ADV_TRACE_PreSendHook();
 800ccd6:	f7f4 fd9e 	bl	8001816 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ccda:	4b0a      	ldr	r3, [pc, #40]	@ (800cd04 <TRACE_Send+0x84>)
 800ccdc:	8aa1      	ldrh	r1, [r4, #20]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	4630      	mov	r0, r6
}
 800cce4:	b002      	add	sp, #8
 800cce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ccea:	4718      	bx	r3
      TRACE_UnLock();
 800ccec:	f7ff ff96 	bl	800cc1c <TRACE_UnLock>
 800ccf0:	f385 8810 	msr	PRIMASK, r5
}
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	b002      	add	sp, #8
 800ccf8:	bd70      	pop	{r4, r5, r6, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20001194 	.word	0x20001194
 800cd00:	200011ac 	.word	0x200011ac
 800cd04:	0800d978 	.word	0x0800d978

0800cd08 <UTIL_ADV_TRACE_COND_FSend>:
{
 800cd08:	b408      	push	{r3}
 800cd0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800cd0c:	4c2e      	ldr	r4, [pc, #184]	@ (800cdc8 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
{
 800cd0e:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800cd10:	2300      	movs	r3, #0
 800cd12:	f8ad 3000 	strh.w	r3, [sp]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800cd16:	7a23      	ldrb	r3, [r4, #8]
{
 800cd18:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800cd1a:	4283      	cmp	r3, r0
 800cd1c:	d34d      	bcc.n	800cdba <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800cd1e:	68e3      	ldr	r3, [r4, #12]
 800cd20:	4399      	bics	r1, r3
 800cd22:	d14d      	bne.n	800cdc0 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800cd24:	6863      	ldr	r3, [r4, #4]
 800cd26:	b11b      	cbz	r3, 800cd30 <UTIL_ADV_TRACE_COND_FSend+0x28>
 800cd28:	b112      	cbz	r2, 800cd30 <UTIL_ADV_TRACE_COND_FSend+0x28>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800cd2a:	4669      	mov	r1, sp
 800cd2c:	a802      	add	r0, sp, #8
 800cd2e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 800cd30:	ab0c      	add	r3, sp, #48	@ 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cd32:	462a      	mov	r2, r5
 800cd34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd38:	4824      	ldr	r0, [pc, #144]	@ (800cdcc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800cd3a:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cd3c:	f000 fbf0 	bl	800d520 <tiny_vsnprintf_like>
  TRACE_Lock();
 800cd40:	f7ff ff60 	bl	800cc04 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800cd44:	f8bd 3000 	ldrh.w	r3, [sp]
 800cd48:	4418      	add	r0, r3
 800cd4a:	f10d 0102 	add.w	r1, sp, #2
 800cd4e:	b280      	uxth	r0, r0
 800cd50:	f7ff ff28 	bl	800cba4 <TRACE_AllocateBufer>
 800cd54:	3001      	adds	r0, #1
 800cd56:	d02b      	beq.n	800cdb0 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f8bd 1000 	ldrh.w	r1, [sp]
 800cd5e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800cd62:	f10d 0c08 	add.w	ip, sp, #8
 800cd66:	4617      	mov	r7, r2
 800cd68:	b290      	uxth	r0, r2
 800cd6a:	fa16 f382 	uxtah	r3, r6, r2
 800cd6e:	4281      	cmp	r1, r0
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	d816      	bhi.n	800cda2 <UTIL_ADV_TRACE_COND_FSend+0x9a>
 800cd74:	b117      	cbz	r7, 800cd7c <UTIL_ADV_TRACE_COND_FSend+0x74>
 800cd76:	4431      	add	r1, r6
 800cd78:	f8ad 1002 	strh.w	r1, [sp, #2]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cd7c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800cd80:	4c13      	ldr	r4, [pc, #76]	@ (800cdd0 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800cd82:	9b01      	ldr	r3, [sp, #4]
 800cd84:	462a      	mov	r2, r5
 800cd86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd8a:	4420      	add	r0, r4
 800cd8c:	f000 fbc8 	bl	800d520 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800cd90:	f7ff ff44 	bl	800cc1c <TRACE_UnLock>
    return TRACE_Send();
 800cd94:	f7ff ff74 	bl	800cc80 <TRACE_Send>
}
 800cd98:	b006      	add	sp, #24
 800cd9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cd9e:	b001      	add	sp, #4
 800cda0:	4770      	bx	lr
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cda2:	4423      	add	r3, r4
 800cda4:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800cda8:	7618      	strb	r0, [r3, #24]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cdaa:	3201      	adds	r2, #1
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cdac:	2701      	movs	r7, #1
 800cdae:	e7db      	b.n	800cd68 <UTIL_ADV_TRACE_COND_FSend+0x60>
  TRACE_UnLock();
 800cdb0:	f7ff ff34 	bl	800cc1c <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800cdb4:	f06f 0002 	mvn.w	r0, #2
 800cdb8:	e7ee      	b.n	800cd98 <UTIL_ADV_TRACE_COND_FSend+0x90>
    return UTIL_ADV_TRACE_GIVEUP;
 800cdba:	f06f 0004 	mvn.w	r0, #4
 800cdbe:	e7eb      	b.n	800cd98 <UTIL_ADV_TRACE_COND_FSend+0x90>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800cdc0:	f06f 0005 	mvn.w	r0, #5
 800cdc4:	e7e8      	b.n	800cd98 <UTIL_ADV_TRACE_COND_FSend+0x90>
 800cdc6:	bf00      	nop
 800cdc8:	20001194 	.word	0x20001194
 800cdcc:	200015ac 	.word	0x200015ac
 800cdd0:	200011ac 	.word	0x200011ac

0800cdd4 <TRACE_TxCpltCallback>:
{
 800cdd4:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdd6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cdda:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800cddc:	4b20      	ldr	r3, [pc, #128]	@ (800ce60 <TRACE_TxCpltCallback+0x8c>)
 800cdde:	789a      	ldrb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800cde0:	8a58      	ldrh	r0, [r3, #18]
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800cde2:	2a02      	cmp	r2, #2
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cde4:	bf1d      	ittte	ne
 800cde6:	8a1a      	ldrhne	r2, [r3, #16]
 800cde8:	8a99      	ldrhne	r1, [r3, #20]
 800cdea:	1852      	addne	r2, r2, r1
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800cdec:	2200      	moveq	r2, #0
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cdee:	bf14      	ite	ne
 800cdf0:	f3c2 0209 	ubfxne	r2, r2, #0, #10
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800cdf4:	709a      	strbeq	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800cdf6:	4290      	cmp	r0, r2
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800cdf8:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800cdfa:	d028      	beq.n	800ce4e <TRACE_TxCpltCallback+0x7a>
 800cdfc:	8ad9      	ldrh	r1, [r3, #22]
 800cdfe:	2901      	cmp	r1, #1
 800ce00:	d125      	bne.n	800ce4e <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ce02:	7899      	ldrb	r1, [r3, #2]
 800ce04:	2901      	cmp	r1, #1
 800ce06:	d113      	bne.n	800ce30 <TRACE_TxCpltCallback+0x5c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800ce08:	8819      	ldrh	r1, [r3, #0]
 800ce0a:	1a8a      	subs	r2, r1, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ce0c:	2102      	movs	r1, #2
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800ce0e:	b292      	uxth	r2, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ce10:	7099      	strb	r1, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ce12:	2100      	movs	r1, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800ce14:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ce16:	8019      	strh	r1, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800ce18:	b962      	cbnz	r2, 800ce34 <TRACE_TxCpltCallback+0x60>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ce1a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ce1c:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ce1e:	8a1a      	ldrh	r2, [r3, #16]
 800ce20:	4290      	cmp	r0, r2
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800ce22:	bf8b      	itete	hi
 800ce24:	1a80      	subhi	r0, r0, r2
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ce26:	f5c2 6280 	rsbls	r2, r2, #1024	@ 0x400
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800ce2a:	8298      	strhhi	r0, [r3, #20]
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ce2c:	829a      	strhls	r2, [r3, #20]
 800ce2e:	e001      	b.n	800ce34 <TRACE_TxCpltCallback+0x60>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ce30:	2900      	cmp	r1, #0
 800ce32:	d0f4      	beq.n	800ce1e <TRACE_TxCpltCallback+0x4a>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800ce34:	8a1a      	ldrh	r2, [r3, #16]
 800ce36:	480b      	ldr	r0, [pc, #44]	@ (800ce64 <TRACE_TxCpltCallback+0x90>)
 800ce38:	4410      	add	r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce3a:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ce3e:	4a0a      	ldr	r2, [pc, #40]	@ (800ce68 <TRACE_TxCpltCallback+0x94>)
 800ce40:	8a99      	ldrh	r1, [r3, #20]
 800ce42:	68d3      	ldr	r3, [r2, #12]
 800ce44:	9301      	str	r3, [sp, #4]
}
 800ce46:	b002      	add	sp, #8
 800ce48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ce4c:	4718      	bx	r3
 800ce4e:	f384 8810 	msr	PRIMASK, r4
    UTIL_ADV_TRACE_PostSendHook();
 800ce52:	f7f4 fce4 	bl	800181e <UTIL_ADV_TRACE_PostSendHook>
}
 800ce56:	b002      	add	sp, #8
 800ce58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TRACE_UnLock();
 800ce5c:	f7ff bede 	b.w	800cc1c <TRACE_UnLock>
 800ce60:	20001194 	.word	0x20001194
 800ce64:	200011ac 	.word	0x200011ac
 800ce68:	0800d978 	.word	0x0800d978

0800ce6c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ce6c:	4b02      	ldr	r3, [pc, #8]	@ (800ce78 <UTIL_LPM_Init+0xc>)
 800ce6e:	2200      	movs	r2, #0
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ce70:	e9c3 2200 	strd	r2, r2, [r3]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	200017ac 	.word	0x200017ac

0800ce7c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ce7c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce7e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ce82:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800ce84:	b141      	cbz	r1, 800ce98 <UTIL_LPM_SetStopMode+0x1c>
 800ce86:	2901      	cmp	r1, #1
 800ce88:	d103      	bne.n	800ce92 <UTIL_LPM_SetStopMode+0x16>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800ce8a:	4a06      	ldr	r2, [pc, #24]	@ (800cea4 <UTIL_LPM_SetStopMode+0x28>)
 800ce8c:	6813      	ldr	r3, [r2, #0]
 800ce8e:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800ce90:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce92:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ce96:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800ce98:	4a02      	ldr	r2, [pc, #8]	@ (800cea4 <UTIL_LPM_SetStopMode+0x28>)
 800ce9a:	6813      	ldr	r3, [r2, #0]
 800ce9c:	ea23 0300 	bic.w	r3, r3, r0
 800cea0:	e7f6      	b.n	800ce90 <UTIL_LPM_SetStopMode+0x14>
 800cea2:	bf00      	nop
 800cea4:	200017ac 	.word	0x200017ac

0800cea8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cea8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceaa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ceae:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800ceb0:	b141      	cbz	r1, 800cec4 <UTIL_LPM_SetOffMode+0x1c>
 800ceb2:	2901      	cmp	r1, #1
 800ceb4:	d103      	bne.n	800cebe <UTIL_LPM_SetOffMode+0x16>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ceb6:	4a06      	ldr	r2, [pc, #24]	@ (800ced0 <UTIL_LPM_SetOffMode+0x28>)
 800ceb8:	6853      	ldr	r3, [r2, #4]
 800ceba:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800cebc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cebe:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cec2:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800cec4:	4a02      	ldr	r2, [pc, #8]	@ (800ced0 <UTIL_LPM_SetOffMode+0x28>)
 800cec6:	6853      	ldr	r3, [r2, #4]
 800cec8:	ea23 0300 	bic.w	r3, r3, r0
 800cecc:	e7f6      	b.n	800cebc <UTIL_LPM_SetOffMode+0x14>
 800cece:	bf00      	nop
 800ced0:	200017ac 	.word	0x200017ac

0800ced4 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ced4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ced8:	b672      	cpsid	i
{
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800ceda:	4b06      	ldr	r3, [pc, #24]	@ (800cef4 <UTIL_LPM_GetMode+0x20>)
 800cedc:	6819      	ldr	r1, [r3, #0]
 800cede:	b939      	cbnz	r1, 800cef0 <UTIL_LPM_GetMode+0x1c>
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800cee0:	685b      	ldr	r3, [r3, #4]
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	bf0c      	ite	eq
 800cee6:	2002      	moveq	r0, #2
 800cee8:	2001      	movne	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceea:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800ceee:	4770      	bx	lr
    mode_selected = UTIL_LPM_SLEEPMODE;
 800cef0:	2000      	movs	r0, #0
 800cef2:	e7fa      	b.n	800ceea <UTIL_LPM_GetMode+0x16>
 800cef4:	200017ac 	.word	0x200017ac

0800cef8 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800cef8:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cefa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cefe:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800cf00:	4b0a      	ldr	r3, [pc, #40]	@ (800cf2c <UTIL_LPM_EnterLowPower+0x34>)
 800cf02:	4c0b      	ldr	r4, [pc, #44]	@ (800cf30 <UTIL_LPM_EnterLowPower+0x38>)
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	b132      	cbz	r2, 800cf16 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800cf0c:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800cf0e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf10:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800cf14:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	b11b      	cbz	r3, 800cf22 <UTIL_LPM_EnterLowPower+0x2a>
        UTIL_PowerDriver.EnterStopMode( );
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800cf1e:	68e3      	ldr	r3, [r4, #12]
 800cf20:	e7f5      	b.n	800cf0e <UTIL_LPM_EnterLowPower+0x16>
      UTIL_PowerDriver.EnterOffMode( );
 800cf22:	6923      	ldr	r3, [r4, #16]
 800cf24:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800cf26:	6963      	ldr	r3, [r4, #20]
 800cf28:	e7f1      	b.n	800cf0e <UTIL_LPM_EnterLowPower+0x16>
 800cf2a:	bf00      	nop
 800cf2c:	200017ac 	.word	0x200017ac
 800cf30:	0800d960 	.word	0x0800d960

0800cf34 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800cf34:	3801      	subs	r0, #1
 800cf36:	440a      	add	r2, r1
 800cf38:	4291      	cmp	r1, r2
 800cf3a:	d100      	bne.n	800cf3e <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800cf3c:	4770      	bx	lr
        *dst8++ = *src8++;
 800cf3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf42:	f800 3f01 	strb.w	r3, [r0, #1]!
 800cf46:	e7f7      	b.n	800cf38 <UTIL_MEM_cpy_8+0x4>

0800cf48 <UTIL_MEM_set_8>:
void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 800cf48:	f000 bc0e 	b.w	800d768 <memset>

0800cf4c <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800cf4c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf4e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cf52:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800cf54:	4b06      	ldr	r3, [pc, #24]	@ (800cf70 <UTIL_SEQ_SetTask+0x24>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	4302      	orrs	r2, r0
 800cf5a:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800cf5c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cf60:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800cf64:	4302      	orrs	r2, r0
 800cf66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf6a:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800cf6e:	bd10      	pop	{r4, pc}
 800cf70:	200017b4 	.word	0x200017b4

0800cf74 <UTIL_SEQ_PreIdle>:
__WEAK void UTIL_SEQ_Idle( void )
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
 800cf74:	4770      	bx	lr

0800cf76 <UTIL_SEQ_PostIdle>:
   * Unless specified by the application, there is nothing to be done
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
 800cf76:	4770      	bx	lr

0800cf78 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800cf78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf7c:	bf3a      	itte	cc
 800cf7e:	0400      	lslcc	r0, r0, #16
 800cf80:	2310      	movcc	r3, #16
  uint8_t n = 0U;
 800cf82:	2300      	movcs	r3, #0
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800cf84:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800cf88:	bf3e      	ittt	cc
 800cf8a:	3308      	addcc	r3, #8
 800cf8c:	0200      	lslcc	r0, r0, #8
 800cf8e:	b2db      	uxtbcc	r3, r3
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800cf90:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800cf94:	bf38      	it	cc
 800cf96:	0100      	lslcc	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800cf98:	ea4f 7010 	mov.w	r0, r0, lsr #28

  return (uint8_t)(31U-n);
 800cf9c:	4a05      	ldr	r2, [pc, #20]	@ (800cfb4 <SEQ_BitPosition+0x3c>)
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800cf9e:	bf38      	it	cc
 800cfa0:	3304      	addcc	r3, #4
  return (uint8_t)(31U-n);
 800cfa2:	5c12      	ldrb	r2, [r2, r0]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800cfa4:	bf38      	it	cc
 800cfa6:	b2db      	uxtbcc	r3, r3
  return (uint8_t)(31U-n);
 800cfa8:	f1c3 031f 	rsb	r3, r3, #31
 800cfac:	1a98      	subs	r0, r3, r2
}
 800cfae:	b2c0      	uxtb	r0, r0
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	0800df01 	.word	0x0800df01

0800cfb8 <UTIL_SEQ_Run>:
{
 800cfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  super_mask_backup = SuperMask;
 800cfbc:	4f35      	ldr	r7, [pc, #212]	@ (800d094 <UTIL_SEQ_Run+0xdc>)
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800cfbe:	4c36      	ldr	r4, [pc, #216]	@ (800d098 <UTIL_SEQ_Run+0xe0>)
  super_mask_backup = SuperMask;
 800cfc0:	687d      	ldr	r5, [r7, #4]
  SuperMask &= Mask_bm;
 800cfc2:	4028      	ands	r0, r5
 800cfc4:	6078      	str	r0, [r7, #4]
      counter++;
 800cfc6:	2601      	movs	r6, #1
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800cfc8:	e9d7 2100 	ldrd	r2, r1, [r7]
 800cfcc:	6823      	ldr	r3, [r4, #0]
 800cfce:	4013      	ands	r3, r2
 800cfd0:	420b      	tst	r3, r1
 800cfd2:	d043      	beq.n	800d05c <UTIL_SEQ_Run+0xa4>
 800cfd4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800cfd8:	4003      	ands	r3, r0
 800cfda:	d13f      	bne.n	800d05c <UTIL_SEQ_Run+0xa4>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800cfdc:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800cfe0:	400a      	ands	r2, r1
 800cfe2:	4010      	ands	r0, r2
 800cfe4:	d103      	bne.n	800cfee <UTIL_SEQ_Run+0x36>
 800cfe6:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
      counter++;
 800cfea:	2301      	movs	r3, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800cfec:	4010      	ands	r0, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cfee:	00d9      	lsls	r1, r3, #3
 800cff0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cff4:	4421      	add	r1, r4
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cff6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800cffa:	4210      	tst	r0, r2
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cffc:	bf04      	itt	eq
 800cffe:	f04f 32ff 	moveq.w	r2, #4294967295
 800d002:	f8c3 2094 	streq.w	r2, [r3, #148]	@ 0x94
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d006:	f8d1 8094 	ldr.w	r8, [r1, #148]	@ 0x94
 800d00a:	ea08 0000 	and.w	r0, r8, r0
 800d00e:	f7ff ffb3 	bl	800cf78 <SEQ_BitPosition>
 800d012:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d014:	fa06 f000 	lsl.w	r0, r6, r0
 800d018:	ea28 0000 	bic.w	r0, r8, r0
 800d01c:	f8c1 0094 	str.w	r0, [r1, #148]	@ 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d020:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d024:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d026:	68e3      	ldr	r3, [r4, #12]
 800d028:	6822      	ldr	r2, [r4, #0]
 800d02a:	fa06 f303 	lsl.w	r3, r6, r3
 800d02e:	ea22 0203 	bic.w	r2, r2, r3
 800d032:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d034:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800d038:	ea22 0203 	bic.w	r2, r2, r3
 800d03c:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d040:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800d044:	ea22 0203 	bic.w	r2, r2, r3
 800d048:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d04c:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800d050:	68e3      	ldr	r3, [r4, #12]
 800d052:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	4798      	blx	r3
 800d05a:	e7b5      	b.n	800cfc8 <UTIL_SEQ_Run+0x10>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d05c:	f04f 33ff 	mov.w	r3, #4294967295
 800d060:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800d062:	f7ff ff87 	bl	800cf74 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d066:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d06a:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	4013      	ands	r3, r2
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	4013      	ands	r3, r2
 800d076:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800d07a:	400a      	ands	r2, r1
 800d07c:	4313      	orrs	r3, r2
 800d07e:	d101      	bne.n	800d084 <UTIL_SEQ_Run+0xcc>
	UTIL_SEQ_Idle( );
 800d080:	f7f4 fb76 	bl	8001770 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d084:	f386 8810 	msr	PRIMASK, r6
  UTIL_SEQ_PostIdle( );
 800d088:	f7ff ff75 	bl	800cf76 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800d08c:	607d      	str	r5, [r7, #4]
}
 800d08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d092:	bf00      	nop
 800d094:	200000d4 	.word	0x200000d4
 800d098:	200017b4 	.word	0x200017b4

0800d09c <UTIL_SEQ_RegTask>:
{
 800d09c:	b510      	push	{r4, lr}
 800d09e:	4611      	mov	r1, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d0a4:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d0a6:	f7ff ff67 	bl	800cf78 <SEQ_BitPosition>
 800d0aa:	4b03      	ldr	r3, [pc, #12]	@ (800d0b8 <UTIL_SEQ_RegTask+0x1c>)
 800d0ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800d0b0:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0b2:	f384 8810 	msr	PRIMASK, r4
}
 800d0b6:	bd10      	pop	{r4, pc}
 800d0b8:	200017b4 	.word	0x200017b4

0800d0bc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800d0bc:	b082      	sub	sp, #8
 800d0be:	b082      	sub	sp, #8
 800d0c0:	f10d 0c08 	add.w	ip, sp, #8
 800d0c4:	e90c 0006 	stmdb	ip, {r1, r2}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800d0c8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 800d0cc:	9303      	str	r3, [sp, #12]
  c.Seconds = a.Seconds + b.Seconds;
 800d0ce:	440b      	add	r3, r1
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800d0d0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800d0d4:	440a      	add	r2, r1
 800d0d6:	b291      	uxth	r1, r2
 800d0d8:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800d0da:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800d0de:	bfa2      	ittt	ge
 800d0e0:	f5a1 727a 	subge.w	r2, r1, #1000	@ 0x3e8
    c.Seconds++;
 800d0e4:	3301      	addge	r3, #1
    c.SubSeconds -= 1000;
 800d0e6:	b212      	sxthge	r2, r2
  }
  return c;
 800d0e8:	6003      	str	r3, [r0, #0]
 800d0ea:	8082      	strh	r2, [r0, #4]
}
 800d0ec:	b002      	add	sp, #8
 800d0ee:	b002      	add	sp, #8
 800d0f0:	4770      	bx	lr

0800d0f2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	f10d 0c08 	add.w	ip, sp, #8
 800d0fa:	e90c 0006 	stmdb	ip, {r1, r2}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800d0fe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 800d102:	9303      	str	r3, [sp, #12]
  c.Seconds = a.Seconds - b.Seconds;
 800d104:	1acb      	subs	r3, r1, r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800d106:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800d10a:	1a52      	subs	r2, r2, r1
 800d10c:	b291      	uxth	r1, r2
 800d10e:	b212      	sxth	r2, r2
  if( c.SubSeconds < 0 )
 800d110:	2a00      	cmp	r2, #0
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800d112:	bfbe      	ittt	lt
 800d114:	f501 727a 	addlt.w	r2, r1, #1000	@ 0x3e8
    c.Seconds--;
 800d118:	f103 33ff 	addlt.w	r3, r3, #4294967295
    c.SubSeconds += 1000;
 800d11c:	b212      	sxthlt	r2, r2
  }
  return c;
 800d11e:	6003      	str	r3, [r0, #0]
 800d120:	8082      	strh	r2, [r0, #4]
}
 800d122:	b002      	add	sp, #8
 800d124:	b002      	add	sp, #8
 800d126:	4770      	bx	lr

0800d128 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800d128:	b530      	push	{r4, r5, lr}
 800d12a:	b085      	sub	sp, #20
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d12c:	4d11      	ldr	r5, [pc, #68]	@ (800d174 <SysTimeSet+0x4c>)
{
 800d12e:	466b      	mov	r3, sp
 800d130:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800d134:	2300      	movs	r3, #0
 800d136:	9302      	str	r3, [sp, #8]
 800d138:	f8ad 300c 	strh.w	r3, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d13c:	a803      	add	r0, sp, #12
 800d13e:	692b      	ldr	r3, [r5, #16]
 800d140:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800d142:	9b00      	ldr	r3, [sp, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800d144:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d148:	9002      	str	r0, [sp, #8]
  c.Seconds = a.Seconds - b.Seconds;
 800d14a:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800d14c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d150:	1ae4      	subs	r4, r4, r3
 800d152:	b2a3      	uxth	r3, r4
 800d154:	b224      	sxth	r4, r4
  if( c.SubSeconds < 0 )
 800d156:	2c00      	cmp	r4, #0
    c.SubSeconds += 1000;
 800d158:	bfbe      	ittt	lt
 800d15a:	f503 737a 	addlt.w	r3, r3, #1000	@ 0x3e8
 800d15e:	b21c      	sxthlt	r4, r3
    c.Seconds--;
 800d160:	f100 30ff 	addlt.w	r0, r0, #4294967295

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800d168:	68ab      	ldr	r3, [r5, #8]
 800d16a:	4620      	mov	r0, r4
 800d16c:	4798      	blx	r3
}
 800d16e:	b005      	add	sp, #20
 800d170:	bd30      	pop	{r4, r5, pc}
 800d172:	bf00      	nop
 800d174:	0800d920 	.word	0x0800d920

0800d178 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800d178:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d17a:	4e11      	ldr	r6, [pc, #68]	@ (800d1c0 <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800d17c:	2300      	movs	r3, #0
{
 800d17e:	4605      	mov	r5, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	f8ad 3004 	strh.w	r3, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d186:	a801      	add	r0, sp, #4
 800d188:	6933      	ldr	r3, [r6, #16]
 800d18a:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d18c:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d18e:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d190:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800d192:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d194:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800d196:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 800d198:	9b00      	ldr	r3, [sp, #0]
 800d19a:	4418      	add	r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800d19c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d1a0:	4423      	add	r3, r4
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800d1a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
    c.Seconds++;
 800d1aa:	bfa2      	ittt	ge
 800d1ac:	3001      	addge	r0, #1
    c.SubSeconds -= 1000;
 800d1ae:	f5a2 737a 	subge.w	r3, r2, #1000	@ 0x3e8
 800d1b2:	b21b      	sxthge	r3, r3

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800d1b4:	6028      	str	r0, [r5, #0]
}
 800d1b6:	4628      	mov	r0, r5
  return sysTime;
 800d1b8:	80ab      	strh	r3, [r5, #4]
}
 800d1ba:	b002      	add	sp, #8
 800d1bc:	bd70      	pop	{r4, r5, r6, pc}
 800d1be:	bf00      	nop
 800d1c0:	0800d920 	.word	0x0800d920

0800d1c4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800d1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d1ce:	4b07      	ldr	r3, [pc, #28]	@ (800d1ec <SysTimeGetMcuTime+0x28>)
{
 800d1d0:	4604      	mov	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	a801      	add	r0, sp, #4
 800d1d6:	4798      	blx	r3
 800d1d8:	466d      	mov	r5, sp
 800d1da:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 800d1dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d1e0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	b003      	add	sp, #12
 800d1e8:	bd30      	pop	{r4, r5, pc}
 800d1ea:	bf00      	nop
 800d1ec:	0800d920 	.word	0x0800d920

0800d1f0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800d1f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d1f2:	4d0f      	ldr	r5, [pc, #60]	@ (800d230 <SysTimeToMs+0x40>)
{
 800d1f4:	ab02      	add	r3, sp, #8
 800d1f6:	e903 0003 	stmdb	r3, {r0, r1}
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d1fa:	68eb      	ldr	r3, [r5, #12]
 800d1fc:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800d1fe:	686b      	ldr	r3, [r5, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d200:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800d202:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800d204:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  c.Seconds = a.Seconds - b.Seconds;
 800d208:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800d20a:	1b1b      	subs	r3, r3, r4
 800d20c:	b299      	uxth	r1, r3
 800d20e:	b21b      	sxth	r3, r3
  if( c.SubSeconds < 0 )
 800d210:	2b00      	cmp	r3, #0
  c.Seconds = a.Seconds - b.Seconds;
 800d212:	eba2 0200 	sub.w	r2, r2, r0
    c.SubSeconds += 1000;
 800d216:	bfbe      	ittt	lt
 800d218:	f501 717a 	addlt.w	r1, r1, #1000	@ 0x3e8
    c.Seconds--;
 800d21c:	f102 32ff 	addlt.w	r2, r2, #4294967295
    c.SubSeconds += 1000;
 800d220:	b20b      	sxthlt	r3, r1
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
}
 800d222:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d226:	fb00 3002 	mla	r0, r0, r2, r3
 800d22a:	b003      	add	sp, #12
 800d22c:	bd30      	pop	{r4, r5, pc}
 800d22e:	bf00      	nop
 800d230:	0800d920 	.word	0x0800d920

0800d234 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800d234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t seconds = timeMs / 1000;
 800d238:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 800d23c:	fbb1 f5f5 	udiv	r5, r1, r5
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800d240:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d244:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 800d284 <SysTimeFromMs+0x50>
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800d248:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d24c:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 800d250:	b29c      	uxth	r4, r3
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d252:	f8d8 300c 	ldr.w	r3, [r8, #12]
{
 800d256:	4606      	mov	r6, r0
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d258:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800d25a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d25e:	4607      	mov	r7, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800d260:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800d262:	19e3      	adds	r3, r4, r7
 800d264:	b299      	uxth	r1, r3
 800d266:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800d268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
  c.Seconds = a.Seconds + b.Seconds;
 800d26c:	4428      	add	r0, r5
    c.SubSeconds -= 1000;
 800d26e:	bfa2      	ittt	ge
 800d270:	f5a1 737a 	subge.w	r3, r1, #1000	@ 0x3e8
    c.Seconds++;
 800d274:	3001      	addge	r0, #1
    c.SubSeconds -= 1000;
 800d276:	b21b      	sxthge	r3, r3
  return c;
 800d278:	6030      	str	r0, [r6, #0]
 800d27a:	80b3      	strh	r3, [r6, #4]
  return SysTimeAdd( sysTime, DeltaTime );
}
 800d27c:	4630      	mov	r0, r6
 800d27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d282:	bf00      	nop
 800d284:	0800d920 	.word	0x0800d920

0800d288 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800d288:	4b02      	ldr	r3, [pc, #8]	@ (800d294 <UTIL_TIMER_Init+0xc>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800d28e:	4b02      	ldr	r3, [pc, #8]	@ (800d298 <UTIL_TIMER_Init+0x10>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4718      	bx	r3
 800d294:	20001854 	.word	0x20001854
 800d298:	0800d934 	.word	0x0800d934

0800d29c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	4604      	mov	r4, r0
 800d2a0:	4617      	mov	r7, r2
 800d2a2:	4608      	mov	r0, r1
 800d2a4:	461e      	mov	r6, r3
  if((TimerObject != NULL) && (Callback != NULL))
 800d2a6:	b17c      	cbz	r4, 800d2c8 <UTIL_TIMER_Create+0x2c>
 800d2a8:	b173      	cbz	r3, 800d2c8 <UTIL_TIMER_Create+0x2c>
  {
    TimerObject->Timestamp = 0U;
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800d2aa:	4b08      	ldr	r3, [pc, #32]	@ (800d2cc <UTIL_TIMER_Create+0x30>)
    TimerObject->Timestamp = 0U;
 800d2ac:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800d2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    TimerObject->Timestamp = 0U;
 800d2b0:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800d2b2:	4798      	blx	r3
    TimerObject->IsPending = 0U;
    TimerObject->IsRunning = 0U;
    TimerObject->IsReloadStopped = 0U;
    TimerObject->Callback = Callback;
    TimerObject->argument = Argument;
 800d2b4:	9b06      	ldr	r3, [sp, #24]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800d2b6:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800d2b8:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800d2ba:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800d2bc:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800d2be:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800d2c0:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800d2c2:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 800d2c4:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 800d2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800d2c8:	2001      	movs	r0, #1
 800d2ca:	e7fc      	b.n	800d2c6 <UTIL_TIMER_Create+0x2a>
 800d2cc:	0800d934 	.word	0x0800d934

0800d2d0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800d2d0:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800d2d2:	4c03      	ldr	r4, [pc, #12]	@ (800d2e0 <UTIL_TIMER_GetCurrentTime+0x10>)
 800d2d4:	69e3      	ldr	r3, [r4, #28]
 800d2d6:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800d2d8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
}
 800d2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return  UTIL_TimerDriver.Tick2ms(now);
 800d2de:	4718      	bx	r3
 800d2e0:	0800d934 	.word	0x0800d934

0800d2e4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800d2e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d2e6:	4d06      	ldr	r5, [pc, #24]	@ (800d300 <UTIL_TIMER_GetElapsedTime+0x1c>)
 800d2e8:	69eb      	ldr	r3, [r5, #28]
{
 800d2ea:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d2ec:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800d2ee:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d2f0:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800d2f6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d2f8:	1a20      	subs	r0, r4, r0
}
 800d2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800d2fe:	4718      	bx	r3
 800d300:	0800d934 	.word	0x0800d934

0800d304 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d304:	4b05      	ldr	r3, [pc, #20]	@ (800d31c <TimerExists+0x18>)
 800d306:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800d308:	b90b      	cbnz	r3, 800d30e <TimerExists+0xa>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 800d30a:	4618      	mov	r0, r3
 800d30c:	4770      	bx	lr
    if( cur == TimerObject )
 800d30e:	4283      	cmp	r3, r0
 800d310:	d001      	beq.n	800d316 <TimerExists+0x12>
    cur = cur->Next;
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	e7f8      	b.n	800d308 <TimerExists+0x4>
      return true;
 800d316:	2001      	movs	r0, #1
}
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	20001854 	.word	0x20001854

0800d320 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800d320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d324:	4e0b      	ldr	r6, [pc, #44]	@ (800d354 <TimerSetTimeout+0x34>)
 800d326:	6a33      	ldr	r3, [r6, #32]
{
 800d328:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d32a:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800d32c:	2301      	movs	r3, #1

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d32e:	69b7      	ldr	r7, [r6, #24]
  TimerObject->IsPending = 1;
 800d330:	7223      	strb	r3, [r4, #8]
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d332:	f8d4 8000 	ldr.w	r8, [r4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d336:	4605      	mov	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d338:	47b8      	blx	r7
 800d33a:	4428      	add	r0, r5
 800d33c:	4580      	cmp	r8, r0
 800d33e:	d202      	bcs.n	800d346 <TimerSetTimeout+0x26>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800d340:	47b8      	blx	r7
 800d342:	4428      	add	r0, r5
 800d344:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800d346:	68b3      	ldr	r3, [r6, #8]
 800d348:	6820      	ldr	r0, [r4, #0]
 800d34a:	9301      	str	r3, [sp, #4]
}
 800d34c:	b002      	add	sp, #8
 800d34e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800d352:	4718      	bx	r3
 800d354:	0800d934 	.word	0x0800d934

0800d358 <UTIL_TIMER_Stop>:
{
 800d358:	b570      	push	{r4, r5, r6, lr}
  if (NULL != TimerObject)
 800d35a:	b320      	cbz	r0, 800d3a6 <UTIL_TIMER_Stop+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d35c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d360:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800d362:	4d12      	ldr	r5, [pc, #72]	@ (800d3ac <UTIL_TIMER_Stop+0x54>)
 800d364:	682b      	ldr	r3, [r5, #0]
    TimerObject->IsReloadStopped = 1U;
 800d366:	2201      	movs	r2, #1
 800d368:	7282      	strb	r2, [r0, #10]
    if(NULL != TimerListHead)
 800d36a:	b153      	cbz	r3, 800d382 <UTIL_TIMER_Stop+0x2a>
      TimerObject->IsRunning = 0U;
 800d36c:	2200      	movs	r2, #0
 800d36e:	7242      	strb	r2, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800d370:	4298      	cmp	r0, r3
          if( TimerListHead->Next != NULL )
 800d372:	695c      	ldr	r4, [r3, #20]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800d374:	d10e      	bne.n	800d394 <UTIL_TIMER_Stop+0x3c>
          TimerListHead->IsPending = 0;
 800d376:	7202      	strb	r2, [r0, #8]
          if( TimerListHead->Next != NULL )
 800d378:	b13c      	cbz	r4, 800d38a <UTIL_TIMER_Stop+0x32>
            TimerSetTimeout( TimerListHead );
 800d37a:	4620      	mov	r0, r4
            TimerListHead = TimerListHead->Next;
 800d37c:	602c      	str	r4, [r5, #0]
            TimerSetTimeout( TimerListHead );
 800d37e:	f7ff ffcf 	bl	800d320 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d382:	f386 8810 	msr	PRIMASK, r6
}
 800d386:	2000      	movs	r0, #0
}
 800d388:	bd70      	pop	{r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800d38a:	4b09      	ldr	r3, [pc, #36]	@ (800d3b0 <UTIL_TIMER_Stop+0x58>)
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	4798      	blx	r3
            TimerListHead = NULL;
 800d390:	602c      	str	r4, [r5, #0]
 800d392:	e7f6      	b.n	800d382 <UTIL_TIMER_Stop+0x2a>
            cur = cur->Next;
 800d394:	461a      	mov	r2, r3
 800d396:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d0f2      	beq.n	800d382 <UTIL_TIMER_Stop+0x2a>
          if( cur == TimerObject )
 800d39c:	4298      	cmp	r0, r3
 800d39e:	d1f9      	bne.n	800d394 <UTIL_TIMER_Stop+0x3c>
            if( cur->Next != NULL )
 800d3a0:	6943      	ldr	r3, [r0, #20]
              prev->Next = cur;
 800d3a2:	6153      	str	r3, [r2, #20]
 800d3a4:	e7ed      	b.n	800d382 <UTIL_TIMER_Stop+0x2a>
    ret = UTIL_TIMER_INVALID_PARAM;
 800d3a6:	2001      	movs	r0, #1
 800d3a8:	e7ee      	b.n	800d388 <UTIL_TIMER_Stop+0x30>
 800d3aa:	bf00      	nop
 800d3ac:	20001854 	.word	0x20001854
 800d3b0:	0800d934 	.word	0x0800d934

0800d3b4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d3b4:	4b08      	ldr	r3, [pc, #32]	@ (800d3d8 <TimerInsertTimer+0x24>)
{
 800d3b6:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d3b8:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800d3ba:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800d3bc:	6951      	ldr	r1, [r2, #20]
 800d3be:	b911      	cbnz	r1, 800d3c6 <TimerInsertTimer+0x12>
        cur = next;
        next = next->Next;
    }
    else
    {
        cur->Next = TimerObject;
 800d3c0:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800d3c2:	6141      	str	r1, [r0, #20]

    }
  }
  cur->Next = TimerObject;
  TimerObject->Next = NULL;
}
 800d3c4:	bd10      	pop	{r4, pc}
    if( TimerObject->Timestamp  > next->Timestamp )
 800d3c6:	6804      	ldr	r4, [r0, #0]
 800d3c8:	6819      	ldr	r1, [r3, #0]
 800d3ca:	428c      	cmp	r4, r1
 800d3cc:	d902      	bls.n	800d3d4 <TimerInsertTimer+0x20>
        next = next->Next;
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	695b      	ldr	r3, [r3, #20]
 800d3d2:	e7f3      	b.n	800d3bc <TimerInsertTimer+0x8>
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	e7f3      	b.n	800d3c0 <TimerInsertTimer+0xc>
 800d3d8:	20001854 	.word	0x20001854

0800d3dc <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d3dc:	4a04      	ldr	r2, [pc, #16]	@ (800d3f0 <TimerInsertNewHeadTimer+0x14>)
 800d3de:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800d3e0:	b10b      	cbz	r3, 800d3e6 <TimerInsertNewHeadTimer+0xa>
  {
    cur->IsPending = 0;
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800d3e6:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800d3e8:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800d3ea:	f7ff bf99 	b.w	800d320 <TimerSetTimeout>
 800d3ee:	bf00      	nop
 800d3f0:	20001854 	.word	0x20001854

0800d3f4 <UTIL_TIMER_Start>:
{
 800d3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	2800      	cmp	r0, #0
 800d3fc:	d02d      	beq.n	800d45a <UTIL_TIMER_Start+0x66>
 800d3fe:	f7ff ff81 	bl	800d304 <TimerExists>
 800d402:	bb50      	cbnz	r0, 800d45a <UTIL_TIMER_Start+0x66>
 800d404:	7a65      	ldrb	r5, [r4, #9]
 800d406:	bb45      	cbnz	r5, 800d45a <UTIL_TIMER_Start+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d408:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d40c:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800d40e:	4e14      	ldr	r6, [pc, #80]	@ (800d460 <UTIL_TIMER_Start+0x6c>)
    ticks = TimerObject->ReloadValue;
 800d410:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800d412:	6a33      	ldr	r3, [r6, #32]
 800d414:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800d416:	4287      	cmp	r7, r0
 800d418:	bf2c      	ite	cs
 800d41a:	6027      	strcs	r7, [r4, #0]
 800d41c:	6020      	strcc	r0, [r4, #0]
    if( TimerListHead == NULL )
 800d41e:	4f11      	ldr	r7, [pc, #68]	@ (800d464 <UTIL_TIMER_Start+0x70>)
    TimerObject->IsReloadStopped = 0U;
 800d420:	72a5      	strb	r5, [r4, #10]
    TimerObject->IsPending = 0U;
 800d422:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d426:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	b94b      	cbnz	r3, 800d440 <UTIL_TIMER_Start+0x4c>
      UTIL_TimerDriver.SetTimerContext();
 800d42c:	6933      	ldr	r3, [r6, #16]
 800d42e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800d430:	4620      	mov	r0, r4
        TimerInsertNewHeadTimer( TimerObject);
 800d432:	f7ff ffd3 	bl	800d3dc <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d436:	f388 8810 	msr	PRIMASK, r8
}
 800d43a:	4628      	mov	r0, r5
 800d43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800d440:	69b3      	ldr	r3, [r6, #24]
 800d442:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	4418      	add	r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d448:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800d44a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4298      	cmp	r0, r3
        TimerInsertNewHeadTimer( TimerObject);
 800d450:	4620      	mov	r0, r4
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d452:	d3ee      	bcc.n	800d432 <UTIL_TIMER_Start+0x3e>
        TimerInsertTimer( TimerObject);
 800d454:	f7ff ffae 	bl	800d3b4 <TimerInsertTimer>
 800d458:	e7ed      	b.n	800d436 <UTIL_TIMER_Start+0x42>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d45a:	2501      	movs	r5, #1
 800d45c:	e7ed      	b.n	800d43a <UTIL_TIMER_Start+0x46>
 800d45e:	bf00      	nop
 800d460:	0800d934 	.word	0x0800d934
 800d464:	20001854 	.word	0x20001854

0800d468 <UTIL_TIMER_SetPeriod>:
{
 800d468:	b510      	push	{r4, lr}
 800d46a:	4604      	mov	r4, r0
 800d46c:	4608      	mov	r0, r1
  if(NULL == TimerObject)
 800d46e:	b17c      	cbz	r4, 800d490 <UTIL_TIMER_SetPeriod+0x28>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800d470:	4b08      	ldr	r3, [pc, #32]	@ (800d494 <UTIL_TIMER_SetPeriod+0x2c>)
 800d472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d474:	4798      	blx	r3
 800d476:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800d478:	4620      	mov	r0, r4
 800d47a:	f7ff ff43 	bl	800d304 <TimerExists>
 800d47e:	b140      	cbz	r0, 800d492 <UTIL_TIMER_SetPeriod+0x2a>
      (void)UTIL_TIMER_Stop(TimerObject);
 800d480:	4620      	mov	r0, r4
 800d482:	f7ff ff69 	bl	800d358 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800d486:	4620      	mov	r0, r4
}
 800d488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ret = UTIL_TIMER_Start(TimerObject);
 800d48c:	f7ff bfb2 	b.w	800d3f4 <UTIL_TIMER_Start>
	  ret = UTIL_TIMER_INVALID_PARAM;
 800d490:	2001      	movs	r0, #1
}
 800d492:	bd10      	pop	{r4, pc}
 800d494:	0800d934 	.word	0x0800d934

0800d498 <UTIL_TIMER_IRQ_Handler>:
{
 800d498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d49c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d4a0:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800d4a2:	4e1d      	ldr	r6, [pc, #116]	@ (800d518 <UTIL_TIMER_IRQ_Handler+0x80>)
  if ( TimerListHead != NULL )
 800d4a4:	4d1d      	ldr	r5, [pc, #116]	@ (800d51c <UTIL_TIMER_IRQ_Handler+0x84>)
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800d4a6:	6973      	ldr	r3, [r6, #20]
 800d4a8:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800d4aa:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800d4ac:	4604      	mov	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800d4ae:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800d4b0:	682b      	ldr	r3, [r5, #0]
 800d4b2:	b94b      	cbnz	r3, 800d4c8 <UTIL_TIMER_IRQ_Handler+0x30>
      cur->IsPending = 0;
 800d4b4:	f04f 0800 	mov.w	r8, #0
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d4b8:	682b      	ldr	r3, [r5, #0]
 800d4ba:	b98b      	cbnz	r3, 800d4e0 <UTIL_TIMER_IRQ_Handler+0x48>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800d4bc:	6828      	ldr	r0, [r5, #0]
 800d4be:	bb28      	cbnz	r0, 800d50c <UTIL_TIMER_IRQ_Handler+0x74>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4c0:	f387 8810 	msr	PRIMASK, r7
}
 800d4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DeltaContext = now  - old; /*intentional wrap around */
 800d4c8:	1b01      	subs	r1, r0, r4
        cur->Timestamp -= DeltaContext;
 800d4ca:	1a24      	subs	r4, r4, r0
      if (cur->Timestamp > DeltaContext)
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	428a      	cmp	r2, r1
        cur->Timestamp -= DeltaContext;
 800d4d0:	bf8c      	ite	hi
 800d4d2:	1912      	addhi	r2, r2, r4
        cur->Timestamp = 0;
 800d4d4:	2200      	movls	r2, #0
 800d4d6:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800d4d8:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1f6      	bne.n	800d4cc <UTIL_TIMER_IRQ_Handler+0x34>
 800d4de:	e7e9      	b.n	800d4b4 <UTIL_TIMER_IRQ_Handler+0x1c>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d4e0:	681c      	ldr	r4, [r3, #0]
 800d4e2:	b11c      	cbz	r4, 800d4ec <UTIL_TIMER_IRQ_Handler+0x54>
 800d4e4:	69b3      	ldr	r3, [r6, #24]
 800d4e6:	4798      	blx	r3
 800d4e8:	4284      	cmp	r4, r0
 800d4ea:	d2e7      	bcs.n	800d4bc <UTIL_TIMER_IRQ_Handler+0x24>
      cur = TimerListHead;
 800d4ec:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800d4ee:	6963      	ldr	r3, [r4, #20]
 800d4f0:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800d4f2:	f8a4 8008 	strh.w	r8, [r4, #8]
      cur->Callback(cur->argument);
 800d4f6:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
 800d4fa:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800d4fc:	8963      	ldrh	r3, [r4, #10]
 800d4fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d502:	d1d9      	bne.n	800d4b8 <UTIL_TIMER_IRQ_Handler+0x20>
        (void)UTIL_TIMER_Start(cur);
 800d504:	4620      	mov	r0, r4
 800d506:	f7ff ff75 	bl	800d3f4 <UTIL_TIMER_Start>
 800d50a:	e7d5      	b.n	800d4b8 <UTIL_TIMER_IRQ_Handler+0x20>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800d50c:	7a03      	ldrb	r3, [r0, #8]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1d6      	bne.n	800d4c0 <UTIL_TIMER_IRQ_Handler+0x28>
    TimerSetTimeout( TimerListHead );
 800d512:	f7ff ff05 	bl	800d320 <TimerSetTimeout>
 800d516:	e7d3      	b.n	800d4c0 <UTIL_TIMER_IRQ_Handler+0x28>
 800d518:	0800d934 	.word	0x0800d934
 800d51c:	20001854 	.word	0x20001854

0800d520 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800d524:	2900      	cmp	r1, #0
{
 800d526:	b097      	sub	sp, #92	@ 0x5c
 800d528:	4681      	mov	r9, r0
 800d52a:	461e      	mov	r6, r3
  if (size <= 0)
 800d52c:	f340 8113 	ble.w	800d756 <tiny_vsnprintf_like+0x236>
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d530:	4604      	mov	r4, r0
  {
    CHECK_STR_SIZE(buf, str, size);
 800d532:	1e4f      	subs	r7, r1, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d534:	7813      	ldrb	r3, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800d536:	eba4 0009 	sub.w	r0, r4, r9
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d53a:	b923      	cbnz	r3, 800d546 <tiny_vsnprintf_like+0x26>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 800d53c:	2300      	movs	r3, #0
 800d53e:	7023      	strb	r3, [r4, #0]
  return str - buf;
}
 800d540:	b017      	add	sp, #92	@ 0x5c
 800d542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    CHECK_STR_SIZE(buf, str, size);
 800d546:	42b8      	cmp	r0, r7
 800d548:	daf8      	bge.n	800d53c <tiny_vsnprintf_like+0x1c>
    if (*fmt != '%')
 800d54a:	2b25      	cmp	r3, #37	@ 0x25
 800d54c:	d005      	beq.n	800d55a <tiny_vsnprintf_like+0x3a>
      *str++ = *fmt;
 800d54e:	f804 3b01 	strb.w	r3, [r4], #1
      continue;
 800d552:	4690      	mov	r8, r2
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d554:	f108 0201 	add.w	r2, r8, #1
 800d558:	e7ec      	b.n	800d534 <tiny_vsnprintf_like+0x14>
    if (*fmt == '0')
 800d55a:	f892 e001 	ldrb.w	lr, [r2, #1]
 800d55e:	f1ae 0330 	sub.w	r3, lr, #48	@ 0x30
 800d562:	f1d3 0a00 	rsbs	sl, r3, #0
 800d566:	eb4a 0a03 	adc.w	sl, sl, r3
    if (is_digit(*fmt))
 800d56a:	f1ae 0330 	sub.w	r3, lr, #48	@ 0x30
 800d56e:	2b09      	cmp	r3, #9
    fmt++;
 800d570:	f102 0801 	add.w	r8, r2, #1
    if (is_digit(*fmt))
 800d574:	d82b      	bhi.n	800d5ce <tiny_vsnprintf_like+0xae>
 800d576:	4641      	mov	r1, r8
  int i = 0;
 800d578:	2500      	movs	r5, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800d57a:	200a      	movs	r0, #10
 800d57c:	4688      	mov	r8, r1
 800d57e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d582:	f1a3 0c30 	sub.w	ip, r3, #48	@ 0x30
 800d586:	f1bc 0f09 	cmp.w	ip, #9
 800d58a:	d91b      	bls.n	800d5c4 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 800d58c:	f898 3000 	ldrb.w	r3, [r8]
 800d590:	2b69      	cmp	r3, #105	@ 0x69
 800d592:	f000 8097 	beq.w	800d6c4 <tiny_vsnprintf_like+0x1a4>
 800d596:	d81d      	bhi.n	800d5d4 <tiny_vsnprintf_like+0xb4>
 800d598:	2b63      	cmp	r3, #99	@ 0x63
 800d59a:	d029      	beq.n	800d5f0 <tiny_vsnprintf_like+0xd0>
 800d59c:	2b64      	cmp	r3, #100	@ 0x64
 800d59e:	f000 8091 	beq.w	800d6c4 <tiny_vsnprintf_like+0x1a4>
 800d5a2:	2b58      	cmp	r3, #88	@ 0x58
 800d5a4:	d05a      	beq.n	800d65c <tiny_vsnprintf_like+0x13c>
        if (*fmt != '%') *str++ = '%';
 800d5a6:	2b25      	cmp	r3, #37	@ 0x25
 800d5a8:	d11a      	bne.n	800d5e0 <tiny_vsnprintf_like+0xc0>
        if (*fmt)
 800d5aa:	f898 3000 	ldrb.w	r3, [r8]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 808c 	beq.w	800d6cc <tiny_vsnprintf_like+0x1ac>
          *str++ = *fmt;
 800d5b4:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800d5b8:	eba4 0309 	sub.w	r3, r4, r9
 800d5bc:	42bb      	cmp	r3, r7
 800d5be:	f280 8083 	bge.w	800d6c8 <tiny_vsnprintf_like+0x1a8>
 800d5c2:	e7c7      	b.n	800d554 <tiny_vsnprintf_like+0x34>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800d5c4:	fb00 3305 	mla	r3, r0, r5, r3
 800d5c8:	f1a3 0530 	sub.w	r5, r3, #48	@ 0x30
 800d5cc:	e7d6      	b.n	800d57c <tiny_vsnprintf_like+0x5c>
    field_width = -1;
 800d5ce:	f04f 35ff 	mov.w	r5, #4294967295
 800d5d2:	e7db      	b.n	800d58c <tiny_vsnprintf_like+0x6c>
    switch (*fmt)
 800d5d4:	2b75      	cmp	r3, #117	@ 0x75
 800d5d6:	d077      	beq.n	800d6c8 <tiny_vsnprintf_like+0x1a8>
 800d5d8:	2b78      	cmp	r3, #120	@ 0x78
 800d5da:	d041      	beq.n	800d660 <tiny_vsnprintf_like+0x140>
 800d5dc:	2b73      	cmp	r3, #115	@ 0x73
 800d5de:	d01c      	beq.n	800d61a <tiny_vsnprintf_like+0xfa>
        if (*fmt != '%') *str++ = '%';
 800d5e0:	2325      	movs	r3, #37	@ 0x25
 800d5e2:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800d5e6:	eba4 0309 	sub.w	r3, r4, r9
 800d5ea:	42bb      	cmp	r3, r7
 800d5ec:	da6c      	bge.n	800d6c8 <tiny_vsnprintf_like+0x1a8>
 800d5ee:	e7dc      	b.n	800d5aa <tiny_vsnprintf_like+0x8a>
          while (--field_width > 0) *str++ = ' ';
 800d5f0:	2d00      	cmp	r5, #0
 800d5f2:	f105 3aff 	add.w	sl, r5, #4294967295
 800d5f6:	bfd8      	it	le
 800d5f8:	f04f 0a00 	movle.w	sl, #0
 800d5fc:	4652      	mov	r2, sl
 800d5fe:	4620      	mov	r0, r4
 800d600:	2120      	movs	r1, #32
 800d602:	f000 f8b1 	bl	800d768 <memset>
 800d606:	44a2      	add	sl, r4
 800d608:	2d00      	cmp	r5, #0
        *str++ = (unsigned char) va_arg(args, int);
 800d60a:	f856 3b04 	ldr.w	r3, [r6], #4
 800d60e:	f88a 3000 	strb.w	r3, [sl]
          while (--field_width > 0) *str++ = ' ';
 800d612:	bfd8      	it	le
 800d614:	2501      	movle	r5, #1
 800d616:	442c      	add	r4, r5
        continue;
 800d618:	e79c      	b.n	800d554 <tiny_vsnprintf_like+0x34>
        if (!s) s = "<NULL>";
 800d61a:	4b50      	ldr	r3, [pc, #320]	@ (800d75c <tiny_vsnprintf_like+0x23c>)
        s = va_arg(args, char *);
 800d61c:	f856 bb04 	ldr.w	fp, [r6], #4
        if (!s) s = "<NULL>";
 800d620:	f1bb 0f00 	cmp.w	fp, #0
 800d624:	bf08      	it	eq
 800d626:	469b      	moveq	fp, r3
        len = strlen(s);
 800d628:	4658      	mov	r0, fp
 800d62a:	f7f2 fdcd 	bl	80001c8 <strlen>
          while (len < field_width--) *str++ = ' ';
 800d62e:	1a2a      	subs	r2, r5, r0
 800d630:	4285      	cmp	r5, r0
 800d632:	bfb8      	it	lt
 800d634:	2200      	movlt	r2, #0
        len = strlen(s);
 800d636:	4682      	mov	sl, r0
          while (len < field_width--) *str++ = ' ';
 800d638:	2120      	movs	r1, #32
 800d63a:	4620      	mov	r0, r4
 800d63c:	9200      	str	r2, [sp, #0]
 800d63e:	f000 f893 	bl	800d768 <memset>
 800d642:	9a00      	ldr	r2, [sp, #0]
        for (i = 0; i < len; ++i) *str++ = *s++;
 800d644:	2300      	movs	r3, #0
 800d646:	4422      	add	r2, r4
 800d648:	4553      	cmp	r3, sl
 800d64a:	db02      	blt.n	800d652 <tiny_vsnprintf_like+0x132>
 800d64c:	eb02 040a 	add.w	r4, r2, sl
 800d650:	e780      	b.n	800d554 <tiny_vsnprintf_like+0x34>
 800d652:	f81b 1003 	ldrb.w	r1, [fp, r3]
 800d656:	54d1      	strb	r1, [r2, r3]
 800d658:	3301      	adds	r3, #1
 800d65a:	e7f5      	b.n	800d648 <tiny_vsnprintf_like+0x128>
        flags |= UPPERCASE;
 800d65c:	f04a 0a40 	orr.w	sl, sl, #64	@ 0x40
    switch (*fmt)
 800d660:	2110      	movs	r1, #16
  if (type & UPPERCASE)  dig = upper_digits;
 800d662:	4a3f      	ldr	r2, [pc, #252]	@ (800d760 <tiny_vsnprintf_like+0x240>)
      num = va_arg(args, int);
 800d664:	f856 cb04 	ldr.w	ip, [r6], #4
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800d668:	eba4 0309 	sub.w	r3, r4, r9
 800d66c:	1afb      	subs	r3, r7, r3
  if (type & UPPERCASE)  dig = upper_digits;
 800d66e:	f01a 0f40 	tst.w	sl, #64	@ 0x40
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800d672:	9300      	str	r3, [sp, #0]
  if (type & UPPERCASE)  dig = upper_digits;
 800d674:	4b3b      	ldr	r3, [pc, #236]	@ (800d764 <tiny_vsnprintf_like+0x244>)
 800d676:	bf18      	it	ne
 800d678:	4613      	movne	r3, r2
  c = (type & ZEROPAD) ? '0' : ' ';
 800d67a:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
  if (type & UPPERCASE)  dig = upper_digits;
 800d67e:	9302      	str	r3, [sp, #8]
  c = (type & ZEROPAD) ? '0' : ' ';
 800d680:	bf0c      	ite	eq
 800d682:	2330      	moveq	r3, #48	@ 0x30
 800d684:	2320      	movne	r3, #32
  if (type & SIGN)
 800d686:	f01a 0f02 	tst.w	sl, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800d68a:	4660      	mov	r0, ip
  c = (type & ZEROPAD) ? '0' : ' ';
 800d68c:	9303      	str	r3, [sp, #12]
  if (type & SIGN)
 800d68e:	d020      	beq.n	800d6d2 <tiny_vsnprintf_like+0x1b2>
    if (num < 0)
 800d690:	2800      	cmp	r0, #0
 800d692:	da1e      	bge.n	800d6d2 <tiny_vsnprintf_like+0x1b2>
      num = -num;
 800d694:	4240      	negs	r0, r0
      size--;
 800d696:	3d01      	subs	r5, #1
      sign = '-';
 800d698:	f04f 0c2d 	mov.w	ip, #45	@ 0x2d
    while (num != 0)
 800d69c:	ab05      	add	r3, sp, #20
 800d69e:	9301      	str	r3, [sp, #4]
  i = 0;
 800d6a0:	2200      	movs	r2, #0
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800d6a2:	4682      	mov	sl, r0
 800d6a4:	9b02      	ldr	r3, [sp, #8]
 800d6a6:	fbb0 f0f1 	udiv	r0, r0, r1
 800d6aa:	fb01 ab10 	mls	fp, r1, r0, sl
    while (num != 0)
 800d6ae:	4551      	cmp	r1, sl
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800d6b0:	f813 b00b 	ldrb.w	fp, [r3, fp]
 800d6b4:	9b01      	ldr	r3, [sp, #4]
 800d6b6:	f803 bb01 	strb.w	fp, [r3], #1
 800d6ba:	f102 0201 	add.w	r2, r2, #1
 800d6be:	9301      	str	r3, [sp, #4]
    while (num != 0)
 800d6c0:	d9ef      	bls.n	800d6a2 <tiny_vsnprintf_like+0x182>
 800d6c2:	e010      	b.n	800d6e6 <tiny_vsnprintf_like+0x1c6>
        flags |= SIGN;
 800d6c4:	f04a 0a02 	orr.w	sl, sl, #2
    base = 10;
 800d6c8:	210a      	movs	r1, #10
 800d6ca:	e7ca      	b.n	800d662 <tiny_vsnprintf_like+0x142>
          --fmt;
 800d6cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d6d0:	e772      	b.n	800d5b8 <tiny_vsnprintf_like+0x98>
  if (num == 0)
 800d6d2:	f1bc 0f00 	cmp.w	ip, #0
 800d6d6:	d002      	beq.n	800d6de <tiny_vsnprintf_like+0x1be>
 800d6d8:	f04f 0c00 	mov.w	ip, #0
 800d6dc:	e7de      	b.n	800d69c <tiny_vsnprintf_like+0x17c>
    tmp[i++] = '0';
 800d6de:	2230      	movs	r2, #48	@ 0x30
 800d6e0:	f88d 2014 	strb.w	r2, [sp, #20]
 800d6e4:	2201      	movs	r2, #1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800d6e6:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
  size -= precision;
 800d6ea:	eba5 0502 	sub.w	r5, r5, r2
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800d6ee:	d004      	beq.n	800d6fa <tiny_vsnprintf_like+0x1da>
 800d6f0:	2020      	movs	r0, #32
 800d6f2:	2d00      	cmp	r5, #0
 800d6f4:	f105 35ff 	add.w	r5, r5, #4294967295
 800d6f8:	dc0c      	bgt.n	800d714 <tiny_vsnprintf_like+0x1f4>
  if (sign) ASSIGN_STR(sign);
 800d6fa:	f1bc 0f00 	cmp.w	ip, #0
 800d6fe:	d007      	beq.n	800d710 <tiny_vsnprintf_like+0x1f0>
 800d700:	9b00      	ldr	r3, [sp, #0]
 800d702:	212d      	movs	r1, #45	@ 0x2d
 800d704:	3b01      	subs	r3, #1
 800d706:	f804 1b01 	strb.w	r1, [r4], #1
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	f43f af22 	beq.w	800d554 <tiny_vsnprintf_like+0x34>
 800d710:	4425      	add	r5, r4
 800d712:	e00e      	b.n	800d732 <tiny_vsnprintf_like+0x212>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800d714:	9b00      	ldr	r3, [sp, #0]
 800d716:	f804 0b01 	strb.w	r0, [r4], #1
 800d71a:	3b01      	subs	r3, #1
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	d1e8      	bne.n	800d6f2 <tiny_vsnprintf_like+0x1d2>
 800d720:	e718      	b.n	800d554 <tiny_vsnprintf_like+0x34>
  while (size-- > 0) ASSIGN_STR(c);
 800d722:	9b03      	ldr	r3, [sp, #12]
 800d724:	f804 3b01 	strb.w	r3, [r4], #1
 800d728:	9b00      	ldr	r3, [sp, #0]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	f43f af11 	beq.w	800d554 <tiny_vsnprintf_like+0x34>
 800d732:	1b29      	subs	r1, r5, r4
 800d734:	2900      	cmp	r1, #0
 800d736:	dcf4      	bgt.n	800d722 <tiny_vsnprintf_like+0x202>
 800d738:	ab05      	add	r3, sp, #20
 800d73a:	1899      	adds	r1, r3, r2
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800d73c:	9b00      	ldr	r3, [sp, #0]
 800d73e:	4422      	add	r2, r4
 800d740:	4423      	add	r3, r4
 800d742:	42a2      	cmp	r2, r4
 800d744:	f43f af06 	beq.w	800d554 <tiny_vsnprintf_like+0x34>
 800d748:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 800d74c:	f804 0b01 	strb.w	r0, [r4], #1
 800d750:	429c      	cmp	r4, r3
 800d752:	d1f6      	bne.n	800d742 <tiny_vsnprintf_like+0x222>
 800d754:	e6fe      	b.n	800d554 <tiny_vsnprintf_like+0x34>
    return 0;
 800d756:	2000      	movs	r0, #0
 800d758:	e6f2      	b.n	800d540 <tiny_vsnprintf_like+0x20>
 800d75a:	bf00      	nop
 800d75c:	0800e47c 	.word	0x0800e47c
 800d760:	0800e4a8 	.word	0x0800e4a8
 800d764:	0800e483 	.word	0x0800e483

0800d768 <memset>:
 800d768:	4402      	add	r2, r0
 800d76a:	4603      	mov	r3, r0
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d100      	bne.n	800d772 <memset+0xa>
 800d770:	4770      	bx	lr
 800d772:	f803 1b01 	strb.w	r1, [r3], #1
 800d776:	e7f9      	b.n	800d76c <memset+0x4>

0800d778 <__libc_init_array>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	4d0d      	ldr	r5, [pc, #52]	@ (800d7b0 <__libc_init_array+0x38>)
 800d77c:	4c0d      	ldr	r4, [pc, #52]	@ (800d7b4 <__libc_init_array+0x3c>)
 800d77e:	1b64      	subs	r4, r4, r5
 800d780:	10a4      	asrs	r4, r4, #2
 800d782:	2600      	movs	r6, #0
 800d784:	42a6      	cmp	r6, r4
 800d786:	d109      	bne.n	800d79c <__libc_init_array+0x24>
 800d788:	4d0b      	ldr	r5, [pc, #44]	@ (800d7b8 <__libc_init_array+0x40>)
 800d78a:	4c0c      	ldr	r4, [pc, #48]	@ (800d7bc <__libc_init_array+0x44>)
 800d78c:	f000 f8a4 	bl	800d8d8 <_init>
 800d790:	1b64      	subs	r4, r4, r5
 800d792:	10a4      	asrs	r4, r4, #2
 800d794:	2600      	movs	r6, #0
 800d796:	42a6      	cmp	r6, r4
 800d798:	d105      	bne.n	800d7a6 <__libc_init_array+0x2e>
 800d79a:	bd70      	pop	{r4, r5, r6, pc}
 800d79c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7a0:	4798      	blx	r3
 800d7a2:	3601      	adds	r6, #1
 800d7a4:	e7ee      	b.n	800d784 <__libc_init_array+0xc>
 800d7a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7aa:	4798      	blx	r3
 800d7ac:	3601      	adds	r6, #1
 800d7ae:	e7f2      	b.n	800d796 <__libc_init_array+0x1e>
 800d7b0:	0800e4d8 	.word	0x0800e4d8
 800d7b4:	0800e4d8 	.word	0x0800e4d8
 800d7b8:	0800e4d8 	.word	0x0800e4d8
 800d7bc:	0800e4dc 	.word	0x0800e4dc

0800d7c0 <memcpy>:
 800d7c0:	440a      	add	r2, r1
 800d7c2:	4291      	cmp	r1, r2
 800d7c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7c8:	d100      	bne.n	800d7cc <memcpy+0xc>
 800d7ca:	4770      	bx	lr
 800d7cc:	b510      	push	{r4, lr}
 800d7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7d6:	4291      	cmp	r1, r2
 800d7d8:	d1f9      	bne.n	800d7ce <memcpy+0xe>
 800d7da:	bd10      	pop	{r4, pc}
 800d7dc:	0000      	movs	r0, r0
	...

0800d7e0 <floor>:
 800d7e0:	ec51 0b10 	vmov	r0, r1, d0
 800d7e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d7f0:	2e13      	cmp	r6, #19
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	4680      	mov	r8, r0
 800d7f8:	dc34      	bgt.n	800d864 <floor+0x84>
 800d7fa:	2e00      	cmp	r6, #0
 800d7fc:	da17      	bge.n	800d82e <floor+0x4e>
 800d7fe:	a332      	add	r3, pc, #200	@ (adr r3, 800d8c8 <floor+0xe8>)
 800d800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d804:	f7f2 fcee 	bl	80001e4 <__adddf3>
 800d808:	2200      	movs	r2, #0
 800d80a:	2300      	movs	r3, #0
 800d80c:	f7f2 ff1e 	bl	800064c <__aeabi_dcmpgt>
 800d810:	b150      	cbz	r0, 800d828 <floor+0x48>
 800d812:	2c00      	cmp	r4, #0
 800d814:	da55      	bge.n	800d8c2 <floor+0xe2>
 800d816:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d81a:	432c      	orrs	r4, r5
 800d81c:	2500      	movs	r5, #0
 800d81e:	42ac      	cmp	r4, r5
 800d820:	4c2b      	ldr	r4, [pc, #172]	@ (800d8d0 <floor+0xf0>)
 800d822:	bf08      	it	eq
 800d824:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d828:	4621      	mov	r1, r4
 800d82a:	4628      	mov	r0, r5
 800d82c:	e023      	b.n	800d876 <floor+0x96>
 800d82e:	4f29      	ldr	r7, [pc, #164]	@ (800d8d4 <floor+0xf4>)
 800d830:	4137      	asrs	r7, r6
 800d832:	ea01 0307 	and.w	r3, r1, r7
 800d836:	4303      	orrs	r3, r0
 800d838:	d01d      	beq.n	800d876 <floor+0x96>
 800d83a:	a323      	add	r3, pc, #140	@ (adr r3, 800d8c8 <floor+0xe8>)
 800d83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d840:	f7f2 fcd0 	bl	80001e4 <__adddf3>
 800d844:	2200      	movs	r2, #0
 800d846:	2300      	movs	r3, #0
 800d848:	f7f2 ff00 	bl	800064c <__aeabi_dcmpgt>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d0eb      	beq.n	800d828 <floor+0x48>
 800d850:	2c00      	cmp	r4, #0
 800d852:	bfbe      	ittt	lt
 800d854:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d858:	4133      	asrlt	r3, r6
 800d85a:	18e4      	addlt	r4, r4, r3
 800d85c:	ea24 0407 	bic.w	r4, r4, r7
 800d860:	2500      	movs	r5, #0
 800d862:	e7e1      	b.n	800d828 <floor+0x48>
 800d864:	2e33      	cmp	r6, #51	@ 0x33
 800d866:	dd0a      	ble.n	800d87e <floor+0x9e>
 800d868:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d86c:	d103      	bne.n	800d876 <floor+0x96>
 800d86e:	4602      	mov	r2, r0
 800d870:	460b      	mov	r3, r1
 800d872:	f7f2 fcb7 	bl	80001e4 <__adddf3>
 800d876:	ec41 0b10 	vmov	d0, r0, r1
 800d87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d87e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d882:	f04f 37ff 	mov.w	r7, #4294967295
 800d886:	40df      	lsrs	r7, r3
 800d888:	4207      	tst	r7, r0
 800d88a:	d0f4      	beq.n	800d876 <floor+0x96>
 800d88c:	a30e      	add	r3, pc, #56	@ (adr r3, 800d8c8 <floor+0xe8>)
 800d88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d892:	f7f2 fca7 	bl	80001e4 <__adddf3>
 800d896:	2200      	movs	r2, #0
 800d898:	2300      	movs	r3, #0
 800d89a:	f7f2 fed7 	bl	800064c <__aeabi_dcmpgt>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d0c2      	beq.n	800d828 <floor+0x48>
 800d8a2:	2c00      	cmp	r4, #0
 800d8a4:	da0a      	bge.n	800d8bc <floor+0xdc>
 800d8a6:	2e14      	cmp	r6, #20
 800d8a8:	d101      	bne.n	800d8ae <floor+0xce>
 800d8aa:	3401      	adds	r4, #1
 800d8ac:	e006      	b.n	800d8bc <floor+0xdc>
 800d8ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	40b3      	lsls	r3, r6
 800d8b6:	441d      	add	r5, r3
 800d8b8:	4545      	cmp	r5, r8
 800d8ba:	d3f6      	bcc.n	800d8aa <floor+0xca>
 800d8bc:	ea25 0507 	bic.w	r5, r5, r7
 800d8c0:	e7b2      	b.n	800d828 <floor+0x48>
 800d8c2:	2500      	movs	r5, #0
 800d8c4:	462c      	mov	r4, r5
 800d8c6:	e7af      	b.n	800d828 <floor+0x48>
 800d8c8:	8800759c 	.word	0x8800759c
 800d8cc:	7e37e43c 	.word	0x7e37e43c
 800d8d0:	bff00000 	.word	0xbff00000
 800d8d4:	000fffff 	.word	0x000fffff

0800d8d8 <_init>:
 800d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8da:	bf00      	nop
 800d8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8de:	bc08      	pop	{r3}
 800d8e0:	469e      	mov	lr, r3
 800d8e2:	4770      	bx	lr

0800d8e4 <_fini>:
 800d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e6:	bf00      	nop
 800d8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ea:	bc08      	pop	{r3}
 800d8ec:	469e      	mov	lr, r3
 800d8ee:	4770      	bx	lr
