
sx1262dvk1das.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c818  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  0800c958  0800c958  0000d958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d510  0800d510  0000e510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d518  0800d518  0000e518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d51c  0800d51c  0000e51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000dc  20000000  0800d520  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001718  200000dc  0800d5fc  0000f0dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  200017f4  0800d5fc  0000f7f4  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0000f0dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d166  00000000  00000000  0000f105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000ac31  00000000  00000000  0004c26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022d8  00000000  00000000  00056ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000025e3  00000000  00000000  00059178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020321  00000000  00000000  0005b75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f20c  00000000  00000000  0007ba7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b4fd6  00000000  00000000  000bac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0016fc5e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ffc  00000000  00000000  0016fca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001009a  00000000  00000000  00175ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000124  00000000  00000000  00185d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000dc 	.word	0x200000dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c940 	.word	0x0800c940

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e0 	.word	0x200000e0
 800017c:	0800c940 	.word	0x0800c940

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	@ 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_fmul>:
 8000884:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800088c:	bf1e      	ittt	ne
 800088e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000892:	ea92 0f0c 	teqne	r2, ip
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d06f      	beq.n	800097c <__aeabi_fmul+0xf8>
 800089c:	441a      	add	r2, r3
 800089e:	ea80 0c01 	eor.w	ip, r0, r1
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	bf18      	it	ne
 80008a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008aa:	d01e      	beq.n	80008ea <__aeabi_fmul+0x66>
 80008ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b8:	fba0 3101 	umull	r3, r1, r0, r1
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008c0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008c4:	bf3e      	ittt	cc
 80008c6:	0049      	lslcc	r1, r1, #1
 80008c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008cc:	005b      	lslcc	r3, r3, #1
 80008ce:	ea40 0001 	orr.w	r0, r0, r1
 80008d2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008d6:	2afd      	cmp	r2, #253	@ 0xfd
 80008d8:	d81d      	bhi.n	8000916 <__aeabi_fmul+0x92>
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e2:	bf08      	it	eq
 80008e4:	f020 0001 	biceq.w	r0, r0, #1
 80008e8:	4770      	bx	lr
 80008ea:	f090 0f00 	teq	r0, #0
 80008ee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008f2:	bf08      	it	eq
 80008f4:	0249      	lsleq	r1, r1, #9
 80008f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008fe:	3a7f      	subs	r2, #127	@ 0x7f
 8000900:	bfc2      	ittt	gt
 8000902:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800090a:	4770      	bxgt	lr
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	3a01      	subs	r2, #1
 8000916:	dc5d      	bgt.n	80009d4 <__aeabi_fmul+0x150>
 8000918:	f112 0f19 	cmn.w	r2, #25
 800091c:	bfdc      	itt	le
 800091e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000922:	4770      	bxle	lr
 8000924:	f1c2 0200 	rsb	r2, r2, #0
 8000928:	0041      	lsls	r1, r0, #1
 800092a:	fa21 f102 	lsr.w	r1, r1, r2
 800092e:	f1c2 0220 	rsb	r2, r2, #32
 8000932:	fa00 fc02 	lsl.w	ip, r0, r2
 8000936:	ea5f 0031 	movs.w	r0, r1, rrx
 800093a:	f140 0000 	adc.w	r0, r0, #0
 800093e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000942:	bf08      	it	eq
 8000944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000948:	4770      	bx	lr
 800094a:	f092 0f00 	teq	r2, #0
 800094e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0040      	lsleq	r0, r0, #1
 8000956:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800095a:	3a01      	subeq	r2, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fmul+0xce>
 800095e:	ea40 000c 	orr.w	r0, r0, ip
 8000962:	f093 0f00 	teq	r3, #0
 8000966:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0049      	lsleq	r1, r1, #1
 800096e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000972:	3b01      	subeq	r3, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fmul+0xe6>
 8000976:	ea41 010c 	orr.w	r1, r1, ip
 800097a:	e78f      	b.n	800089c <__aeabi_fmul+0x18>
 800097c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000980:	ea92 0f0c 	teq	r2, ip
 8000984:	bf18      	it	ne
 8000986:	ea93 0f0c 	teqne	r3, ip
 800098a:	d00a      	beq.n	80009a2 <__aeabi_fmul+0x11e>
 800098c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000990:	bf18      	it	ne
 8000992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000996:	d1d8      	bne.n	800094a <__aeabi_fmul+0xc6>
 8000998:	ea80 0001 	eor.w	r0, r0, r1
 800099c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f090 0f00 	teq	r0, #0
 80009a6:	bf17      	itett	ne
 80009a8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009ac:	4608      	moveq	r0, r1
 80009ae:	f091 0f00 	teqne	r1, #0
 80009b2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009b6:	d014      	beq.n	80009e2 <__aeabi_fmul+0x15e>
 80009b8:	ea92 0f0c 	teq	r2, ip
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fmul+0x13e>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d10f      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009c2:	ea93 0f0c 	teq	r3, ip
 80009c6:	d103      	bne.n	80009d0 <__aeabi_fmul+0x14c>
 80009c8:	024b      	lsls	r3, r1, #9
 80009ca:	bf18      	it	ne
 80009cc:	4608      	movne	r0, r1
 80009ce:	d108      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009d0:	ea80 0001 	eor.w	r0, r0, r1
 80009d4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009e6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009ea:	4770      	bx	lr

080009ec <__aeabi_fdiv>:
 80009ec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f4:	bf1e      	ittt	ne
 80009f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009fa:	ea92 0f0c 	teqne	r2, ip
 80009fe:	ea93 0f0c 	teqne	r3, ip
 8000a02:	d069      	beq.n	8000ad8 <__aeabi_fdiv+0xec>
 8000a04:	eba2 0203 	sub.w	r2, r2, r3
 8000a08:	ea80 0c01 	eor.w	ip, r0, r1
 8000a0c:	0249      	lsls	r1, r1, #9
 8000a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a12:	d037      	beq.n	8000a84 <__aeabi_fdiv+0x98>
 8000a14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf38      	it	cc
 8000a28:	005b      	lslcc	r3, r3, #1
 8000a2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf24      	itt	cs
 8000a36:	1a5b      	subcs	r3, r3, r1
 8000a38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a4e:	bf24      	itt	cs
 8000a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a5c:	bf24      	itt	cs
 8000a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a6e:	d1e0      	bne.n	8000a32 <__aeabi_fdiv+0x46>
 8000a70:	2afd      	cmp	r2, #253	@ 0xfd
 8000a72:	f63f af50 	bhi.w	8000916 <__aeabi_fmul+0x92>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8c:	327f      	adds	r2, #127	@ 0x7f
 8000a8e:	bfc2      	ittt	gt
 8000a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a98:	4770      	bxgt	lr
 8000a9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	e737      	b.n	8000916 <__aeabi_fmul+0x92>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0040      	lsleq	r0, r0, #1
 8000ab2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ab6:	3a01      	subeq	r2, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fdiv+0xc2>
 8000aba:	ea40 000c 	orr.w	r0, r0, ip
 8000abe:	f093 0f00 	teq	r3, #0
 8000ac2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac6:	bf02      	ittt	eq
 8000ac8:	0049      	lsleq	r1, r1, #1
 8000aca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ace:	3b01      	subeq	r3, #1
 8000ad0:	d0f9      	beq.n	8000ac6 <__aeabi_fdiv+0xda>
 8000ad2:	ea41 010c 	orr.w	r1, r1, ip
 8000ad6:	e795      	b.n	8000a04 <__aeabi_fdiv+0x18>
 8000ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000adc:	ea92 0f0c 	teq	r2, ip
 8000ae0:	d108      	bne.n	8000af4 <__aeabi_fdiv+0x108>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	f47f af7d 	bne.w	80009e2 <__aeabi_fmul+0x15e>
 8000ae8:	ea93 0f0c 	teq	r3, ip
 8000aec:	f47f af70 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e776      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	d104      	bne.n	8000b04 <__aeabi_fdiv+0x118>
 8000afa:	024b      	lsls	r3, r1, #9
 8000afc:	f43f af4c 	beq.w	8000998 <__aeabi_fmul+0x114>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e76e      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b0e:	d1ca      	bne.n	8000aa6 <__aeabi_fdiv+0xba>
 8000b10:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b14:	f47f af5c 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000b18:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b1c:	f47f af3c 	bne.w	8000998 <__aeabi_fmul+0x114>
 8000b20:	e75f      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b22:	bf00      	nop

08000b24 <__aeabi_f2uiz>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	d20e      	bcs.n	8000b46 <__aeabi_f2uiz+0x22>
 8000b28:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b2c:	d30b      	bcc.n	8000b46 <__aeabi_f2uiz+0x22>
 8000b2e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b36:	d409      	bmi.n	8000b4c <__aeabi_f2uiz+0x28>
 8000b38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b40:	fa23 f002 	lsr.w	r0, r3, r2
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2uiz+0x32>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d102      	bne.n	8000b5c <__aeabi_f2uiz+0x38>
 8000b56:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b968 	b.w	8000e4c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bca:	fb07 1114 	mls	r1, r7, r4, r1
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8110 	bcs.w	8000e0e <__udivmoddi4+0x27a>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810d 	bls.w	8000e0e <__udivmoddi4+0x27a>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bfe:	fb07 1110 	mls	r1, r7, r0, r1
 8000c02:	fb00 f606 	mul.w	r6, r0, r6
 8000c06:	fa1f f38e 	uxth.w	r3, lr
 8000c0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fa 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f7 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	2100      	movs	r1, #0
 8000c2a:	1b9b      	subs	r3, r3, r6
 8000c2c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80ee 	bcc.w	8000e3c <__udivmoddi4+0x2a8>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 808f 	bne.w	8000d96 <__udivmoddi4+0x202>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c8e:	fb07 f006 	mul.w	r0, r7, r6
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cb6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cba:	fb00 f707 	mul.w	r7, r0, r7
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80ae 	bhi.w	8000e36 <__udivmoddi4+0x2a2>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa24 f607 	lsr.w	r6, r4, r7
 8000cf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfa:	fbb6 f8f9 	udiv	r8, r6, r9
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	fb09 6618 	mls	r6, r9, r8, r6
 8000d06:	fa20 f307 	lsr.w	r3, r0, r7
 8000d0a:	408c      	lsls	r4, r1
 8000d0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d10:	fb08 f00e 	mul.w	r0, r8, lr
 8000d14:	431c      	orrs	r4, r3
 8000d16:	0c23      	lsrs	r3, r4, #16
 8000d18:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	eb1c 0303 	adds.w	r3, ip, r3
 8000d28:	f108 36ff 	add.w	r6, r8, #4294967295
 8000d2c:	f080 8081 	bcs.w	8000e32 <__udivmoddi4+0x29e>
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d97e      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000d34:	f1a8 0802 	sub.w	r8, r8, #2
 8000d38:	4463      	add	r3, ip
 8000d3a:	1a1e      	subs	r6, r3, r0
 8000d3c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d40:	fb09 6613 	mls	r6, r9, r3, r6
 8000d44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d48:	b2a4      	uxth	r4, r4
 8000d4a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x1d0>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5a:	d266      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d964      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000d60:	3b02      	subs	r3, #2
 8000d62:	4464      	add	r4, ip
 8000d64:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d68:	fba0 8302 	umull	r8, r3, r0, r2
 8000d6c:	eba4 040e 	sub.w	r4, r4, lr
 8000d70:	429c      	cmp	r4, r3
 8000d72:	46c6      	mov	lr, r8
 8000d74:	461e      	mov	r6, r3
 8000d76:	d350      	bcc.n	8000e1a <__udivmoddi4+0x286>
 8000d78:	d04d      	beq.n	8000e16 <__udivmoddi4+0x282>
 8000d7a:	b155      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7c:	ebba 030e 	subs.w	r3, sl, lr
 8000d80:	eb64 0406 	sbc.w	r4, r4, r6
 8000d84:	fa04 f707 	lsl.w	r7, r4, r7
 8000d88:	40cb      	lsrs	r3, r1
 8000d8a:	431f      	orrs	r7, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 7400 	strd	r7, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e751      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d96:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dac:	fbb1 f0f8 	udiv	r0, r1, r8
 8000db0:	fb08 1110 	mls	r1, r8, r0, r1
 8000db4:	4094      	lsls	r4, r2
 8000db6:	431c      	orrs	r4, r3
 8000db8:	fa1f f78c 	uxth.w	r7, ip
 8000dbc:	0c23      	lsrs	r3, r4, #16
 8000dbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc2:	fb00 f107 	mul.w	r1, r0, r7
 8000dc6:	4299      	cmp	r1, r3
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x248>
 8000dca:	eb1c 0303 	adds.w	r3, ip, r3
 8000dce:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd2:	d22c      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	d92a      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de2:	fb08 3311 	mls	r3, r8, r1, r3
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dec:	fb01 f307 	mul.w	r3, r1, r7
 8000df0:	42a3      	cmp	r3, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x272>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dfc:	d213      	bcs.n	8000e26 <__udivmoddi4+0x292>
 8000dfe:	42a3      	cmp	r3, r4
 8000e00:	d911      	bls.n	8000e26 <__udivmoddi4+0x292>
 8000e02:	3902      	subs	r1, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	1ae4      	subs	r4, r4, r3
 8000e08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e0e:	4604      	mov	r4, r0
 8000e10:	e6f2      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e12:	4608      	mov	r0, r1
 8000e14:	e708      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e16:	45c2      	cmp	sl, r8
 8000e18:	d2af      	bcs.n	8000d7a <__udivmoddi4+0x1e6>
 8000e1a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e1e:	eb63 060c 	sbc.w	r6, r3, ip
 8000e22:	3801      	subs	r0, #1
 8000e24:	e7a9      	b.n	8000d7a <__udivmoddi4+0x1e6>
 8000e26:	4631      	mov	r1, r6
 8000e28:	e7ed      	b.n	8000e06 <__udivmoddi4+0x272>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	e79a      	b.n	8000d64 <__udivmoddi4+0x1d0>
 8000e2e:	4630      	mov	r0, r6
 8000e30:	e7d4      	b.n	8000ddc <__udivmoddi4+0x248>
 8000e32:	46b0      	mov	r8, r6
 8000e34:	e781      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e36:	4463      	add	r3, ip
 8000e38:	3802      	subs	r0, #2
 8000e3a:	e74f      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	4623      	mov	r3, r4
 8000e40:	4608      	mov	r0, r1
 8000e42:	e711      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e44:	3e02      	subs	r6, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8000e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8000e52:	f000 fe57 	bl	8001b04 <SystemApp_Init>
  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8000e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LoRaWAN_Init();
 8000e5a:	f000 b977 	b.w	800114c <LoRaWAN_Init>

08000e5e <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e62:	f00b b8df 	b.w	800c024 <UTIL_SEQ_Run>

08000e66 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
  LED_Off(LED_RED2);
}
 8000e66:	4770      	bx	lr

08000e68 <OnTxTimerEvent>:
{
 8000e68:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f00b f8a3 	bl	800bfb8 <UTIL_SEQ_SetTask>
}
 8000e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_TIMER_Start(&TxTimer);
 8000e76:	4801      	ldr	r0, [pc, #4]	@ (8000e7c <OnTxTimerEvent+0x14>)
 8000e78:	f00b baf0 	b.w	800c45c <UTIL_TIMER_Start>
 8000e7c:	200000f8 	.word	0x200000f8

08000e80 <OnMacProcessNotify>:
static void OnMacProcessNotify(void)
{
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	2001      	movs	r0, #1
 8000e84:	f00b b898 	b.w	800bfb8 <UTIL_SEQ_SetTask>

08000e88 <OnRxData>:
{
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	460d      	mov	r5, r1
  if ((appData != NULL) || (params != NULL))
 8000e8c:	4604      	mov	r4, r0
{
 8000e8e:	b086      	sub	sp, #24
  if ((appData != NULL) || (params != NULL))
 8000e90:	b908      	cbnz	r0, 8000e96 <OnRxData+0xe>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d04c      	beq.n	8000f30 <OnRxData+0xa8>
    UTIL_TIMER_Start(&RxLedTimer);
 8000e96:	4e27      	ldr	r6, [pc, #156]	@ (8000f34 <OnRxData+0xac>)
 8000e98:	f106 0018 	add.w	r0, r6, #24
 8000e9c:	f00b fade 	bl	800c45c <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <OnRxData+0xb0>)
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f00a ff66 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8000eac:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	9305      	str	r3, [sp, #20]
 8000eb4:	f995 3003 	ldrsb.w	r3, [r5, #3]
 8000eb8:	9304      	str	r3, [sp, #16]
 8000eba:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	7823      	ldrb	r3, [r4, #0]
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <OnRxData+0xb4>)
 8000eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	68ab      	ldr	r3, [r5, #8]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <OnRxData+0xb8>)
 8000eda:	f00a ff4d 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8000ede:	7823      	ldrb	r3, [r4, #0]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d010      	beq.n	8000f06 <OnRxData+0x7e>
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d123      	bne.n	8000f30 <OnRxData+0xa8>
        if (appData->BufferSize == 1)
 8000ee8:	7863      	ldrb	r3, [r4, #1]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d120      	bne.n	8000f30 <OnRxData+0xa8>
          switch (appData->Buffer[0])
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	7818      	ldrb	r0, [r3, #0]
 8000ef2:	2801      	cmp	r0, #1
 8000ef4:	d002      	beq.n	8000efc <OnRxData+0x74>
 8000ef6:	2802      	cmp	r0, #2
 8000ef8:	d000      	beq.n	8000efc <OnRxData+0x74>
 8000efa:	b9c8      	cbnz	r0, 8000f30 <OnRxData+0xa8>
}
 8000efc:	b006      	add	sp, #24
 8000efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              LmHandlerRequestClass(CLASS_C);
 8000f02:	f004 bc55 	b.w	80057b0 <LmHandlerRequestClass>
        if (appData->BufferSize == 1)
 8000f06:	7863      	ldrb	r3, [r4, #1]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d111      	bne.n	8000f30 <OnRxData+0xa8>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8000f0c:	6863      	ldr	r3, [r4, #4]
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	f002 0201 	and.w	r2, r2, #1
 8000f14:	f886 2030 	strb.w	r2, [r6, #48]	@ 0x30
          if (AppLedStateOn == RESET)
 8000f18:	b93a      	cbnz	r2, 8000f2a <OnRxData+0xa2>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <OnRxData+0xbc>)
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	2003      	movs	r0, #3
}
 8000f20:	b006      	add	sp, #24
 8000f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8000f26:	f00a bf27 	b.w	800bd78 <UTIL_ADV_TRACE_COND_FSend>
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <OnRxData+0xc0>)
 8000f2e:	e7f5      	b.n	8000f1c <OnRxData+0x94>
}
 8000f30:	b006      	add	sp, #24
 8000f32:	bd70      	pop	{r4, r5, r6, pc}
 8000f34:	200000f8 	.word	0x200000f8
 8000f38:	0800cf51 	.word	0x0800cf51
 8000f3c:	0800c958 	.word	0x0800c958
 8000f40:	0800cf82 	.word	0x0800cf82
 8000f44:	0800cfc9 	.word	0x0800cfc9
 8000f48:	0800cfd3 	.word	0x0800cfd3

08000f4c <SendTxData>:
{
 8000f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  UTIL_TIMER_Time_t nextTxIn = 0;
 8000f50:	2700      	movs	r7, #0
{
 8000f52:	b08a      	sub	sp, #40	@ 0x28
  EnvSensors_Read(&sensor_data);
 8000f54:	a804      	add	r0, sp, #16
  UTIL_TIMER_Time_t nextTxIn = 0;
 8000f56:	9703      	str	r7, [sp, #12]
  EnvSensors_Read(&sensor_data);
 8000f58:	f000 fee4 	bl	8001d24 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8000f5c:	f000 fa4a 	bl	80013f4 <SYS_GetTemperatureLevel>
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8000f60:	4936      	ldr	r1, [pc, #216]	@ (800103c <SendTxData+0xf0>)
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8000f62:	4605      	mov	r5, r0
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8000f64:	9804      	ldr	r0, [sp, #16]
 8000f66:	f7ff fc8d 	bl	8000884 <__aeabi_fmul>
 8000f6a:	4935      	ldr	r1, [pc, #212]	@ (8001040 <SendTxData+0xf4>)
 8000f6c:	f7ff fd3e 	bl	80009ec <__aeabi_fdiv>
 8000f70:	f7ff fdd8 	bl	8000b24 <__aeabi_f2uiz>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8000f74:	2302      	movs	r3, #2
 8000f76:	4c33      	ldr	r4, [pc, #204]	@ (8001044 <SendTxData+0xf8>)
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8000f78:	b286      	uxth	r6, r0
  AppData.Port = LORAWAN_USER_APP_PORT;
 8000f7a:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8000f7c:	9806      	ldr	r0, [sp, #24]
 8000f7e:	4930      	ldr	r1, [pc, #192]	@ (8001040 <SendTxData+0xf4>)
 8000f80:	f7ff fc80 	bl	8000884 <__aeabi_fmul>
 8000f84:	f7ff fdce 	bl	8000b24 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8000f88:	4a2f      	ldr	r2, [pc, #188]	@ (8001048 <SendTxData+0xfc>)
 8000f8a:	6863      	ldr	r3, [r4, #4]
 8000f8c:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8000f90:	122d      	asrs	r5, r5, #8
  AppData.Buffer[i++] = AppLedStateOn;
 8000f92:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8000f94:	6863      	ldr	r3, [r4, #4]
 8000f96:	0a32      	lsrs	r2, r6, #8
 8000f98:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8000f9a:	6863      	ldr	r3, [r4, #4]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8000f9c:	f3c0 2207 	ubfx	r2, r0, #8, #8
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8000fa0:	709e      	strb	r6, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8000fa2:	6863      	ldr	r3, [r4, #4]
 8000fa4:	70dd      	strb	r5, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8000fa6:	6863      	ldr	r3, [r4, #4]
 8000fa8:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8000faa:	6863      	ldr	r3, [r4, #4]
 8000fac:	7158      	strb	r0, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8000fae:	7a23      	ldrb	r3, [r4, #8]
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d001      	beq.n	8000fb8 <SendTxData+0x6c>
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d819      	bhi.n	8000fec <SendTxData+0xa0>
    AppData.Buffer[i++] = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	6862      	ldr	r2, [r4, #4]
 8000fbc:	7193      	strb	r3, [r2, #6]
    AppData.Buffer[i++] = 0;
 8000fbe:	6862      	ldr	r2, [r4, #4]
 8000fc0:	71d3      	strb	r3, [r2, #7]
    AppData.Buffer[i++] = 0;
 8000fc2:	6862      	ldr	r2, [r4, #4]
 8000fc4:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8000fc6:	7253      	strb	r3, [r2, #9]
 8000fc8:	230a      	movs	r3, #10
  AppData.BufferSize = i;
 8000fca:	7063      	strb	r3, [r4, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8000fcc:	2300      	movs	r3, #0
 8000fce:	481d      	ldr	r0, [pc, #116]	@ (8001044 <SendTxData+0xf8>)
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	aa03      	add	r2, sp, #12
 8000fd4:	f004 fc88 	bl	80058e8 <LmHandlerSend>
 8000fd8:	4601      	mov	r1, r0
 8000fda:	b9f8      	cbnz	r0, 800101c <SendTxData+0xd0>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <SendTxData+0x100>)
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	f00a fec9 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
}
 8000fe6:	b00a      	add	sp, #40	@ 0x28
 8000fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    longitude = sensor_data.longitude;
 8000fec:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8000ff0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000ff4:	f000 fe06 	bl	8001c04 <GetBatteryLevel>
 8000ff8:	f888 0006 	strb.w	r0, [r8, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8000ffc:	6863      	ldr	r3, [r4, #4]
 8000ffe:	142a      	asrs	r2, r5, #16
 8001000:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8001002:	6863      	ldr	r3, [r4, #4]
 8001004:	122a      	asrs	r2, r5, #8
 8001006:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8001008:	1432      	asrs	r2, r6, #16
 800100a:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800100c:	1232      	asrs	r2, r6, #8
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800100e:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8001010:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8001012:	731e      	strb	r6, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8001014:	735f      	strb	r7, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8001016:	739f      	strb	r7, [r3, #14]
 8001018:	230f      	movs	r3, #15
 800101a:	e7d6      	b.n	8000fca <SendTxData+0x7e>
  else if (nextTxIn > 0)
 800101c:	9b03      	ldr	r3, [sp, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0e1      	beq.n	8000fe6 <SendTxData+0x9a>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8001022:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001026:	fbb3 f3f2 	udiv	r3, r3, r2
 800102a:	2201      	movs	r2, #1
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2100      	movs	r1, #0
 8001030:	4610      	mov	r0, r2
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <SendTxData+0x104>)
 8001034:	f00a fea0 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
}
 8001038:	e7d5      	b.n	8000fe6 <SendTxData+0x9a>
 800103a:	bf00      	nop
 800103c:	42c80000 	.word	0x42c80000
 8001040:	41200000 	.word	0x41200000
 8001044:	20000000 	.word	0x20000000
 8001048:	200000f8 	.word	0x200000f8
 800104c:	0800cfdc 	.word	0x0800cfdc
 8001050:	0800cfeb 	.word	0x0800cfeb

08001054 <OnTxData>:
{
 8001054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if ((params != NULL))
 8001056:	4604      	mov	r4, r0
 8001058:	2800      	cmp	r0, #0
 800105a:	d031      	beq.n	80010c0 <OnTxData+0x6c>
    if (params->IsMcpsConfirm != 0)
 800105c:	7803      	ldrb	r3, [r0, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d02e      	beq.n	80010c0 <OnTxData+0x6c>
      UTIL_TIMER_Start(&TxLedTimer);
 8001062:	481d      	ldr	r0, [pc, #116]	@ (80010d8 <OnTxData+0x84>)
 8001064:	f00b f9fa 	bl	800c45c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8001068:	2200      	movs	r2, #0
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <OnTxData+0x88>)
 800106c:	4611      	mov	r1, r2
 800106e:	2002      	movs	r0, #2
 8001070:	f00a fe82 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8001074:	2200      	movs	r2, #0
 8001076:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800107a:	4611      	mov	r1, r2
 800107c:	9303      	str	r3, [sp, #12]
 800107e:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8001082:	2003      	movs	r0, #3
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	7b23      	ldrb	r3, [r4, #12]
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	68a3      	ldr	r3, [r4, #8]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <OnTxData+0x8c>)
 8001090:	f00a fe72 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001094:	2200      	movs	r2, #0
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <OnTxData+0x90>)
 8001098:	4611      	mov	r1, r2
 800109a:	2003      	movs	r0, #3
 800109c:	f00a fe6c 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80010a0:	78a3      	ldrb	r3, [r4, #2]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10e      	bne.n	80010c4 <OnTxData+0x70>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80010a6:	78e1      	ldrb	r1, [r4, #3]
 80010a8:	4a0f      	ldr	r2, [pc, #60]	@ (80010e8 <OnTxData+0x94>)
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <OnTxData+0x98>)
 80010ac:	2003      	movs	r0, #3
 80010ae:	2900      	cmp	r1, #0
 80010b0:	bf18      	it	ne
 80010b2:	4613      	movne	r3, r2
 80010b4:	2200      	movs	r2, #0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <OnTxData+0x9c>)
 80010bc:	f00a fe5c 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
}
 80010c0:	b004      	add	sp, #16
 80010c2:	bd10      	pop	{r4, pc}
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80010c4:	2200      	movs	r2, #0
 80010c6:	2003      	movs	r0, #3
 80010c8:	4611      	mov	r1, r2
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <OnTxData+0xa0>)
}
 80010cc:	b004      	add	sp, #16
 80010ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80010d2:	f00a be51 	b.w	800bd78 <UTIL_ADV_TRACE_COND_FSend>
 80010d6:	bf00      	nop
 80010d8:	2000012c 	.word	0x2000012c
 80010dc:	0800d00e 	.word	0x0800d00e
 80010e0:	0800d03f 	.word	0x0800d03f
 80010e4:	0800d070 	.word	0x0800d070
 80010e8:	0800d00a 	.word	0x0800d00a
 80010ec:	0800d009 	.word	0x0800d009
 80010f0:	0800d07d 	.word	0x0800d07d
 80010f4:	0800d08e 	.word	0x0800d08e

080010f8 <OnJoinRequest>:
{
 80010f8:	b570      	push	{r4, r5, r6, lr}
  if (joinParams != NULL)
 80010fa:	4605      	mov	r5, r0
 80010fc:	b1c8      	cbz	r0, 8001132 <OnJoinRequest+0x3a>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80010fe:	f990 4001 	ldrsb.w	r4, [r0, #1]
 8001102:	b9a4      	cbnz	r4, 800112e <OnJoinRequest+0x36>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001104:	480b      	ldr	r0, [pc, #44]	@ (8001134 <OnJoinRequest+0x3c>)
 8001106:	f00b f95b 	bl	800c3c0 <UTIL_TIMER_Stop>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <OnJoinRequest+0x40>)
 800110c:	4622      	mov	r2, r4
 800110e:	4621      	mov	r1, r4
 8001110:	2002      	movs	r0, #2
 8001112:	f00a fe31 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8001116:	78ab      	ldrb	r3, [r5, #2]
 8001118:	2b01      	cmp	r3, #1
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800111a:	bf0c      	ite	eq
 800111c:	4b07      	ldreq	r3, [pc, #28]	@ (800113c <OnJoinRequest+0x44>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800111e:	4b08      	ldrne	r3, [pc, #32]	@ (8001140 <OnJoinRequest+0x48>)
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001120:	2200      	movs	r2, #0
}
 8001122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001126:	4611      	mov	r1, r2
 8001128:	2002      	movs	r0, #2
 800112a:	f00a be25 	b.w	800bd78 <UTIL_ADV_TRACE_COND_FSend>
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <OnJoinRequest+0x4c>)
 8001130:	e7f6      	b.n	8001120 <OnJoinRequest+0x28>
}
 8001132:	bd70      	pop	{r4, r5, r6, pc}
 8001134:	20000144 	.word	0x20000144
 8001138:	0800d09c 	.word	0x0800d09c
 800113c:	0800d0b1 	.word	0x0800d0b1
 8001140:	0800d0ce 	.word	0x0800d0ce
 8001144:	0800d0eb 	.word	0x0800d0eb

08001148 <OnJoinTimerLedEvent>:
static void OnJoinTimerLedEvent(void *context)
 8001148:	4770      	bx	lr

0800114a <OnRxTimerLedEvent>:
static void OnRxTimerLedEvent(void *context)
 800114a:	4770      	bx	lr

0800114c <LoRaWAN_Init>:
{
 800114c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001150:	2400      	movs	r4, #0
 8001152:	2601      	movs	r6, #1
 8001154:	4622      	mov	r2, r4
 8001156:	4621      	mov	r1, r4
 8001158:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800115c:	9600      	str	r6, [sp, #0]
 800115e:	4b3a      	ldr	r3, [pc, #232]	@ (8001248 <LoRaWAN_Init+0xfc>)
 8001160:	2002      	movs	r0, #2
 8001162:	f00a fe09 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001166:	2702      	movs	r7, #2
 8001168:	2303      	movs	r3, #3
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800116a:	4d38      	ldr	r5, [pc, #224]	@ (800124c <LoRaWAN_Init+0x100>)
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800116c:	4622      	mov	r2, r4
 800116e:	4621      	mov	r1, r4
 8001170:	e9cd 7300 	strd	r7, r3, [sp]
 8001174:	4638      	mov	r0, r7
 8001176:	4b36      	ldr	r3, [pc, #216]	@ (8001250 <LoRaWAN_Init+0x104>)
 8001178:	9402      	str	r4, [sp, #8]
 800117a:	f00a fdfd 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800117e:	f105 0a34 	add.w	sl, r5, #52	@ 0x34
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8001182:	4622      	mov	r2, r4
 8001184:	4621      	mov	r1, r4
 8001186:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800118a:	9600      	str	r6, [sp, #0]
 800118c:	4638      	mov	r0, r7
 800118e:	4b31      	ldr	r3, [pc, #196]	@ (8001254 <LoRaWAN_Init+0x108>)
 8001190:	f00a fdf2 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8001194:	f105 0918 	add.w	r9, r5, #24
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8001198:	4622      	mov	r2, r4
 800119a:	f04f 31ff 	mov.w	r1, #4294967295
 800119e:	4650      	mov	r0, sl
 80011a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <LoRaWAN_Init+0x10c>)
 80011a2:	9400      	str	r4, [sp, #0]
 80011a4:	f00b f8ae 	bl	800c304 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80011a8:	f105 084c 	add.w	r8, r5, #76	@ 0x4c
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80011ac:	4622      	mov	r2, r4
 80011ae:	f04f 31ff 	mov.w	r1, #4294967295
 80011b2:	4648      	mov	r0, r9
 80011b4:	4b29      	ldr	r3, [pc, #164]	@ (800125c <LoRaWAN_Init+0x110>)
 80011b6:	9400      	str	r4, [sp, #0]
 80011b8:	f00b f8a4 	bl	800c304 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80011bc:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <LoRaWAN_Init+0x114>)
 80011be:	4632      	mov	r2, r6
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	4640      	mov	r0, r8
 80011c6:	9400      	str	r4, [sp, #0]
 80011c8:	f00b f89c 	bl	800c304 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 80011cc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80011d0:	4650      	mov	r0, sl
 80011d2:	f00b f97d 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 80011d6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80011da:	4648      	mov	r0, r9
 80011dc:	f00b f978 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 80011e0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80011e4:	4640      	mov	r0, r8
 80011e6:	f00b f973 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80011ea:	4621      	mov	r1, r4
 80011ec:	4630      	mov	r0, r6
 80011ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <LoRaWAN_Init+0x118>)
  LmHandlerInit(&LmHandlerCallbacks);
 80011f0:	4e1d      	ldr	r6, [pc, #116]	@ (8001268 <LoRaWAN_Init+0x11c>)
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80011f2:	f00a ff89 	bl	800c108 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80011f6:	4621      	mov	r1, r4
 80011f8:	4a1c      	ldr	r2, [pc, #112]	@ (800126c <LoRaWAN_Init+0x120>)
 80011fa:	4638      	mov	r0, r7
 80011fc:	f00a ff84 	bl	800c108 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8001200:	f000 f840 	bl	8001284 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8001204:	f106 0018 	add.w	r0, r6, #24
 8001208:	f004 fd40 	bl	8005c8c <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 800120c:	f106 0008 	add.w	r0, r6, #8
 8001210:	f004 f9cc 	bl	80055ac <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8001214:	4640      	mov	r0, r8
 8001216:	f00b f921 	bl	800c45c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 800121a:	4638      	mov	r0, r7
 800121c:	f004 fb22 	bl	8005864 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8001220:	4622      	mov	r2, r4
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <LoRaWAN_Init+0x124>)
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	4628      	mov	r0, r5
 800122a:	9400      	str	r4, [sp, #0]
 800122c:	f00b f86a 	bl	800c304 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8001230:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001234:	4628      	mov	r0, r5
 8001236:	f00b f94b 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800123a:	4628      	mov	r0, r5
}
 800123c:	b004      	add	sp, #16
 800123e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UTIL_TIMER_Start(&TxTimer);
 8001242:	f00b b90b 	b.w	800c45c <UTIL_TIMER_Start>
 8001246:	bf00      	nop
 8001248:	0800d104 	.word	0x0800d104
 800124c:	200000f8 	.word	0x200000f8
 8001250:	0800d124 	.word	0x0800d124
 8001254:	0800d144 	.word	0x0800d144
 8001258:	08000e67 	.word	0x08000e67
 800125c:	0800114b 	.word	0x0800114b
 8001260:	08001149 	.word	0x08001149
 8001264:	08005751 	.word	0x08005751
 8001268:	20000000 	.word	0x20000000
 800126c:	08000f4d 	.word	0x08000f4d
 8001270:	08000e69 	.word	0x08000e69

08001274 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8001274:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001278:	d103      	bne.n	8001282 <HAL_GPIO_EXTI_Callback+0xe>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800127a:	2100      	movs	r1, #0
 800127c:	2002      	movs	r0, #2
 800127e:	f00a be9b 	b.w	800bfb8 <UTIL_SEQ_SetTask>
}
 8001282:	4770      	bx	lr

08001284 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8001284:	2200      	movs	r2, #0
 8001286:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <LoraInfo_Init+0x14>)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8001288:	2120      	movs	r1, #32
  loraInfo.Kms = 0;
 800128a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  loraInfo.ActivationMode = 3;
 800128e:	2203      	movs	r2, #3
 8001290:	e9c3 2100 	strd	r2, r1, [r3]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000250 	.word	0x20000250

0800129c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 800129c:	4800      	ldr	r0, [pc, #0]	@ (80012a0 <LoraInfo_GetPtr+0x4>)
 800129e:	4770      	bx	lr
 80012a0:	20000250 	.word	0x20000250

080012a4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80012a4:	b508      	push	{r3, lr}
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance  = ADC1;

  hadc.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV4;
 80012a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
  hadc.Instance  = ADC1;
 80012aa:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <MX_ADC_Init+0x34>)
  hadc.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV4;
 80012ac:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <MX_ADC_Init+0x38>)
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc.Init.ScanConvMode          = ADC_SCAN_DISABLE;
  hadc.Init.ContinuousConvMode    = DISABLE;
  hadc.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.LowPowerAutoWait      = ADC_AUTOWAIT_UNTIL_DATA_READ; /* ADC_DelaySelectionConfig( ADC1, ADC_DelayLength_Freeze ); */
  hadc.Init.LowPowerAutoPowerOff  = ADC_AUTOPOWEROFF_IDLE_DELAY_PHASES;
 80012ae:	2110      	movs	r1, #16
  hadc.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV4;
 80012b0:	e9c0 2300 	strd	r2, r3, [r0]
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 80012b4:	2300      	movs	r3, #0
 80012b6:	6083      	str	r3, [r0, #8]
  hadc.Init.ScanConvMode          = ADC_SCAN_DISABLE;
 80012b8:	6103      	str	r3, [r0, #16]
  hadc.Init.ContinuousConvMode    = DISABLE;
 80012ba:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012be:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff  = ADC_AUTOPOWEROFF_IDLE_DELAY_PHASES;
 80012c0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80012c4:	e9c0 1306 	strd	r1, r3, [r0, #24]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80012c8:	f001 f918 	bl	80024fc <HAL_ADC_Init>
 80012cc:	b118      	cbz	r0, 80012d6 <MX_ADC_Init+0x32>

  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80012ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80012d2:	f000 b927 	b.w	8001524 <Error_Handler>
}
 80012d6:	bd08      	pop	{r3, pc}
 80012d8:	20000260 	.word	0x20000260
 80012dc:	40012400 	.word	0x40012400

080012e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 80012e0:	6802      	ldr	r2, [r0, #0]
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <HAL_ADC_MspInit+0x24>)
{
 80012e4:	b082      	sub	sp, #8
  if (adcHandle->Instance == ADC1)
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d10a      	bne.n	8001300 <HAL_ADC_MspInit+0x20>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ea:	f503 338a 	add.w	r3, r3, #70656	@ 0x11400
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012f4:	621a      	str	r2, [r3, #32]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	9b01      	ldr	r3, [sp, #4]
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8001300:	b002      	add	sp, #8
 8001302:	4770      	bx	lr
 8001304:	40012400 	.word	0x40012400

08001308 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8001308:	6802      	ldr	r2, [r0, #0]
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_ADC_MspDeInit+0x28>)
 800130c:	429a      	cmp	r2, r3
 800130e:	d10d      	bne.n	800132c <HAL_ADC_MspDeInit+0x24>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8001310:	f503 338a 	add.w	r3, r3, #70656	@ 0x11400
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800131a:	615a      	str	r2, [r3, #20]
    __HAL_RCC_ADC1_RELEASE_RESET();
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001322:	615a      	str	r2, [r3, #20]
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001324:	6a1a      	ldr	r2, [r3, #32]
 8001326:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800132a:	621a      	str	r2, [r3, #32]
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40012400 	.word	0x40012400

08001334 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001336:	2300      	movs	r3, #0
{
 8001338:	4604      	mov	r4, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800133e:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8001340:	f7ff ffb0 	bl	80012a4 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8001344:	4a1b      	ldr	r2, [pc, #108]	@ (80013b4 <ADC_ReadChannels+0x80>)
 8001346:	6853      	ldr	r3, [r2, #4]
 8001348:	0719      	lsls	r1, r3, #28
 800134a:	d5fc      	bpl.n	8001346 <ADC_ReadChannels+0x12>

  __HAL_RCC_ADC1_CLK_ENABLE();
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <ADC_ReadChannels+0x84>)

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800134e:	481b      	ldr	r0, [pc, #108]	@ (80013bc <ADC_ReadChannels+0x88>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 8001350:	6a1a      	ldr	r2, [r3, #32]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001352:	a901      	add	r1, sp, #4
  __HAL_RCC_ADC1_CLK_ENABLE();
 8001354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001358:	621a      	str	r2, [r3, #32]
 800135a:	6a1b      	ldr	r3, [r3, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 800135c:	2201      	movs	r2, #1
  __HAL_RCC_ADC1_CLK_ENABLE();
 800135e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	9b00      	ldr	r3, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8001366:	2306      	movs	r3, #6
  sConfig.Channel = channel;
 8001368:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 800136a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800136e:	f001 f9e5 	bl	800273c <HAL_ADC_ConfigChannel>
 8001372:	b108      	cbz	r0, 8001378 <ADC_ReadChannels+0x44>
  {
    Error_Handler();
 8001374:	f000 f8d6 	bl	8001524 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001378:	4810      	ldr	r0, [pc, #64]	@ (80013bc <ADC_ReadChannels+0x88>)
 800137a:	f001 fac7 	bl	800290c <HAL_ADC_Start>
 800137e:	b108      	cbz	r0, 8001384 <ADC_ReadChannels+0x50>
  {
    /* Start Error */
    Error_Handler();
 8001380:	f000 f8d0 	bl	8001524 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <ADC_ReadChannels+0x88>)
 800138a:	f001 f97d 	bl	8002688 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 800138e:	480b      	ldr	r0, [pc, #44]	@ (80013bc <ADC_ReadChannels+0x88>)
 8001390:	f001 fb88 	bl	8002aa4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <ADC_ReadChannels+0x88>)
 8001396:	f001 f9cd 	bl	8002734 <HAL_ADC_GetValue>
 800139a:	4604      	mov	r4, r0

  HAL_ADC_DeInit(&hadc);
 800139c:	4807      	ldr	r0, [pc, #28]	@ (80013bc <ADC_ReadChannels+0x88>)
 800139e:	f001 fb13 	bl	80029c8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80013a2:	4620      	mov	r0, r4
  __HAL_RCC_ADC1_CLK_DISABLE();
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <ADC_ReadChannels+0x84>)
 80013a6:	6a13      	ldr	r3, [r2, #32]
 80013a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80013ac:	6213      	str	r3, [r2, #32]
}
 80013ae:	b004      	add	sp, #16
 80013b0:	bd10      	pop	{r4, pc}
 80013b2:	bf00      	nop
 80013b4:	40007000 	.word	0x40007000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	20000260 	.word	0x20000260

080013c0 <SYS_InitMeasurement>:
  hadc.Instance = ADC1;
 80013c0:	4b01      	ldr	r3, [pc, #4]	@ (80013c8 <SYS_InitMeasurement+0x8>)
 80013c2:	4a02      	ldr	r2, [pc, #8]	@ (80013cc <SYS_InitMeasurement+0xc>)
 80013c4:	601a      	str	r2, [r3, #0]
}
 80013c6:	4770      	bx	lr
 80013c8:	20000260 	.word	0x20000260
 80013cc:	40012400 	.word	0x40012400

080013d0 <SYS_GetBatteryLevel>:
{
 80013d0:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80013d2:	2011      	movs	r0, #17
 80013d4:	f7ff ffae 	bl	8001334 <ADC_ReadChannels>
  if (measuredLevel == 0)
 80013d8:	b140      	cbz	r0, 80013ec <SYS_GetBatteryLevel+0x1c>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80013da:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80013de:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <SYS_GetBatteryLevel+0x20>)
 80013e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80013e4:	4353      	muls	r3, r2
 80013e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80013ea:	b298      	uxth	r0, r3
}
 80013ec:	bd08      	pop	{r3, pc}
 80013ee:	bf00      	nop
 80013f0:	1ff80000 	.word	0x1ff80000

080013f4 <SYS_GetTemperatureLevel>:
{
 80013f4:	b513      	push	{r0, r1, r4, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80013f6:	f7ff ffeb 	bl	80013d0 <SYS_GetBatteryLevel>
 80013fa:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80013fc:	2010      	movs	r0, #16
 80013fe:	f7ff ff99 	bl	8001334 <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8001402:	fb00 f304 	mul.w	r3, r0, r4
 8001406:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800140a:	fbb3 f3f0 	udiv	r3, r3, r0
 800140e:	2050      	movs	r0, #80	@ 0x50
 8001410:	4a0c      	ldr	r2, [pc, #48]	@ (8001444 <SYS_GetTemperatureLevel+0x50>)
 8001412:	f8b2 10fa 	ldrh.w	r1, [r2, #250]	@ 0xfa
 8001416:	f8b2 20fe 	ldrh.w	r2, [r2, #254]	@ 0xfe
 800141a:	1a5b      	subs	r3, r3, r1
 800141c:	4343      	muls	r3, r0
 800141e:	1a52      	subs	r2, r2, r1
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	fb93 f3f2 	sdiv	r3, r3, r2
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 8001426:	2201      	movs	r2, #1
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8001428:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800142c:	b21c      	sxth	r4, r3
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 800142e:	f343 2307 	sbfx	r3, r3, #8, #8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2100      	movs	r1, #0
 8001436:	4610      	mov	r0, r2
 8001438:	4b03      	ldr	r3, [pc, #12]	@ (8001448 <SYS_GetTemperatureLevel+0x54>)
 800143a:	f00a fc9d 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
}
 800143e:	4620      	mov	r0, r4
 8001440:	b002      	add	sp, #8
 8001442:	bd10      	pop	{r4, pc}
 8001444:	1ff80000 	.word	0x1ff80000
 8001448:	0800d196 	.word	0x0800d196

0800144c <MX_DMA_Init>:
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <MX_DMA_Init+0x2c>)
{
 800144e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001450:	69da      	ldr	r2, [r3, #28]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001452:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001454:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001458:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800145e:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001468:	f001 fb48 	bl	8002afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800146c:	2011      	movs	r0, #17

}
 800146e:	b003      	add	sp, #12
 8001470:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001474:	f001 bb72 	b.w	8002b5c <HAL_NVIC_EnableIRQ>
 8001478:	40023800 	.word	0x40023800

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b500      	push	{lr}
 800147e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001480:	2228      	movs	r2, #40	@ 0x28
 8001482:	2100      	movs	r1, #0
 8001484:	a808      	add	r0, sp, #32
 8001486:	f00b f9a1 	bl	800c7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148a:	2214      	movs	r2, #20
 800148c:	2100      	movs	r1, #0
 800148e:	a802      	add	r0, sp, #8
 8001490:	f00b f99c 	bl	800c7cc <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8001494:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001496:	2001      	movs	r0, #1
 8001498:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLL_MUL6;
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLL_DIV3;
 800149a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800149e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80014a0:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLL_DIV3;
 80014a2:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a6:	e9cd 020a 	strd	r0, r2, [sp, #40]	@ 0x28

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLL_DIV3;
 80014ac:	e9cd c312 	strd	ip, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f001 feec 	bl	800328c <HAL_RCC_OscConfig>
 80014b4:	b108      	cbz	r0, 80014ba <SystemClock_Config+0x3e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <SystemClock_Config+0x3c>
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <SystemClock_Config+0x8c>)
 80014bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014be:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c6:	4a11      	ldr	r2, [pc, #68]	@ (800150c <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80014d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014da:	6013      	str	r3, [r2, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80014dc:	6853      	ldr	r3, [r2, #4]
 80014de:	f013 0310 	ands.w	r3, r3, #16
 80014e2:	d1fb      	bne.n	80014dc <SystemClock_Config+0x60>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	210f      	movs	r1, #15
 80014e6:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014e8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ea:	e9cd 1202 	strd	r1, r2, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ee:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014f6:	f002 f919 	bl	800372c <HAL_RCC_ClockConfig>
 80014fa:	b108      	cbz	r0, 8001500 <SystemClock_Config+0x84>
 80014fc:	b672      	cpsid	i
  while (1)
 80014fe:	e7fe      	b.n	80014fe <SystemClock_Config+0x82>
}
 8001500:	b015      	add	sp, #84	@ 0x54
 8001502:	f85d fb04 	ldr.w	pc, [sp], #4
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <main>:
{
 8001510:	b508      	push	{r3, lr}
  HAL_Init();
 8001512:	f000 ffa3 	bl	800245c <HAL_Init>
  SystemClock_Config();
 8001516:	f7ff ffb1 	bl	800147c <SystemClock_Config>
  MX_LoRaWAN_Init();
 800151a:	f7ff fc99 	bl	8000e50 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 800151e:	f7ff fc9e 	bl	8000e5e <MX_LoRaWAN_Process>
  while (1)
 8001522:	e7fc      	b.n	800151e <main+0xe>

08001524 <Error_Handler>:
 8001524:	b672      	cpsid	i
  while (1)
 8001526:	e7fe      	b.n	8001526 <Error_Handler+0x2>

08001528 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001528:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 800152a:	2400      	movs	r4, #0
{
 800152c:	b090      	sub	sp, #64	@ 0x40
  RTC_TimeTypeDef sTime = {0};
 800152e:	2214      	movs	r2, #20
 8001530:	2100      	movs	r1, #0
 8001532:	a801      	add	r0, sp, #4
 8001534:	f00b f94a 	bl	800c7cc <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001538:	2228      	movs	r2, #40	@ 0x28
 800153a:	4621      	mov	r1, r4
 800153c:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 800153e:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001540:	f00b f944 	bl	800c7cc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001544:	4822      	ldr	r0, [pc, #136]	@ (80015d0 <MX_RTC_Init+0xa8>)
 8001546:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <MX_RTC_Init+0xac>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8001548:	221f      	movs	r2, #31
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800154a:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 800154e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001552:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8001556:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800155a:	6184      	str	r4, [r0, #24]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800155c:	f002 fb1f 	bl	8003b9e <HAL_RTC_Init>
 8001560:	b108      	cbz	r0, 8001566 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001562:	f7ff ffdf 	bl	8001524 <Error_Handler>
  sTime.Hours = 0;
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001566:	2200      	movs	r2, #0
 8001568:	4819      	ldr	r0, [pc, #100]	@ (80015d0 <MX_RTC_Init+0xa8>)
 800156a:	a901      	add	r1, sp, #4
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800156c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  sTime.Hours = 0;
 8001570:	f8ad 4004 	strh.w	r4, [sp, #4]
  sTime.Seconds = 0;
 8001574:	f88d 4006 	strb.w	r4, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001578:	f002 fb6a 	bl	8003c50 <HAL_RTC_SetTime>
 800157c:	b108      	cbz	r0, 8001582 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800157e:	f7ff ffd1 	bl	8001524 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MX_RTC_Init+0xb0>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001584:	2200      	movs	r2, #0
 8001586:	4669      	mov	r1, sp
 8001588:	4811      	ldr	r0, [pc, #68]	@ (80015d0 <MX_RTC_Init+0xa8>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800158a:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800158c:	f002 fbc4 	bl	8003d18 <HAL_RTC_SetDate>
 8001590:	b108      	cbz	r0, 8001596 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 8001592:	f7ff ffc7 	bl	8001524 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001596:	2200      	movs	r2, #0
  sAlarm.AlarmTime.Seconds = 0;
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8001598:	f04f 6320 	mov.w	r3, #167772160	@ 0xa000000
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800159c:	e9cd 320c 	strd	r3, r2, [sp, #48]	@ 0x30
  sAlarm.AlarmDateWeekDay = 30;
 80015a0:	231e      	movs	r3, #30
 80015a2:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
  sAlarm.Alarm = RTC_ALARM_A;
 80015a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80015aa:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <MX_RTC_Init+0xa8>)
 80015ac:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015ae:	e9cd 2209 	strd	r2, r2, [sp, #36]	@ 0x24
  sAlarm.AlarmTime.Hours = 0;
 80015b2:	f8ad 2018 	strh.w	r2, [sp, #24]
  sAlarm.AlarmTime.Seconds = 0;
 80015b6:	f88d 201a 	strb.w	r2, [sp, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
 80015ba:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80015bc:	920b      	str	r2, [sp, #44]	@ 0x2c
  sAlarm.Alarm = RTC_ALARM_A;
 80015be:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80015c0:	f002 fbfe 	bl	8003dc0 <HAL_RTC_SetAlarm_IT>
 80015c4:	b108      	cbz	r0, 80015ca <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80015c6:	f7ff ffad 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015ca:	b010      	add	sp, #64	@ 0x40
 80015cc:	bd10      	pop	{r4, pc}
 80015ce:	bf00      	nop
 80015d0:	200002b4 	.word	0x200002b4
 80015d4:	40002800 	.word	0x40002800
 80015d8:	00010101 	.word	0x00010101

080015dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80015dc:	b510      	push	{r4, lr}
 80015de:	4604      	mov	r4, r0
 80015e0:	b08e      	sub	sp, #56	@ 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	2234      	movs	r2, #52	@ 0x34
 80015e4:	2100      	movs	r1, #0
 80015e6:	a801      	add	r0, sp, #4
 80015e8:	f00b f8f0 	bl	800c7cc <memset>
  if (rtcHandle->Instance == RTC)
 80015ec:	6822      	ldr	r2, [r4, #0]
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <HAL_RTC_MspInit+0x48>)
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d115      	bne.n	8001620 <HAL_RTC_MspInit+0x44>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80015f4:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015f6:	2401      	movs	r4, #1
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	eb0d 0003 	add.w	r0, sp, r3
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80015fc:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015fe:	9403      	str	r4, [sp, #12]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001600:	f001 fe44 	bl	800328c <HAL_RCC_OscConfig>
 8001604:	b108      	cbz	r0, 800160a <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8001606:	f7ff ff8d 	bl	8001524 <Error_Handler>

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
    __HAL_RCC_RTC_ENABLE();
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_RTC_MspInit+0x4c>)
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800160e:	2029      	movs	r0, #41	@ 0x29
 8001610:	4611      	mov	r1, r2
    __HAL_RCC_RTC_ENABLE();
 8001612:	f8c3 46d8 	str.w	r4, [r3, #1752]	@ 0x6d8
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001616:	f001 fa71 	bl	8002afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800161a:	2029      	movs	r0, #41	@ 0x29
 800161c:	f001 fa9e 	bl	8002b5c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8001620:	b00e      	add	sp, #56	@ 0x38
 8001622:	bd10      	pop	{r4, pc}
 8001624:	40002800 	.word	0x40002800
 8001628:	42470000 	.word	0x42470000

0800162c <RTC_IF_GetTimerContext>:
uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
}
 800162c:	4b01      	ldr	r3, [pc, #4]	@ (8001634 <RTC_IF_GetTimerContext+0x8>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200002d4 	.word	0x200002d4

08001638 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8001638:	2003      	movs	r0, #3
 800163a:	4770      	bx	lr

0800163c <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800163c:	4601      	mov	r1, r0
 800163e:	b508      	push	{r3, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8001640:	227d      	movs	r2, #125	@ 0x7d
 8001642:	2300      	movs	r3, #0
 8001644:	01c0      	lsls	r0, r0, #7
 8001646:	0e49      	lsrs	r1, r1, #25
 8001648:	f7ff fa8c 	bl	8000b64 <__aeabi_uldivmod>
}
 800164c:	bd08      	pop	{r3, pc}

0800164e <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800164e:	237d      	movs	r3, #125	@ 0x7d
 8001650:	fba0 0303 	umull	r0, r3, r0, r3
 8001654:	09c0      	lsrs	r0, r0, #7
}
 8001656:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800165a:	4770      	bx	lr

0800165c <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800165c:	4806      	ldr	r0, [pc, #24]	@ (8001678 <RTC_IF_StopTimer+0x1c>)
{
 800165e:	b508      	push	{r3, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001660:	6802      	ldr	r2, [r0, #0]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001662:	f44f 7180 	mov.w	r1, #256	@ 0x100
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001666:	68d3      	ldr	r3, [r2, #12]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f463 73c0 	orn	r3, r3, #384	@ 0x180
 800166e:	60d3      	str	r3, [r2, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001670:	f002 f9e8 	bl	8003a44 <HAL_RTC_DeactivateAlarm>
}
 8001674:	2000      	movs	r0, #0
 8001676:	bd08      	pop	{r3, pc}
 8001678:	200002b4 	.word	0x200002b4

0800167c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800167c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8001680:	2200      	movs	r2, #0
{
 8001682:	4607      	mov	r7, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8001684:	4826      	ldr	r0, [pc, #152]	@ (8001720 <RTC_GetCalendarValue+0xa4>)
{
 8001686:	460c      	mov	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8001688:	f002 fc56 	bl	8003f38 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800168c:	4d25      	ldr	r5, [pc, #148]	@ (8001724 <RTC_GetCalendarValue+0xa8>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800168e:	4e24      	ldr	r6, [pc, #144]	@ (8001720 <RTC_GetCalendarValue+0xa4>)
 8001690:	2200      	movs	r2, #0
 8001692:	4639      	mov	r1, r7
 8001694:	4630      	mov	r0, r6
 8001696:	f8d5 8028 	ldr.w	r8, [r5, #40]	@ 0x28
 800169a:	f002 fc73 	bl	8003f84 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800169e:	2200      	movs	r2, #0
 80016a0:	4621      	mov	r1, r4
 80016a2:	4630      	mov	r0, r6
 80016a4:	f002 fc48 	bl	8003f38 <HAL_RTC_GetTime>
 80016a8:	6aab      	ldr	r3, [r5, #40]	@ 0x28

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 80016aa:	ea83 0308 	eor.w	r3, r3, r8
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ed      	bne.n	8001690 <RTC_GetCalendarValue+0x14>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80016b4:	f240 51b5 	movw	r1, #1461	@ 0x5b5
 80016b8:	78fb      	ldrb	r3, [r7, #3]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80016ba:	4e1b      	ldr	r6, [pc, #108]	@ (8001728 <RTC_GetCalendarValue+0xac>)
 80016bc:	f013 0f03 	tst.w	r3, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80016c0:	fb03 f101 	mul.w	r1, r3, r1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <RTC_GetCalendarValue+0xb0>)

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80016c6:	f04f 003c 	mov.w	r0, #60	@ 0x3c
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80016ca:	bf18      	it	ne
 80016cc:	461e      	movne	r6, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80016ce:	233d      	movs	r3, #61	@ 0x3d
 80016d0:	787d      	ldrb	r5, [r7, #1]
  calendarValue += (RTC_DateStruct->Date - 1);
 80016d2:	78ba      	ldrb	r2, [r7, #2]
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80016d4:	3d01      	subs	r5, #1
 80016d6:	436b      	muls	r3, r5
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80016d8:	3103      	adds	r1, #3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80016da:	3301      	adds	r3, #1
 80016dc:	3a01      	subs	r2, #1
 80016de:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80016e2:	eb02 0291 	add.w	r2, r2, r1, lsr #2
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80016e6:	006d      	lsls	r5, r5, #1
 80016e8:	eb02 0263 	add.w	r2, r2, r3, asr #1
 80016ec:	fa26 f305 	lsr.w	r3, r6, r5
 80016f0:	f003 0303 	and.w	r3, r3, #3
  calendarValue += (RTC_DateStruct->Date - 1);
 80016f4:	1ad2      	subs	r2, r2, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80016f6:	7863      	ldrb	r3, [r4, #1]
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80016f8:	7821      	ldrb	r1, [r4, #0]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80016fa:	4343      	muls	r3, r0
 80016fc:	f44f 6061 	mov.w	r0, #3600	@ 0xe10
 8001700:	fb00 3301 	mla	r3, r0, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8001704:	78a1      	ldrb	r1, [r4, #2]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8001706:	6860      	ldr	r0, [r4, #4]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8001708:	440b      	add	r3, r1
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800170a:	4909      	ldr	r1, [pc, #36]	@ (8001730 <RTC_GetCalendarValue+0xb4>)
  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 800170c:	f5c0 707f 	rsb	r0, r0, #1020	@ 0x3fc
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8001710:	fb01 3302 	mla	r3, r1, r2, r3
  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8001714:	3003      	adds	r0, #3

  return (calendarValue);
}
 8001716:	eb00 2083 	add.w	r0, r0, r3, lsl #10
 800171a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800171e:	bf00      	nop
 8001720:	200002b4 	.word	0x200002b4
 8001724:	40002800 	.word	0x40002800
 8001728:	00445550 	.word	0x00445550
 800172c:	0099aaa0 	.word	0x0099aaa0
 8001730:	00015180 	.word	0x00015180

08001734 <RTC_IF_SetTimerContext>:
{
 8001734:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8001736:	4c04      	ldr	r4, [pc, #16]	@ (8001748 <RTC_IF_SetTimerContext+0x14>)
 8001738:	1d21      	adds	r1, r4, #4
 800173a:	f104 0018 	add.w	r0, r4, #24
 800173e:	f7ff ff9d 	bl	800167c <RTC_GetCalendarValue>
 8001742:	6020      	str	r0, [r4, #0]
}
 8001744:	bd10      	pop	{r4, pc}
 8001746:	bf00      	nop
 8001748:	200002d4 	.word	0x200002d4

0800174c <RTC_IF_GetTimerElapsedTime>:
{
 800174c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800174e:	4668      	mov	r0, sp
 8001750:	a901      	add	r1, sp, #4
 8001752:	f7ff ff93 	bl	800167c <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8001756:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <RTC_IF_GetTimerElapsedTime+0x18>)
 8001758:	681b      	ldr	r3, [r3, #0]
}
 800175a:	1ac0      	subs	r0, r0, r3
 800175c:	b007      	add	sp, #28
 800175e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001762:	bf00      	nop
 8001764:	200002d4 	.word	0x200002d4

08001768 <RTC_IF_StartTimer>:
{
 8001768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800176c:	4606      	mov	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 800176e:	f7ff ffed 	bl	800174c <RTC_IF_GetTimerElapsedTime>
 8001772:	1a30      	subs	r0, r6, r0
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8001774:	4c49      	ldr	r4, [pc, #292]	@ (800189c <RTC_IF_StartTimer+0x134>)
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8001776:	2803      	cmp	r0, #3
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8001778:	bf8c      	ite	hi
 800177a:	2100      	movhi	r1, #0
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 800177c:	2101      	movls	r1, #1
 800177e:	2002      	movs	r0, #2
 8001780:	f00a fbb2 	bl	800bee8 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8001784:	f00a fbdc 	bl	800bf40 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8001788:	79a2      	ldrb	r2, [r4, #6]
 800178a:	68a3      	ldr	r3, [r4, #8]
 800178c:	9201      	str	r2, [sp, #4]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	7927      	ldrb	r7, [r4, #4]
 8001792:	f894 8005 	ldrb.w	r8, [r4, #5]
 8001796:	f894 a007 	ldrb.w	sl, [r4, #7]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800179a:	f894 9019 	ldrb.w	r9, [r4, #25]
 800179e:	7ea5      	ldrb	r5, [r4, #26]
 80017a0:	f894 b01b 	ldrb.w	fp, [r4, #27]
  RTC_IF_StopTimer();
 80017a4:	f7ff ff5a 	bl	800165c <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80017a8:	9b00      	ldr	r3, [sp, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80017aa:	f3c6 0109 	ubfx	r1, r6, #0, #10
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80017ae:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
 80017b2:	3303      	adds	r3, #3
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80017b4:	440b      	add	r3, r1
  while (timeoutValue >= SECONDS_IN_1DAY)
 80017b6:	9a01      	ldr	r2, [sp, #4]
 80017b8:	4939      	ldr	r1, [pc, #228]	@ (80018a0 <RTC_IF_StartTimer+0x138>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80017ba:	b29b      	uxth	r3, r3
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 80017bc:	0ab6      	lsrs	r6, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 80017be:	428e      	cmp	r6, r1
 80017c0:	d847      	bhi.n	8001852 <RTC_IF_StartTimer+0xea>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80017c2:	f5b6 6f61 	cmp.w	r6, #3600	@ 0xe10
 80017c6:	d24b      	bcs.n	8001860 <RTC_IF_StartTimer+0xf8>
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80017c8:	2e3b      	cmp	r6, #59	@ 0x3b
 80017ca:	d84e      	bhi.n	800186a <RTC_IF_StartTimer+0x102>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80017cc:	0a99      	lsrs	r1, r3, #10
 80017ce:	ebc1 1081 	rsb	r0, r1, r1, lsl #6
 80017d2:	eb03 2380 	add.w	r3, r3, r0, lsl #10
 80017d6:	1850      	adds	r0, r2, r1
 80017d8:	4430      	add	r0, r6
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b280      	uxth	r0, r0
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80017de:	283b      	cmp	r0, #59	@ 0x3b
 80017e0:	d849      	bhi.n	8001876 <RTC_IF_StartTimer+0x10e>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80017e2:	f1b8 0f3b 	cmp.w	r8, #59	@ 0x3b
 80017e6:	d84d      	bhi.n	8001884 <RTC_IF_StartTimer+0x11c>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80017e8:	2f17      	cmp	r7, #23
 80017ea:	d852      	bhi.n	8001892 <RTC_IF_StartTimer+0x12a>
  if (RTC_DateStruct.Year % 4 == 0)
 80017ec:	4a2d      	ldr	r2, [pc, #180]	@ (80018a4 <RTC_IF_StartTimer+0x13c>)
 80017ee:	f01b 0f03 	tst.w	fp, #3
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80017f2:	f109 39ff 	add.w	r9, r9, #4294967295
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80017f6:	bf16      	itet	ne
 80017f8:	444a      	addne	r2, r9
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80017fa:	f812 1009 	ldrbeq.w	r1, [r2, r9]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80017fe:	7b11      	ldrbne	r1, [r2, #12]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8001800:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8001804:	428d      	cmp	r5, r1
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8001806:	bf88      	it	hi
 8001808:	fbb5 f2f1 	udivhi	r2, r5, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800180c:	f103 0303 	add.w	r3, r3, #3
 8001810:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8001812:	f04f 6320 	mov.w	r3, #167772160	@ 0xa000000
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8001816:	bf84      	itt	hi
 8001818:	fb01 5212 	mlshi	r2, r1, r2, r5
 800181c:	b295      	uxthhi	r5, r2
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800181e:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001822:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8001824:	6363      	str	r3, [r4, #52]	@ 0x34
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8001826:	f44f 7380 	mov.w	r3, #256	@ 0x100
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800182a:	77a0      	strb	r0, [r4, #30]
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800182c:	462a      	mov	r2, r5
 800182e:	491e      	ldr	r1, [pc, #120]	@ (80018a8 <RTC_IF_StartTimer+0x140>)
 8001830:	481e      	ldr	r0, [pc, #120]	@ (80018ac <RTC_IF_StartTimer+0x144>)
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001832:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8001836:	f884 801d 	strb.w	r8, [r4, #29]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800183a:	7727      	strb	r7, [r4, #28]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800183c:	f884 a01f 	strb.w	sl, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001840:	63a5      	str	r5, [r4, #56]	@ 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8001842:	6325      	str	r5, [r4, #48]	@ 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8001844:	6423      	str	r3, [r4, #64]	@ 0x40
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8001846:	f002 fabb 	bl	8003dc0 <HAL_RTC_SetAlarm_IT>
}
 800184a:	4628      	mov	r0, r5
 800184c:	b003      	add	sp, #12
 800184e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8001852:	f5a6 36a8 	sub.w	r6, r6, #86016	@ 0x15000
    rtcAlarmDays++;
 8001856:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8001858:	f5a6 76c0 	sub.w	r6, r6, #384	@ 0x180
    rtcAlarmDays++;
 800185c:	b2ad      	uxth	r5, r5
 800185e:	e7ae      	b.n	80017be <RTC_IF_StartTimer+0x56>
    rtcAlarmHours++;
 8001860:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8001862:	f5a6 6661 	sub.w	r6, r6, #3600	@ 0xe10
    rtcAlarmHours++;
 8001866:	b2bf      	uxth	r7, r7
 8001868:	e7ab      	b.n	80017c2 <RTC_IF_StartTimer+0x5a>
    rtcAlarmMinutes++;
 800186a:	f108 0801 	add.w	r8, r8, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800186e:	3e3c      	subs	r6, #60	@ 0x3c
    rtcAlarmMinutes++;
 8001870:	fa1f f888 	uxth.w	r8, r8
 8001874:	e7a8      	b.n	80017c8 <RTC_IF_StartTimer+0x60>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8001876:	383c      	subs	r0, #60	@ 0x3c
    rtcAlarmMinutes++;
 8001878:	f108 0801 	add.w	r8, r8, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800187c:	b280      	uxth	r0, r0
    rtcAlarmMinutes++;
 800187e:	fa1f f888 	uxth.w	r8, r8
 8001882:	e7ac      	b.n	80017de <RTC_IF_StartTimer+0x76>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8001884:	f1a8 083c 	sub.w	r8, r8, #60	@ 0x3c
    rtcAlarmHours++;
 8001888:	3701      	adds	r7, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800188a:	fa1f f888 	uxth.w	r8, r8
    rtcAlarmHours++;
 800188e:	b2bf      	uxth	r7, r7
 8001890:	e7a7      	b.n	80017e2 <RTC_IF_StartTimer+0x7a>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8001892:	3f18      	subs	r7, #24
    rtcAlarmDays++;
 8001894:	3501      	adds	r5, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8001896:	b2bf      	uxth	r7, r7
    rtcAlarmDays++;
 8001898:	b2ad      	uxth	r5, r5
 800189a:	e7a5      	b.n	80017e8 <RTC_IF_StartTimer+0x80>
 800189c:	200002d4 	.word	0x200002d4
 80018a0:	0001517f 	.word	0x0001517f
 80018a4:	0800c970 	.word	0x0800c970
 80018a8:	200002f0 	.word	0x200002f0
 80018ac:	200002b4 	.word	0x200002b4

080018b0 <RTC_IF_GetTime>:
{
 80018b0:	b510      	push	{r4, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	4604      	mov	r4, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80018b6:	a901      	add	r1, sp, #4
 80018b8:	4668      	mov	r0, sp
 80018ba:	f7ff fedf 	bl	800167c <RTC_GetCalendarValue>
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80018be:	227d      	movs	r2, #125	@ 0x7d
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 80018c0:	f3c0 0309 	ubfx	r3, r0, #0, #10
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80018c4:	fba3 3202 	umull	r3, r2, r3, r2
}
 80018c8:	0a80      	lsrs	r0, r0, #10
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80018ca:	09db      	lsrs	r3, r3, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 80018cc:	8023      	strh	r3, [r4, #0]
}
 80018ce:	b006      	add	sp, #24
 80018d0:	bd10      	pop	{r4, pc}
	...

080018d4 <RTC_IF_BkUp_Write_Seconds>:
{
 80018d4:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80018d6:	2100      	movs	r1, #0
 80018d8:	4801      	ldr	r0, [pc, #4]	@ (80018e0 <RTC_IF_BkUp_Write_Seconds+0xc>)
 80018da:	f002 bb70 	b.w	8003fbe <HAL_RTCEx_BKUPWrite>
 80018de:	bf00      	nop
 80018e0:	200002b4 	.word	0x200002b4

080018e4 <RTC_IF_BkUp_Write_SubSeconds>:
{
 80018e4:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80018e6:	2101      	movs	r1, #1
 80018e8:	4801      	ldr	r0, [pc, #4]	@ (80018f0 <RTC_IF_BkUp_Write_SubSeconds+0xc>)
 80018ea:	f002 bb68 	b.w	8003fbe <HAL_RTCEx_BKUPWrite>
 80018ee:	bf00      	nop
 80018f0:	200002b4 	.word	0x200002b4

080018f4 <RTC_IF_BkUp_Read_Seconds>:
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80018f4:	2100      	movs	r1, #0
 80018f6:	4801      	ldr	r0, [pc, #4]	@ (80018fc <RTC_IF_BkUp_Read_Seconds+0x8>)
 80018f8:	f002 bb66 	b.w	8003fc8 <HAL_RTCEx_BKUPRead>
 80018fc:	200002b4 	.word	0x200002b4

08001900 <RTC_IF_BkUp_Read_SubSeconds>:
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001900:	2101      	movs	r1, #1
 8001902:	4801      	ldr	r0, [pc, #4]	@ (8001908 <RTC_IF_BkUp_Read_SubSeconds+0x8>)
 8001904:	f002 bb60 	b.w	8003fc8 <HAL_RTCEx_BKUPRead>
 8001908:	200002b4 	.word	0x200002b4

0800190c <RTC_IF_Init>:
{
 800190c:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 800190e:	4c10      	ldr	r4, [pc, #64]	@ (8001950 <RTC_IF_Init+0x44>)
{
 8001910:	b085      	sub	sp, #20
  if (RTC_Initalized == false)
 8001912:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001916:	b9bb      	cbnz	r3, 8001948 <RTC_IF_Init+0x3c>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001918:	2501      	movs	r5, #1
 800191a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191e:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001920:	e9cd 5301 	strd	r5, r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001924:	f001 ffe4 	bl	80038f0 <HAL_RCCEx_PeriphCLKConfig>
 8001928:	b100      	cbz	r0, 800192c <RTC_IF_Init+0x20>
      while (1);
 800192a:	e7fe      	b.n	800192a <RTC_IF_Init+0x1e>
    MX_RTC_Init();
 800192c:	f7ff fdfc 	bl	8001528 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4807      	ldr	r0, [pc, #28]	@ (8001954 <RTC_IF_Init+0x48>)
 8001936:	f002 f885 	bl	8003a44 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800193a:	4806      	ldr	r0, [pc, #24]	@ (8001954 <RTC_IF_Init+0x48>)
 800193c:	f002 fb49 	bl	8003fd2 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8001940:	f7ff fef8 	bl	8001734 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8001944:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
}
 8001948:	2000      	movs	r0, #0
 800194a:	b005      	add	sp, #20
 800194c:	bd30      	pop	{r4, r5, pc}
 800194e:	bf00      	nop
 8001950:	200002d4 	.word	0x200002d4
 8001954:	200002b4 	.word	0x200002b4

08001958 <RTC_IF_GetTimerValue>:
{
 8001958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (RTC_Initalized == true)
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <RTC_IF_GetTimerValue+0x18>)
 800195c:	f893 0044 	ldrb.w	r0, [r3, #68]	@ 0x44
 8001960:	b118      	cbz	r0, 800196a <RTC_IF_GetTimerValue+0x12>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8001962:	4668      	mov	r0, sp
 8001964:	a901      	add	r1, sp, #4
 8001966:	f7ff fe89 	bl	800167c <RTC_GetCalendarValue>
}
 800196a:	b007      	add	sp, #28
 800196c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001970:	200002d4 	.word	0x200002d4

08001974 <RTC_IF_DelayMs>:
{
 8001974:	4601      	mov	r1, r0
 8001976:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8001978:	227d      	movs	r2, #125	@ 0x7d
 800197a:	2300      	movs	r3, #0
 800197c:	01c0      	lsls	r0, r0, #7
 800197e:	0e49      	lsrs	r1, r1, #25
 8001980:	f7ff f8f0 	bl	8000b64 <__aeabi_uldivmod>
 8001984:	4604      	mov	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8001986:	f7ff ffe7 	bl	8001958 <RTC_IF_GetTimerValue>
 800198a:	4605      	mov	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800198c:	f7ff ffe4 	bl	8001958 <RTC_IF_GetTimerValue>
 8001990:	1b43      	subs	r3, r0, r5
 8001992:	42a3      	cmp	r3, r4
 8001994:	d300      	bcc.n	8001998 <RTC_IF_DelayMs+0x24>
}
 8001996:	bd38      	pop	{r3, r4, r5, pc}
    __NOP();
 8001998:	bf00      	nop
 800199a:	e7f7      	b.n	800198c <RTC_IF_DelayMs+0x18>

0800199c <HAL_RTC_AlarmAEventCallback>:
  UTIL_TIMER_IRQ_Handler();
 800199c:	f00a bdb0 	b.w	800c500 <UTIL_TIMER_IRQ_Handler>

080019a0 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80019a0:	4770      	bx	lr
	...

080019a4 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 80019a4:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80019aa:	b672      	cpsid	i
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 80019ac:	f000 fc3c 	bl	8002228 <SX1262DVK1DAS_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc);
 80019b0:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <PWR_EnterStopMode+0x2c>)
 80019b2:	f7ff fca9 	bl	8001308 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80019b6:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <PWR_EnterStopMode+0x30>)
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019c0:	f384 8810 	msr	PRIMASK, r4
  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80019c4:	2101      	movs	r1, #1
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80019c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80019ca:	4608      	mov	r0, r1
 80019cc:	f001 bbe6 	b.w	800319c <HAL_PWR_EnterSTOPMode>
 80019d0:	20000260 	.word	0x20000260
 80019d4:	40007000 	.word	0x40007000

080019d8 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80019d8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019da:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80019de:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 80019e0:	2301      	movs	r3, #1
 80019e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <PWR_ExitStopMode+0x40>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <PWR_ExitStopMode+0x44>)
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	0789      	lsls	r1, r1, #30
 80019ec:	d5fc      	bpl.n	80019e8 <PWR_ExitStopMode+0x10>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80019ee:	2101      	movs	r1, #1
 80019f0:	6611      	str	r1, [r2, #96]	@ 0x60
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	0192      	lsls	r2, r2, #6
 80019f6:	d5fc      	bpl.n	80019f2 <PWR_ExitStopMode+0x1a>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	f042 0203 	orr.w	r2, r2, #3
 80019fe:	609a      	str	r2, [r3, #8]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <PWR_ExitStopMode+0x44>)
 8001a02:	6893      	ldr	r3, [r2, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d1fa      	bne.n	8001a02 <PWR_ExitStopMode+0x2a>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8001a0c:	f000 fb62 	bl	80020d4 <SX1262DVK1DAS_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a10:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001a14:	bd10      	pop	{r4, pc}
 8001a16:	bf00      	nop
 8001a18:	42470000 	.word	0x42470000
 8001a1c:	40023800 	.word	0x40023800

08001a20 <PWR_EnterSleepMode>:

  /* USER CODE END EnterSleepMode_1 */
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001a20:	2101      	movs	r1, #1
 8001a22:	2000      	movs	r0, #0
 8001a24:	f001 bba2 	b.w	800316c <HAL_PWR_EnterSLEEPMode>

08001a28 <PWR_ExitSleepMode>:
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
 8001a28:	4770      	bx	lr

08001a2a <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
 8001a2a:	4770      	bx	lr

08001a2c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_MspInit+0x28>)
{
 8001a2e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a32:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a36:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9b01      	ldr	r3, [sp, #4]

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8001a42:	f001 fb85 	bl	8003150 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8001a46:	f001 fbd3 	bl	80031f0 <HAL_PWREx_EnableUltraLowPower>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	b003      	add	sp, #12
 8001a4c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_EnableFastWakeUp();
 8001a50:	f001 bbc0 	b.w	80031d4 <HAL_PWREx_EnableFastWakeUp>
 8001a54:	40023800 	.word	0x40023800

08001a58 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a58:	4770      	bx	lr

08001a5a <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8001a5a:	bf00      	nop
  while (1)
 8001a5c:	e7fd      	b.n	8001a5a <HardFault_Handler>

08001a5e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <MemManage_Handler>

08001a60 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <BusFault_Handler>

08001a62 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <UsageFault_Handler>

08001a64 <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
 8001a64:	4770      	bx	lr

08001a66 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001a66:	4770      	bx	lr

08001a68 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001a68:	4770      	bx	lr

08001a6a <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6a:	f000 bd11 	b.w	8002490 <HAL_IncTick>

08001a6e <EXTI0_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_IRQHandler(void)
 8001a6e:	4770      	bx	lr

08001a70 <EXTI1_IRQHandler>:
{
}

void EXTI1_IRQHandler(void)
 8001a70:	4770      	bx	lr

08001a72 <EXTI2_IRQHandler>:
{
}

void EXTI2_IRQHandler(void)
 8001a72:	4770      	bx	lr

08001a74 <EXTI3_IRQHandler>:
{
}

void EXTI3_IRQHandler(void)
 8001a74:	4770      	bx	lr
	...

08001a78 <EXTI4_IRQHandler>:
#endif
}

void EXTI4_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8001a78:	4801      	ldr	r0, [pc, #4]	@ (8001a80 <EXTI4_IRQHandler+0x8>)
 8001a7a:	f001 b9e7 	b.w	8002e4c <HAL_EXTI_IRQHandler>
 8001a7e:	bf00      	nop
 8001a80:	20000460 	.word	0x20000460

08001a84 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
 8001a84:	4770      	bx	lr

08001a86 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a86:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a8a:	f001 bb55 	b.w	8003138 <HAL_GPIO_EXTI_IRQHandler>
	...

08001a90 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a90:	4801      	ldr	r0, [pc, #4]	@ (8001a98 <DMA1_Channel7_IRQHandler+0x8>)
 8001a92:	f001 b984 	b.w	8002d9e <HAL_DMA_IRQHandler>
 8001a96:	bf00      	nop
 8001a98:	20000360 	.word	0x20000360

08001a9c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a9c:	4801      	ldr	r0, [pc, #4]	@ (8001aa4 <USART2_IRQHandler+0x8>)
 8001a9e:	f002 be57 	b.w	8004750 <HAL_UART_IRQHandler>
 8001aa2:	bf00      	nop
 8001aa4:	2000031c 	.word	0x2000031c

08001aa8 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001aa8:	4801      	ldr	r0, [pc, #4]	@ (8001ab0 <RTC_Alarm_IRQHandler+0x8>)
 8001aaa:	f002 b819 	b.w	8003ae0 <HAL_RTC_AlarmIRQHandler>
 8001aae:	bf00      	nop
 8001ab0:	200002b4 	.word	0x200002b4

08001ab4 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8001ab4:	b40c      	push	{r2, r3}
 8001ab6:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001ab8:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8001aba:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001abc:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <tiny_snprintf_like.constprop.0+0x1c>)
  va_start(vaArgs, strFormat);
 8001abe:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001ac0:	f00a fd62 	bl	800c588 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001ac4:	b003      	add	sp, #12
 8001ac6:	f85d eb04 	ldr.w	lr, [sp], #4
 8001aca:	b002      	add	sp, #8
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	0800d1a1 	.word	0x0800d1a1

08001ad4 <TimestampNow>:
{
 8001ad4:	b530      	push	{r4, r5, lr}
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	b085      	sub	sp, #20
  SysTime_t curtime = SysTimeGet();
 8001ada:	a802      	add	r0, sp, #8
{
 8001adc:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001ade:	f00a fb81 	bl	800c1e4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001ae2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	4620      	mov	r0, r4
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <TimestampNow+0x2c>)
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	9b02      	ldr	r3, [sp, #8]
 8001af0:	f7ff ffe0 	bl	8001ab4 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7fe fb43 	bl	8000180 <strlen>
 8001afa:	8028      	strh	r0, [r5, #0]
}
 8001afc:	b005      	add	sp, #20
 8001afe:	bd30      	pop	{r4, r5, pc}
 8001b00:	0800d1a1 	.word	0x0800d1a1

08001b04 <SystemApp_Init>:
{
 8001b04:	b510      	push	{r4, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
  UTIL_TIMER_Init();
 8001b08:	f00a fbf2 	bl	800c2f0 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4c35      	ldr	r4, [pc, #212]	@ (8001be8 <SystemApp_Init+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	9309      	str	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	69e3      	ldr	r3, [r4, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8001b18:	2203      	movs	r2, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	61e3      	str	r3, [r4, #28]
 8001b20:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	482f      	ldr	r0, [pc, #188]	@ (8001bec <SystemApp_Init+0xe8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	61e3      	str	r3, [r4, #28]
 8001b36:	69e3      	ldr	r3, [r4, #28]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b40:	69e3      	ldr	r3, [r4, #28]
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	61e3      	str	r3, [r4, #28]
 8001b48:	69e3      	ldr	r3, [r4, #28]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	9303      	str	r3, [sp, #12]
 8001b50:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b52:	69e3      	ldr	r3, [r4, #28]
 8001b54:	f043 0320 	orr.w	r3, r3, #32
 8001b58:	61e3      	str	r3, [r4, #28]
 8001b5a:	69e3      	ldr	r3, [r4, #28]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	9304      	str	r3, [sp, #16]
 8001b62:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8001b64:	f649 73ff 	movw	r3, #40959	@ 0x9fff
 8001b68:	e9cd 3205 	strd	r3, r2, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f001 f97e 	bl	8002e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001b70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	a905      	add	r1, sp, #20
 8001b76:	481e      	ldr	r0, [pc, #120]	@ (8001bf0 <SystemApp_Init+0xec>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001b78:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f001 f977 	bl	8002e6c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	a905      	add	r1, sp, #20
 8001b80:	481c      	ldr	r0, [pc, #112]	@ (8001bf4 <SystemApp_Init+0xf0>)
 8001b82:	f001 f973 	bl	8002e6c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b86:	a905      	add	r1, sp, #20
 8001b88:	481b      	ldr	r0, [pc, #108]	@ (8001bf8 <SystemApp_Init+0xf4>)
 8001b8a:	f001 f96f 	bl	8002e6c <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8001b8e:	69e3      	ldr	r3, [r4, #28]
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	61e3      	str	r3, [r4, #28]
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001b96:	69e3      	ldr	r3, [r4, #28]
 8001b98:	f023 0302 	bic.w	r3, r3, #2
 8001b9c:	61e3      	str	r3, [r4, #28]
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8001b9e:	69e3      	ldr	r3, [r4, #28]
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	61e3      	str	r3, [r4, #28]
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8001ba6:	69e3      	ldr	r3, [r4, #28]
 8001ba8:	f023 0320 	bic.w	r3, r3, #32
 8001bac:	61e3      	str	r3, [r4, #28]
  DBG_Disable();
 8001bae:	f000 f895 	bl	8001cdc <DBG_Disable>
  DBG_ProbesInit();
 8001bb2:	f000 f8b5 	bl	8001d20 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8001bb6:	f00a f875 	bl	800bca4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001bba:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <SystemApp_Init+0xf8>)
 8001bbc:	f00a f88c 	bl	800bcd8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f00a f88f 	bl	800bce4 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001bc6:	f7ff fbfb 	bl	80013c0 <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8001bca:	f000 fbf7 	bl	80023bc <SX1262DVK1DAS_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8001bce:	f000 fa81 	bl	80020d4 <SX1262DVK1DAS_RADIO_IoInit>
  EnvSensors_Init();
 8001bd2:	f000 f8bd 	bl	8001d50 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001bd6:	f00a f97f 	bl	800bed8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001bda:	2101      	movs	r1, #1
 8001bdc:	4608      	mov	r0, r1
}
 8001bde:	b00a      	add	sp, #40	@ 0x28
 8001be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001be4:	f00a b996 	b.w	800bf14 <UTIL_LPM_SetOffMode>
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	08001ad5 	.word	0x08001ad5

08001c00 <UTIL_SEQ_Idle>:
  UTIL_LPM_EnterLowPower();
 8001c00:	f00a b9b0 	b.w	800bf64 <UTIL_LPM_EnterLowPower>

08001c04 <GetBatteryLevel>:
{
 8001c04:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001c06:	f7ff fbe3 	bl	80013d0 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001c0a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001c0e:	4298      	cmp	r0, r3
 8001c10:	d815      	bhi.n	8001c3e <GetBatteryLevel+0x3a>
  else if (batteryLevelmV < VDD_MIN)
 8001c12:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8001c16:	d314      	bcc.n	8001c42 <GetBatteryLevel+0x3e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001c18:	23fe      	movs	r3, #254	@ 0xfe
 8001c1a:	f5a0 64e1 	sub.w	r4, r0, #1800	@ 0x708
 8001c1e:	435c      	muls	r4, r3
 8001c20:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8001c24:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c28:	b2e4      	uxtb	r4, r4
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <GetBatteryLevel+0x44>)
 8001c30:	9400      	str	r4, [sp, #0]
 8001c32:	2002      	movs	r0, #2
 8001c34:	f00a f8a0 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
}
 8001c38:	4620      	mov	r0, r4
 8001c3a:	b002      	add	sp, #8
 8001c3c:	bd10      	pop	{r4, pc}
    batteryLevel = LORAWAN_MAX_BAT;
 8001c3e:	24fe      	movs	r4, #254	@ 0xfe
 8001c40:	e7f3      	b.n	8001c2a <GetBatteryLevel+0x26>
    batteryLevel = 0;
 8001c42:	2400      	movs	r4, #0
 8001c44:	e7f1      	b.n	8001c2a <GetBatteryLevel+0x26>
 8001c46:	bf00      	nop
 8001c48:	0800d1aa 	.word	0x0800d1aa

08001c4c <GetTemperatureLevel>:
{
 8001c4c:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001c4e:	f7ff fbd1 	bl	80013f4 <SYS_GetTemperatureLevel>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	bfb8      	it	lt
 8001c56:	30ff      	addlt	r0, #255	@ 0xff
}
 8001c58:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8001c5c:	bd08      	pop	{r3, pc}

08001c5e <GetUniqueId>:
{
 8001c5e:	b538      	push	{r3, r4, r5, lr}
 8001c60:	4604      	mov	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001c62:	f000 fc21 	bl	80024a8 <HAL_GetUIDw0>
 8001c66:	4605      	mov	r5, r0
 8001c68:	f000 fc2a 	bl	80024c0 <HAL_GetUIDw2>
 8001c6c:	4405      	add	r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 8001c6e:	f000 fc21 	bl	80024b4 <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 8001c72:	0e2b      	lsrs	r3, r5, #24
 8001c74:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 8001c76:	0c2b      	lsrs	r3, r5, #16
 8001c78:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 8001c7a:	0a2b      	lsrs	r3, r5, #8
 8001c7c:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 8001c7e:	0e03      	lsrs	r3, r0, #24
 8001c80:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 8001c82:	0c03      	lsrs	r3, r0, #16
 8001c84:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 8001c86:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 8001c88:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 8001c8a:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 8001c8c:	7020      	strb	r0, [r4, #0]
}
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}

08001c90 <GetDevAddr>:
{
 8001c90:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c92:	f000 fc09 	bl	80024a8 <HAL_GetUIDw0>
 8001c96:	4604      	mov	r4, r0
 8001c98:	f000 fc0c 	bl	80024b4 <HAL_GetUIDw1>
 8001c9c:	4044      	eors	r4, r0
 8001c9e:	f000 fc0f 	bl	80024c0 <HAL_GetUIDw2>
}
 8001ca2:	4060      	eors	r0, r4
 8001ca4:	bd10      	pop	{r4, pc}

08001ca6 <UTIL_ADV_TRACE_PreSendHook>:
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2004      	movs	r0, #4
 8001caa:	f00a b91d 	b.w	800bee8 <UTIL_LPM_SetStopMode>

08001cae <UTIL_ADV_TRACE_PostSendHook>:
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2004      	movs	r0, #4
 8001cb2:	f00a b919 	b.w	800bee8 <UTIL_LPM_SetStopMode>

08001cb6 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	4770      	bx	lr

08001cba <HAL_GetTick>:
uint32_t HAL_GetTick(void)
{
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8001cba:	f7ff be4d 	b.w	8001958 <RTC_IF_GetTimerValue>

08001cbe <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8001cc2:	9801      	ldr	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001cc4:	b002      	add	sp, #8
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8001cc6:	f7ff be55 	b.w	8001974 <RTC_IF_DelayMs>

08001cca <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8001cca:	b508      	push	{r3, lr}
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 8001ccc:	f000 fbfe 	bl	80024cc <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8001cd0:	f000 fc04 	bl	80024dc <HAL_DBGMCU_DisableDBGStopMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8001cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001cd8:	f000 bc08 	b.w	80024ec <HAL_DBGMCU_DisableDBGStandbyMode>

08001cdc <DBG_Disable>:
{
 8001cdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cde:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8001ce0:	2203      	movs	r2, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001ce6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8001ce8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001cec:	e9cd 3201 	strd	r3, r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <DBG_Disable+0x3c>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001cf4:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <DBG_Disable+0x40>)
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	61da      	str	r2, [r3, #28]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f001 f8b0 	bl	8002e6c <HAL_GPIO_Init>
  DBG_ConfigForLpm(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff ffdc 	bl	8001cca <DBG_ConfigForLpm>
}
 8001d12:	b007      	add	sp, #28
 8001d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020000 	.word	0x40020000

08001d20 <DBG_ProbesInit>:
#endif /* PROBE_PINS_ENABLED */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001d20:	4770      	bx	lr
	...

08001d24 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <EnvSensors_Read+0x18>)
  sensor_data->temperature = TEMPERATURE_Value;
  sensor_data->pressure    = PRESSURE_Value;

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001d26:	4a06      	ldr	r2, [pc, #24]	@ (8001d40 <EnvSensors_Read+0x1c>)
  sensor_data->humidity    = HUMIDITY_Value;
 8001d28:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <EnvSensors_Read+0x20>)
 8001d2c:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <EnvSensors_Read+0x24>)
 8001d30:	6003      	str	r3, [r0, #0]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <EnvSensors_Read+0x28>)
 8001d34:	e9c0 2303 	strd	r2, r3, [r0, #12]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001d38:	2000      	movs	r0, #0
 8001d3a:	4770      	bx	lr
 8001d3c:	42480000 	.word	0x42480000
 8001d40:	003e090d 	.word	0x003e090d
 8001d44:	41900000 	.word	0x41900000
 8001d48:	447a0000 	.word	0x447a0000
 8001d4c:	000503ab 	.word	0x000503ab

08001d50 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 8001d50:	2000      	movs	r0, #0
 8001d52:	4770      	bx	lr

08001d54 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d54:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance        = USART2;
  huart2.Init.BaudRate   = USART_BAUDRATE;
 8001d56:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance        = USART2;
 8001d5a:	4809      	ldr	r0, [pc, #36]	@ (8001d80 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate   = USART_BAUDRATE;
 8001d5c:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <MX_USART2_UART_Init+0x30>)
 8001d5e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	2300      	movs	r3, #0
  huart2.Init.StopBits   = UART_STOPBITS_1;
  huart2.Init.Parity     = UART_PARITY_NONE;
  huart2.Init.Mode       = UART_MODE_TX;
 8001d64:	2208      	movs	r2, #8
  huart2.Init.StopBits   = UART_STOPBITS_1;
 8001d66:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001d6a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity     = UART_PARITY_NONE;
 8001d6e:	6103      	str	r3, [r0, #16]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d70:	f002 fbea 	bl	8004548 <HAL_UART_Init>
 8001d74:	b118      	cbz	r0, 8001d7e <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001d7a:	f7ff bbd3 	b.w	8001524 <Error_Handler>
}
 8001d7e:	bd08      	pop	{r3, pc}
 8001d80:	2000031c 	.word	0x2000031c
 8001d84:	40004400 	.word	0x40004400

08001d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	2214      	movs	r2, #20
{
 8001d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8c:	4606      	mov	r6, r0
 8001d8e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	eb0d 0002 	add.w	r0, sp, r2
 8001d94:	2100      	movs	r1, #0
 8001d96:	f00a fd19 	bl	800c7cc <memset>

  if (uartHandle->Instance == USART2)
 8001d9a:	6832      	ldr	r2, [r6, #0]
 8001d9c:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <HAL_UART_MspInit+0xf8>)
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d16c      	bne.n	8001e7c <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8001da2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8001da6:	69da      	ldr	r2, [r3, #28]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2502      	movs	r5, #2
    USARTx_TX_GPIO_CLK_ENABLE();
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	61da      	str	r2, [r3, #28]
 8001db0:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001db2:	2407      	movs	r4, #7
    USARTx_TX_GPIO_CLK_ENABLE();
 8001db4:	f002 0201 	and.w	r2, r2, #1
 8001db8:	9200      	str	r2, [sp, #0]
 8001dba:	9a00      	ldr	r2, [sp, #0]
    USARTx_RX_GPIO_CLK_ENABLE();
 8001dbc:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001dbe:	2703      	movs	r7, #3
    USARTx_RX_GPIO_CLK_ENABLE();
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	61da      	str	r2, [r3, #28]
 8001dc6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	482e      	ldr	r0, [pc, #184]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
    USARTx_RX_GPIO_CLK_ENABLE();
 8001dca:	f002 0201 	and.w	r2, r2, #1
 8001dce:	9201      	str	r2, [sp, #4]
 8001dd0:	9a01      	ldr	r2, [sp, #4]
    __USART2_CLK_ENABLE();
 8001dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	a905      	add	r1, sp, #20
    __USART2_CLK_ENABLE();
 8001dd6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001dda:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dde:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001de2:	9202      	str	r2, [sp, #8]
 8001de4:	9a02      	ldr	r2, [sp, #8]
    DMAx_CLK_ENABLE();
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001dec:	61da      	str	r2, [r3, #28]
 8001dee:	69da      	ldr	r2, [r3, #28]
 8001df0:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 8001df4:	9203      	str	r2, [sp, #12]
 8001df6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001dfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001e02:	e9cd 7408 	strd	r7, r4, [sp, #32]
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	9304      	str	r3, [sp, #16]
 8001e0c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f001 f82a 	bl	8002e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8001e18:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8001e20:	4818      	ldr	r0, [pc, #96]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e22:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001e24:	e9cd 5707 	strd	r5, r7, [sp, #28]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001e28:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f001 f81f 	bl	8002e6c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001e2e:	2310      	movs	r3, #16
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8001e30:	4c15      	ldr	r4, [pc, #84]	@ (8001e88 <HAL_UART_MspInit+0x100>)
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001e32:	4a16      	ldr	r2, [pc, #88]	@ (8001e8c <HAL_UART_MspInit+0x104>)
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e34:	f104 0044 	add.w	r0, r4, #68	@ 0x44
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001e38:	e9c4 2311 	strd	r2, r3, [r4, #68]	@ 0x44
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001e3c:	2380      	movs	r3, #128	@ 0x80
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
 8001e3e:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e42:	e9c4 3514 	strd	r3, r5, [r4, #80]	@ 0x50
    hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001e46:	64e5      	str	r5, [r4, #76]	@ 0x4c
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8001e48:	6625      	str	r5, [r4, #96]	@ 0x60
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e4a:	f000 fea7 	bl	8002b9c <HAL_DMA_Init>
 8001e4e:	f104 0544 	add.w	r5, r4, #68	@ 0x44
 8001e52:	b108      	cbz	r0, 8001e58 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001e54:	f7ff fb66 	bl	8001524 <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2011      	movs	r0, #17
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 8001e5e:	6375      	str	r5, [r6, #52]	@ 0x34
 8001e60:	66a6      	str	r6, [r4, #104]	@ 0x68
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8001e62:	f000 fe4b 	bl	8002afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8001e66:	2011      	movs	r0, #17
 8001e68:	f000 fe78 	bl	8002b5c <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8001e6c:	2026      	movs	r0, #38	@ 0x26
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2100      	movs	r1, #0
 8001e72:	f000 fe43 	bl	8002afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8001e76:	2026      	movs	r0, #38	@ 0x26
 8001e78:	f000 fe70 	bl	8002b5c <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e7c:	b00b      	add	sp, #44	@ 0x2c
 8001e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e80:	40004400 	.word	0x40004400
 8001e84:	40020000 	.word	0x40020000
 8001e88:	2000031c 	.word	0x2000031c
 8001e8c:	40026080 	.word	0x40026080

08001e90 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8001e90:	6802      	ldr	r2, [r0, #0]
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_UART_MspDeInit+0x30>)
{
 8001e94:	b510      	push	{r4, lr}
  if (uartHandle->Instance == USART2)
 8001e96:	429a      	cmp	r2, r3
{
 8001e98:	4604      	mov	r4, r0
  if (uartHandle->Instance == USART2)
 8001e9a:	d110      	bne.n	8001ebe <HAL_UART_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001e9c:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_UART_MspDeInit+0x34>)

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8001e9e:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 8001ea0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8001ea2:	4809      	ldr	r0, [pc, #36]	@ (8001ec8 <HAL_UART_MspDeInit+0x38>)
    __HAL_RCC_USART2_CLK_DISABLE();
 8001ea4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001ea8:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8001eaa:	f001 f8b1 	bl	8003010 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001eae:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001eb0:	f000 feb8 	bl	8002c24 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001eb8:	2026      	movs	r0, #38	@ 0x26
 8001eba:	f000 be5d 	b.w	8002b78 <HAL_NVIC_DisableIRQ>
}
 8001ebe:	bd10      	pop	{r4, pc}
 8001ec0:	40004400 	.word	0x40004400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000

08001ecc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001ecc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001ece:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <vcom_Init+0x14>)
 8001ed0:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001ed2:	f7ff fabb 	bl	800144c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ed6:	f7ff ff3d 	bl	8001d54 <MX_USART2_UART_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001eda:	2000      	movs	r0, #0
 8001edc:	bd08      	pop	{r3, pc}
 8001ede:	bf00      	nop
 8001ee0:	200003a4 	.word	0x200003a4

08001ee4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001ee4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <vcom_DeInit+0x24>)
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001ee8:	4808      	ldr	r0, [pc, #32]	@ (8001f0c <vcom_DeInit+0x28>)
  __HAL_RCC_USART2_FORCE_RESET();
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001ef0:	619a      	str	r2, [r3, #24]
  __HAL_RCC_USART2_RELEASE_RESET();
 8001ef2:	699a      	ldr	r2, [r3, #24]
 8001ef4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001ef8:	619a      	str	r2, [r3, #24]
  HAL_UART_MspDeInit(&huart2);
 8001efa:	f7ff ffc9 	bl	8001e90 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel7_IRQn);
 8001efe:	2011      	movs	r0, #17
 8001f00:	f000 fe3a 	bl	8002b78 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001f04:	2000      	movs	r0, #0
 8001f06:	bd08      	pop	{r3, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	2000031c 	.word	0x2000031c

08001f10 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001f10:	b508      	push	{r3, lr}
 8001f12:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001f14:	4601      	mov	r1, r0
 8001f16:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <vcom_Trace_DMA+0x10>)
 8001f18:	f002 fb44 	bl	80045a4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	bd08      	pop	{r3, pc}
 8001f20:	2000031c 	.word	0x2000031c

08001f24 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001f24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_ReceiveInit_1 */

  /* USER CODE END vcom_ReceiveInit_1 */
  /*record call back*/
  RxCpltCallback = RxCb;
 8001f26:	4904      	ldr	r1, [pc, #16]	@ (8001f38 <vcom_ReceiveInit+0x14>)

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001f28:	2201      	movs	r2, #1
  RxCpltCallback = RxCb;
 8001f2a:	6048      	str	r0, [r1, #4]
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001f2c:	3108      	adds	r1, #8
 8001f2e:	4803      	ldr	r0, [pc, #12]	@ (8001f3c <vcom_ReceiveInit+0x18>)
 8001f30:	f002 fd27 	bl	8004982 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001f34:	2000      	movs	r0, #0
 8001f36:	bd08      	pop	{r3, pc}
 8001f38:	200003a4 	.word	0x200003a4
 8001f3c:	2000031c 	.word	0x2000031c

08001f40 <HAL_UART_TxCpltCallback>:
{
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8001f40:	4b01      	ldr	r3, [pc, #4]	@ (8001f48 <HAL_UART_TxCpltCallback+0x8>)
 8001f42:	2000      	movs	r0, #0
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4718      	bx	r3
 8001f48:	200003a4 	.word	0x200003a4

08001f4c <HAL_UART_RxCpltCallback>:

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001f4c:	b510      	push	{r4, lr}
 8001f4e:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8001f50:	4807      	ldr	r0, [pc, #28]	@ (8001f70 <HAL_UART_RxCpltCallback+0x24>)
 8001f52:	6843      	ldr	r3, [r0, #4]
 8001f54:	b123      	cbz	r3, 8001f60 <HAL_UART_RxCpltCallback+0x14>
 8001f56:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001f58:	b912      	cbnz	r2, 8001f60 <HAL_UART_RxCpltCallback+0x14>
  {
    RxCpltCallback(&charRx, 1, 0);
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	3008      	adds	r0, #8
 8001f5e:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8001f60:	4620      	mov	r0, r4
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8001f66:	2201      	movs	r2, #1
 8001f68:	4902      	ldr	r1, [pc, #8]	@ (8001f74 <HAL_UART_RxCpltCallback+0x28>)
 8001f6a:	f002 bd0a 	b.w	8004982 <HAL_UART_Receive_IT>
 8001f6e:	bf00      	nop
 8001f70:	200003a4 	.word	0x200003a4
 8001f74:	200003ac 	.word	0x200003ac

08001f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f7a:	e003      	b.n	8001f84 <LoopCopyDataInit>

08001f7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f82:	3104      	adds	r1, #4

08001f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f84:	480a      	ldr	r0, [pc, #40]	@ (8001fb0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f8c:	d3f6      	bcc.n	8001f7c <CopyDataInit>
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f90:	e002      	b.n	8001f98 <LoopFillZerobss>

08001f92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f94:	f842 3b04 	str.w	r3, [r2], #4

08001f98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f9c:	d3f9      	bcc.n	8001f92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f9e:	f000 fa39 	bl	8002414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f00a fc1b 	bl	800c7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fa6:	f7ff fab3 	bl	8001510 <main>
  bx lr
 8001faa:	4770      	bx	lr
  ldr r3, =_sidata
 8001fac:	0800d520 	.word	0x0800d520
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001fb4:	200000dc 	.word	0x200000dc
  ldr r2, =_sbss
 8001fb8:	200000dc 	.word	0x200000dc
  ldr r3, = _ebss
 8001fbc:	200017f4 	.word	0x200017f4

08001fc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC1_IRQHandler>
	...

08001fc4 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8001fc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8001fc8:	b513      	push	{r0, r1, r4, lr}
 8001fca:	4614      	mov	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	4804      	ldr	r0, [pc, #16]	@ (8001fe8 <BSP_SPI1_SendRecv+0x24>)
 8001fd6:	f002 f908 	bl	80041ea <HAL_SPI_TransmitReceive>
  {
    ret = len;
 8001fda:	2800      	cmp	r0, #0
  }
  return ret;
}
 8001fdc:	bf0c      	ite	eq
 8001fde:	4620      	moveq	r0, r4
 8001fe0:	f06f 0005 	mvnne.w	r0, #5
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd10      	pop	{r4, pc}
 8001fe8:	200003b0 	.word	0x200003b0

08001fec <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 8001fec:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001fee:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001ff2:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <MX_SPI1_Init+0x58>)
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001ff4:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001ff6:	e9c0 2300 	strd	r2, r3, [r0]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001ffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001ffe:	e9c0 5502 	strd	r5, r5, [r0, #8]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002002:	6183      	str	r3, [r0, #24]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002004:	e9c0 5504 	strd	r5, r5, [r0, #16]
{
 8002008:	4604      	mov	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 800200a:	f001 fc61 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 800200e:	462b      	mov	r3, r5
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <MX_SPI1_Init+0x5c>)
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8002012:	490e      	ldr	r1, [pc, #56]	@ (800204c <MX_SPI1_Init+0x60>)
 8002014:	4288      	cmp	r0, r1
 8002016:	d80d      	bhi.n	8002034 <MX_SPI1_Init+0x48>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002018:	2300      	movs	r3, #0
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800201a:	e9c4 3308 	strd	r3, r3, [r4, #32]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800201e:	62a3      	str	r3, [r4, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8002020:	2307      	movs	r3, #7
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002022:	4620      	mov	r0, r4
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002024:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8002026:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002028:	f002 f877 	bl	800411a <HAL_SPI_Init>
}
 800202c:	3800      	subs	r0, #0
 800202e:	bf18      	it	ne
 8002030:	2001      	movne	r0, #1
 8002032:	bd38      	pop	{r3, r4, r5, pc}
  {
    presc = baudrate[divisor];
    if (++divisor > 7)
 8002034:	3301      	adds	r3, #1
 8002036:	2b08      	cmp	r3, #8
    presc = baudrate[divisor];
 8002038:	f852 5b04 	ldr.w	r5, [r2], #4
    if (++divisor > 7)
 800203c:	d0ec      	beq.n	8002018 <MX_SPI1_Init+0x2c>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 800203e:	0840      	lsrs	r0, r0, #1
 8002040:	e7e8      	b.n	8002014 <MX_SPI1_Init+0x28>
 8002042:	bf00      	nop
 8002044:	40013000 	.word	0x40013000
 8002048:	0800c9f0 	.word	0x0800c9f0
 800204c:	00989680 	.word	0x00989680

08002050 <BSP_SPI1_Init>:
{
 8002050:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8002052:	4c1c      	ldr	r4, [pc, #112]	@ (80020c4 <BSP_SPI1_Init+0x74>)
 8002054:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <BSP_SPI1_Init+0x78>)
{
 8002056:	b087      	sub	sp, #28
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002058:	4620      	mov	r0, r4
  hspi1.Instance  = SPI1;
 800205a:	6023      	str	r3, [r4, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800205c:	f002 fa06 	bl	800446c <HAL_SPI_GetState>
 8002060:	b110      	cbz	r0, 8002068 <BSP_SPI1_Init+0x18>
  int32_t ret = BSP_ERROR_NONE;
 8002062:	2000      	movs	r0, #0
}
 8002064:	b007      	add	sp, #28
 8002066:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8002068:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <BSP_SPI1_Init+0x7c>)
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800206a:	2505      	movs	r5, #5
  __HAL_RCC_SPI1_CLK_ENABLE();
 800206c:	6a1a      	ldr	r2, [r3, #32]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800206e:	a901      	add	r1, sp, #4
  __HAL_RCC_SPI1_CLK_ENABLE();
 8002070:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002074:	621a      	str	r2, [r3, #32]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	e9cd 3002 	strd	r3, r0, [sp, #8]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002086:	2303      	movs	r3, #3
 8002088:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800208c:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800208e:	4810      	ldr	r0, [pc, #64]	@ (80020d0 <BSP_SPI1_Init+0x80>)
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002090:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002092:	f000 feeb 	bl	8002e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002096:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002098:	480d      	ldr	r0, [pc, #52]	@ (80020d0 <BSP_SPI1_Init+0x80>)
 800209a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800209c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800209e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80020a0:	f000 fee4 	bl	8002e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80020a4:	2320      	movs	r3, #32
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80020a6:	480a      	ldr	r0, [pc, #40]	@ (80020d0 <BSP_SPI1_Init+0x80>)
 80020a8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80020aa:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80020ac:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80020ae:	f000 fedd 	bl	8002e6c <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7ff ff9a 	bl	8001fec <MX_SPI1_Init>
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d0d2      	beq.n	8002062 <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 80020bc:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80020c0:	e7d0      	b.n	8002064 <BSP_SPI1_Init+0x14>
 80020c2:	bf00      	nop
 80020c4:	200003b0 	.word	0x200003b0
 80020c8:	40013000 	.word	0x40013000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020000 	.word	0x40020000

080020d4 <SX1262DVK1DAS_RADIO_IoInit>:
static void SX1262DVK1DAS_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void SX1262DVK1DAS_RADIO_SPI_IoDeInit(void);
/* Exported functions --------------------------------------------------------*/

void SX1262DVK1DAS_RADIO_IoInit(void)
{
 80020d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef initStruct = {0};
 80020d8:	2600      	movs	r6, #0
{
 80020da:	b093      	sub	sp, #76	@ 0x4c
  GPIO_InitTypeDef initStruct = {0};
 80020dc:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
  SPI_HandleTypeDef dummy_hspi;

  /* DIO IO Init */

//   Set DioIrqHandler port in IT_RISING mode
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80020e0:	4c4e      	ldr	r4, [pc, #312]	@ (800221c <SX1262DVK1DAS_RADIO_IoInit+0x148>)
  GPIO_InitTypeDef initStruct = {0};
 80020e2:	960c      	str	r6, [sp, #48]	@ 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80020e4:	69e3      	ldr	r3, [r4, #28]
  initStruct.Mode = GPIO_MODE_IT_RISING;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;
 80020e6:	f04f 0803 	mov.w	r8, #3
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	61e3      	str	r3, [r4, #28]
 80020f0:	69e3      	ldr	r3, [r4, #28]
  initStruct.Pin = RADIO_DIO_1_PIN;
 80020f2:	2510      	movs	r5, #16
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	9b01      	ldr	r3, [sp, #4]
  initStruct.Mode = GPIO_MODE_IT_RISING;
 80020fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8002100:	4f47      	ldr	r7, [pc, #284]	@ (8002220 <SX1262DVK1DAS_RADIO_IoInit+0x14c>)
 8002102:	a908      	add	r1, sp, #32
 8002104:	4638      	mov	r0, r7
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8002106:	9309      	str	r3, [sp, #36]	@ 0x24
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002108:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
  initStruct.Pin = RADIO_DIO_1_PIN;
 800210c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 800210e:	f000 fead 	bl	8002e6c <HAL_GPIO_Init>

  /* Radio IO Init */
  RADIO_DEV_SEL_CLK_ENABLE();
 8002112:	69e3      	ldr	r3, [r4, #28]
  RADIO_BUSY_CLK_ENABLE();
  initStruct.Mode = GPIO_MODE_INPUT;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Pin = DEVICE_SEL_PIN;
  HAL_GPIO_Init(DEVICE_SEL_PORT, &initStruct);
 8002114:	a908      	add	r1, sp, #32
  RADIO_DEV_SEL_CLK_ENABLE();
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	61e3      	str	r3, [r4, #28]
 800211c:	69e3      	ldr	r3, [r4, #28]

  /* Antenna IO Init */
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 800211e:	f44f 7900 	mov.w	r9, #512	@ 0x200
  RADIO_DEV_SEL_CLK_ENABLE();
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	9b02      	ldr	r3, [sp, #8]
  RADIO_BUSY_CLK_ENABLE();
 800212a:	69e3      	ldr	r3, [r4, #28]
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	61e3      	str	r3, [r4, #28]
 8002132:	69e3      	ldr	r3, [r4, #28]
  initStruct.Pin = DEVICE_SEL_PIN;
 8002134:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(DEVICE_SEL_PORT, &initStruct);
 8002136:	4d3b      	ldr	r5, [pc, #236]	@ (8002224 <SX1262DVK1DAS_RADIO_IoInit+0x150>)
  RADIO_BUSY_CLK_ENABLE();
 8002138:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_Init(DEVICE_SEL_PORT, &initStruct);
 800213c:	4628      	mov	r0, r5
  RADIO_BUSY_CLK_ENABLE();
 800213e:	9303      	str	r3, [sp, #12]
 8002140:	9b03      	ldr	r3, [sp, #12]
  initStruct.Pull = GPIO_NOPULL;
 8002142:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(DEVICE_SEL_PORT, &initStruct);
 8002146:	f000 fe91 	bl	8002e6c <HAL_GPIO_Init>
  initStruct.Pin = RADIO_BUSY_PIN;
 800214a:	2308      	movs	r3, #8
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 800214c:	4638      	mov	r0, r7
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 800214e:	2701      	movs	r7, #1
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8002150:	a908      	add	r1, sp, #32
  initStruct.Pin = RADIO_BUSY_PIN;
 8002152:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8002154:	f000 fe8a 	bl	8002e6c <HAL_GPIO_Init>
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8002158:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 800215a:	4628      	mov	r0, r5
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	61e3      	str	r3, [r4, #28]
 8002162:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8002164:	a908      	add	r1, sp, #32
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	9304      	str	r3, [sp, #16]
 800216c:	9b04      	ldr	r3, [sp, #16]
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 800216e:	e9cd 9708 	strd	r9, r7, [sp, #32]
  initStruct.Pull = GPIO_NOPULL;
 8002172:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8002174:	f000 fe7a 	bl	8002e6c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8002178:	4632      	mov	r2, r6
 800217a:	4649      	mov	r1, r9
 800217c:	4628      	mov	r0, r5
 800217e:	f000 ffd5 	bl	800312c <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002182:	69e3      	ldr	r3, [r4, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002184:	4628      	mov	r0, r5
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002186:	433b      	orrs	r3, r7
 8002188:	61e3      	str	r3, [r4, #28]
 800218a:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800218c:	a90d      	add	r1, sp, #52	@ 0x34
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800218e:	403b      	ands	r3, r7
 8002190:	9305      	str	r3, [sp, #20]
 8002192:	9b05      	ldr	r3, [sp, #20]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002194:	69e3      	ldr	r3, [r4, #28]
 8002196:	433b      	orrs	r3, r7
 8002198:	61e3      	str	r3, [r4, #28]
 800219a:	69e3      	ldr	r3, [r4, #28]
 800219c:	403b      	ands	r3, r7
 800219e:	9306      	str	r3, [sp, #24]
 80021a0:	9b06      	ldr	r3, [sp, #24]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80021a2:	69e3      	ldr	r3, [r4, #28]
 80021a4:	433b      	orrs	r3, r7
 80021a6:	61e3      	str	r3, [r4, #28]
 80021a8:	69e3      	ldr	r3, [r4, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80021ae:	403b      	ands	r3, r7
 80021b0:	9307      	str	r3, [sp, #28]
 80021b2:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80021b6:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ba:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80021be:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80021c0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80021c4:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80021c6:	f000 fe51 	bl	8002e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80021ca:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80021cc:	4628      	mov	r0, r5
 80021ce:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80021d0:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80021d2:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80021d6:	f000 fe49 	bl	8002e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80021da:	2320      	movs	r3, #32
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80021dc:	4628      	mov	r0, r5
 80021de:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80021e0:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80021e2:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80021e6:	f000 fe41 	bl	8002e6c <HAL_GPIO_Init>
  RADIO_NSS_CLK_ENABLE();
 80021ea:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 80021ec:	4628      	mov	r0, r5
  RADIO_NSS_CLK_ENABLE();
 80021ee:	433b      	orrs	r3, r7
 80021f0:	61e3      	str	r3, [r4, #28]
 80021f2:	69e3      	ldr	r3, [r4, #28]
  initStruct.Pin = RADIO_NSS_PIN;
 80021f4:	f44f 7480 	mov.w	r4, #256	@ 0x100
  RADIO_NSS_CLK_ENABLE();
 80021f8:	403b      	ands	r3, r7
 80021fa:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 80021fc:	a908      	add	r1, sp, #32
  RADIO_NSS_CLK_ENABLE();
 80021fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  initStruct.Pull = GPIO_NOPULL;
 8002200:	e9cd 7609 	strd	r7, r6, [sp, #36]	@ 0x24
  initStruct.Pin = RADIO_NSS_PIN;
 8002204:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8002206:	f000 fe31 	bl	8002e6c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN,  GPIO_PIN_SET);
 800220a:	463a      	mov	r2, r7
 800220c:	4621      	mov	r1, r4
 800220e:	4628      	mov	r0, r5
 8002210:	f000 ff8c 	bl	800312c <HAL_GPIO_WritePin>
}
 8002214:	b013      	add	sp, #76	@ 0x4c
 8002216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40020400 	.word	0x40020400
 8002224:	40020000 	.word	0x40020000

08002228 <SX1262DVK1DAS_RADIO_IoDeInit>:
{
 8002228:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800222a:	2302      	movs	r3, #2
 800222c:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800222e:	2780      	movs	r7, #128	@ 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002230:	2640      	movs	r6, #64	@ 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002232:	2520      	movs	r5, #32
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002234:	4c11      	ldr	r4, [pc, #68]	@ (800227c <SX1262DVK1DAS_RADIO_IoDeInit+0x54>)
{
 8002236:	b087      	sub	sp, #28
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002238:	4620      	mov	r0, r4
 800223a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800223c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002240:	9701      	str	r7, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002242:	f000 fe13 	bl	8002e6c <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002246:	4620      	mov	r0, r4
 8002248:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800224a:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800224c:	f000 fe0e 	bl	8002e6c <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002250:	4620      	mov	r0, r4
 8002252:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002254:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002256:	f000 fe09 	bl	8002e6c <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 800225a:	4639      	mov	r1, r7
 800225c:	4620      	mov	r0, r4
 800225e:	2200      	movs	r2, #0
 8002260:	f000 ff64 	bl	800312c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8002264:	4631      	mov	r1, r6
 8002266:	4620      	mov	r0, r4
 8002268:	2200      	movs	r2, #0
 800226a:	f000 ff5f 	bl	800312c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	4629      	mov	r1, r5
 8002272:	4620      	mov	r0, r4
 8002274:	f000 ff5a 	bl	800312c <HAL_GPIO_WritePin>
}
 8002278:	b007      	add	sp, #28
 800227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227c:	40020000 	.word	0x40020000

08002280 <SX1262DVK1DAS_RADIO_IoIrqInit>:
{
 8002280:	b538      	push	{r3, r4, r5, lr}
 8002282:	4604      	mov	r4, r0
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 8002284:	4d09      	ldr	r5, [pc, #36]	@ (80022ac <SX1262DVK1DAS_RADIO_IoIrqInit+0x2c>)
 8002286:	490a      	ldr	r1, [pc, #40]	@ (80022b0 <SX1262DVK1DAS_RADIO_IoIrqInit+0x30>)
 8002288:	4628      	mov	r0, r5
 800228a:	f000 fdd9 	bl	8002e40 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[0], HAL_EXTI_COMMON_CB_ID, irqHandlers[0]);
 800228e:	6822      	ldr	r2, [r4, #0]
 8002290:	2100      	movs	r1, #0
 8002292:	4628      	mov	r0, r5
 8002294:	f000 fdcd 	bl	8002e32 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(RADIO_DIO_1_IRQn, RADIO_DIO_1_IT_PRIO, 0x00);
 8002298:	2200      	movs	r2, #0
 800229a:	200a      	movs	r0, #10
 800229c:	4611      	mov	r1, r2
 800229e:	f000 fc2d 	bl	8002afc <HAL_NVIC_SetPriority>
}
 80022a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_NVIC_EnableIRQ(RADIO_DIO_1_IRQn);
 80022a6:	200a      	movs	r0, #10
 80022a8:	f000 bc58 	b.w	8002b5c <HAL_NVIC_EnableIRQ>
 80022ac:	20000460 	.word	0x20000460
 80022b0:	06000004 	.word	0x06000004

080022b4 <SX1262DVK1DAS_RADIO_GetWakeUpTime>:
}
 80022b4:	2005      	movs	r0, #5
 80022b6:	4770      	bx	lr

080022b8 <SX1262DVK1DAS_RADIO_Reset>:
{
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = { 0 };
 80022ba:	2714      	movs	r7, #20
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022bc:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 80022be:	2603      	movs	r6, #3
{
 80022c0:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 80022c2:	463a      	mov	r2, r7
 80022c4:	2100      	movs	r1, #0
 80022c6:	a801      	add	r0, sp, #4
 80022c8:	f00a fa80 	bl	800c7cc <memset>
  RADIO_RESET_CLK_ENABLE();
 80022cc:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <SX1262DVK1DAS_RADIO_Reset+0x70>)
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80022ce:	4d17      	ldr	r5, [pc, #92]	@ (800232c <SX1262DVK1DAS_RADIO_Reset+0x74>)
  RADIO_RESET_CLK_ENABLE();
 80022d0:	69da      	ldr	r2, [r3, #28]
  HAL_Delay(10);
 80022d2:	200a      	movs	r0, #10
  RADIO_RESET_CLK_ENABLE();
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	61da      	str	r2, [r3, #28]
 80022da:	69db      	ldr	r3, [r3, #28]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022dc:	9402      	str	r4, [sp, #8]
  RADIO_RESET_CLK_ENABLE();
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	9b00      	ldr	r3, [sp, #0]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80022e6:	9604      	str	r6, [sp, #16]
  HAL_Delay(10);
 80022e8:	f7ff fce9 	bl	8001cbe <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80022ec:	4628      	mov	r0, r5
 80022ee:	a901      	add	r1, sp, #4
  initStruct.Pin = RADIO_RESET_PIN;
 80022f0:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80022f2:	f000 fdbb 	bl	8002e6c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	4621      	mov	r1, r4
 80022fa:	4628      	mov	r0, r5
 80022fc:	f000 ff16 	bl	800312c <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8002300:	4638      	mov	r0, r7
 8002302:	f7ff fcdc 	bl	8001cbe <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8002306:	4628      	mov	r0, r5
 8002308:	a901      	add	r1, sp, #4
  initStruct.Pin = RADIO_RESET_PIN;
 800230a:	e9cd 4601 	strd	r4, r6, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800230e:	f000 fdad 	bl	8002e6c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);  // internal pull-up
 8002312:	2200      	movs	r2, #0
 8002314:	4621      	mov	r1, r4
 8002316:	4628      	mov	r0, r5
 8002318:	f000 ff08 	bl	800312c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800231c:	200a      	movs	r0, #10
 800231e:	f7ff fcce 	bl	8001cbe <HAL_Delay>
}
 8002322:	b007      	add	sp, #28
 8002324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40020000 	.word	0x40020000

08002330 <SX1262DVK1DAS_RADIO_WaitOnBusy>:
{
 8002330:	b510      	push	{r4, lr}
  while (HAL_GPIO_ReadPin(RADIO_BUSY_PORT, RADIO_BUSY_PIN) == 1);
 8002332:	4c04      	ldr	r4, [pc, #16]	@ (8002344 <SX1262DVK1DAS_RADIO_WaitOnBusy+0x14>)
 8002334:	2108      	movs	r1, #8
 8002336:	4620      	mov	r0, r4
 8002338:	f000 fef2 	bl	8003120 <HAL_GPIO_ReadPin>
 800233c:	2801      	cmp	r0, #1
 800233e:	d0f9      	beq.n	8002334 <SX1262DVK1DAS_RADIO_WaitOnBusy+0x4>
}
 8002340:	bd10      	pop	{r4, pc}
 8002342:	bf00      	nop
 8002344:	40020400 	.word	0x40020400

08002348 <SX1262DVK1DAS_RADIO_ChipSelect>:
  if (state == 0)
 8002348:	4602      	mov	r2, r0
 800234a:	b920      	cbnz	r0, 8002356 <SX1262DVK1DAS_RADIO_ChipSelect+0xe>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800234c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <SX1262DVK1DAS_RADIO_ChipSelect+0x14>)
 8002352:	f000 beeb 	b.w	800312c <HAL_GPIO_WritePin>
 8002356:	2201      	movs	r2, #1
 8002358:	e7f8      	b.n	800234c <SX1262DVK1DAS_RADIO_ChipSelect+0x4>
 800235a:	bf00      	nop
 800235c:	40020000 	.word	0x40020000

08002360 <SX1262DVK1DAS_RADIO_GetPaSelect>:
  if (HAL_GPIO_ReadPin(DEVICE_SEL_PORT, DEVICE_SEL_PIN) ==  GPIO_PIN_SET)
 8002360:	2110      	movs	r1, #16
{
 8002362:	b508      	push	{r3, lr}
  if (HAL_GPIO_ReadPin(DEVICE_SEL_PORT, DEVICE_SEL_PIN) ==  GPIO_PIN_SET)
 8002364:	4803      	ldr	r0, [pc, #12]	@ (8002374 <SX1262DVK1DAS_RADIO_GetPaSelect+0x14>)
 8002366:	f000 fedb 	bl	8003120 <HAL_GPIO_ReadPin>
    return SX1262;
 800236a:	2801      	cmp	r0, #1
}
 800236c:	bf18      	it	ne
 800236e:	2002      	movne	r0, #2
 8002370:	bd08      	pop	{r3, pc}
 8002372:	bf00      	nop
 8002374:	40020000 	.word	0x40020000

08002378 <SX1262DVK1DAS_RADIO_SetAntSw>:
  switch (state)
 8002378:	4602      	mov	r2, r0
 800237a:	b920      	cbnz	r0, 8002386 <SX1262DVK1DAS_RADIO_SetAntSw+0xe>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_SET);
 800237c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <SX1262DVK1DAS_RADIO_SetAntSw+0x14>)
 8002382:	f000 bed3 	b.w	800312c <HAL_GPIO_WritePin>
 8002386:	2201      	movs	r2, #1
 8002388:	e7f8      	b.n	800237c <SX1262DVK1DAS_RADIO_SetAntSw+0x4>
 800238a:	bf00      	nop
 800238c:	40020000 	.word	0x40020000

08002390 <SX1262DVK1DAS_RADIO_BoardIsTcxo>:
}
 8002390:	2001      	movs	r0, #1
 8002392:	4770      	bx	lr

08002394 <SX1262DVK1DAS_RADIO_BoardSetLedTx>:
  if (state == false)
 8002394:	4602      	mov	r2, r0
 8002396:	b918      	cbnz	r0, 80023a0 <SX1262DVK1DAS_RADIO_BoardSetLedTx+0xc>
    HAL_GPIO_WritePin(RADIO_LEDTX_PORT, RADIO_LEDTX_PIN, GPIO_PIN_SET);
 8002398:	2102      	movs	r1, #2
 800239a:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <SX1262DVK1DAS_RADIO_BoardSetLedTx+0x10>)
 800239c:	f000 bec6 	b.w	800312c <HAL_GPIO_WritePin>
 80023a0:	2201      	movs	r2, #1
 80023a2:	e7f9      	b.n	8002398 <SX1262DVK1DAS_RADIO_BoardSetLedTx+0x4>
 80023a4:	40020800 	.word	0x40020800

080023a8 <SX1262DVK1DAS_RADIO_BoardSetLedRx>:
  if (state == false)
 80023a8:	4602      	mov	r2, r0
 80023aa:	b918      	cbnz	r0, 80023b4 <SX1262DVK1DAS_RADIO_BoardSetLedRx+0xc>
    HAL_GPIO_WritePin(RADIO_LEDRX_PORT, RADIO_LEDRX_PIN, GPIO_PIN_RESET);
 80023ac:	2101      	movs	r1, #1
 80023ae:	4802      	ldr	r0, [pc, #8]	@ (80023b8 <SX1262DVK1DAS_RADIO_BoardSetLedRx+0x10>)
 80023b0:	f000 bebc 	b.w	800312c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RADIO_LEDRX_PORT, RADIO_LEDRX_PIN, GPIO_PIN_SET);
 80023b4:	2201      	movs	r2, #1
 80023b6:	e7f9      	b.n	80023ac <SX1262DVK1DAS_RADIO_BoardSetLedRx+0x4>
 80023b8:	40020800 	.word	0x40020800

080023bc <SX1262DVK1DAS_RADIO_Bus_Init>:
  RADIO_SPI_Init();
 80023bc:	f7ff be48 	b.w	8002050 <BSP_SPI1_Init>

080023c0 <SX1262DVK1DAS_RADIO_SendRecv>:
{
 80023c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80023c2:	2201      	movs	r2, #1
{
 80023c4:	f8ad 0006 	strh.w	r0, [sp, #6]
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80023c8:	f10d 010e 	add.w	r1, sp, #14
 80023cc:	f10d 0006 	add.w	r0, sp, #6
 80023d0:	f7ff fdf8 	bl	8001fc4 <BSP_SPI1_SendRecv>
}
 80023d4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80023d8:	b005      	add	sp, #20
 80023da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080023e0 <SX1262DVK1DAS_RADIO_WakeUp>:
{
 80023e0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 80023e2:	4c0b      	ldr	r4, [pc, #44]	@ (8002410 <SX1262DVK1DAS_RADIO_WakeUp+0x30>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023ea:	4620      	mov	r0, r4
 80023ec:	f000 fe9e 	bl	800312c <HAL_GPIO_WritePin>
  SX1262DVK1DAS_RADIO_SendRecv(RADIO_GET_STATUS);
 80023f0:	20c0      	movs	r0, #192	@ 0xc0
 80023f2:	f7ff ffe5 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
  SX1262DVK1DAS_RADIO_SendRecv(0);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7ff ffe2 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80023fc:	4620      	mov	r0, r4
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002404:	f000 fe92 	bl	800312c <HAL_GPIO_WritePin>
}
 8002408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SX1262DVK1DAS_RADIO_WaitOnBusy();
 800240c:	f7ff bf90 	b.w	8002330 <SX1262DVK1DAS_RADIO_WaitOnBusy>
 8002410:	40020000 	.word	0x40020000

08002414 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002414:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <SystemInit+0x3c>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800241c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	4a0c      	ldr	r2, [pc, #48]	@ (8002454 <SystemInit+0x40>)
 8002422:	400a      	ands	r2, r1
 8002424:	609a      	str	r2, [r3, #8]

  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	f022 5288 	bic.w	r2, r2, #285212672	@ 0x11000000
 800242c:	f022 1201 	bic.w	r2, r2, #65537	@ 0x10001
 8002430:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002438:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	f422 027d 	bic.w	r2, r2, #16580608	@ 0xfd0000
 8002440:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002446:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800244a:	4b03      	ldr	r3, [pc, #12]	@ (8002458 <SystemInit+0x44>)
 800244c:	609a      	str	r2, [r3, #8]
#endif
}
 800244e:	4770      	bx	lr
 8002450:	40023800 	.word	0x40023800
 8002454:	88ffc00c 	.word	0x88ffc00c
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <HAL_Init>:
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <HAL_Init+0x30>)
{
 800245e:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002460:	681a      	ldr	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002462:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	f042 0204 	orr.w	r2, r2, #4
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	f042 0202 	orr.w	r2, r2, #2
 8002470:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002472:	f000 fb31 	bl	8002ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002476:	200f      	movs	r0, #15
 8002478:	f7ff fc1d 	bl	8001cb6 <HAL_InitTick>
 800247c:	4604      	mov	r4, r0
 800247e:	b918      	cbnz	r0, 8002488 <HAL_Init+0x2c>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002480:	f7ff fad4 	bl	8001a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8002484:	4620      	mov	r0, r4
 8002486:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002488:	2401      	movs	r4, #1
 800248a:	e7fb      	b.n	8002484 <HAL_Init+0x28>
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002490:	4a03      	ldr	r2, [pc, #12]	@ (80024a0 <HAL_IncTick+0x10>)
 8002492:	4904      	ldr	r1, [pc, #16]	@ (80024a4 <HAL_IncTick+0x14>)
 8002494:	6813      	ldr	r3, [r2, #0]
 8002496:	6809      	ldr	r1, [r1, #0]
 8002498:	440b      	add	r3, r1
 800249a:	6013      	str	r3, [r2, #0]
}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000468 	.word	0x20000468
 80024a4:	20000050 	.word	0x20000050

080024a8 <HAL_GetUIDw0>:
  * @retval Device identifier 31:0 bits
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
}
 80024a8:	4b01      	ldr	r3, [pc, #4]	@ (80024b0 <HAL_GetUIDw0+0x8>)
 80024aa:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 80024ae:	4770      	bx	lr
 80024b0:	1ff80000 	.word	0x1ff80000

080024b4 <HAL_GetUIDw1>:
  * @retval Device identifier 63:32 bits
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x4U))));
}
 80024b4:	4b01      	ldr	r3, [pc, #4]	@ (80024bc <HAL_GetUIDw1+0x8>)
 80024b6:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
 80024ba:	4770      	bx	lr
 80024bc:	1ff80000 	.word	0x1ff80000

080024c0 <HAL_GetUIDw2>:
  * @retval Device identifier 95:64 bits
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
}
 80024c0:	4b01      	ldr	r3, [pc, #4]	@ (80024c8 <HAL_GetUIDw2+0x8>)
 80024c2:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
 80024c6:	4770      	bx	lr
 80024c8:	1ff80000 	.word	0x1ff80000

080024cc <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80024cc:	4a02      	ldr	r2, [pc, #8]	@ (80024d8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80024ce:	6853      	ldr	r3, [r2, #4]
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
}
 80024d6:	4770      	bx	lr
 80024d8:	e0042000 	.word	0xe0042000

080024dc <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80024dc:	4a02      	ldr	r2, [pc, #8]	@ (80024e8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80024de:	6853      	ldr	r3, [r2, #4]
 80024e0:	f023 0302 	bic.w	r3, r3, #2
 80024e4:	6053      	str	r3, [r2, #4]
}
 80024e6:	4770      	bx	lr
 80024e8:	e0042000 	.word	0xe0042000

080024ec <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80024ec:	4a02      	ldr	r2, [pc, #8]	@ (80024f8 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80024ee:	6853      	ldr	r3, [r2, #4]
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6053      	str	r3, [r2, #4]
}
 80024f6:	4770      	bx	lr
 80024f8:	e0042000 	.word	0xe0042000

080024fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024fe:	4604      	mov	r4, r0
 8002500:	2800      	cmp	r0, #0
 8002502:	f000 80b4 	beq.w	800266e <HAL_ADC_Init+0x172>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002506:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002508:	b973      	cbnz	r3, 8002528 <HAL_ADC_Init+0x2c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800250a:	6503      	str	r3, [r0, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800250c:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002510:	4b58      	ldr	r3, [pc, #352]	@ (8002674 <HAL_ADC_Init+0x178>)
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	621a      	str	r2, [r3, #32]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	9b01      	ldr	r3, [sp, #4]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002524:	f7fe fedc 	bl	80012e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002528:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800252a:	06d9      	lsls	r1, r3, #27
 800252c:	f100 809f 	bmi.w	800266e <HAL_ADC_Init+0x172>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002530:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002532:	4a51      	ldr	r2, [pc, #324]	@ (8002678 <HAL_ADC_Init+0x17c>)
    ADC_STATE_CLR_SET(hadc->State,
 8002534:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002538:	f023 0302 	bic.w	r3, r3, #2
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	64e3      	str	r3, [r4, #76]	@ 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8002542:	6853      	ldr	r3, [r2, #4]
 8002544:	6861      	ldr	r1, [r4, #4]
 8002546:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800254a:	430b      	orrs	r3, r1
 800254c:	6053      	str	r3, [r2, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800254e:	68e3      	ldr	r3, [r4, #12]
 8002550:	6962      	ldr	r2, [r4, #20]
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002552:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	431a      	orrs	r2, r3
 8002558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800255c:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	6a20      	ldr	r0, [r4, #32]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	4302      	orrs	r2, r0
 800256c:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800256e:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	2302      	movs	r3, #2
 8002574:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	fa06 f303 	lsl.w	r3, r6, r3
                hadc->Init.ChannelsBank                                        |
 8002580:	4313      	orrs	r3, r2
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002582:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002584:	6820      	ldr	r0, [r4, #0]
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002586:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002588:	bf18      	it	ne
 800258a:	6ba1      	ldrne	r1, [r4, #56]	@ 0x38
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800258c:	6925      	ldr	r5, [r4, #16]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800258e:	bf1c      	itt	ne
 8002590:	430a      	orrne	r2, r1
 8002592:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002594:	6802      	ldr	r2, [r0, #0]
 8002596:	0652      	lsls	r2, r2, #25
 8002598:	d427      	bmi.n	80025ea <HAL_ADC_Init+0xee>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800259a:	69a2      	ldr	r2, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800259c:	69e1      	ldr	r1, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800259e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80025a0:	68a2      	ldr	r2, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80025a2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80025a6:	ea42 0201 	orr.w	r2, r2, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80025aa:	d047      	beq.n	800263c <HAL_ADC_Init+0x140>
 80025ac:	f105 3cff 	add.w	ip, r5, #4294967295
 80025b0:	f1dc 0100 	rsbs	r1, ip, #0
 80025b4:	eb41 010c 	adc.w	r1, r1, ip
 80025b8:	0209      	lsls	r1, r1, #8
                  hadc->Init.LowPowerAutoPowerOff           |
 80025ba:	430a      	orrs	r2, r1
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025bc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80025c0:	2901      	cmp	r1, #1
 80025c2:	d10d      	bne.n	80025e0 <HAL_ADC_Init+0xe4>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80025c4:	2e00      	cmp	r6, #0
 80025c6:	d13b      	bne.n	8002640 <HAL_ADC_Init+0x144>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f44f 4660 	mov.w	r6, #57344	@ 0xe000
 80025ce:	3901      	subs	r1, #1
 80025d0:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 80025d4:	fab6 f686 	clz	r6, r6
 80025d8:	40b1      	lsls	r1, r6
 80025da:	4311      	orrs	r1, r2
 80025dc:	f441 6200 	orr.w	r2, r1, #2048	@ 0x800
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80025e0:	6846      	ldr	r6, [r0, #4]
 80025e2:	4926      	ldr	r1, [pc, #152]	@ (800267c <HAL_ADC_Init+0x180>)
 80025e4:	4031      	ands	r1, r6
 80025e6:	4311      	orrs	r1, r2
 80025e8:	6041      	str	r1, [r0, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80025ea:	6881      	ldr	r1, [r0, #8]
 80025ec:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <HAL_ADC_Init+0x184>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025ee:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80025f2:	ea02 0201 	and.w	r2, r2, r1
 80025f6:	ea42 0203 	orr.w	r2, r2, r3
 80025fa:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025fc:	d001      	beq.n	8002602 <HAL_ADC_Init+0x106>
 80025fe:	2d01      	cmp	r5, #1
 8002600:	d127      	bne.n	8002652 <HAL_ADC_Init+0x156>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002602:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8002604:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002606:	f025 75f8 	bic.w	r5, r5, #32505856	@ 0x1f00000
 800260a:	3a01      	subs	r2, #1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002610:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8002614:	fab1 f181 	clz	r1, r1
 8002618:	408a      	lsls	r2, r1
 800261a:	432a      	orrs	r2, r5
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800261c:	6302      	str	r2, [r0, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800261e:	6881      	ldr	r1, [r0, #8]
 8002620:	4a18      	ldr	r2, [pc, #96]	@ (8002684 <HAL_ADC_Init+0x188>)
 8002622:	400a      	ands	r2, r1
 8002624:	429a      	cmp	r2, r3
 8002626:	d118      	bne.n	800265a <HAL_ADC_Init+0x15e>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002628:	2000      	movs	r0, #0
 800262a:	6520      	str	r0, [r4, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800262c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	64e3      	str	r3, [r4, #76]	@ 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002638:	b002      	add	sp, #8
 800263a:	bd70      	pop	{r4, r5, r6, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800263c:	4629      	mov	r1, r5
 800263e:	e7bc      	b.n	80025ba <HAL_ADC_Init+0xbe>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002640:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002642:	f041 0120 	orr.w	r1, r1, #32
 8002646:	64e1      	str	r1, [r4, #76]	@ 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002648:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800264a:	f041 0101 	orr.w	r1, r1, #1
 800264e:	6521      	str	r1, [r4, #80]	@ 0x50
 8002650:	e7c6      	b.n	80025e0 <HAL_ADC_Init+0xe4>
      MODIFY_REG(hadc->Instance->SQR1,
 8002652:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002654:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8002658:	e7e0      	b.n	800261c <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 800265a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800265c:	f023 0312 	bic.w	r3, r3, #18
 8002660:	f043 0310 	orr.w	r3, r3, #16
 8002664:	64e3      	str	r3, [r4, #76]	@ 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
 8002670:	e7e2      	b.n	8002638 <HAL_ADC_Init+0x13c>
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40012700 	.word	0x40012700
 800267c:	fcfc16ff 	.word	0xfcfc16ff
 8002680:	c0fff189 	.word	0xc0fff189
 8002684:	bf80fffe 	.word	0xbf80fffe

08002688 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002688:	6803      	ldr	r3, [r0, #0]
{
 800268a:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800268c:	689a      	ldr	r2, [r3, #8]
{
 800268e:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002690:	0552      	lsls	r2, r2, #21
{
 8002692:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002694:	d50b      	bpl.n	80026ae <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002696:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002698:	05de      	lsls	r6, r3, #23
 800269a:	d508      	bpl.n	80026ae <HAL_ADC_PollForConversion+0x26>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800269e:	f043 0320 	orr.w	r3, r3, #32
 80026a2:	64c3      	str	r3, [r0, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a4:	2300      	movs	r3, #0
 80026a6:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
    
    return HAL_ERROR;
 80026aa:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80026ae:	f7ff fb04 	bl	8001cba <HAL_GetTick>
 80026b2:	4606      	mov	r6, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	0791      	lsls	r1, r2, #30
 80026ba:	d50e      	bpl.n	80026da <HAL_ADC_PollForConversion+0x52>
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80026bc:	69a2      	ldr	r2, [r4, #24]
 80026be:	b912      	cbnz	r2, 80026c6 <HAL_ADC_PollForConversion+0x3e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026c0:	f06f 0212 	mvn.w	r2, #18
 80026c4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c6:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80026c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026cc:	64e2      	str	r2, [r4, #76]	@ 0x4c
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80026d4:	d017      	beq.n	8002706 <HAL_ADC_PollForConversion+0x7e>
  return HAL_OK;
 80026d6:	2000      	movs	r0, #0
 80026d8:	e7e8      	b.n	80026ac <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 80026da:	1c68      	adds	r0, r5, #1
 80026dc:	d0eb      	beq.n	80026b6 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026de:	b965      	cbnz	r5, 80026fa <HAL_ADC_PollForConversion+0x72>
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f013 0302 	ands.w	r3, r3, #2
 80026e8:	d1e4      	bne.n	80026b4 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026ea:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
          return HAL_TIMEOUT;
 80026ec:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026ee:	f042 0204 	orr.w	r2, r2, #4
 80026f2:	64e2      	str	r2, [r4, #76]	@ 0x4c
          __HAL_UNLOCK(hadc);
 80026f4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
          return HAL_TIMEOUT;
 80026f8:	e7d8      	b.n	80026ac <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026fa:	f7ff fade 	bl	8001cba <HAL_GetTick>
 80026fe:	1b80      	subs	r0, r0, r6
 8002700:	42a8      	cmp	r0, r5
 8002702:	d8ed      	bhi.n	80026e0 <HAL_ADC_PollForConversion+0x58>
 8002704:	e7d6      	b.n	80026b4 <HAL_ADC_PollForConversion+0x2c>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002706:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800270a:	2a00      	cmp	r2, #0
 800270c:	d1e3      	bne.n	80026d6 <HAL_ADC_PollForConversion+0x4e>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800270e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002710:	f012 7ff8 	tst.w	r2, #32505856	@ 0x1f00000
 8002714:	d002      	beq.n	800271c <HAL_ADC_PollForConversion+0x94>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002716:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002718:	055a      	lsls	r2, r3, #21
 800271a:	d4dc      	bmi.n	80026d6 <HAL_ADC_PollForConversion+0x4e>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800271c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800271e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002722:	64e3      	str	r3, [r4, #76]	@ 0x4c
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002724:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002726:	04db      	lsls	r3, r3, #19
 8002728:	d4d5      	bmi.n	80026d6 <HAL_ADC_PollForConversion+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800272a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8002732:	e7d0      	b.n	80026d6 <HAL_ADC_PollForConversion+0x4e>

08002734 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002734:	6803      	ldr	r3, [r0, #0]
 8002736:	6d98      	ldr	r0, [r3, #88]	@ 0x58
}
 8002738:	4770      	bx	lr
	...

0800273c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 800273c:	2300      	movs	r3, #0
{
 800273e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8002740:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002742:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
{
 8002746:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002748:	2b01      	cmp	r3, #1
 800274a:	f000 8098 	beq.w	800287e <HAL_ADC_ConfigChannel+0x142>
 800274e:	2301      	movs	r3, #1
 8002750:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002754:	6848      	ldr	r0, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002756:	682a      	ldr	r2, [r5, #0]
  if (sConfig->Rank < 7)
 8002758:	2806      	cmp	r0, #6
    MODIFY_REG(hadc->Instance->SQR5,
 800275a:	680c      	ldr	r4, [r1, #0]
 800275c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  if (sConfig->Rank < 7)
 8002760:	d81c      	bhi.n	800279c <HAL_ADC_ConfigChannel+0x60>
    MODIFY_REG(hadc->Instance->SQR5,
 8002762:	261f      	movs	r6, #31
 8002764:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8002766:	3b05      	subs	r3, #5
 8002768:	409e      	lsls	r6, r3
 800276a:	ea20 0006 	bic.w	r0, r0, r6
 800276e:	fa04 f303 	lsl.w	r3, r4, r3
 8002772:	4303      	orrs	r3, r0
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002776:	2c09      	cmp	r4, #9
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002778:	6889      	ldr	r1, [r1, #8]
 800277a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  if (sConfig->Channel < ADC_CHANNEL_10)
 800277e:	d83f      	bhi.n	8002800 <HAL_ADC_ConfigChannel+0xc4>
    MODIFY_REG(hadc->Instance->SMPR3,
 8002780:	2407      	movs	r4, #7
 8002782:	6950      	ldr	r0, [r2, #20]
 8002784:	409c      	lsls	r4, r3
 8002786:	ea20 0004 	bic.w	r0, r0, r4
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	4303      	orrs	r3, r0
 8002790:	6153      	str	r3, [r2, #20]
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002792:	2000      	movs	r0, #0
 8002794:	f885 0048 	strb.w	r0, [r5, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
}
 8002798:	b002      	add	sp, #8
 800279a:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 800279c:	280c      	cmp	r0, #12
 800279e:	d80a      	bhi.n	80027b6 <HAL_ADC_ConfigChannel+0x7a>
    MODIFY_REG(hadc->Instance->SQR4,
 80027a0:	261f      	movs	r6, #31
 80027a2:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
 80027a4:	3b23      	subs	r3, #35	@ 0x23
 80027a6:	409e      	lsls	r6, r3
 80027a8:	ea20 0006 	bic.w	r0, r0, r6
 80027ac:	fa04 f303 	lsl.w	r3, r4, r3
 80027b0:	4303      	orrs	r3, r0
 80027b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80027b4:	e7df      	b.n	8002776 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 80027b6:	2812      	cmp	r0, #18
 80027b8:	d80a      	bhi.n	80027d0 <HAL_ADC_ConfigChannel+0x94>
    MODIFY_REG(hadc->Instance->SQR3,
 80027ba:	261f      	movs	r6, #31
 80027bc:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 80027be:	3b41      	subs	r3, #65	@ 0x41
 80027c0:	409e      	lsls	r6, r3
 80027c2:	ea20 0006 	bic.w	r0, r0, r6
 80027c6:	fa04 f303 	lsl.w	r3, r4, r3
 80027ca:	4303      	orrs	r3, r0
 80027cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80027ce:	e7d2      	b.n	8002776 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 80027d0:	2818      	cmp	r0, #24
 80027d2:	f04f 001f 	mov.w	r0, #31
 80027d6:	d809      	bhi.n	80027ec <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR2,
 80027d8:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 80027da:	3b5f      	subs	r3, #95	@ 0x5f
 80027dc:	4098      	lsls	r0, r3
 80027de:	ea26 0000 	bic.w	r0, r6, r0
 80027e2:	fa04 f303 	lsl.w	r3, r4, r3
 80027e6:	4303      	orrs	r3, r0
 80027e8:	6353      	str	r3, [r2, #52]	@ 0x34
 80027ea:	e7c4      	b.n	8002776 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 80027ec:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80027ee:	3b7d      	subs	r3, #125	@ 0x7d
 80027f0:	4098      	lsls	r0, r3
 80027f2:	ea26 0000 	bic.w	r0, r6, r0
 80027f6:	fa04 f303 	lsl.w	r3, r4, r3
 80027fa:	4303      	orrs	r3, r0
 80027fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fe:	e7ba      	b.n	8002776 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002800:	2c13      	cmp	r4, #19
 8002802:	d825      	bhi.n	8002850 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR2,
 8002804:	2607      	movs	r6, #7
 8002806:	6910      	ldr	r0, [r2, #16]
 8002808:	3b1e      	subs	r3, #30
 800280a:	409e      	lsls	r6, r3
 800280c:	ea20 0006 	bic.w	r0, r0, r6
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	4303      	orrs	r3, r0
 8002816:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002818:	f1a4 0310 	sub.w	r3, r4, #16
 800281c:	2b01      	cmp	r3, #1
 800281e:	d8b8      	bhi.n	8002792 <HAL_ADC_ConfigChannel+0x56>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <HAL_ADC_ConfigChannel+0x148>)
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	0212      	lsls	r2, r2, #8
 8002826:	d4b4      	bmi.n	8002792 <HAL_ADC_ConfigChannel+0x56>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002828:	685a      	ldr	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282a:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800282c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002830:	605a      	str	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002832:	d1ae      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x56>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_ADC_ConfigChannel+0x14c>)
 8002836:	4a15      	ldr	r2, [pc, #84]	@ (800288c <HAL_ADC_ConfigChannel+0x150>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fbb3 f3f2 	udiv	r3, r3, r2
 800283e:	220a      	movs	r2, #10
 8002840:	4353      	muls	r3, r2
            wait_loop_index--;
 8002842:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8002844:	9b01      	ldr	r3, [sp, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0a3      	beq.n	8002792 <HAL_ADC_ConfigChannel+0x56>
            wait_loop_index--;
 800284a:	9b01      	ldr	r3, [sp, #4]
 800284c:	3b01      	subs	r3, #1
 800284e:	e7f8      	b.n	8002842 <HAL_ADC_ConfigChannel+0x106>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002850:	2c1d      	cmp	r4, #29
 8002852:	f04f 0007 	mov.w	r0, #7
 8002856:	d809      	bhi.n	800286c <HAL_ADC_ConfigChannel+0x130>
    MODIFY_REG(hadc->Instance->SMPR1,
 8002858:	68d4      	ldr	r4, [r2, #12]
 800285a:	3b3c      	subs	r3, #60	@ 0x3c
 800285c:	4098      	lsls	r0, r3
 800285e:	ea24 0000 	bic.w	r0, r4, r0
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	4303      	orrs	r3, r0
 8002868:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800286a:	e792      	b.n	8002792 <HAL_ADC_ConfigChannel+0x56>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800286c:	6dd4      	ldr	r4, [r2, #92]	@ 0x5c
 800286e:	3b5a      	subs	r3, #90	@ 0x5a
 8002870:	4098      	lsls	r0, r3
 8002872:	ea24 0000 	bic.w	r0, r4, r0
 8002876:	4099      	lsls	r1, r3
 8002878:	4301      	orrs	r1, r0
 800287a:	65d1      	str	r1, [r2, #92]	@ 0x5c
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800287c:	e789      	b.n	8002792 <HAL_ADC_ConfigChannel+0x56>
  __HAL_LOCK(hadc);
 800287e:	2002      	movs	r0, #2
 8002880:	e78a      	b.n	8002798 <HAL_ADC_ConfigChannel+0x5c>
 8002882:	bf00      	nop
 8002884:	40012700 	.word	0x40012700
 8002888:	2000004c 	.word	0x2000004c
 800288c:	000f4240 	.word	0x000f4240

08002890 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8002890:	2300      	movs	r3, #0
{
 8002892:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0;
 8002894:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002896:	6803      	ldr	r3, [r0, #0]
{
 8002898:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	0652      	lsls	r2, r2, #25
 800289e:	d502      	bpl.n	80028a6 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028a0:	2000      	movs	r0, #0
}
 80028a2:	b003      	add	sp, #12
 80028a4:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <ADC_Enable+0x74>)
 80028b0:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <ADC_Enable+0x78>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80028b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 80028bc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80028be:	9b01      	ldr	r3, [sp, #4]
 80028c0:	b9e3      	cbnz	r3, 80028fc <ADC_Enable+0x6c>
    tickstart = HAL_GetTick();    
 80028c2:	f7ff f9fa 	bl	8001cba <HAL_GetTick>
 80028c6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	065b      	lsls	r3, r3, #25
 80028ce:	d4e7      	bmi.n	80028a0 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80028d0:	f7ff f9f3 	bl	8001cba <HAL_GetTick>
 80028d4:	1b40      	subs	r0, r0, r5
 80028d6:	2802      	cmp	r0, #2
 80028d8:	d9f6      	bls.n	80028c8 <ADC_Enable+0x38>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 80028e2:	d1f1      	bne.n	80028c8 <ADC_Enable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
          return HAL_ERROR;
 80028e6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e8:	f042 0210 	orr.w	r2, r2, #16
 80028ec:	64e2      	str	r2, [r4, #76]	@ 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	6d22      	ldr	r2, [r4, #80]	@ 0x50
          __HAL_UNLOCK(hadc);
 80028f0:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	6522      	str	r2, [r4, #80]	@ 0x50
          return HAL_ERROR;
 80028fa:	e7d2      	b.n	80028a2 <ADC_Enable+0x12>
      wait_loop_index--;
 80028fc:	9b01      	ldr	r3, [sp, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	e7dc      	b.n	80028bc <ADC_Enable+0x2c>
 8002902:	bf00      	nop
 8002904:	2000004c 	.word	0x2000004c
 8002908:	000f4240 	.word	0x000f4240

0800290c <HAL_ADC_Start>:
{
 800290c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800290e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
{
 8002912:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002914:	2b01      	cmp	r3, #1
 8002916:	d02e      	beq.n	8002976 <HAL_ADC_Start+0x6a>
 8002918:	2301      	movs	r3, #1
 800291a:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  tmp_hal_status = ADC_Enable(hadc);
 800291e:	f7ff ffb7 	bl	8002890 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002922:	bb38      	cbnz	r0, 8002974 <HAL_ADC_Start+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8002924:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002926:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002932:	64e3      	str	r3, [r4, #76]	@ 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800293a:	bf41      	itttt	mi
 800293c:	6ce2      	ldrmi	r2, [r4, #76]	@ 0x4c
 800293e:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 8002942:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 8002946:	64e2      	strmi	r2, [r4, #76]	@ 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002948:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800294a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800294e:	bf1c      	itt	ne
 8002950:	6d22      	ldrne	r2, [r4, #80]	@ 0x50
 8002952:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002956:	6522      	str	r2, [r4, #80]	@ 0x50
    __HAL_UNLOCK(hadc);
 8002958:	2200      	movs	r2, #0
 800295a:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800295e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002962:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800296a:	d103      	bne.n	8002974 <HAL_ADC_Start+0x68>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002976:	2002      	movs	r0, #2
 8002978:	e7fc      	b.n	8002974 <HAL_ADC_Start+0x68>

0800297a <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800297a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800297c:	6803      	ldr	r3, [r0, #0]
{
 800297e:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	0651      	lsls	r1, r2, #25
 8002984:	d401      	bmi.n	800298a <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002986:	2000      	movs	r0, #0
}
 8002988:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002992:	f7ff f992 	bl	8001cba <HAL_GetTick>
 8002996:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	065b      	lsls	r3, r3, #25
 800299e:	d5f2      	bpl.n	8002986 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80029a0:	f7ff f98b 	bl	8001cba <HAL_GetTick>
 80029a4:	1b40      	subs	r0, r0, r5
 80029a6:	2802      	cmp	r0, #2
 80029a8:	d9f6      	bls.n	8002998 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	065a      	lsls	r2, r3, #25
 80029b0:	d5f2      	bpl.n	8002998 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
          return HAL_ERROR;
 80029b4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	64e3      	str	r3, [r4, #76]	@ 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029bc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6523      	str	r3, [r4, #80]	@ 0x50
          return HAL_ERROR;
 80029c4:	e7e0      	b.n	8002988 <ADC_ConversionStop_Disable+0xe>
	...

080029c8 <HAL_ADC_DeInit>:
{
 80029c8:	b538      	push	{r3, r4, r5, lr}
  if(hadc == NULL)
 80029ca:	4604      	mov	r4, r0
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d05e      	beq.n	8002a8e <HAL_ADC_DeInit+0xc6>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80029d0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	64c3      	str	r3, [r0, #76]	@ 0x4c
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029d8:	f7ff ffcf 	bl	800297a <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80029dc:	4605      	mov	r5, r0
 80029de:	2800      	cmp	r0, #0
 80029e0:	d150      	bne.n	8002a84 <HAL_ADC_DeInit+0xbc>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80029e2:	f06f 021f 	mvn.w	r2, #31
 80029e6:	6823      	ldr	r3, [r4, #0]
    HAL_ADC_MspDeInit(hadc);
 80029e8:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80029ea:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	4a29      	ldr	r2, [pc, #164]	@ (8002a94 <HAL_ADC_DeInit+0xcc>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 80029f4:	6899      	ldr	r1, [r3, #8]
 80029f6:	4a28      	ldr	r2, [pc, #160]	@ (8002a98 <HAL_ADC_DeInit+0xd0>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 80029fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029fe:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002a02:	65da      	str	r2, [r3, #92]	@ 0x5c
    ADC_SMPR1_CLEAR(hadc);
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002a0a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002a12:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002a1a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8002a1c:	6999      	ldr	r1, [r3, #24]
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <HAL_ADC_DeInit+0xd4>)
 8002a20:	4011      	ands	r1, r2
 8002a22:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8002a24:	69d9      	ldr	r1, [r3, #28]
 8002a26:	4011      	ands	r1, r2
 8002a28:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8002a2a:	6a19      	ldr	r1, [r3, #32]
 8002a2c:	4011      	ands	r1, r2
 8002a2e:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8002a30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a32:	4011      	ands	r1, r2
 8002a34:	6259      	str	r1, [r3, #36]	@ 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8002a36:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002a38:	4011      	ands	r1, r2
 8002a3a:	6299      	str	r1, [r3, #40]	@ 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8002a3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a3e:	400a      	ands	r2, r1
 8002a40:	62da      	str	r2, [r3, #44]	@ 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8002a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a44:	f002 427e 	and.w	r2, r2, #4261412864	@ 0xfe000000
 8002a48:	631a      	str	r2, [r3, #48]	@ 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8002a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a4c:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002a50:	635a      	str	r2, [r3, #52]	@ 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8002a52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a54:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002a58:	639a      	str	r2, [r3, #56]	@ 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8002a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a5c:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002a60:	63da      	str	r2, [r3, #60]	@ 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8002a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a64:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8002a6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a6c:	0d92      	lsrs	r2, r2, #22
 8002a6e:	0592      	lsls	r2, r2, #22
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8002a72:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa0 <HAL_ADC_DeInit+0xd8>)
 8002a74:	6853      	ldr	r3, [r2, #4]
 8002a76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a7a:	6053      	str	r3, [r2, #4]
    HAL_ADC_MspDeInit(hadc);
 8002a7c:	f7fe fc44 	bl	8001308 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a80:	6525      	str	r5, [r4, #80]	@ 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 8002a82:	64e5      	str	r5, [r4, #76]	@ 0x4c
  __HAL_UNLOCK(hadc);
 8002a84:	2300      	movs	r3, #0
 8002a86:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
}
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002a8e:	2501      	movs	r5, #1
 8002a90:	e7fb      	b.n	8002a8a <HAL_ADC_DeInit+0xc2>
 8002a92:	bf00      	nop
 8002a94:	f83c0000 	.word	0xf83c0000
 8002a98:	8080f088 	.word	0x8080f088
 8002a9c:	fffff000 	.word	0xfffff000
 8002aa0:	40012700 	.word	0x40012700

08002aa4 <HAL_ADC_Stop>:
{
 8002aa4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002aa6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
{
 8002aaa:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d011      	beq.n	8002ad4 <HAL_ADC_Stop+0x30>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ab6:	f7ff ff60 	bl	800297a <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002aba:	b938      	cbnz	r0, 8002acc <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8002abc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002abe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	64e3      	str	r3, [r4, #76]	@ 0x4c
  __HAL_UNLOCK(hadc);
 8002acc:	2300      	movs	r3, #0
 8002ace:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
}
 8002ad2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	e7fc      	b.n	8002ad2 <HAL_ADC_Stop+0x2e>

08002ad8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad8:	4907      	ldr	r1, [pc, #28]	@ (8002af8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ada:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ade:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ae6:	0412      	lsls	r2, r2, #16
 8002ae8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002af4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002afc:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afe:	b530      	push	{r4, r5, lr}
 8002b00:	68dc      	ldr	r4, [r3, #12]
 8002b02:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b06:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	bf28      	it	cs
 8002b10:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b12:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b18:	bf94      	ite	ls
 8002b1a:	2400      	movls	r4, #0
 8002b1c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1e:	fa05 f303 	lsl.w	r3, r5, r3
 8002b22:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b26:	40a5      	lsls	r5, r4
 8002b28:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	bfac      	ite	ge
 8002b36:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	4a07      	ldrlt	r2, [pc, #28]	@ (8002b58 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	bfab      	itete	ge
 8002b44:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b50:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b52:	bd30      	pop	{r4, r5, pc}
 8002b54:	e000ed00 	.word	0xe000ed00
 8002b58:	e000ed14 	.word	0xe000ed14

08002b5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	db07      	blt.n	8002b70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b60:	2301      	movs	r3, #1
 8002b62:	0941      	lsrs	r1, r0, #5
 8002b64:	4a03      	ldr	r2, [pc, #12]	@ (8002b74 <HAL_NVIC_EnableIRQ+0x18>)
 8002b66:	f000 001f 	and.w	r0, r0, #31
 8002b6a:	4083      	lsls	r3, r0
 8002b6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	db0c      	blt.n	8002b96 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4906      	ldr	r1, [pc, #24]	@ (8002b98 <HAL_NVIC_DisableIRQ+0x20>)
 8002b80:	0943      	lsrs	r3, r0, #5
 8002b82:	f000 001f 	and.w	r0, r0, #31
 8002b86:	4082      	lsls	r2, r0
 8002b88:	3320      	adds	r3, #32
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b92:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b9c:	4603      	mov	r3, r0
{
 8002b9e:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d032      	beq.n	8002c0a <HAL_DMA_Init+0x6e>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ba4:	6801      	ldr	r1, [r0, #0]
 8002ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c10 <HAL_DMA_Init+0x74>)
 8002ba8:	2014      	movs	r0, #20
 8002baa:	4291      	cmp	r1, r2
 8002bac:	d826      	bhi.n	8002bfc <HAL_DMA_Init+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bae:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <HAL_DMA_Init+0x78>)
 8002bb0:	440a      	add	r2, r1
 8002bb2:	fbb2 f2f0 	udiv	r2, r2, r0
 8002bb6:	4818      	ldr	r0, [pc, #96]	@ (8002c18 <HAL_DMA_Init+0x7c>)
 8002bb8:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8002bba:	e9c3 020f 	strd	r0, r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bc4:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8002bc8:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bca:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8002bcc:	6808      	ldr	r0, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	4322      	orrs	r2, r4
 8002bd0:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002bd2:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd6:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd8:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002bda:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bde:	4322      	orrs	r2, r4
 8002be0:	699c      	ldr	r4, [r3, #24]
 8002be2:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be4:	69dc      	ldr	r4, [r3, #28]
 8002be6:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8002be8:	4302      	orrs	r2, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bea:	600a      	str	r2, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bec:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bee:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf0:	6398      	str	r0, [r3, #56]	@ 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bf2:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 8002bfa:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002bfc:	4a07      	ldr	r2, [pc, #28]	@ (8002c1c <HAL_DMA_Init+0x80>)
 8002bfe:	440a      	add	r2, r1
 8002c00:	fbb2 f2f0 	udiv	r2, r2, r0
 8002c04:	4806      	ldr	r0, [pc, #24]	@ (8002c20 <HAL_DMA_Init+0x84>)
 8002c06:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 8002c08:	e7d7      	b.n	8002bba <HAL_DMA_Init+0x1e>
    return HAL_ERROR;
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	e7f5      	b.n	8002bfa <HAL_DMA_Init+0x5e>
 8002c0e:	bf00      	nop
 8002c10:	40026407 	.word	0x40026407
 8002c14:	bffd9ff8 	.word	0xbffd9ff8
 8002c18:	40026000 	.word	0x40026000
 8002c1c:	bffd9bf8 	.word	0xbffd9bf8
 8002c20:	40026400 	.word	0x40026400

08002c24 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002c24:	4602      	mov	r2, r0
{
 8002c26:	b510      	push	{r4, lr}
  if (NULL == hdma )
 8002c28:	b348      	cbz	r0, 8002c7e <HAL_DMA_DeInit+0x5a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002c2a:	6801      	ldr	r1, [r0, #0]
 8002c2c:	2014      	movs	r0, #20
 8002c2e:	680b      	ldr	r3, [r1, #0]
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	600b      	str	r3, [r1, #0]

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c36:	4b13      	ldr	r3, [pc, #76]	@ (8002c84 <HAL_DMA_DeInit+0x60>)
 8002c38:	4299      	cmp	r1, r3
 8002c3a:	d819      	bhi.n	8002c70 <HAL_DMA_DeInit+0x4c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_DMA_DeInit+0x64>)
 8002c3e:	4c13      	ldr	r4, [pc, #76]	@ (8002c8c <HAL_DMA_DeInit+0x68>)
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb3 f3f0 	udiv	r3, r3, r0
 8002c46:	009b      	lsls	r3, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 8002c48:	2000      	movs	r0, #0
    hdma->DmaBaseAddress = DMA1;
 8002c4a:	e9c2 430f 	strd	r4, r3, [r2, #60]	@ 0x3c
  hdma->Instance->CCR = 0U;
 8002c4e:	6008      	str	r0, [r1, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c50:	2101      	movs	r1, #1
 8002c52:	f003 031c 	and.w	r3, r3, #28
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	6063      	str	r3, [r4, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
  hdma->XferHalfCpltCallback = NULL;
 8002c5c:	e9c2 000a 	strd	r0, r0, [r2, #40]	@ 0x28
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;
 8002c60:	e9c2 000c 	strd	r0, r0, [r2, #48]	@ 0x30

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c64:	6390      	str	r0, [r2, #56]	@ 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c66:	f882 0020 	strb.w	r0, [r2, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8002c6a:	f882 0021 	strb.w	r0, [r2, #33]	@ 0x21

  return HAL_OK;
}
 8002c6e:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c70:	4b07      	ldr	r3, [pc, #28]	@ (8002c90 <HAL_DMA_DeInit+0x6c>)
 8002c72:	4c08      	ldr	r4, [pc, #32]	@ (8002c94 <HAL_DMA_DeInit+0x70>)
 8002c74:	440b      	add	r3, r1
 8002c76:	fbb3 f3f0 	udiv	r3, r3, r0
 8002c7a:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8002c7c:	e7e4      	b.n	8002c48 <HAL_DMA_DeInit+0x24>
    return HAL_ERROR;
 8002c7e:	2001      	movs	r0, #1
 8002c80:	e7f5      	b.n	8002c6e <HAL_DMA_DeInit+0x4a>
 8002c82:	bf00      	nop
 8002c84:	40026407 	.word	0x40026407
 8002c88:	bffd9ff8 	.word	0xbffd9ff8
 8002c8c:	40026000 	.word	0x40026000
 8002c90:	bffd9bf8 	.word	0xbffd9bf8
 8002c94:	40026400 	.word	0x40026400

08002c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c9a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002c9e:	2c01      	cmp	r4, #1
 8002ca0:	d036      	beq.n	8002d10 <HAL_DMA_Start_IT+0x78>
 8002ca2:	2401      	movs	r4, #1
 8002ca4:	f880 4020 	strb.w	r4, [r0, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ca8:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8002cac:	2c01      	cmp	r4, #1
 8002cae:	b2e5      	uxtb	r5, r4
 8002cb0:	f04f 0400 	mov.w	r4, #0
 8002cb4:	d12a      	bne.n	8002d0c <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cb6:	2602      	movs	r6, #2
 8002cb8:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cbc:	6384      	str	r4, [r0, #56]	@ 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cbe:	6804      	ldr	r4, [r0, #0]
 8002cc0:	6826      	ldr	r6, [r4, #0]
 8002cc2:	f026 0601 	bic.w	r6, r6, #1
 8002cc6:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cc8:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8002ccc:	f007 071c 	and.w	r7, r7, #28
 8002cd0:	40bd      	lsls	r5, r7
 8002cd2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cd4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd6:	6843      	ldr	r3, [r0, #4]
 8002cd8:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8002cda:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cdc:	bf0b      	itete	eq
 8002cde:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002ce0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002ce2:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002ce4:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002ce6:	b14b      	cbz	r3, 8002cfc <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cf0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6023      	str	r3, [r4, #0]
}
 8002cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	f023 0304 	bic.w	r3, r3, #4
 8002d02:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	f043 030a 	orr.w	r3, r3, #10
 8002d0a:	e7f0      	b.n	8002cee <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma);
 8002d0c:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8002d10:	2002      	movs	r0, #2
 8002d12:	e7f2      	b.n	8002cfa <HAL_DMA_Start_IT+0x62>

08002d14 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d14:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8002d18:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d1a:	2a02      	cmp	r2, #2
 8002d1c:	d006      	beq.n	8002d2c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1e:	2204      	movs	r2, #4
 8002d20:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8002d22:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002d2a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2c:	6802      	ldr	r2, [r0, #0]
 8002d2e:	6811      	ldr	r1, [r2, #0]
 8002d30:	f021 010e 	bic.w	r1, r1, #14
 8002d34:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002d36:	6811      	ldr	r1, [r2, #0]
 8002d38:	f021 0101 	bic.w	r1, r1, #1
 8002d3c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d3e:	2101      	movs	r1, #1
 8002d40:	e9d3 020f 	ldrd	r0, r2, [r3, #60]	@ 0x3c
 8002d44:	f002 021c 	and.w	r2, r2, #28
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	6042      	str	r2, [r0, #4]
    return status;
 8002d4e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002d50:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
    return status;
 8002d54:	e7e6      	b.n	8002d24 <HAL_DMA_Abort+0x10>

08002d56 <HAL_DMA_Abort_IT>:
{
 8002d56:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d58:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8002d5c:	2a02      	cmp	r2, #2
 8002d5e:	d003      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d60:	2204      	movs	r2, #4
 8002d62:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8002d64:	2001      	movs	r0, #1
}
 8002d66:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d68:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8002d6a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d6c:	6811      	ldr	r1, [r2, #0]
 8002d6e:	f021 010e 	bic.w	r1, r1, #14
 8002d72:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002d74:	6811      	ldr	r1, [r2, #0]
 8002d76:	f021 0101 	bic.w	r1, r1, #1
 8002d7a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	e9d0 420f 	ldrd	r4, r2, [r0, #60]	@ 0x3c
 8002d82:	f002 021c 	and.w	r2, r2, #28
 8002d86:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002d8c:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	f880 1021 	strb.w	r1, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002d92:	f880 2020 	strb.w	r2, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002d96:	b103      	cbz	r3, 8002d9a <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8002d98:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	e7e3      	b.n	8002d66 <HAL_DMA_Abort_IT+0x10>

08002d9e <HAL_DMA_IRQHandler>:
{
 8002d9e:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002da0:	2404      	movs	r4, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002da4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da6:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002da8:	f002 021c 	and.w	r2, r2, #28
  uint32_t source_it = hdma->Instance->CCR;
 8002dac:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dae:	4094      	lsls	r4, r2
 8002db0:	4234      	tst	r4, r6
  uint32_t source_it = hdma->Instance->CCR;
 8002db2:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002db4:	d00e      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x36>
 8002db6:	f015 0f04 	tst.w	r5, #4
 8002dba:	d00b      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dc0:	bf5e      	ittt	pl
 8002dc2:	681a      	ldrpl	r2, [r3, #0]
 8002dc4:	f022 0204 	bicpl.w	r2, r2, #4
 8002dc8:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002dca:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002dcc:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8002dce:	b373      	cbz	r3, 8002e2e <HAL_DMA_IRQHandler+0x90>
}
 8002dd0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002dd2:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002dd4:	2402      	movs	r4, #2
 8002dd6:	4094      	lsls	r4, r2
 8002dd8:	4234      	tst	r4, r6
 8002dda:	d012      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x64>
 8002ddc:	f015 0f02 	tst.w	r5, #2
 8002de0:	d00f      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	0695      	lsls	r5, r2, #26
 8002de6:	d406      	bmi.n	8002df6 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	f022 020a 	bic.w	r2, r2, #10
 8002dee:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002df6:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002df8:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002dfa:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002dfe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002e00:	e7e5      	b.n	8002dce <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002e02:	2408      	movs	r4, #8
 8002e04:	4094      	lsls	r4, r2
 8002e06:	4234      	tst	r4, r6
 8002e08:	d011      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x90>
 8002e0a:	072c      	lsls	r4, r5, #28
 8002e0c:	d50f      	bpl.n	8002e2e <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e0e:	681c      	ldr	r4, [r3, #0]
 8002e10:	f024 040e 	bic.w	r4, r4, #14
 8002e14:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e16:	2301      	movs	r3, #1
 8002e18:	fa03 f202 	lsl.w	r2, r3, r2
 8002e1c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e1e:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002e20:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002e24:	2300      	movs	r3, #0
 8002e26:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002e2a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002e2c:	e7cf      	b.n	8002dce <HAL_DMA_IRQHandler+0x30>
}
 8002e2e:	bc70      	pop	{r4, r5, r6}
 8002e30:	4770      	bx	lr

08002e32 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002e32:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002e34:	4608      	mov	r0, r1
 8002e36:	b909      	cbnz	r1, 8002e3c <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002e38:	605a      	str	r2, [r3, #4]
      break;
 8002e3a:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8002e3c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8002e3e:	4770      	bx	lr

08002e40 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002e40:	b110      	cbz	r0, 8002e48 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002e42:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8002e44:	2000      	movs	r0, #0
 8002e46:	4770      	bx	lr
    return HAL_ERROR;
 8002e48:	2001      	movs	r0, #1
  }
}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002e4c:	6803      	ldr	r3, [r0, #0]
 8002e4e:	f003 021f 	and.w	r2, r3, #31
 8002e52:	2301      	movs	r3, #1
 8002e54:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8002e56:	4a04      	ldr	r2, [pc, #16]	@ (8002e68 <HAL_EXTI_IRQHandler+0x1c>)
 8002e58:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8002e5a:	4219      	tst	r1, r3
 8002e5c:	d003      	beq.n	8002e66 <HAL_EXTI_IRQHandler+0x1a>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8002e5e:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002e60:	6843      	ldr	r3, [r0, #4]
 8002e62:	b103      	cbz	r3, 8002e66 <HAL_EXTI_IRQHandler+0x1a>
    {
      hexti->PendingCallback();
 8002e64:	4718      	bx	r3
    }
  }
}
 8002e66:	4770      	bx	lr
 8002e68:	40010400 	.word	0x40010400

08002e6c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8002e6c:	2300      	movs	r3, #0
{
 8002e6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	f8df 9190 	ldr.w	r9, [pc, #400]	@ 8003004 <HAL_GPIO_Init+0x198>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e76:	4c64      	ldr	r4, [pc, #400]	@ (8003008 <HAL_GPIO_Init+0x19c>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e78:	680a      	ldr	r2, [r1, #0]
 8002e7a:	fa32 f503 	lsrs.w	r5, r2, r3
 8002e7e:	d102      	bne.n	8002e86 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002e80:	b003      	add	sp, #12
 8002e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002e86:	2501      	movs	r5, #1
 8002e88:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent)
 8002e8c:	ea18 0202 	ands.w	r2, r8, r2
 8002e90:	f000 80a9 	beq.w	8002fe6 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e94:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e96:	684e      	ldr	r6, [r1, #4]
 8002e98:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002e9c:	f006 0503 	and.w	r5, r6, #3
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ea0:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ea4:	1e6f      	subs	r7, r5, #1
 8002ea6:	2f01      	cmp	r7, #1
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ea8:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002eac:	d834      	bhi.n	8002f18 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8002eae:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002eb0:	ea07 0a0c 	and.w	sl, r7, ip
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002eb4:	68cf      	ldr	r7, [r1, #12]
 8002eb6:	fa07 f70e 	lsl.w	r7, r7, lr
 8002eba:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002ebe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ec0:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002ec2:	ea27 0808 	bic.w	r8, r7, r8
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec6:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8002eca:	409f      	lsls	r7, r3
 8002ecc:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8002ed0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002ed2:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed4:	2d02      	cmp	r5, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ed6:	ea07 080c 	and.w	r8, r7, ip
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002eda:	688f      	ldr	r7, [r1, #8]
 8002edc:	fa07 f70e 	lsl.w	r7, r7, lr
 8002ee0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8002ee4:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee6:	d119      	bne.n	8002f1c <HAL_GPIO_Init+0xb0>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002ee8:	f04f 0b0f 	mov.w	fp, #15
        temp = GPIOx->AFR[position >> 3];
 8002eec:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8002ef0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002ef4:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8002ef8:	f8d8 7020 	ldr.w	r7, [r8, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002efc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002f00:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002f04:	ea27 0b0b 	bic.w	fp, r7, fp
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002f08:	690f      	ldr	r7, [r1, #16]
 8002f0a:	fa07 f70a 	lsl.w	r7, r7, sl
 8002f0e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8002f12:	f8c8 7020 	str.w	r7, [r8, #32]
 8002f16:	e001      	b.n	8002f1c <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f18:	2d03      	cmp	r5, #3
 8002f1a:	d1da      	bne.n	8002ed2 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8002f1c:	6807      	ldr	r7, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f1e:	fa05 f50e 	lsl.w	r5, r5, lr
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002f22:	ea07 070c 	and.w	r7, r7, ip
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f26:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f28:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002f2c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f2e:	d05a      	beq.n	8002fe6 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002f30:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f34:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8002f38:	f023 0703 	bic.w	r7, r3, #3
 8002f3c:	f045 0501 	orr.w	r5, r5, #1
 8002f40:	f8c9 5020 	str.w	r5, [r9, #32]
 8002f44:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8002f48:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8002f4c:	f005 0501 	and.w	r5, r5, #1
 8002f50:	9501      	str	r5, [sp, #4]
 8002f52:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002f56:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002f5c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8002f60:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002f62:	fa0e fe0c 	lsl.w	lr, lr, ip
 8002f66:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f6a:	4d28      	ldr	r5, [pc, #160]	@ (800300c <HAL_GPIO_Init+0x1a0>)
 8002f6c:	42a8      	cmp	r0, r5
 8002f6e:	d03c      	beq.n	8002fea <HAL_GPIO_Init+0x17e>
 8002f70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002f74:	42a8      	cmp	r0, r5
 8002f76:	d03a      	beq.n	8002fee <HAL_GPIO_Init+0x182>
 8002f78:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002f7c:	42a8      	cmp	r0, r5
 8002f7e:	d038      	beq.n	8002ff2 <HAL_GPIO_Init+0x186>
 8002f80:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002f84:	42a8      	cmp	r0, r5
 8002f86:	d036      	beq.n	8002ff6 <HAL_GPIO_Init+0x18a>
 8002f88:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002f8c:	42a8      	cmp	r0, r5
 8002f8e:	d034      	beq.n	8002ffa <HAL_GPIO_Init+0x18e>
 8002f90:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002f94:	42a8      	cmp	r0, r5
 8002f96:	d032      	beq.n	8002ffe <HAL_GPIO_Init+0x192>
 8002f98:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002f9c:	42a8      	cmp	r0, r5
 8002f9e:	bf14      	ite	ne
 8002fa0:	2507      	movne	r5, #7
 8002fa2:	2506      	moveq	r5, #6
 8002fa4:	fa05 f50c 	lsl.w	r5, r5, ip
 8002fa8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fac:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002fae:	43d7      	mvns	r7, r2
        temp = EXTI->IMR;
 8002fb0:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb2:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002fb6:	bf0c      	ite	eq
 8002fb8:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8002fba:	4315      	orrne	r5, r2
        EXTI->IMR = temp;
 8002fbc:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR;
 8002fbe:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc0:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002fc4:	bf0c      	ite	eq
 8002fc6:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8002fc8:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8002fca:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR;
 8002fcc:	68a5      	ldr	r5, [r4, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fce:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002fd2:	bf0c      	ite	eq
 8002fd4:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8002fd6:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8002fd8:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8002fda:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fdc:	02b6      	lsls	r6, r6, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002fde:	bf54      	ite	pl
 8002fe0:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8002fe2:	4315      	orrmi	r5, r2
        EXTI->FTSR = temp;
 8002fe4:	60e5      	str	r5, [r4, #12]
    position++;
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	e746      	b.n	8002e78 <HAL_GPIO_Init+0xc>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fea:	2500      	movs	r5, #0
 8002fec:	e7da      	b.n	8002fa4 <HAL_GPIO_Init+0x138>
 8002fee:	2501      	movs	r5, #1
 8002ff0:	e7d8      	b.n	8002fa4 <HAL_GPIO_Init+0x138>
 8002ff2:	2502      	movs	r5, #2
 8002ff4:	e7d6      	b.n	8002fa4 <HAL_GPIO_Init+0x138>
 8002ff6:	2503      	movs	r5, #3
 8002ff8:	e7d4      	b.n	8002fa4 <HAL_GPIO_Init+0x138>
 8002ffa:	2504      	movs	r5, #4
 8002ffc:	e7d2      	b.n	8002fa4 <HAL_GPIO_Init+0x138>
 8002ffe:	2505      	movs	r5, #5
 8003000:	e7d0      	b.n	8002fa4 <HAL_GPIO_Init+0x138>
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	40010400 	.word	0x40010400
 800300c:	40020000 	.word	0x40020000

08003010 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 8003014:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8003016:	f04f 0a01 	mov.w	sl, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800301a:	f04f 080f 	mov.w	r8, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800301e:	f04f 0b03 	mov.w	fp, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003022:	4c3d      	ldr	r4, [pc, #244]	@ (8003118 <HAL_GPIO_DeInit+0x108>)
  while ((GPIO_Pin >> position) != 0)
 8003024:	fa31 f302 	lsrs.w	r3, r1, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_DeInit+0x1e>
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
    }

    position++;
  }
}
 800302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800302e:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent)
 8003032:	ea1c 0601 	ands.w	r6, ip, r1
 8003036:	d060      	beq.n	80030fa <HAL_GPIO_DeInit+0xea>
      tmp = SYSCFG->EXTICR[position >> 2];
 8003038:	f022 0503 	bic.w	r5, r2, #3
 800303c:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8003040:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8003044:	f002 0703 	and.w	r7, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8003048:	68ab      	ldr	r3, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800304a:	00bf      	lsls	r7, r7, #2
 800304c:	fa08 f907 	lsl.w	r9, r8, r7
 8003050:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8003054:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_GPIO_DeInit+0x10c>)
 8003056:	4298      	cmp	r0, r3
 8003058:	d051      	beq.n	80030fe <HAL_GPIO_DeInit+0xee>
 800305a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800305e:	4298      	cmp	r0, r3
 8003060:	d04f      	beq.n	8003102 <HAL_GPIO_DeInit+0xf2>
 8003062:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003066:	4298      	cmp	r0, r3
 8003068:	d04d      	beq.n	8003106 <HAL_GPIO_DeInit+0xf6>
 800306a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800306e:	4298      	cmp	r0, r3
 8003070:	d04b      	beq.n	800310a <HAL_GPIO_DeInit+0xfa>
 8003072:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003076:	4298      	cmp	r0, r3
 8003078:	d049      	beq.n	800310e <HAL_GPIO_DeInit+0xfe>
 800307a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800307e:	4298      	cmp	r0, r3
 8003080:	d047      	beq.n	8003112 <HAL_GPIO_DeInit+0x102>
 8003082:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003086:	4298      	cmp	r0, r3
 8003088:	bf0c      	ite	eq
 800308a:	2306      	moveq	r3, #6
 800308c:	2307      	movne	r3, #7
 800308e:	40bb      	lsls	r3, r7
 8003090:	4573      	cmp	r3, lr
 8003092:	d113      	bne.n	80030bc <HAL_GPIO_DeInit+0xac>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	ea23 0306 	bic.w	r3, r3, r6
 800309a:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800309c:	6863      	ldr	r3, [r4, #4]
 800309e:	ea23 0306 	bic.w	r3, r3, r6
 80030a2:	6063      	str	r3, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80030a4:	68a3      	ldr	r3, [r4, #8]
 80030a6:	ea23 0306 	bic.w	r3, r3, r6
 80030aa:	60a3      	str	r3, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80030ac:	68e3      	ldr	r3, [r4, #12]
 80030ae:	ea23 0306 	bic.w	r3, r3, r6
 80030b2:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80030b4:	68ab      	ldr	r3, [r5, #8]
 80030b6:	ea23 0309 	bic.w	r3, r3, r9
 80030ba:	60ab      	str	r3, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80030bc:	6805      	ldr	r5, [r0, #0]
 80030be:	0053      	lsls	r3, r2, #1
 80030c0:	fa0b f303 	lsl.w	r3, fp, r3
 80030c4:	ea25 0503 	bic.w	r5, r5, r3
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80030c8:	08d6      	lsrs	r6, r2, #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80030ca:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80030cc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80030d0:	f002 0507 	and.w	r5, r2, #7
 80030d4:	6a37      	ldr	r7, [r6, #32]
 80030d6:	00ad      	lsls	r5, r5, #2
 80030d8:	fa08 f505 	lsl.w	r5, r8, r5
 80030dc:	ea27 0705 	bic.w	r7, r7, r5
 80030e0:	6237      	str	r7, [r6, #32]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80030e2:	68c5      	ldr	r5, [r0, #12]
 80030e4:	ea25 0503 	bic.w	r5, r5, r3
 80030e8:	60c5      	str	r5, [r0, #12]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80030ea:	6845      	ldr	r5, [r0, #4]
 80030ec:	ea25 050c 	bic.w	r5, r5, ip
 80030f0:	6045      	str	r5, [r0, #4]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030f2:	6885      	ldr	r5, [r0, #8]
 80030f4:	ea25 0303 	bic.w	r3, r5, r3
 80030f8:	6083      	str	r3, [r0, #8]
    position++;
 80030fa:	3201      	adds	r2, #1
 80030fc:	e792      	b.n	8003024 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80030fe:	2300      	movs	r3, #0
 8003100:	e7c5      	b.n	800308e <HAL_GPIO_DeInit+0x7e>
 8003102:	2301      	movs	r3, #1
 8003104:	e7c3      	b.n	800308e <HAL_GPIO_DeInit+0x7e>
 8003106:	2302      	movs	r3, #2
 8003108:	e7c1      	b.n	800308e <HAL_GPIO_DeInit+0x7e>
 800310a:	2303      	movs	r3, #3
 800310c:	e7bf      	b.n	800308e <HAL_GPIO_DeInit+0x7e>
 800310e:	2304      	movs	r3, #4
 8003110:	e7bd      	b.n	800308e <HAL_GPIO_DeInit+0x7e>
 8003112:	2305      	movs	r3, #5
 8003114:	e7bb      	b.n	800308e <HAL_GPIO_DeInit+0x7e>
 8003116:	bf00      	nop
 8003118:	40010400 	.word	0x40010400
 800311c:	40020000 	.word	0x40020000

08003120 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003120:	6903      	ldr	r3, [r0, #16]
 8003122:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003124:	bf14      	ite	ne
 8003126:	2001      	movne	r0, #1
 8003128:	2000      	moveq	r0, #0
 800312a:	4770      	bx	lr

0800312c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800312c:	b10a      	cbz	r2, 8003132 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800312e:	6181      	str	r1, [r0, #24]
  }
}
 8003130:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003132:	0409      	lsls	r1, r1, #16
 8003134:	e7fb      	b.n	800312e <HAL_GPIO_WritePin+0x2>
	...

08003138 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003138:	4a04      	ldr	r2, [pc, #16]	@ (800314c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800313a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800313c:	6951      	ldr	r1, [r2, #20]
 800313e:	4201      	tst	r1, r0
 8003140:	d002      	beq.n	8003148 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003142:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003144:	f7fe f896 	bl	8001274 <HAL_GPIO_EXTI_Callback>
  }
}
 8003148:	bd08      	pop	{r3, pc}
 800314a:	bf00      	nop
 800314c:	40010400 	.word	0x40010400

08003150 <HAL_PWR_DisablePVD>:
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	2310      	movs	r3, #16
 8003152:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8003156:	fab3 f383 	clz	r3, r3
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 800315a:	2200      	movs	r2, #0
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8003162:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 8003166:	601a      	str	r2, [r3, #0]
}
 8003168:	4770      	bx	lr
	...

0800316c <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 800316c:	4a09      	ldr	r2, [pc, #36]	@ (8003194 <HAL_PWR_EnterSLEEPMode+0x28>)

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800316e:	2901      	cmp	r1, #1
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8003170:	6813      	ldr	r3, [r2, #0]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	ea43 0300 	orr.w	r3, r3, r0
 800317a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800317c:	4a06      	ldr	r2, [pc, #24]	@ (8003198 <HAL_PWR_EnterSLEEPMode+0x2c>)
 800317e:	6913      	ldr	r3, [r2, #16]
 8003180:	f023 0304 	bic.w	r3, r3, #4
 8003184:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003186:	d101      	bne.n	800318c <HAL_PWR_EnterSLEEPMode+0x20>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003188:	bf30      	wfi
 800318a:	4770      	bx	lr
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800318c:	bf40      	sev
    __WFE();
 800318e:	bf20      	wfe
    __WFE();
 8003190:	bf20      	wfe
  }
}
 8003192:	4770      	bx	lr
 8003194:	40007000 	.word	0x40007000
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 800319c:	4a0b      	ldr	r2, [pc, #44]	@ (80031cc <HAL_PWR_EnterSTOPMode+0x30>)

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800319e:	2901      	cmp	r1, #1
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 80031a0:	6813      	ldr	r3, [r2, #0]
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	ea43 0300 	orr.w	r3, r3, r0
 80031aa:	6013      	str	r3, [r2, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80031ac:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <HAL_PWR_EnterSTOPMode+0x34>)
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	f042 0204 	orr.w	r2, r2, #4
 80031b4:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80031b6:	d105      	bne.n	80031c4 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80031b8:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	f022 0204 	bic.w	r2, r2, #4
 80031c0:	611a      	str	r2, [r3, #16]
}
 80031c2:	4770      	bx	lr
    __SEV();
 80031c4:	bf40      	sev
    __WFE();
 80031c6:	bf20      	wfe
    __WFE();
 80031c8:	bf20      	wfe
 80031ca:	e7f6      	b.n	80031ba <HAL_PWR_EnterSTOPMode+0x1e>
 80031cc:	40007000 	.word	0x40007000
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <HAL_PWREx_EnableFastWakeUp>:
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031d8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80031dc:	fab3 f383 	clz	r3, r3
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  *(__IO uint32_t *) CR_FWU_BB = (uint32_t)ENABLE;
 80031e0:	2201      	movs	r2, #1
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80031e8:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	4770      	bx	lr

080031f0 <HAL_PWREx_EnableUltraLowPower>:
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031f4:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80031f8:	fab3 f383 	clz	r3, r3
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  *(__IO uint32_t *) CR_ULP_BB = (uint32_t)ENABLE;
 80031fc:	2201      	movs	r2, #1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8003204:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 8003208:	601a      	str	r2, [r3, #0]
}
 800320a:	4770      	bx	lr

0800320c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800320c:	4b1c      	ldr	r3, [pc, #112]	@ (8003280 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 800320e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8003216:	d00c      	beq.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003218:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800321a:	491a      	ldr	r1, [pc, #104]	@ (8003284 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800321c:	680b      	ldr	r3, [r1, #0]
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003226:	6808      	ldr	r0, [r1, #0]
 8003228:	f000 0001 	and.w	r0, r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800322c:	4050      	eors	r0, r2
 800322e:	b002      	add	sp, #8
 8003230:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003234:	4914      	ldr	r1, [pc, #80]	@ (8003288 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003236:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 800323a:	d00f      	beq.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800323c:	680a      	ldr	r2, [r1, #0]
 800323e:	f402 52c0 	and.w	r2, r2, #6144	@ 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003242:	f5b2 5fc0 	cmp.w	r2, #6144	@ 0x1800
 8003246:	d1e7      	bne.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8003248:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 800324c:	d1e4      	bne.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 800324e:	4a0d      	ldr	r2, [pc, #52]	@ (8003284 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8003250:	6813      	ldr	r3, [r2, #0]
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8003258:	2201      	movs	r2, #1
 800325a:	e7de      	b.n	800321a <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800325e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24
 8003264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003266:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800326a:	9201      	str	r2, [sp, #4]
 800326c:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800326e:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003270:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003272:	f402 52c0 	and.w	r2, r2, #6144	@ 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8003276:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 800327a:	6259      	str	r1, [r3, #36]	@ 0x24
 800327c:	e7e1      	b.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0x36>
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40023c00 	.word	0x40023c00
 8003288:	40007000 	.word	0x40007000

0800328c <HAL_RCC_OscConfig>:
{
 800328c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003290:	4604      	mov	r4, r0
 8003292:	2800      	cmp	r0, #0
 8003294:	d05f      	beq.n	8003356 <HAL_RCC_OscConfig+0xca>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003296:	4b9a      	ldr	r3, [pc, #616]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003298:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329a:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800329c:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a0:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a4:	f407 3780 	and.w	r7, r7, #65536	@ 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a8:	d44a      	bmi.n	8003340 <HAL_RCC_OscConfig+0xb4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	0799      	lsls	r1, r3, #30
 80032ae:	f100 8093 	bmi.w	80033d8 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	06d8      	lsls	r0, r3, #27
 80032b6:	d535      	bpl.n	8003324 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032b8:	2e00      	cmp	r6, #0
 80032ba:	f040 80dd 	bne.w	8003478 <HAL_RCC_OscConfig+0x1ec>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032be:	4f90      	ldr	r7, [pc, #576]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	0599      	lsls	r1, r3, #22
 80032c4:	d502      	bpl.n	80032cc <HAL_RCC_OscConfig+0x40>
 80032c6:	69a3      	ldr	r3, [r4, #24]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d044      	beq.n	8003356 <HAL_RCC_OscConfig+0xca>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a25      	ldr	r5, [r4, #32]
 80032d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80032d4:	429d      	cmp	r5, r3
 80032d6:	f240 80bc 	bls.w	8003452 <HAL_RCC_OscConfig+0x1c6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032da:	4628      	mov	r0, r5
 80032dc:	f7ff ff96 	bl	800320c <RCC_SetFlashLatencyFromMSIRange>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d138      	bne.n	8003356 <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80032ea:	432b      	orrs	r3, r5
 80032ec:	607b      	str	r3, [r7, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69e2      	ldr	r2, [r4, #28]
 80032f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80032fa:	607b      	str	r3, [r7, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80032fc:	4b80      	ldr	r3, [pc, #512]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 80032fe:	4981      	ldr	r1, [pc, #516]	@ (8003504 <HAL_RCC_OscConfig+0x278>)
 8003300:	689a      	ldr	r2, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003306:	0b6d      	lsrs	r5, r5, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003308:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800330c:	5c8a      	ldrb	r2, [r1, r2]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800330e:	3501      	adds	r5, #1
 8003310:	40ab      	lsls	r3, r5
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003312:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003314:	4a7c      	ldr	r2, [pc, #496]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003316:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003318:	4b7c      	ldr	r3, [pc, #496]	@ (800350c <HAL_RCC_OscConfig+0x280>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	f7fe fccb 	bl	8001cb6 <HAL_InitTick>
        if(status != HAL_OK)
 8003320:	2800      	cmp	r0, #0
 8003322:	d131      	bne.n	8003388 <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	0718      	lsls	r0, r3, #28
 8003328:	f100 80d5 	bmi.w	80034d6 <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	0759      	lsls	r1, r3, #29
 8003330:	f100 8100 	bmi.w	8003534 <HAL_RCC_OscConfig+0x2a8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003334:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 8168 	bne.w	800360c <HAL_RCC_OscConfig+0x380>
  return HAL_OK;
 800333c:	2000      	movs	r0, #0
 800333e:	e023      	b.n	8003388 <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003340:	2e08      	cmp	r6, #8
 8003342:	d002      	beq.n	800334a <HAL_RCC_OscConfig+0xbe>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003344:	2e0c      	cmp	r6, #12
 8003346:	d108      	bne.n	800335a <HAL_RCC_OscConfig+0xce>
 8003348:	b13f      	cbz	r7, 800335a <HAL_RCC_OscConfig+0xce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	039a      	lsls	r2, r3, #14
 800334e:	d5ac      	bpl.n	80032aa <HAL_RCC_OscConfig+0x1e>
 8003350:	6863      	ldr	r3, [r4, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1a9      	bne.n	80032aa <HAL_RCC_OscConfig+0x1e>
    return HAL_ERROR;
 8003356:	2001      	movs	r0, #1
 8003358:	e016      	b.n	8003388 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335a:	6863      	ldr	r3, [r4, #4]
 800335c:	4d68      	ldr	r5, [pc, #416]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 800335e:	2b01      	cmp	r3, #1
 8003360:	d115      	bne.n	800338e <HAL_RCC_OscConfig+0x102>
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003368:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800336a:	f7fe fca6 	bl	8001cba <HAL_GetTick>
 800336e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003370:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8003500 <HAL_RCC_OscConfig+0x274>
 8003374:	f8d8 3000 	ldr.w	r3, [r8]
 8003378:	039b      	lsls	r3, r3, #14
 800337a:	d496      	bmi.n	80032aa <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fc9d 	bl	8001cba <HAL_GetTick>
 8003380:	1b40      	subs	r0, r0, r5
 8003382:	2864      	cmp	r0, #100	@ 0x64
 8003384:	d9f6      	bls.n	8003374 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 8003386:	2003      	movs	r0, #3
}
 8003388:	b003      	add	sp, #12
 800338a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338e:	b9ab      	cbnz	r3, 80033bc <HAL_RCC_OscConfig+0x130>
 8003390:	682b      	ldr	r3, [r5, #0]
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	602b      	str	r3, [r5, #0]
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800339e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033a0:	f7fe fc8b 	bl	8001cba <HAL_GetTick>
 80033a4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033a6:	682b      	ldr	r3, [r5, #0]
 80033a8:	0398      	lsls	r0, r3, #14
 80033aa:	f57f af7e 	bpl.w	80032aa <HAL_RCC_OscConfig+0x1e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ae:	f7fe fc84 	bl	8001cba <HAL_GetTick>
 80033b2:	eba0 0008 	sub.w	r0, r0, r8
 80033b6:	2864      	cmp	r0, #100	@ 0x64
 80033b8:	d9f5      	bls.n	80033a6 <HAL_RCC_OscConfig+0x11a>
 80033ba:	e7e4      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033bc:	2b05      	cmp	r3, #5
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	d103      	bne.n	80033ca <HAL_RCC_OscConfig+0x13e>
 80033c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c6:	602b      	str	r3, [r5, #0]
 80033c8:	e7cb      	b.n	8003362 <HAL_RCC_OscConfig+0xd6>
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ce:	602b      	str	r3, [r5, #0]
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	e7c7      	b.n	8003368 <HAL_RCC_OscConfig+0xdc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033d8:	2e04      	cmp	r6, #4
 80033da:	d002      	beq.n	80033e2 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033dc:	2e0c      	cmp	r6, #12
 80033de:	d10f      	bne.n	8003400 <HAL_RCC_OscConfig+0x174>
 80033e0:	b977      	cbnz	r7, 8003400 <HAL_RCC_OscConfig+0x174>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4a47      	ldr	r2, [pc, #284]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 80033e4:	6813      	ldr	r3, [r2, #0]
 80033e6:	0799      	lsls	r1, r3, #30
 80033e8:	d502      	bpl.n	80033f0 <HAL_RCC_OscConfig+0x164>
 80033ea:	68e3      	ldr	r3, [r4, #12]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d1b2      	bne.n	8003356 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	6853      	ldr	r3, [r2, #4]
 80033f2:	6921      	ldr	r1, [r4, #16]
 80033f4:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80033f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80033fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	e758      	b.n	80032b2 <HAL_RCC_OscConfig+0x26>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003400:	68e2      	ldr	r2, [r4, #12]
 8003402:	4b43      	ldr	r3, [pc, #268]	@ (8003510 <HAL_RCC_OscConfig+0x284>)
 8003404:	b1b2      	cbz	r2, 8003434 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800340a:	f7fe fc56 	bl	8001cba <HAL_GetTick>
 800340e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003410:	4d3b      	ldr	r5, [pc, #236]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	079a      	lsls	r2, r3, #30
 8003416:	d507      	bpl.n	8003428 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003418:	686b      	ldr	r3, [r5, #4]
 800341a:	6922      	ldr	r2, [r4, #16]
 800341c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8003420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003424:	606b      	str	r3, [r5, #4]
 8003426:	e744      	b.n	80032b2 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003428:	f7fe fc47 	bl	8001cba <HAL_GetTick>
 800342c:	1bc0      	subs	r0, r0, r7
 800342e:	2802      	cmp	r0, #2
 8003430:	d9ef      	bls.n	8003412 <HAL_RCC_OscConfig+0x186>
 8003432:	e7a8      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8003434:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003436:	f7fe fc40 	bl	8001cba <HAL_GetTick>
 800343a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800343c:	4f30      	ldr	r7, [pc, #192]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	079b      	lsls	r3, r3, #30
 8003442:	f57f af36 	bpl.w	80032b2 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003446:	f7fe fc38 	bl	8001cba <HAL_GetTick>
 800344a:	1b40      	subs	r0, r0, r5
 800344c:	2802      	cmp	r0, #2
 800344e:	d9f6      	bls.n	800343e <HAL_RCC_OscConfig+0x1b2>
 8003450:	e799      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003452:	687b      	ldr	r3, [r7, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003454:	4628      	mov	r0, r5
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003456:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800345a:	432b      	orrs	r3, r5
 800345c:	607b      	str	r3, [r7, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69e2      	ldr	r2, [r4, #28]
 8003462:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003466:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800346a:	607b      	str	r3, [r7, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800346c:	f7ff fece 	bl	800320c <RCC_SetFlashLatencyFromMSIRange>
 8003470:	2800      	cmp	r0, #0
 8003472:	f43f af43 	beq.w	80032fc <HAL_RCC_OscConfig+0x70>
 8003476:	e76e      	b.n	8003356 <HAL_RCC_OscConfig+0xca>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003478:	69a2      	ldr	r2, [r4, #24]
 800347a:	4b25      	ldr	r3, [pc, #148]	@ (8003510 <HAL_RCC_OscConfig+0x284>)
 800347c:	b1e2      	cbz	r2, 80034b8 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_ENABLE();
 800347e:	2201      	movs	r2, #1
 8003480:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8003482:	f7fe fc1a 	bl	8001cba <HAL_GetTick>
 8003486:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003488:	4d1d      	ldr	r5, [pc, #116]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 800348a:	682b      	ldr	r3, [r5, #0]
 800348c:	059a      	lsls	r2, r3, #22
 800348e:	d50d      	bpl.n	80034ac <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003490:	686b      	ldr	r3, [r5, #4]
 8003492:	6a22      	ldr	r2, [r4, #32]
 8003494:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003498:	4313      	orrs	r3, r2
 800349a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349c:	686b      	ldr	r3, [r5, #4]
 800349e:	69e2      	ldr	r2, [r4, #28]
 80034a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80034a8:	606b      	str	r3, [r5, #4]
 80034aa:	e73b      	b.n	8003324 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ac:	f7fe fc05 	bl	8001cba <HAL_GetTick>
 80034b0:	1bc0      	subs	r0, r0, r7
 80034b2:	2802      	cmp	r0, #2
 80034b4:	d9e9      	bls.n	800348a <HAL_RCC_OscConfig+0x1fe>
 80034b6:	e766      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 80034b8:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80034ba:	f7fe fbfe 	bl	8001cba <HAL_GetTick>
 80034be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80034c0:	4f0f      	ldr	r7, [pc, #60]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	059b      	lsls	r3, r3, #22
 80034c6:	f57f af2d 	bpl.w	8003324 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ca:	f7fe fbf6 	bl	8001cba <HAL_GetTick>
 80034ce:	1b40      	subs	r0, r0, r5
 80034d0:	2802      	cmp	r0, #2
 80034d2:	d9f6      	bls.n	80034c2 <HAL_RCC_OscConfig+0x236>
 80034d4:	e757      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d6:	6962      	ldr	r2, [r4, #20]
 80034d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_RCC_OscConfig+0x284>)
 80034da:	b1da      	cbz	r2, 8003514 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 80034dc:	2201      	movs	r2, #1
 80034de:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
      tickstart = HAL_GetTick();
 80034e2:	f7fe fbea 	bl	8001cba <HAL_GetTick>
 80034e6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034e8:	4f05      	ldr	r7, [pc, #20]	@ (8003500 <HAL_RCC_OscConfig+0x274>)
 80034ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ec:	079a      	lsls	r2, r3, #30
 80034ee:	f53f af1d 	bmi.w	800332c <HAL_RCC_OscConfig+0xa0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fe fbe2 	bl	8001cba <HAL_GetTick>
 80034f6:	1b40      	subs	r0, r0, r5
 80034f8:	2802      	cmp	r0, #2
 80034fa:	d9f6      	bls.n	80034ea <HAL_RCC_OscConfig+0x25e>
 80034fc:	e743      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	0800ca19 	.word	0x0800ca19
 8003508:	2000004c 	.word	0x2000004c
 800350c:	20000054 	.word	0x20000054
 8003510:	42470000 	.word	0x42470000
      __HAL_RCC_LSI_DISABLE();
 8003514:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
      tickstart = HAL_GetTick();
 8003518:	f7fe fbcf 	bl	8001cba <HAL_GetTick>
 800351c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800351e:	4f66      	ldr	r7, [pc, #408]	@ (80036b8 <HAL_RCC_OscConfig+0x42c>)
 8003520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003522:	079b      	lsls	r3, r3, #30
 8003524:	f57f af02 	bpl.w	800332c <HAL_RCC_OscConfig+0xa0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003528:	f7fe fbc7 	bl	8001cba <HAL_GetTick>
 800352c:	1b40      	subs	r0, r0, r5
 800352e:	2802      	cmp	r0, #2
 8003530:	d9f6      	bls.n	8003520 <HAL_RCC_OscConfig+0x294>
 8003532:	e728      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003534:	4b60      	ldr	r3, [pc, #384]	@ (80036b8 <HAL_RCC_OscConfig+0x42c>)
 8003536:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003538:	00d0      	lsls	r0, r2, #3
 800353a:	d429      	bmi.n	8003590 <HAL_RCC_OscConfig+0x304>
      pwrclkchanged = SET;
 800353c:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003542:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003546:	625a      	str	r2, [r3, #36]	@ 0x24
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4d5a      	ldr	r5, [pc, #360]	@ (80036bc <HAL_RCC_OscConfig+0x430>)
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	05d9      	lsls	r1, r3, #23
 8003558:	d51d      	bpl.n	8003596 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355a:	68a3      	ldr	r3, [r4, #8]
 800355c:	4d56      	ldr	r5, [pc, #344]	@ (80036b8 <HAL_RCC_OscConfig+0x42c>)
 800355e:	2b01      	cmp	r3, #1
 8003560:	d129      	bne.n	80035b6 <HAL_RCC_OscConfig+0x32a>
 8003562:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003568:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 800356a:	f7fe fba6 	bl	8001cba <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003572:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003574:	4f50      	ldr	r7, [pc, #320]	@ (80036b8 <HAL_RCC_OscConfig+0x42c>)
 8003576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003578:	059b      	lsls	r3, r3, #22
 800357a:	d541      	bpl.n	8003600 <HAL_RCC_OscConfig+0x374>
    if(pwrclkchanged == SET)
 800357c:	f1b8 0f00 	cmp.w	r8, #0
 8003580:	f43f aed8 	beq.w	8003334 <HAL_RCC_OscConfig+0xa8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4a4c      	ldr	r2, [pc, #304]	@ (80036b8 <HAL_RCC_OscConfig+0x42c>)
 8003586:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358c:	6253      	str	r3, [r2, #36]	@ 0x24
 800358e:	e6d1      	b.n	8003334 <HAL_RCC_OscConfig+0xa8>
    FlagStatus       pwrclkchanged = RESET;
 8003590:	f04f 0800 	mov.w	r8, #0
 8003594:	e7dd      	b.n	8003552 <HAL_RCC_OscConfig+0x2c6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800359c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800359e:	f7fe fb8c 	bl	8001cba <HAL_GetTick>
 80035a2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	05da      	lsls	r2, r3, #23
 80035a8:	d4d7      	bmi.n	800355a <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035aa:	f7fe fb86 	bl	8001cba <HAL_GetTick>
 80035ae:	1bc0      	subs	r0, r0, r7
 80035b0:	2864      	cmp	r0, #100	@ 0x64
 80035b2:	d9f7      	bls.n	80035a4 <HAL_RCC_OscConfig+0x318>
 80035b4:	e6e7      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b6:	b9ab      	cbnz	r3, 80035e4 <HAL_RCC_OscConfig+0x358>
 80035b8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c2:	636b      	str	r3, [r5, #52]	@ 0x34
 80035c4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80035c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035ca:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80035cc:	f7fe fb75 	bl	8001cba <HAL_GetTick>
 80035d0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035d2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80035d4:	0598      	lsls	r0, r3, #22
 80035d6:	d5d1      	bpl.n	800357c <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d8:	f7fe fb6f 	bl	8001cba <HAL_GetTick>
 80035dc:	1bc0      	subs	r0, r0, r7
 80035de:	4548      	cmp	r0, r9
 80035e0:	d9f7      	bls.n	80035d2 <HAL_RCC_OscConfig+0x346>
 80035e2:	e6d0      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80035e8:	d103      	bne.n	80035f2 <HAL_RCC_OscConfig+0x366>
 80035ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ee:	636b      	str	r3, [r5, #52]	@ 0x34
 80035f0:	e7b7      	b.n	8003562 <HAL_RCC_OscConfig+0x2d6>
 80035f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035f6:	636b      	str	r3, [r5, #52]	@ 0x34
 80035f8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80035fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035fe:	e7b3      	b.n	8003568 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fe fb5b 	bl	8001cba <HAL_GetTick>
 8003604:	1b40      	subs	r0, r0, r5
 8003606:	4548      	cmp	r0, r9
 8003608:	d9b5      	bls.n	8003576 <HAL_RCC_OscConfig+0x2ea>
 800360a:	e6bc      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800360c:	2e0c      	cmp	r6, #12
 800360e:	d03a      	beq.n	8003686 <HAL_RCC_OscConfig+0x3fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003610:	2200      	movs	r2, #0
 8003612:	2b02      	cmp	r3, #2
 8003614:	4b2a      	ldr	r3, [pc, #168]	@ (80036c0 <HAL_RCC_OscConfig+0x434>)
        __HAL_RCC_PLL_DISABLE();
 8003616:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003618:	d127      	bne.n	800366a <HAL_RCC_OscConfig+0x3de>
        tickstart = HAL_GetTick();
 800361a:	f7fe fb4e 	bl	8001cba <HAL_GetTick>
 800361e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003620:	4d25      	ldr	r5, [pc, #148]	@ (80036b8 <HAL_RCC_OscConfig+0x42c>)
 8003622:	682b      	ldr	r3, [r5, #0]
 8003624:	0199      	lsls	r1, r3, #6
 8003626:	d41a      	bmi.n	800365e <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003628:	68aa      	ldr	r2, [r5, #8]
 800362a:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	@ 0x28
 800362e:	f422 027d 	bic.w	r2, r2, #16580608	@ 0xfd0000
 8003632:	430b      	orrs	r3, r1
 8003634:	4313      	orrs	r3, r2
 8003636:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003638:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800363a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800363c:	60ab      	str	r3, [r5, #8]
        __HAL_RCC_PLL_ENABLE();
 800363e:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <HAL_RCC_OscConfig+0x434>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003640:	4d1d      	ldr	r5, [pc, #116]	@ (80036b8 <HAL_RCC_OscConfig+0x42c>)
        __HAL_RCC_PLL_ENABLE();
 8003642:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003644:	f7fe fb39 	bl	8001cba <HAL_GetTick>
 8003648:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800364a:	682b      	ldr	r3, [r5, #0]
 800364c:	019a      	lsls	r2, r3, #6
 800364e:	f53f ae75 	bmi.w	800333c <HAL_RCC_OscConfig+0xb0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe fb32 	bl	8001cba <HAL_GetTick>
 8003656:	1b00      	subs	r0, r0, r4
 8003658:	2802      	cmp	r0, #2
 800365a:	d9f6      	bls.n	800364a <HAL_RCC_OscConfig+0x3be>
 800365c:	e693      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365e:	f7fe fb2c 	bl	8001cba <HAL_GetTick>
 8003662:	1b80      	subs	r0, r0, r6
 8003664:	2802      	cmp	r0, #2
 8003666:	d9dc      	bls.n	8003622 <HAL_RCC_OscConfig+0x396>
 8003668:	e68d      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 800366a:	f7fe fb26 	bl	8001cba <HAL_GetTick>
 800366e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003670:	4d11      	ldr	r5, [pc, #68]	@ (80036b8 <HAL_RCC_OscConfig+0x42c>)
 8003672:	682b      	ldr	r3, [r5, #0]
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	f57f ae61 	bpl.w	800333c <HAL_RCC_OscConfig+0xb0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367a:	f7fe fb1e 	bl	8001cba <HAL_GetTick>
 800367e:	1b00      	subs	r0, r0, r4
 8003680:	2802      	cmp	r0, #2
 8003682:	d9f6      	bls.n	8003672 <HAL_RCC_OscConfig+0x3e6>
 8003684:	e67f      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003686:	2b01      	cmp	r3, #1
 8003688:	f43f ae65 	beq.w	8003356 <HAL_RCC_OscConfig+0xca>
        pll_config = RCC->CFGR;
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <HAL_RCC_OscConfig+0x42c>)
 800368e:	6898      	ldr	r0, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003690:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003692:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8003696:	429a      	cmp	r2, r3
 8003698:	f47f ae5d 	bne.w	8003356 <HAL_RCC_OscConfig+0xca>
 800369c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800369e:	f400 1370 	and.w	r3, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	4293      	cmp	r3, r2
 80036a4:	f47f ae57 	bne.w	8003356 <HAL_RCC_OscConfig+0xca>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80036aa:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036ae:	1ac0      	subs	r0, r0, r3
 80036b0:	bf18      	it	ne
 80036b2:	2001      	movne	r0, #1
 80036b4:	e668      	b.n	8003388 <HAL_RCC_OscConfig+0xfc>
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40007000 	.word	0x40007000
 80036c0:	42470000 	.word	0x42470000

080036c4 <HAL_RCC_GetSysClockFreq>:
{
 80036c4:	b508      	push	{r3, lr}
  tmpreg = RCC->CFGR;
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <HAL_RCC_GetSysClockFreq+0x58>)
 80036c8:	689a      	ldr	r2, [r3, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 80036ca:	f002 010c 	and.w	r1, r2, #12
 80036ce:	2908      	cmp	r1, #8
 80036d0:	d021      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x52>
 80036d2:	290c      	cmp	r1, #12
 80036d4:	d003      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x1a>
 80036d6:	2904      	cmp	r1, #4
 80036d8:	d115      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSI_VALUE;
 80036da:	4811      	ldr	r0, [pc, #68]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80036dc:	e012      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036de:	689b      	ldr	r3, [r3, #8]
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036e0:	4810      	ldr	r0, [pc, #64]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x60>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e2:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80036e6:	f3c2 4183 	ubfx	r1, r2, #18, #4
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036ea:	5c41      	ldrb	r1, [r0, r1]
 80036ec:	bf14      	ite	ne
 80036ee:	480e      	ldrne	r0, [pc, #56]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x64>)
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036f0:	480b      	ldreq	r0, [pc, #44]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x5c>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036f2:	f3c2 5281 	ubfx	r2, r2, #22, #2
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036f6:	bf18      	it	ne
 80036f8:	2300      	movne	r3, #0
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036fa:	fba1 0100 	umull	r0, r1, r1, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036fe:	3201      	adds	r2, #1
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003700:	f7fd fa30 	bl	8000b64 <__aeabi_uldivmod>
}
 8003704:	bd08      	pop	{r3, pc}
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003706:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003710:	3301      	adds	r3, #1
 8003712:	4098      	lsls	r0, r3
      break;
 8003714:	e7f6      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
  switch (tmpreg & RCC_CFGR_SWS)
 8003716:	4804      	ldr	r0, [pc, #16]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x64>)
 8003718:	e7f4      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	00f42400 	.word	0x00f42400
 8003724:	0800ca10 	.word	0x0800ca10
 8003728:	007a1200 	.word	0x007a1200

0800372c <HAL_RCC_ClockConfig>:
{
 800372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003730:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003732:	4604      	mov	r4, r0
 8003734:	b910      	cbnz	r0, 800373c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003736:	2001      	movs	r0, #1
}
 8003738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b57      	ldr	r3, [pc, #348]	@ (800389c <HAL_RCC_ClockConfig+0x170>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	f002 0201 	and.w	r2, r2, #1
 8003744:	428a      	cmp	r2, r1
 8003746:	d32a      	bcc.n	800379e <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003748:	6822      	ldr	r2, [r4, #0]
 800374a:	0796      	lsls	r6, r2, #30
 800374c:	d438      	bmi.n	80037c0 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374e:	07d0      	lsls	r0, r2, #31
 8003750:	d43e      	bmi.n	80037d0 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003752:	4b52      	ldr	r3, [pc, #328]	@ (800389c <HAL_RCC_ClockConfig+0x170>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	f002 0201 	and.w	r2, r2, #1
 800375a:	42aa      	cmp	r2, r5
 800375c:	f200 808c 	bhi.w	8003878 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	6822      	ldr	r2, [r4, #0]
 8003762:	0751      	lsls	r1, r2, #29
 8003764:	f100 8091 	bmi.w	800388a <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003768:	0713      	lsls	r3, r2, #28
 800376a:	d507      	bpl.n	800377c <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376c:	4a4c      	ldr	r2, [pc, #304]	@ (80038a0 <HAL_RCC_ClockConfig+0x174>)
 800376e:	6921      	ldr	r1, [r4, #16]
 8003770:	6893      	ldr	r3, [r2, #8]
 8003772:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003776:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800377a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377c:	f7ff ffa2 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
}
 8003780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003784:	4b46      	ldr	r3, [pc, #280]	@ (80038a0 <HAL_RCC_ClockConfig+0x174>)
 8003786:	4a47      	ldr	r2, [pc, #284]	@ (80038a4 <HAL_RCC_ClockConfig+0x178>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800378e:	5cd3      	ldrb	r3, [r2, r3]
 8003790:	40d8      	lsrs	r0, r3
 8003792:	4b45      	ldr	r3, [pc, #276]	@ (80038a8 <HAL_RCC_ClockConfig+0x17c>)
 8003794:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003796:	4b45      	ldr	r3, [pc, #276]	@ (80038ac <HAL_RCC_ClockConfig+0x180>)
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	f7fe ba8c 	b.w	8001cb6 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	2901      	cmp	r1, #1
 80037a0:	bf02      	ittt	eq
 80037a2:	681a      	ldreq	r2, [r3, #0]
 80037a4:	f042 0204 	orreq.w	r2, r2, #4
 80037a8:	601a      	streq	r2, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	428b      	cmp	r3, r1
 80037bc:	d1bb      	bne.n	8003736 <HAL_RCC_ClockConfig+0xa>
 80037be:	e7c3      	b.n	8003748 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c0:	4937      	ldr	r1, [pc, #220]	@ (80038a0 <HAL_RCC_ClockConfig+0x174>)
 80037c2:	68a0      	ldr	r0, [r4, #8]
 80037c4:	688b      	ldr	r3, [r1, #8]
 80037c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ca:	4303      	orrs	r3, r0
 80037cc:	608b      	str	r3, [r1, #8]
 80037ce:	e7be      	b.n	800374e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d0:	6861      	ldr	r1, [r4, #4]
 80037d2:	4b33      	ldr	r3, [pc, #204]	@ (80038a0 <HAL_RCC_ClockConfig+0x174>)
 80037d4:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037d6:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d8:	d11c      	bne.n	8003814 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037da:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037de:	d0aa      	beq.n	8003736 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e0:	689a      	ldr	r2, [r3, #8]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e6:	f022 0203 	bic.w	r2, r2, #3
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80037ee:	f7fe fa64 	bl	8001cba <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f2:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80037f4:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f6:	2b02      	cmp	r3, #2
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f8:	4f29      	ldr	r7, [pc, #164]	@ (80038a0 <HAL_RCC_ClockConfig+0x174>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fa:	d118      	bne.n	800382e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	d0a5      	beq.n	8003752 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003806:	f7fe fa58 	bl	8001cba <HAL_GetTick>
 800380a:	1b80      	subs	r0, r0, r6
 800380c:	4540      	cmp	r0, r8
 800380e:	d9f5      	bls.n	80037fc <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8003810:	2003      	movs	r0, #3
 8003812:	e791      	b.n	8003738 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003814:	2903      	cmp	r1, #3
 8003816:	d102      	bne.n	800381e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003818:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800381c:	e7df      	b.n	80037de <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800381e:	2901      	cmp	r1, #1
 8003820:	d102      	bne.n	8003828 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003822:	f012 0f02 	tst.w	r2, #2
 8003826:	e7da      	b.n	80037de <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003828:	f412 7f00 	tst.w	r2, #512	@ 0x200
 800382c:	e7d7      	b.n	80037de <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382e:	2b03      	cmp	r3, #3
 8003830:	d10a      	bne.n	8003848 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d08a      	beq.n	8003752 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fe fa3d 	bl	8001cba <HAL_GetTick>
 8003840:	1b80      	subs	r0, r0, r6
 8003842:	4540      	cmp	r0, r8
 8003844:	d9f5      	bls.n	8003832 <HAL_RCC_ClockConfig+0x106>
 8003846:	e7e3      	b.n	8003810 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003848:	2b01      	cmp	r3, #1
 800384a:	d110      	bne.n	800386e <HAL_RCC_ClockConfig+0x142>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b04      	cmp	r3, #4
 8003854:	f43f af7d 	beq.w	8003752 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7fe fa2f 	bl	8001cba <HAL_GetTick>
 800385c:	1b80      	subs	r0, r0, r6
 800385e:	4540      	cmp	r0, r8
 8003860:	d9f4      	bls.n	800384c <HAL_RCC_ClockConfig+0x120>
 8003862:	e7d5      	b.n	8003810 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003864:	f7fe fa29 	bl	8001cba <HAL_GetTick>
 8003868:	1b80      	subs	r0, r0, r6
 800386a:	4540      	cmp	r0, r8
 800386c:	d8d0      	bhi.n	8003810 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f013 0f0c 	tst.w	r3, #12
 8003874:	d1f6      	bne.n	8003864 <HAL_RCC_ClockConfig+0x138>
 8003876:	e76c      	b.n	8003752 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	07da      	lsls	r2, r3, #31
 8003884:	f57f af6c 	bpl.w	8003760 <HAL_RCC_ClockConfig+0x34>
 8003888:	e755      	b.n	8003736 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388a:	4905      	ldr	r1, [pc, #20]	@ (80038a0 <HAL_RCC_ClockConfig+0x174>)
 800388c:	68e0      	ldr	r0, [r4, #12]
 800388e:	688b      	ldr	r3, [r1, #8]
 8003890:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003894:	4303      	orrs	r3, r0
 8003896:	608b      	str	r3, [r1, #8]
 8003898:	e766      	b.n	8003768 <HAL_RCC_ClockConfig+0x3c>
 800389a:	bf00      	nop
 800389c:	40023c00 	.word	0x40023c00
 80038a0:	40023800 	.word	0x40023800
 80038a4:	0800ca19 	.word	0x0800ca19
 80038a8:	2000004c 	.word	0x2000004c
 80038ac:	20000054 	.word	0x20000054

080038b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b0:	4b04      	ldr	r3, [pc, #16]	@ (80038c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80038b2:	4a05      	ldr	r2, [pc, #20]	@ (80038c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80038ba:	5cd3      	ldrb	r3, [r2, r3]
 80038bc:	4a03      	ldr	r2, [pc, #12]	@ (80038cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80038be:	6810      	ldr	r0, [r2, #0]
}
 80038c0:	40d8      	lsrs	r0, r3
 80038c2:	4770      	bx	lr
 80038c4:	40023800 	.word	0x40023800
 80038c8:	0800ca29 	.word	0x0800ca29
 80038cc:	2000004c 	.word	0x2000004c

080038d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038d0:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80038d2:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80038da:	5cd3      	ldrb	r3, [r2, r3]
 80038dc:	4a03      	ldr	r2, [pc, #12]	@ (80038ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80038de:	6810      	ldr	r0, [r2, #0]
}
 80038e0:	40d8      	lsrs	r0, r3
 80038e2:	4770      	bx	lr
 80038e4:	40023800 	.word	0x40023800
 80038e8:	0800ca29 	.word	0x0800ca29
 80038ec:	2000004c 	.word	0x2000004c

080038f0 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80038f0:	6803      	ldr	r3, [r0, #0]
{
 80038f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f6:	0799      	lsls	r1, r3, #30
{
 80038f8:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038fa:	d048      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80038fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003900:	00d2      	lsls	r2, r2, #3
 8003902:	d446      	bmi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003904:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003908:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	4e48      	ldr	r6, [pc, #288]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800391a:	6833      	ldr	r3, [r6, #0]
 800391c:	05df      	lsls	r7, r3, #23
 800391e:	d53a      	bpl.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003920:	4b45      	ldr	r3, [pc, #276]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x148>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003922:	6862      	ldr	r2, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003924:	6819      	ldr	r1, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003926:	f002 40c0 	and.w	r0, r2, #1610612736	@ 0x60000000
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800392a:	f001 41c0 	and.w	r1, r1, #1610612736	@ 0x60000000
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800392e:	4288      	cmp	r0, r1
 8003930:	d104      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x4c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003932:	68a1      	ldr	r1, [r4, #8]
 8003934:	f001 41c0 	and.w	r1, r1, #1610612736	@ 0x60000000
 8003938:	4281      	cmp	r1, r0
 800393a:	d007      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x5c>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800393c:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8003940:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8003944:	d102      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x5c>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	0389      	lsls	r1, r1, #14
 800394a:	d472      	bmi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x142>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800394c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800394e:	6821      	ldr	r1, [r4, #0]
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003950:	f413 3340 	ands.w	r3, r3, #196608	@ 0x30000
 8003954:	d132      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003956:	6826      	ldr	r6, [r4, #0]
 8003958:	07b7      	lsls	r7, r6, #30
 800395a:	d458      	bmi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800395c:	07f3      	lsls	r3, r6, #31
 800395e:	d510      	bpl.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003960:	6860      	ldr	r0, [r4, #4]
 8003962:	4a35      	ldr	r2, [pc, #212]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003964:	f400 3140 	and.w	r1, r0, #196608	@ 0x30000
 8003968:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 800396c:	d106      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	f000 40c0 	and.w	r0, r0, #1610612736	@ 0x60000000
 8003974:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003978:	4303      	orrs	r3, r0
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800397e:	4319      	orrs	r1, r3
 8003980:	6351      	str	r1, [r2, #52]	@ 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003982:	b125      	cbz	r5, 800398e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4a2c      	ldr	r2, [pc, #176]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003986:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800398c:	6253      	str	r3, [r2, #36]	@ 0x24
    }
  }

  return HAL_OK;
 800398e:	2000      	movs	r0, #0
 8003990:	e011      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2500      	movs	r5, #0
 8003994:	e7c0      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003996:	6833      	ldr	r3, [r6, #0]
 8003998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800399e:	f7fe f98c 	bl	8001cba <HAL_GetTick>
 80039a2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	05d8      	lsls	r0, r3, #23
 80039a8:	d4ba      	bmi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7fe f986 	bl	8001cba <HAL_GetTick>
 80039ae:	1bc0      	subs	r0, r0, r7
 80039b0:	2864      	cmp	r0, #100	@ 0x64
 80039b2:	d9f7      	bls.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          return HAL_TIMEOUT;
 80039b4:	2003      	movs	r0, #3
}
 80039b6:	b002      	add	sp, #8
 80039b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80039bc:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c4:	07ce      	lsls	r6, r1, #31
 80039c6:	d406      	bmi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80039c8:	68a2      	ldr	r2, [r4, #8]
 80039ca:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d0c1      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80039d2:	0788      	lsls	r0, r1, #30
 80039d4:	d5bf      	bpl.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d6:	2001      	movs	r0, #1
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039d8:	4e17      	ldr	r6, [pc, #92]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x148>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80039da:	4a19      	ldr	r2, [pc, #100]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x150>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039dc:	6b73      	ldr	r3, [r6, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_FORCE();
 80039de:	f8c2 06dc 	str.w	r0, [r2, #1756]	@ 0x6dc
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e2:	2000      	movs	r0, #0
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039e4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e8:	f8c2 06dc 	str.w	r0, [r2, #1756]	@ 0x6dc
      RCC->CSR = temp_reg;
 80039ec:	6371      	str	r1, [r6, #52]	@ 0x34
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80039ee:	05d9      	lsls	r1, r3, #23
 80039f0:	d5b1      	bpl.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66>
        tickstart = HAL_GetTick();
 80039f2:	f7fe f962 	bl	8001cba <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80039fa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039fc:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80039fe:	059a      	lsls	r2, r3, #22
 8003a00:	d4a9      	bmi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a02:	f7fe f95a 	bl	8001cba <HAL_GetTick>
 8003a06:	1bc0      	subs	r0, r0, r7
 8003a08:	4540      	cmp	r0, r8
 8003a0a:	d9f7      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a0c:	e7d2      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003a0e:	68a0      	ldr	r0, [r4, #8]
 8003a10:	4a09      	ldr	r2, [pc, #36]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003a12:	f400 3140 	and.w	r1, r0, #196608	@ 0x30000
 8003a16:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8003a1c:	6813      	ldr	r3, [r2, #0]
 8003a1e:	f000 40c0 	and.w	r0, r0, #1610612736	@ 0x60000000
 8003a22:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a26:	4303      	orrs	r3, r0
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003a2c:	4319      	orrs	r1, r3
 8003a2e:	6351      	str	r1, [r2, #52]	@ 0x34
 8003a30:	e794      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x6c>
          return HAL_ERROR;
 8003a32:	2001      	movs	r0, #1
 8003a34:	e7bf      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	42470000 	.word	0x42470000

08003a44 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003a44:	b538      	push	{r3, r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a46:	7f03      	ldrb	r3, [r0, #28]
{
 8003a48:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f04f 0002 	mov.w	r0, #2
 8003a50:	d020      	beq.n	8003a94 <HAL_RTC_DeactivateAlarm+0x50>
 8003a52:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a54:	22ca      	movs	r2, #202	@ 0xca
  __HAL_LOCK(hrtc);
 8003a56:	7723      	strb	r3, [r4, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a58:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a5a:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a5e:	2253      	movs	r2, #83	@ 0x53

  if (Alarm == RTC_ALARM_A)
 8003a60:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a64:	625a      	str	r2, [r3, #36]	@ 0x24
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003a66:	689a      	ldr	r2, [r3, #8]
  if (Alarm == RTC_ALARM_A)
 8003a68:	d124      	bne.n	8003ab4 <HAL_RTC_DeactivateAlarm+0x70>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003a6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a6e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a76:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003a78:	f7fe f91f 	bl	8001cba <HAL_GetTick>
 8003a7c:	4605      	mov	r5, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	07da      	lsls	r2, r3, #31
 8003a84:	d507      	bpl.n	8003a96 <HAL_RTC_DeactivateAlarm+0x52>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a86:	22ff      	movs	r2, #255	@ 0xff
 8003a88:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a8a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003a8e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8003a90:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 8003a92:	7763      	strb	r3, [r4, #29]

  return HAL_OK;
}
 8003a94:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a96:	f7fe f910 	bl	8001cba <HAL_GetTick>
 8003a9a:	1b40      	subs	r0, r0, r5
 8003a9c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003aa0:	d9ed      	bls.n	8003a7e <HAL_RTC_DeactivateAlarm+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aa2:	22ff      	movs	r2, #255	@ 0xff
 8003aa4:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003aa6:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	7723      	strb	r3, [r4, #28]
 8003ab2:	e7ef      	b.n	8003a94 <HAL_RTC_DeactivateAlarm+0x50>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003ab4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ab8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ac0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003ac2:	f7fe f8fa 	bl	8001cba <HAL_GetTick>
 8003ac6:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	079b      	lsls	r3, r3, #30
 8003ace:	d4da      	bmi.n	8003a86 <HAL_RTC_DeactivateAlarm+0x42>
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ad0:	f7fe f8f3 	bl	8001cba <HAL_GetTick>
 8003ad4:	1b40      	subs	r0, r0, r5
 8003ad6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003ada:	d9f5      	bls.n	8003ac8 <HAL_RTC_DeactivateAlarm+0x84>
 8003adc:	e7e1      	b.n	8003aa2 <HAL_RTC_DeactivateAlarm+0x5e>
	...

08003ae0 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003ae0:	6803      	ldr	r3, [r0, #0]
{
 8003ae2:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003ae4:	689a      	ldr	r2, [r3, #8]
{
 8003ae6:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003ae8:	04d2      	lsls	r2, r2, #19
 8003aea:	d50a      	bpl.n	8003b02 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	05d9      	lsls	r1, r3, #23
 8003af0:	d507      	bpl.n	8003b02 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003af2:	f7fd ff53 	bl	800199c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003af6:	6822      	ldr	r2, [r4, #0]
 8003af8:	68d3      	ldr	r3, [r2, #12]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f463 73c0 	orn	r3, r3, #384	@ 0x180
 8003b00:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	0492      	lsls	r2, r2, #18
 8003b08:	d50b      	bpl.n	8003b22 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	059b      	lsls	r3, r3, #22
 8003b0e:	d508      	bpl.n	8003b22 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003b10:	4620      	mov	r0, r4
 8003b12:	f000 fa75 	bl	8004000 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003b16:	6822      	ldr	r2, [r4, #0]
 8003b18:	68d3      	ldr	r3, [r2, #12]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f463 7320 	orn	r3, r3, #640	@ 0x280
 8003b20:	60d3      	str	r3, [r2, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003b22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b26:	4b02      	ldr	r3, [pc, #8]	@ (8003b30 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003b28:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	7763      	strb	r3, [r4, #29]
}
 8003b2e:	bd10      	pop	{r4, pc}
 8003b30:	40010400 	.word	0x40010400

08003b34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b34:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b36:	6803      	ldr	r3, [r0, #0]
{
 8003b38:	4604      	mov	r4, r0
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	0692      	lsls	r2, r2, #26
 8003b3e:	d501      	bpl.n	8003b44 <HAL_RTC_WaitForSynchro+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003b40:	2000      	movs	r0, #0
}
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b4a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003b4c:	f7fe f8b5 	bl	8001cba <HAL_GetTick>
 8003b50:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	069b      	lsls	r3, r3, #26
 8003b58:	d4f2      	bmi.n	8003b40 <HAL_RTC_WaitForSynchro+0xc>
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b5a:	f7fe f8ae 	bl	8001cba <HAL_GetTick>
 8003b5e:	1b40      	subs	r0, r0, r5
 8003b60:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003b64:	d9f5      	bls.n	8003b52 <HAL_RTC_WaitForSynchro+0x1e>
        return HAL_TIMEOUT;
 8003b66:	2003      	movs	r0, #3
 8003b68:	e7eb      	b.n	8003b42 <HAL_RTC_WaitForSynchro+0xe>

08003b6a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b6a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b6c:	6803      	ldr	r3, [r0, #0]
{
 8003b6e:	4604      	mov	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	0652      	lsls	r2, r2, #25
 8003b74:	d501      	bpl.n	8003b7a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003b76:	2000      	movs	r0, #0
}
 8003b78:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003b80:	f7fe f89b 	bl	8001cba <HAL_GetTick>
 8003b84:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	065b      	lsls	r3, r3, #25
 8003b8c:	d4f3      	bmi.n	8003b76 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b8e:	f7fe f894 	bl	8001cba <HAL_GetTick>
 8003b92:	1b40      	subs	r0, r0, r5
 8003b94:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003b98:	d9f5      	bls.n	8003b86 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	e7ec      	b.n	8003b78 <RTC_EnterInitMode+0xe>

08003b9e <HAL_RTC_Init>:
{
 8003b9e:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	b1b8      	cbz	r0, 8003bd4 <HAL_RTC_Init+0x36>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ba4:	7f43      	ldrb	r3, [r0, #29]
 8003ba6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003baa:	b913      	cbnz	r3, 8003bb2 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8003bac:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003bae:	f7fd fd15 	bl	80015dc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bb2:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bb4:	22ca      	movs	r2, #202	@ 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bb6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bb8:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bba:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bbe:	2253      	movs	r2, #83	@ 0x53
 8003bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bc2:	f7ff ffd2 	bl	8003b6a <RTC_EnterInitMode>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	4605      	mov	r5, r0
 8003bca:	b130      	cbz	r0, 8003bda <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bcc:	22ff      	movs	r2, #255	@ 0xff
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8003bd4:	2501      	movs	r5, #1
}
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003bda:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003bdc:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003bde:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8003be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003be6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003be8:	6862      	ldr	r2, [r4, #4]
 8003bea:	6899      	ldr	r1, [r3, #8]
 8003bec:	4302      	orrs	r2, r0
 8003bee:	6960      	ldr	r0, [r4, #20]
 8003bf0:	4302      	orrs	r2, r0
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bf6:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003bf8:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bfa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c02:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c0a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	069b      	lsls	r3, r3, #26
 8003c10:	d405      	bmi.n	8003c1e <HAL_RTC_Init+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7ff ff8e 	bl	8003b34 <HAL_RTC_WaitForSynchro>
 8003c18:	b108      	cbz	r0, 8003c1e <HAL_RTC_Init+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	e7d6      	b.n	8003bcc <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003c1e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003c20:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c28:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003c2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c30:	22ff      	movs	r2, #255	@ 0xff
 8003c32:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003c34:	2301      	movs	r3, #1
 8003c36:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8003c38:	e7cd      	b.n	8003bd6 <HAL_RTC_Init+0x38>

08003c3a <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8003c3a:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8003c3c:	2809      	cmp	r0, #9
 8003c3e:	d803      	bhi.n	8003c48 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003c40:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8003c44:	b2c0      	uxtb	r0, r0
 8003c46:	4770      	bx	lr
    Param -= 10U;
 8003c48:	380a      	subs	r0, #10
    bcdhigh++;
 8003c4a:	3301      	adds	r3, #1
    Param -= 10U;
 8003c4c:	b2c0      	uxtb	r0, r0
 8003c4e:	e7f5      	b.n	8003c3c <RTC_ByteToBcd2+0x2>

08003c50 <HAL_RTC_SetTime>:
{
 8003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8003c54:	7f03      	ldrb	r3, [r0, #28]
{
 8003c56:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 8003c58:	2b01      	cmp	r3, #1
{
 8003c5a:	460e      	mov	r6, r1
 8003c5c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003c60:	d02d      	beq.n	8003cbe <HAL_RTC_SetTime+0x6e>
 8003c62:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c64:	6829      	ldr	r1, [r5, #0]
  __HAL_LOCK(hrtc);
 8003c66:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c68:	7768      	strb	r0, [r5, #29]
  if (Format == RTC_FORMAT_BIN)
 8003c6a:	7830      	ldrb	r0, [r6, #0]
 8003c6c:	7874      	ldrb	r4, [r6, #1]
 8003c6e:	78b7      	ldrb	r7, [r6, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c70:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8003c72:	bb32      	cbnz	r2, 8003cc2 <HAL_RTC_SetTime+0x72>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c74:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8003c78:	bf08      	it	eq
 8003c7a:	70f3      	strbeq	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003c7c:	f7ff ffdd 	bl	8003c3a <RTC_ByteToBcd2>
 8003c80:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003c82:	4620      	mov	r0, r4
 8003c84:	f7ff ffd9 	bl	8003c3a <RTC_ByteToBcd2>
 8003c88:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	f7ff ffd5 	bl	8003c3a <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003c90:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003c92:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8003c96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003c9a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c9e:	23ca      	movs	r3, #202	@ 0xca
 8003ca0:	624b      	str	r3, [r1, #36]	@ 0x24
 8003ca2:	2353      	movs	r3, #83	@ 0x53
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ca4:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ca6:	624b      	str	r3, [r1, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ca8:	f7ff ff5f 	bl	8003b6a <RTC_EnterInitMode>
 8003cac:	682a      	ldr	r2, [r5, #0]
 8003cae:	b1a0      	cbz	r0, 8003cda <HAL_RTC_SetTime+0x8a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cb0:	23ff      	movs	r3, #255	@ 0xff
 8003cb2:	6253      	str	r3, [r2, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	776b      	strb	r3, [r5, #29]
      __HAL_UNLOCK(hrtc);
 8003cb8:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003cba:	2001      	movs	r0, #1
      __HAL_UNLOCK(hrtc);
 8003cbc:	772b      	strb	r3, [r5, #28]
}
 8003cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cc2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8003cc6:	bf08      	it	eq
 8003cc8:	70f3      	strbeq	r3, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003cca:	0224      	lsls	r4, r4, #8
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003ccc:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003cce:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003cd2:	433c      	orrs	r4, r7
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003cd8:	e7e1      	b.n	8003c9e <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003cda:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8003cde:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8003ce2:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003ce4:	6893      	ldr	r3, [r2, #8]
 8003ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cea:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003cec:	6891      	ldr	r1, [r2, #8]
 8003cee:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 8003cf2:	4303      	orrs	r3, r0
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003cf8:	68d3      	ldr	r3, [r2, #12]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cfa:	4628      	mov	r0, r5
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003cfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d00:	60d3      	str	r3, [r2, #12]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d02:	f7ff ff17 	bl	8003b34 <HAL_RTC_WaitForSynchro>
 8003d06:	22ff      	movs	r2, #255	@ 0xff
 8003d08:	682b      	ldr	r3, [r5, #0]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d1d1      	bne.n	8003cb4 <HAL_RTC_SetTime+0x64>
    hrtc->State = HAL_RTC_STATE_READY;
 8003d10:	2301      	movs	r3, #1
    __HAL_UNLOCK(hrtc);
 8003d12:	7728      	strb	r0, [r5, #28]
    hrtc->State = HAL_RTC_STATE_READY;
 8003d14:	776b      	strb	r3, [r5, #29]
    return HAL_OK;
 8003d16:	e7d2      	b.n	8003cbe <HAL_RTC_SetTime+0x6e>

08003d18 <HAL_RTC_SetDate>:
{
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003d1a:	7f03      	ldrb	r3, [r0, #28]
{
 8003d1c:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	f04f 0002 	mov.w	r0, #2
 8003d24:	d01e      	beq.n	8003d64 <HAL_RTC_SetDate+0x4c>
 8003d26:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d28:	7768      	strb	r0, [r5, #29]
  __HAL_LOCK(hrtc);
 8003d2a:	772b      	strb	r3, [r5, #28]
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003d2c:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d2e:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003d30:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t)sDate->Date) | \
 8003d32:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003d34:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d36:	b1b2      	cbz	r2, 8003d66 <HAL_RTC_SetDate+0x4e>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d38:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8003d3c:	433b      	orrs	r3, r7
 8003d3e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d42:	22ca      	movs	r2, #202	@ 0xca
 8003d44:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d46:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d48:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d4a:	2253      	movs	r2, #83	@ 0x53
 8003d4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d4e:	f7ff ff0c 	bl	8003b6a <RTC_EnterInitMode>
 8003d52:	682a      	ldr	r2, [r5, #0]
 8003d54:	b1f0      	cbz	r0, 8003d94 <HAL_RTC_SetDate+0x7c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d56:	23ff      	movs	r3, #255	@ 0xff
 8003d58:	6253      	str	r3, [r2, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	776b      	strb	r3, [r5, #29]
      __HAL_UNLOCK(hrtc);
 8003d5e:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003d60:	2001      	movs	r0, #1
      __HAL_UNLOCK(hrtc);
 8003d62:	772b      	strb	r3, [r5, #28]
}
 8003d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d66:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003d68:	bf42      	ittt	mi
 8003d6a:	f024 0410 	bicmi.w	r4, r4, #16
 8003d6e:	340a      	addmi	r4, #10
 8003d70:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003d72:	f7ff ff62 	bl	8003c3a <RTC_ByteToBcd2>
 8003d76:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003d78:	7848      	ldrb	r0, [r1, #1]
 8003d7a:	f7ff ff5e 	bl	8003c3a <RTC_ByteToBcd2>
 8003d7e:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003d80:	4638      	mov	r0, r7
 8003d82:	f7ff ff5a 	bl	8003c3a <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003d86:	ea40 0306 	orr.w	r3, r0, r6
 8003d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003d8e:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8003d92:	e7d6      	b.n	8003d42 <HAL_RTC_SetDate+0x2a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d94:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8003d98:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8003d9c:	6054      	str	r4, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003d9e:	68d3      	ldr	r3, [r2, #12]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003da0:	4628      	mov	r0, r5
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003da6:	60d3      	str	r3, [r2, #12]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003da8:	f7ff fec4 	bl	8003b34 <HAL_RTC_WaitForSynchro>
 8003dac:	22ff      	movs	r2, #255	@ 0xff
 8003dae:	682b      	ldr	r3, [r5, #0]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d1d1      	bne.n	8003d5a <HAL_RTC_SetDate+0x42>
    hrtc->State = HAL_RTC_STATE_READY ;
 8003db6:	2301      	movs	r3, #1
    __HAL_UNLOCK(hrtc);
 8003db8:	7728      	strb	r0, [r5, #28]
    hrtc->State = HAL_RTC_STATE_READY ;
 8003dba:	776b      	strb	r3, [r5, #29]
    return HAL_OK;
 8003dbc:	e7d2      	b.n	8003d64 <HAL_RTC_SetDate+0x4c>
	...

08003dc0 <HAL_RTC_SetAlarm_IT>:
{
 8003dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 8003dc4:	7f03      	ldrb	r3, [r0, #28]
{
 8003dc6:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	f04f 0002 	mov.w	r0, #2
 8003dce:	f000 8086 	beq.w	8003ede <HAL_RTC_SetAlarm_IT+0x11e>
 8003dd2:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003dd4:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hrtc);
 8003dd6:	7723      	strb	r3, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dd8:	7760      	strb	r0, [r4, #29]
  if (Format == RTC_FORMAT_BIN)
 8003dda:	69cd      	ldr	r5, [r1, #28]
 8003ddc:	7808      	ldrb	r0, [r1, #0]
 8003dde:	f891 8001 	ldrb.w	r8, [r1, #1]
 8003de2:	f891 9002 	ldrb.w	r9, [r1, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003de6:	68b3      	ldr	r3, [r6, #8]
  if (Format == RTC_FORMAT_BIN)
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d156      	bne.n	8003e9a <HAL_RTC_SetAlarm_IT+0xda>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003dec:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003df0:	bf08      	it	eq
 8003df2:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003df4:	f7ff ff21 	bl	8003c3a <RTC_ByteToBcd2>
 8003df8:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f7ff ff1d 	bl	8003c3a <RTC_ByteToBcd2>
 8003e00:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003e02:	4648      	mov	r0, r9
 8003e04:	f7ff ff19 	bl	8003c3a <RTC_ByteToBcd2>
 8003e08:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003e0a:	f891 0020 	ldrb.w	r0, [r1, #32]
 8003e0e:	f7ff ff14 	bl	8003c3a <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e12:	694b      	ldr	r3, [r1, #20]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e14:	f891 c003 	ldrb.w	ip, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e18:	432b      	orrs	r3, r5
 8003e1a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003e1e:	ea43 0308 	orr.w	r3, r3, r8
 8003e22:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003e26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e2a:	ea43 6500 	orr.w	r5, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003e2e:	698b      	ldr	r3, [r1, #24]
 8003e30:	684f      	ldr	r7, [r1, #4]
 8003e32:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e34:	23ca      	movs	r3, #202	@ 0xca
 8003e36:	6273      	str	r3, [r6, #36]	@ 0x24
 8003e38:	2353      	movs	r3, #83	@ 0x53
 8003e3a:	6273      	str	r3, [r6, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003e3c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003e42:	68b3      	ldr	r3, [r6, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003e44:	d14d      	bne.n	8003ee2 <HAL_RTC_SetAlarm_IT+0x122>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003e46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e4a:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e4c:	68f3      	ldr	r3, [r6, #12]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f463 73c0 	orn	r3, r3, #384	@ 0x180
 8003e54:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8003e56:	f7fd ff30 	bl	8001cba <HAL_GetTick>
 8003e5a:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	07d1      	lsls	r1, r2, #31
 8003e62:	d52e      	bpl.n	8003ec2 <HAL_RTC_SetAlarm_IT+0x102>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003e64:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003e66:	645f      	str	r7, [r3, #68]	@ 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e6e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003e76:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003e78:	4b2a      	ldr	r3, [pc, #168]	@ (8003f24 <HAL_RTC_SetAlarm_IT+0x164>)
  __HAL_UNLOCK(hrtc);
 8003e7a:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003e82:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003e8a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e8c:	22ff      	movs	r2, #255	@ 0xff
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003e92:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8003e94:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 8003e96:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8003e98:	e021      	b.n	8003ede <HAL_RTC_SetAlarm_IT+0x11e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e9a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e9e:	bf08      	it	eq
 8003ea0:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003ea2:	694b      	ldr	r3, [r1, #20]
 8003ea4:	431d      	orrs	r5, r3
 8003ea6:	ea45 0509 	orr.w	r5, r5, r9
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003eaa:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003eac:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003eb0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003eb4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003eb8:	f891 3020 	ldrb.w	r3, [r1, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003ebc:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8003ec0:	e7b5      	b.n	8003e2e <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ec2:	f7fd fefa 	bl	8001cba <HAL_GetTick>
 8003ec6:	1b80      	subs	r0, r0, r6
 8003ec8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003ecc:	d9c6      	bls.n	8003e5c <HAL_RTC_SetAlarm_IT+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ece:	22ff      	movs	r2, #255	@ 0xff
 8003ed0:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003ed2:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003eda:	2300      	movs	r3, #0
 8003edc:	7723      	strb	r3, [r4, #28]
}
 8003ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003ee2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ee6:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003ee8:	68f3      	ldr	r3, [r6, #12]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f463 7320 	orn	r3, r3, #640	@ 0x280
 8003ef0:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8003ef2:	f7fd fee2 	bl	8001cba <HAL_GetTick>
 8003ef6:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	0792      	lsls	r2, r2, #30
 8003efe:	d509      	bpl.n	8003f14 <HAL_RTC_SetAlarm_IT+0x154>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003f00:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003f02:	649f      	str	r7, [r3, #72]	@ 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f12:	e7b0      	b.n	8003e76 <HAL_RTC_SetAlarm_IT+0xb6>
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003f14:	f7fd fed1 	bl	8001cba <HAL_GetTick>
 8003f18:	1b80      	subs	r0, r0, r6
 8003f1a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003f1e:	d9eb      	bls.n	8003ef8 <HAL_RTC_SetAlarm_IT+0x138>
 8003f20:	e7d5      	b.n	8003ece <HAL_RTC_SetAlarm_IT+0x10e>
 8003f22:	bf00      	nop
 8003f24:	40010400 	.word	0x40010400

08003f28 <RTC_Bcd2ToByte>:
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003f28:	220a      	movs	r2, #10
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003f2a:	0903      	lsrs	r3, r0, #4
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003f2c:	f000 000f 	and.w	r0, r0, #15
 8003f30:	fb02 0003 	mla	r0, r2, r3, r0
}
 8003f34:	b2c0      	uxtb	r0, r0
 8003f36:	4770      	bx	lr

08003f38 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 8003f38:	6803      	ldr	r3, [r0, #0]
{
 8003f3a:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 8003f3c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003f3e:	b280      	uxth	r0, r0
 8003f40:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003f42:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003f44:	681c      	ldr	r4, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003f46:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003f4a:	f3c4 4506 	ubfx	r5, r4, #16, #7
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003f4e:	f3c4 2606 	ubfx	r6, r4, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003f52:	6088      	str	r0, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003f54:	f005 0340 	and.w	r3, r5, #64	@ 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003f58:	f3c4 4005 	ubfx	r0, r4, #16, #6
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003f5c:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003f60:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003f62:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003f64:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003f66:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8003f68:	b952      	cbnz	r2, 8003f80 <HAL_RTC_GetTime+0x48>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003f6a:	f7ff ffdd 	bl	8003f28 <RTC_Bcd2ToByte>
 8003f6e:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003f70:	4630      	mov	r0, r6
 8003f72:	f7ff ffd9 	bl	8003f28 <RTC_Bcd2ToByte>
 8003f76:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7ff ffd5 	bl	8003f28 <RTC_Bcd2ToByte>
 8003f7e:	7088      	strb	r0, [r1, #2]
}
 8003f80:	2000      	movs	r0, #0
 8003f82:	bd70      	pop	{r4, r5, r6, pc}

08003f84 <HAL_RTC_GetDate>:
{
 8003f84:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003f86:	6803      	ldr	r3, [r0, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003f8a:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003f8e:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003f92:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003f96:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003f9a:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003f9c:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003f9e:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003fa0:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8003fa2:	b952      	cbnz	r2, 8003fba <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003fa4:	f7ff ffc0 	bl	8003f28 <RTC_Bcd2ToByte>
 8003fa8:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003faa:	4628      	mov	r0, r5
 8003fac:	f7ff ffbc 	bl	8003f28 <RTC_Bcd2ToByte>
 8003fb0:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7ff ffb8 	bl	8003f28 <RTC_Bcd2ToByte>
 8003fb8:	7088      	strb	r0, [r1, #2]
}
 8003fba:	2000      	movs	r0, #0
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}

08003fbe <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003fbe:	6803      	ldr	r3, [r0, #0]
 8003fc0:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003fc2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003fc8:	6803      	ldr	r3, [r0, #0]
 8003fca:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003fcc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fd2:	7f02      	ldrb	r2, [r0, #28]
{
 8003fd4:	4603      	mov	r3, r0
  __HAL_LOCK(hrtc);
 8003fd6:	2a01      	cmp	r2, #1
 8003fd8:	f04f 0002 	mov.w	r0, #2
 8003fdc:	d00f      	beq.n	8003ffe <HAL_RTCEx_EnableBypassShadow+0x2c>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fde:	21ca      	movs	r1, #202	@ 0xca
 8003fe0:	681a      	ldr	r2, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fe2:	7758      	strb	r0, [r3, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fe4:	6251      	str	r1, [r2, #36]	@ 0x24
 8003fe6:	2153      	movs	r1, #83	@ 0x53
 8003fe8:	6251      	str	r1, [r2, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8003fea:	6891      	ldr	r1, [r2, #8]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fec:	2000      	movs	r0, #0
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8003fee:	f041 0120 	orr.w	r1, r1, #32
 8003ff2:	6091      	str	r1, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ff4:	21ff      	movs	r1, #255	@ 0xff
 8003ff6:	6251      	str	r1, [r2, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003ff8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 8003ffa:	7718      	strb	r0, [r3, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 8003ffc:	775a      	strb	r2, [r3, #29]

  return HAL_OK;
}
 8003ffe:	4770      	bx	lr

08004000 <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 8004000:	4770      	bx	lr
	...

08004004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004008:	461f      	mov	r7, r3
 800400a:	4689      	mov	r9, r1
 800400c:	4690      	mov	r8, r2
 800400e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004010:	f7fd fe53 	bl	8001cba <HAL_GetTick>
 8004014:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8004016:	443d      	add	r5, r7
 8004018:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800401a:	f7fd fe4e 	bl	8001cba <HAL_GetTick>
 800401e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004020:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8004022:	681e      	ldr	r6, [r3, #0]
 8004024:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8004028:	436e      	muls	r6, r5
 800402a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402c:	6822      	ldr	r2, [r4, #0]
 800402e:	6893      	ldr	r3, [r2, #8]
 8004030:	ea39 0303 	bics.w	r3, r9, r3
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	4543      	cmp	r3, r8
 800403c:	d101      	bne.n	8004042 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800403e:	2000      	movs	r0, #0
 8004040:	e02e      	b.n	80040a0 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8004042:	1c7b      	adds	r3, r7, #1
 8004044:	d0f3      	beq.n	800402e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004046:	f7fd fe38 	bl	8001cba <HAL_GetTick>
 800404a:	eba0 000a 	sub.w	r0, r0, sl
 800404e:	42a8      	cmp	r0, r5
 8004050:	d329      	bcc.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800405a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800405c:	6862      	ldr	r2, [r4, #4]
 800405e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004062:	d10a      	bne.n	800407a <SPI_WaitFlagStateUntilTimeout+0x76>
 8004064:	68a2      	ldr	r2, [r4, #8]
 8004066:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800406a:	d002      	beq.n	8004072 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800406c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004070:	d103      	bne.n	800407a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004078:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800407a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800407c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004080:	d107      	bne.n	8004092 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004090:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004092:	2301      	movs	r3, #1
 8004094:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004098:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800409a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800409c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80040a0:	b002      	add	sp, #8
 80040a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 80040a6:	9a01      	ldr	r2, [sp, #4]
      count--;
 80040a8:	9b01      	ldr	r3, [sp, #4]
      if(count == 0U)
 80040aa:	2a00      	cmp	r2, #0
      count--;
 80040ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80040b0:	bf08      	it	eq
 80040b2:	4615      	moveq	r5, r2
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	e7b9      	b.n	800402c <SPI_WaitFlagStateUntilTimeout+0x28>
 80040b8:	2000004c 	.word	0x2000004c

080040bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040be:	4914      	ldr	r1, [pc, #80]	@ (8004110 <SPI_EndRxTxTransaction+0x54>)
{
 80040c0:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040c2:	680d      	ldr	r5, [r1, #0]
 80040c4:	4913      	ldr	r1, [pc, #76]	@ (8004114 <SPI_EndRxTxTransaction+0x58>)
{
 80040c6:	b085      	sub	sp, #20
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040c8:	fbb5 f5f1 	udiv	r5, r5, r1
 80040cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80040d0:	434d      	muls	r5, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d2:	6841      	ldr	r1, [r0, #4]
{
 80040d4:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d6:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040da:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040dc:	d10c      	bne.n	80040f8 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040de:	9200      	str	r2, [sp, #0]
 80040e0:	2180      	movs	r1, #128	@ 0x80
 80040e2:	2200      	movs	r2, #0
 80040e4:	f7ff ff8e 	bl	8004004 <SPI_WaitFlagStateUntilTimeout>
 80040e8:	b178      	cbz	r0, 800410a <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
 80040ea:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040ee:	f043 0320 	orr.w	r3, r3, #32
 80040f2:	6563      	str	r3, [r4, #84]	@ 0x54
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80040f4:	b005      	add	sp, #20
 80040f6:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80040f8:	9b03      	ldr	r3, [sp, #12]
 80040fa:	b133      	cbz	r3, 800410a <SPI_EndRxTxTransaction+0x4e>
      count--;
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	3b01      	subs	r3, #1
 8004100:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	d4f6      	bmi.n	80040f8 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 800410a:	2000      	movs	r0, #0
 800410c:	e7f2      	b.n	80040f4 <SPI_EndRxTxTransaction+0x38>
 800410e:	bf00      	nop
 8004110:	2000004c 	.word	0x2000004c
 8004114:	016e3600 	.word	0x016e3600

08004118 <HAL_SPI_MspInit>:
}
 8004118:	4770      	bx	lr

0800411a <HAL_SPI_Init>:
{
 800411a:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 800411c:	4604      	mov	r4, r0
 800411e:	2800      	cmp	r0, #0
 8004120:	d061      	beq.n	80041e6 <HAL_SPI_Init+0xcc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004122:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d15a      	bne.n	80041de <HAL_SPI_Init+0xc4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004128:	6842      	ldr	r2, [r0, #4]
 800412a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800412e:	d000      	beq.n	8004132 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004130:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004132:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8004136:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800413a:	b923      	cbnz	r3, 8004146 <HAL_SPI_Init+0x2c>
    HAL_SPI_MspInit(hspi);
 800413c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800413e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8004142:	f7ff ffe9 	bl	8004118 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004146:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004148:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800414a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 800414e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004150:	68a5      	ldr	r5, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8004152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004156:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004158:	6863      	ldr	r3, [r4, #4]
 800415a:	f405 4504 	and.w	r5, r5, #33792	@ 0x8400
 800415e:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8004162:	432b      	orrs	r3, r5
 8004164:	68e5      	ldr	r5, [r4, #12]
 8004166:	69a2      	ldr	r2, [r4, #24]
 8004168:	f405 6500 	and.w	r5, r5, #2048	@ 0x800
 800416c:	432b      	orrs	r3, r5
 800416e:	6925      	ldr	r5, [r4, #16]
 8004170:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004172:	f005 0502 	and.w	r5, r5, #2
 8004176:	432b      	orrs	r3, r5
 8004178:	6965      	ldr	r5, [r4, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800417a:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800417e:	f005 0501 	and.w	r5, r5, #1
 8004182:	ea43 0305 	orr.w	r3, r3, r5
 8004186:	f402 7500 	and.w	r5, r2, #512	@ 0x200
 800418a:	ea43 0305 	orr.w	r3, r3, r5
 800418e:	69e5      	ldr	r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004190:	ea4f 4212 	mov.w	r2, r2, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004194:	f005 0538 	and.w	r5, r5, #56	@ 0x38
 8004198:	ea43 0305 	orr.w	r3, r3, r5
 800419c:	6a25      	ldr	r5, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800419e:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041a2:	f005 0580 	and.w	r5, r5, #128	@ 0x80
 80041a6:	ea43 0305 	orr.w	r3, r3, r5
 80041aa:	f400 5500 	and.w	r5, r0, #8192	@ 0x2000
 80041ae:	ea43 0305 	orr.w	r3, r3, r5
 80041b2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b6:	f04f 0000 	mov.w	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80041c2:	bf08      	it	eq
 80041c4:	8da3      	ldrheq	r3, [r4, #44]	@ 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041c6:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80041c8:	bf08      	it	eq
 80041ca:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041cc:	69cb      	ldr	r3, [r1, #28]
 80041ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041d2:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80041d4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041d6:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041d8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80041dc:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041de:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041e4:	e7a5      	b.n	8004132 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80041e6:	2001      	movs	r0, #1
 80041e8:	e7f8      	b.n	80041dc <HAL_SPI_Init+0xc2>

080041ea <HAL_SPI_TransmitReceive>:
{
 80041ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041ee:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 80041f0:	2300      	movs	r3, #0
{
 80041f2:	b085      	sub	sp, #20
  __IO uint32_t tmpreg = 0U;
 80041f4:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 80041f6:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 80041fa:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80041fc:	2b01      	cmp	r3, #1
{
 80041fe:	4688      	mov	r8, r1
 8004200:	4615      	mov	r5, r2
 8004202:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  __HAL_LOCK(hspi);
 8004204:	f000 8130 	beq.w	8004468 <HAL_SPI_TransmitReceive+0x27e>
 8004208:	2301      	movs	r3, #1
 800420a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800420e:	f7fd fd54 	bl	8001cba <HAL_GetTick>
  tmp_state           = hspi->State;
 8004212:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8004216:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004218:	2a01      	cmp	r2, #1
  tmp_mode            = hspi->Init.Mode;
 800421a:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 800421c:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800421e:	d00a      	beq.n	8004236 <HAL_SPI_TransmitReceive+0x4c>
 8004220:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004224:	f040 811e 	bne.w	8004464 <HAL_SPI_TransmitReceive+0x27a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004228:	68a2      	ldr	r2, [r4, #8]
 800422a:	2a00      	cmp	r2, #0
 800422c:	f040 811a 	bne.w	8004464 <HAL_SPI_TransmitReceive+0x27a>
 8004230:	2904      	cmp	r1, #4
 8004232:	f040 8117 	bne.w	8004464 <HAL_SPI_TransmitReceive+0x27a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004236:	f1b8 0f00 	cmp.w	r8, #0
 800423a:	d000      	beq.n	800423e <HAL_SPI_TransmitReceive+0x54>
 800423c:	b955      	cbnz	r5, 8004254 <HAL_SPI_TransmitReceive+0x6a>
    errorcode = HAL_ERROR;
 800423e:	2501      	movs	r5, #1
  hspi->State = HAL_SPI_STATE_READY;
 8004240:	2301      	movs	r3, #1
 8004242:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004246:	2300      	movs	r3, #0
 8004248:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800424c:	4628      	mov	r0, r5
 800424e:	b005      	add	sp, #20
 8004250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004254:	f1b9 0f00 	cmp.w	r9, #0
 8004258:	d0f1      	beq.n	800423e <HAL_SPI_TransmitReceive+0x54>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800425a:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800425e:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004260:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004262:	bf1c      	itt	ne
 8004264:	2205      	movne	r2, #5
 8004266:	f884 2051 	strbne.w	r2, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800426a:	2200      	movs	r2, #0
 800426c:	6562      	str	r2, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 800426e:	e9c4 2210 	strd	r2, r2, [r4, #64]	@ 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004272:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hspi->RxXferCount = Size;
 8004274:	f8a4 903e 	strh.w	r9, [r4, #62]	@ 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004278:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
    SPI_RESET_CRC(hspi);
 800427c:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferSize  = Size;
 800427e:	f8a4 903c 	strh.w	r9, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004282:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004286:	f8a4 9036 	strh.w	r9, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800428a:	f8a4 9034 	strh.w	r9, [r4, #52]	@ 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800428e:	d107      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0xb6>
    SPI_RESET_CRC(hspi);
 8004290:	682a      	ldr	r2, [r5, #0]
 8004292:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004296:	602a      	str	r2, [r5, #0]
 8004298:	682a      	ldr	r2, [r5, #0]
 800429a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800429e:	602a      	str	r2, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042a0:	682a      	ldr	r2, [r5, #0]
 80042a2:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80042a4:	bf5e      	ittt	pl
 80042a6:	682a      	ldrpl	r2, [r5, #0]
 80042a8:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80042ac:	602a      	strpl	r2, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042ae:	68e2      	ldr	r2, [r4, #12]
 80042b0:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80042b4:	d15e      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x18a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b6:	b113      	cbz	r3, 80042be <HAL_SPI_TransmitReceive+0xd4>
 80042b8:	f1b9 0f01 	cmp.w	r9, #1
 80042bc:	d108      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042be:	4643      	mov	r3, r8
 80042c0:	f833 2b02 	ldrh.w	r2, [r3], #2
 80042c4:	60ea      	str	r2, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80042c8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80042d0:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	b9b3      	cbnz	r3, 8004306 <HAL_SPI_TransmitReceive+0x11c>
 80042d8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80042da:	b29b      	uxth	r3, r3
 80042dc:	b99b      	cbnz	r3, 8004306 <HAL_SPI_TransmitReceive+0x11c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e4:	f040 809c 	bne.w	8004420 <HAL_SPI_TransmitReceive+0x236>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80042e8:	2201      	movs	r2, #1
 80042ea:	4633      	mov	r3, r6
 80042ec:	4611      	mov	r1, r2
 80042ee:	4620      	mov	r0, r4
 80042f0:	9700      	str	r7, [sp, #0]
 80042f2:	f7ff fe87 	bl	8004004 <SPI_WaitFlagStateUntilTimeout>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	f000 808e 	beq.w	8004418 <HAL_SPI_TransmitReceive+0x22e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80042fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	6563      	str	r3, [r4, #84]	@ 0x54
      goto error;
 8004304:	e034      	b.n	8004370 <HAL_SPI_TransmitReceive+0x186>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	6893      	ldr	r3, [r2, #8]
 800430a:	079b      	lsls	r3, r3, #30
 800430c:	d518      	bpl.n	8004340 <HAL_SPI_TransmitReceive+0x156>
 800430e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004310:	b29b      	uxth	r3, r3
 8004312:	b1ab      	cbz	r3, 8004340 <HAL_SPI_TransmitReceive+0x156>
 8004314:	b19d      	cbz	r5, 800433e <HAL_SPI_TransmitReceive+0x154>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004316:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004318:	f833 1b02 	ldrh.w	r1, [r3], #2
 800431c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800431e:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004320:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004322:	3b01      	subs	r3, #1
 8004324:	b29b      	uxth	r3, r3
 8004326:	86e3      	strh	r3, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004328:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800432a:	b29b      	uxth	r3, r3
 800432c:	b93b      	cbnz	r3, 800433e <HAL_SPI_TransmitReceive+0x154>
 800432e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004334:	bf02      	ittt	eq
 8004336:	6813      	ldreq	r3, [r2, #0]
 8004338:	f443 5380 	orreq.w	r3, r3, #4096	@ 0x1000
 800433c:	6013      	streq	r3, [r2, #0]
        txallowed = 0U;
 800433e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004340:	6891      	ldr	r1, [r2, #8]
 8004342:	f011 0101 	ands.w	r1, r1, #1
 8004346:	d00c      	beq.n	8004362 <HAL_SPI_TransmitReceive+0x178>
 8004348:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800434a:	b29b      	uxth	r3, r3
 800434c:	b14b      	cbz	r3, 8004362 <HAL_SPI_TransmitReceive+0x178>
        txallowed = 1U;
 800434e:	460d      	mov	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004350:	68d2      	ldr	r2, [r2, #12]
 8004352:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004354:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004358:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800435a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800435c:	3b01      	subs	r3, #1
 800435e:	b29b      	uxth	r3, r3
 8004360:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004362:	f7fd fcaa 	bl	8001cba <HAL_GetTick>
 8004366:	1bc0      	subs	r0, r0, r7
 8004368:	42b0      	cmp	r0, r6
 800436a:	d3b2      	bcc.n	80042d2 <HAL_SPI_TransmitReceive+0xe8>
 800436c:	1c70      	adds	r0, r6, #1
 800436e:	d0b0      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0xe8>
        errorcode = HAL_TIMEOUT;
 8004370:	2503      	movs	r5, #3
 8004372:	e765      	b.n	8004240 <HAL_SPI_TransmitReceive+0x56>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004374:	b113      	cbz	r3, 800437c <HAL_SPI_TransmitReceive+0x192>
 8004376:	f1b9 0f01 	cmp.w	r9, #1
 800437a:	d109      	bne.n	8004390 <HAL_SPI_TransmitReceive+0x1a6>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800437c:	f898 3000 	ldrb.w	r3, [r8]
 8004380:	732b      	strb	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004382:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004384:	3301      	adds	r3, #1
 8004386:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8004388:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800438a:	3b01      	subs	r3, #1
 800438c:	b29b      	uxth	r3, r3
 800438e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8004390:	2501      	movs	r5, #1
 8004392:	e038      	b.n	8004406 <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004394:	6822      	ldr	r2, [r4, #0]
 8004396:	6893      	ldr	r3, [r2, #8]
 8004398:	0799      	lsls	r1, r3, #30
 800439a:	d51a      	bpl.n	80043d2 <HAL_SPI_TransmitReceive+0x1e8>
 800439c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800439e:	b29b      	uxth	r3, r3
 80043a0:	b1bb      	cbz	r3, 80043d2 <HAL_SPI_TransmitReceive+0x1e8>
 80043a2:	b1ad      	cbz	r5, 80043d0 <HAL_SPI_TransmitReceive+0x1e6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80043aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043ac:	3301      	adds	r3, #1
 80043ae:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80043b0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80043b8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	b943      	cbnz	r3, 80043d0 <HAL_SPI_TransmitReceive+0x1e6>
 80043be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80043c0:	6822      	ldr	r2, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80043c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80043c6:	bf02      	ittt	eq
 80043c8:	6813      	ldreq	r3, [r2, #0]
 80043ca:	f443 5380 	orreq.w	r3, r3, #4096	@ 0x1000
 80043ce:	6013      	streq	r3, [r2, #0]
        txallowed = 0U;
 80043d0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	6891      	ldr	r1, [r2, #8]
 80043d6:	f011 0101 	ands.w	r1, r1, #1
 80043da:	d00d      	beq.n	80043f8 <HAL_SPI_TransmitReceive+0x20e>
 80043dc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	b153      	cbz	r3, 80043f8 <HAL_SPI_TransmitReceive+0x20e>
        txallowed = 1U;
 80043e2:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043e4:	68d2      	ldr	r2, [r2, #12]
 80043e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80043e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80043ec:	3301      	adds	r3, #1
 80043ee:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80043f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043f8:	f7fd fc5f 	bl	8001cba <HAL_GetTick>
 80043fc:	1bc0      	subs	r0, r0, r7
 80043fe:	42b0      	cmp	r0, r6
 8004400:	d301      	bcc.n	8004406 <HAL_SPI_TransmitReceive+0x21c>
 8004402:	1c73      	adds	r3, r6, #1
 8004404:	d1b4      	bne.n	8004370 <HAL_SPI_TransmitReceive+0x186>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004406:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1c2      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x1aa>
 800440e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1be      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x1aa>
 8004416:	e762      	b.n	80042de <HAL_SPI_TransmitReceive+0xf4>
    tmpreg = READ_REG(hspi->Instance->DR);
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 800441e:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004420:	6822      	ldr	r2, [r4, #0]
 8004422:	6895      	ldr	r5, [r2, #8]
 8004424:	f015 0510 	ands.w	r5, r5, #16
 8004428:	d007      	beq.n	800443a <HAL_SPI_TransmitReceive+0x250>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800442a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800442c:	2501      	movs	r5, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800442e:	f043 0302 	orr.w	r3, r3, #2
 8004432:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004434:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8004438:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800443a:	463a      	mov	r2, r7
 800443c:	4631      	mov	r1, r6
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff fe3c 	bl	80040bc <SPI_EndRxTxTransaction>
 8004444:	b110      	cbz	r0, 800444c <HAL_SPI_TransmitReceive+0x262>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004446:	2320      	movs	r3, #32
 8004448:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 800444a:	e6f8      	b.n	800423e <HAL_SPI_TransmitReceive+0x54>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800444c:	68a3      	ldr	r3, [r4, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f47f aef6 	bne.w	8004240 <HAL_SPI_TransmitReceive+0x56>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004454:	9303      	str	r3, [sp, #12]
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	9203      	str	r2, [sp, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	9303      	str	r3, [sp, #12]
 8004460:	9b03      	ldr	r3, [sp, #12]
 8004462:	e6ed      	b.n	8004240 <HAL_SPI_TransmitReceive+0x56>
    errorcode = HAL_BUSY;
 8004464:	2502      	movs	r5, #2
 8004466:	e6eb      	b.n	8004240 <HAL_SPI_TransmitReceive+0x56>
  __HAL_LOCK(hspi);
 8004468:	2502      	movs	r5, #2
 800446a:	e6ef      	b.n	800424c <HAL_SPI_TransmitReceive+0x62>

0800446c <HAL_SPI_GetState>:
  return hspi->State;
 800446c:	f890 0051 	ldrb.w	r0, [r0, #81]	@ 0x51
}
 8004470:	4770      	bx	lr

08004472 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004472:	6803      	ldr	r3, [r0, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800447a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004484:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004486:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004488:	bf02      	ittt	eq
 800448a:	68da      	ldreq	r2, [r3, #12]
 800448c:	f022 0210 	biceq.w	r2, r2, #16
 8004490:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004492:	2320      	movs	r3, #32
 8004494:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004498:	2300      	movs	r3, #0
 800449a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800449c:	4770      	bx	lr
	...

080044a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b510      	push	{r4, lr}
 80044a2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a4:	6802      	ldr	r2, [r0, #0]
 80044a6:	68c1      	ldr	r1, [r0, #12]
 80044a8:	6913      	ldr	r3, [r2, #16]
 80044aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044b2:	6883      	ldr	r3, [r0, #8]
 80044b4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80044b6:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044b8:	4303      	orrs	r3, r0
 80044ba:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80044bc:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044c0:	4303      	orrs	r3, r0
 80044c2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80044c4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044c8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80044ca:	430b      	orrs	r3, r1
 80044cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ce:	6953      	ldr	r3, [r2, #20]
 80044d0:	69a1      	ldr	r1, [r4, #24]
 80044d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6153      	str	r3, [r2, #20]


  if((huart->Instance == USART1))
 80044da:	4b1a      	ldr	r3, [pc, #104]	@ (8004544 <UART_SetConfig+0xa4>)
 80044dc:	429a      	cmp	r2, r3
 80044de:	d120      	bne.n	8004522 <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044e0:	f7ff f9f6 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044e4:	2319      	movs	r3, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e6:	69e1      	ldr	r1, [r4, #28]
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044e8:	4358      	muls	r0, r3
 80044ea:	e9d4 2300 	ldrd	r2, r3, [r4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ee:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80044f2:	f04f 0164 	mov.w	r1, #100	@ 0x64
 80044f6:	d117      	bne.n	8004528 <UART_SetConfig+0x88>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80044fe:	fbb0 f4f1 	udiv	r4, r0, r1
 8004502:	fb01 0014 	mls	r0, r1, r4, r0
 8004506:	00c3      	lsls	r3, r0, #3
 8004508:	3332      	adds	r3, #50	@ 0x32
 800450a:	fbb3 f3f1 	udiv	r3, r3, r1
 800450e:	f003 0107 	and.w	r1, r3, #7
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8004518:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800451c:	440b      	add	r3, r1
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800451e:	6093      	str	r3, [r2, #8]
  }
}
 8004520:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004522:	f7ff f9c5 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8004526:	e7dd      	b.n	80044e4 <UART_SetConfig+0x44>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	fbb0 f0f3 	udiv	r0, r0, r3
 800452e:	fbb0 f4f1 	udiv	r4, r0, r1
 8004532:	fb01 0314 	mls	r3, r1, r4, r0
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	3332      	adds	r3, #50	@ 0x32
 800453a:	fbb3 f3f1 	udiv	r3, r3, r1
 800453e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004542:	e7ec      	b.n	800451e <UART_SetConfig+0x7e>
 8004544:	40013800 	.word	0x40013800

08004548 <HAL_UART_Init>:
{
 8004548:	b510      	push	{r4, lr}
  if (huart == NULL)
 800454a:	4604      	mov	r4, r0
 800454c:	b340      	cbz	r0, 80045a0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800454e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004552:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004556:	b91b      	cbnz	r3, 8004560 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004558:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 800455c:	f7fd fc14 	bl	8001d88 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004562:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004564:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8004568:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800456a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800456c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004570:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004572:	f7ff ff95 	bl	80044a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004576:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004588:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004590:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004592:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	6420      	str	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004596:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800459a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 800459e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80045a0:	2001      	movs	r0, #1
 80045a2:	e7fc      	b.n	800459e <HAL_UART_Init+0x56>

080045a4 <HAL_UART_Transmit_DMA>:
{
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4604      	mov	r4, r0
 80045a8:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80045aa:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80045ae:	2a20      	cmp	r2, #32
 80045b0:	d12a      	bne.n	8004608 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 80045b2:	b339      	cbz	r1, 8004604 <HAL_UART_Transmit_DMA+0x60>
 80045b4:	b333      	cbz	r3, 8004604 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80045b6:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 80045ba:	2a01      	cmp	r2, #1
 80045bc:	d024      	beq.n	8004608 <HAL_UART_Transmit_DMA+0x64>
 80045be:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80045c2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c6:	2221      	movs	r2, #33	@ 0x21
    huart->TxXferCount = Size;
 80045c8:	84e3      	strh	r3, [r4, #38]	@ 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045ca:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045cc:	6425      	str	r5, [r4, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ce:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045d2:	4a0e      	ldr	r2, [pc, #56]	@ (800460c <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 80045d4:	84a3      	strh	r3, [r4, #36]	@ 0x24
    huart->pTxBuffPtr = pData;
 80045d6:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045d8:	6282      	str	r2, [r0, #40]	@ 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045da:	4a0d      	ldr	r2, [pc, #52]	@ (8004610 <HAL_UART_Transmit_DMA+0x6c>)
 80045dc:	62c2      	str	r2, [r0, #44]	@ 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045de:	4a0d      	ldr	r2, [pc, #52]	@ (8004614 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 80045e0:	e9c0 250c 	strd	r2, r5, [r0, #48]	@ 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80045e4:	6822      	ldr	r2, [r4, #0]
 80045e6:	3204      	adds	r2, #4
 80045e8:	f7fe fb56 	bl	8002c98 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80045ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
    return HAL_OK;
 80045f0:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80045f6:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004600:	615a      	str	r2, [r3, #20]
}
 8004602:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004604:	2001      	movs	r0, #1
 8004606:	e7fc      	b.n	8004602 <HAL_UART_Transmit_DMA+0x5e>
    __HAL_LOCK(huart);
 8004608:	2002      	movs	r0, #2
 800460a:	e7fa      	b.n	8004602 <HAL_UART_Transmit_DMA+0x5e>
 800460c:	08004619 	.word	0x08004619
 8004610:	08004647 	.word	0x08004647
 8004614:	08004653 	.word	0x08004653

08004618 <UART_DMATransmitCplt>:
{
 8004618:	b508      	push	{r3, lr}
 800461a:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800461c:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800461e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f013 0320 	ands.w	r3, r3, #32
 8004626:	d10a      	bne.n	800463e <UART_DMATransmitCplt+0x26>
    huart->TxXferCount = 0x00U;
 8004628:	84c3      	strh	r3, [r0, #38]	@ 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800462a:	6803      	ldr	r3, [r0, #0]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004632:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800463a:	60da      	str	r2, [r3, #12]
}
 800463c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800463e:	f7fd fc7f 	bl	8001f40 <HAL_UART_TxCpltCallback>
}
 8004642:	e7fb      	b.n	800463c <UART_DMATransmitCplt+0x24>

08004644 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8004644:	4770      	bx	lr

08004646 <UART_DMATxHalfCplt>:
{
 8004646:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004648:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800464a:	f7ff fffb 	bl	8004644 <HAL_UART_TxHalfCpltCallback>
}
 800464e:	bd08      	pop	{r3, pc}

08004650 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004650:	4770      	bx	lr

08004652 <UART_DMAError>:
{
 8004652:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004654:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004656:	6803      	ldr	r3, [r0, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800465a:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 800465e:	2921      	cmp	r1, #33	@ 0x21
 8004660:	d10a      	bne.n	8004678 <UART_DMAError+0x26>
 8004662:	0612      	lsls	r2, r2, #24
 8004664:	d508      	bpl.n	8004678 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8004666:	2200      	movs	r2, #0
 8004668:	84c2      	strh	r2, [r0, #38]	@ 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004670:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004672:	2220      	movs	r2, #32
 8004674:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004678:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800467a:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 800467e:	2a22      	cmp	r2, #34	@ 0x22
 8004680:	d105      	bne.n	800468e <UART_DMAError+0x3c>
 8004682:	065b      	lsls	r3, r3, #25
 8004684:	d503      	bpl.n	800468e <UART_DMAError+0x3c>
    huart->RxXferCount = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800468a:	f7ff fef2 	bl	8004472 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800468e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004690:	f043 0310 	orr.w	r3, r3, #16
 8004694:	6403      	str	r3, [r0, #64]	@ 0x40
  HAL_UART_ErrorCallback(huart);
 8004696:	f7ff ffdb 	bl	8004650 <HAL_UART_ErrorCallback>
}
 800469a:	bd08      	pop	{r3, pc}

0800469c <UART_DMAAbortOnError>:
{
 800469c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800469e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80046a2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046a4:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80046a6:	f7ff ffd3 	bl	8004650 <HAL_UART_ErrorCallback>
}
 80046aa:	bd08      	pop	{r3, pc}

080046ac <HAL_UARTEx_RxEventCallback>:
}
 80046ac:	4770      	bx	lr

080046ae <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ae:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80046b2:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046b4:	2b22      	cmp	r3, #34	@ 0x22
 80046b6:	d137      	bne.n	8004728 <UART_Receive_IT.isra.0+0x7a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b8:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046ba:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046bc:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c2:	d134      	bne.n	800472e <UART_Receive_IT.isra.0+0x80>
 80046c4:	6901      	ldr	r1, [r0, #16]
 80046c6:	2900      	cmp	r1, #0
 80046c8:	d134      	bne.n	8004734 <UART_Receive_IT.isra.0+0x86>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046ca:	6852      	ldr	r2, [r2, #4]
 80046cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d0:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 80046d4:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 80046d6:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80046d8:	3a01      	subs	r2, #1
 80046da:	b292      	uxth	r2, r2
 80046dc:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 80046de:	bb1a      	cbnz	r2, 8004728 <UART_Receive_IT.isra.0+0x7a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046e0:	6803      	ldr	r3, [r0, #0]
 80046e2:	68d9      	ldr	r1, [r3, #12]
 80046e4:	f021 0120 	bic.w	r1, r1, #32
 80046e8:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046ea:	68d9      	ldr	r1, [r3, #12]
 80046ec:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80046f0:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046f2:	6959      	ldr	r1, [r3, #20]
 80046f4:	f021 0101 	bic.w	r1, r1, #1
 80046f8:	6159      	str	r1, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80046fa:	2120      	movs	r1, #32
 80046fc:	f880 103e 	strb.w	r1, [r0, #62]	@ 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004700:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8004702:	2901      	cmp	r1, #1
 8004704:	d120      	bne.n	8004748 <UART_Receive_IT.isra.0+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	6302      	str	r2, [r0, #48]	@ 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004708:	68d9      	ldr	r1, [r3, #12]
 800470a:	f021 0110 	bic.w	r1, r1, #16
 800470e:	60d9      	str	r1, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	06c9      	lsls	r1, r1, #27
 8004714:	d505      	bpl.n	8004722 <UART_Receive_IT.isra.0+0x74>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004716:	9201      	str	r2, [sp, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	9201      	str	r2, [sp, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004722:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004724:	f7ff ffc2 	bl	80046ac <HAL_UARTEx_RxEventCallback>
}
 8004728:	b003      	add	sp, #12
 800472a:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800472e:	b939      	cbnz	r1, 8004740 <UART_Receive_IT.isra.0+0x92>
 8004730:	6901      	ldr	r1, [r0, #16]
 8004732:	b929      	cbnz	r1, 8004740 <UART_Receive_IT.isra.0+0x92>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004734:	6852      	ldr	r2, [r2, #4]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 800473a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800473c:	3301      	adds	r3, #1
 800473e:	e7c9      	b.n	80046d4 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004740:	6852      	ldr	r2, [r2, #4]
 8004742:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004746:	e7f7      	b.n	8004738 <UART_Receive_IT.isra.0+0x8a>
       HAL_UART_RxCpltCallback(huart);
 8004748:	f7fd fc00 	bl	8001f4c <HAL_UART_RxCpltCallback>
 800474c:	e7ec      	b.n	8004728 <UART_Receive_IT.isra.0+0x7a>
	...

08004750 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004750:	6803      	ldr	r3, [r0, #0]
{
 8004752:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004754:	681a      	ldr	r2, [r3, #0]
{
 8004756:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004758:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800475c:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800475e:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004760:	d108      	bne.n	8004774 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004762:	0695      	lsls	r5, r2, #26
 8004764:	d55f      	bpl.n	8004826 <HAL_UART_IRQHandler+0xd6>
 8004766:	068d      	lsls	r5, r1, #26
 8004768:	d55d      	bpl.n	8004826 <HAL_UART_IRQHandler+0xd6>
}
 800476a:	b003      	add	sp, #12
 800476c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 8004770:	f7ff bf9d 	b.w	80046ae <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004774:	f005 0001 	and.w	r0, r5, #1
 8004778:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 800477c:	4305      	orrs	r5, r0
 800477e:	d052      	beq.n	8004826 <HAL_UART_IRQHandler+0xd6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004780:	07d5      	lsls	r5, r2, #31
 8004782:	d505      	bpl.n	8004790 <HAL_UART_IRQHandler+0x40>
 8004784:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004786:	bf42      	ittt	mi
 8004788:	6c23      	ldrmi	r3, [r4, #64]	@ 0x40
 800478a:	f043 0301 	orrmi.w	r3, r3, #1
 800478e:	6423      	strmi	r3, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004790:	0755      	lsls	r5, r2, #29
 8004792:	d504      	bpl.n	800479e <HAL_UART_IRQHandler+0x4e>
 8004794:	b118      	cbz	r0, 800479e <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004796:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004798:	f043 0302 	orr.w	r3, r3, #2
 800479c:	6423      	str	r3, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800479e:	0793      	lsls	r3, r2, #30
 80047a0:	d504      	bpl.n	80047ac <HAL_UART_IRQHandler+0x5c>
 80047a2:	b118      	cbz	r0, 80047ac <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	6423      	str	r3, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80047ac:	0715      	lsls	r5, r2, #28
 80047ae:	d507      	bpl.n	80047c0 <HAL_UART_IRQHandler+0x70>
 80047b0:	f001 0320 	and.w	r3, r1, #32
 80047b4:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047b6:	bf1e      	ittt	ne
 80047b8:	6c23      	ldrne	r3, [r4, #64]	@ 0x40
 80047ba:	f043 0308 	orrne.w	r3, r3, #8
 80047be:	6423      	strne	r3, [r4, #64]	@ 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047c2:	b353      	cbz	r3, 800481a <HAL_UART_IRQHandler+0xca>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047c4:	0692      	lsls	r2, r2, #26
 80047c6:	d504      	bpl.n	80047d2 <HAL_UART_IRQHandler+0x82>
 80047c8:	068b      	lsls	r3, r1, #26
 80047ca:	d502      	bpl.n	80047d2 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7ff ff6e 	bl	80046ae <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047d2:	6821      	ldr	r1, [r4, #0]
        UART_EndRxTransfer(huart);
 80047d4:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047d6:	694b      	ldr	r3, [r1, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047d8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047de:	f002 0208 	and.w	r2, r2, #8
 80047e2:	ea53 0502 	orrs.w	r5, r3, r2
 80047e6:	d01a      	beq.n	800481e <HAL_UART_IRQHandler+0xce>
        UART_EndRxTransfer(huart);
 80047e8:	f7ff fe43 	bl	8004472 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ec:	694b      	ldr	r3, [r1, #20]
 80047ee:	065d      	lsls	r5, r3, #25
 80047f0:	d510      	bpl.n	8004814 <HAL_UART_IRQHandler+0xc4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f2:	694b      	ldr	r3, [r1, #20]
          if (huart->hdmarx != NULL)
 80047f4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047fa:	614b      	str	r3, [r1, #20]
          if (huart->hdmarx != NULL)
 80047fc:	b150      	cbz	r0, 8004814 <HAL_UART_IRQHandler+0xc4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047fe:	4b53      	ldr	r3, [pc, #332]	@ (800494c <HAL_UART_IRQHandler+0x1fc>)
 8004800:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004802:	f7fe faa8 	bl	8002d56 <HAL_DMA_Abort_IT>
 8004806:	b140      	cbz	r0, 800481a <HAL_UART_IRQHandler+0xca>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004808:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800480a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 800480c:	b003      	add	sp, #12
 800480e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004812:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004814:	4620      	mov	r0, r4
 8004816:	f7ff ff1b 	bl	8004650 <HAL_UART_ErrorCallback>
}
 800481a:	b003      	add	sp, #12
 800481c:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800481e:	f7ff ff17 	bl	8004650 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	6425      	str	r5, [r4, #64]	@ 0x40
 8004824:	e7f9      	b.n	800481a <HAL_UART_IRQHandler+0xca>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004826:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004828:	2801      	cmp	r0, #1
 800482a:	d155      	bne.n	80048d8 <HAL_UART_IRQHandler+0x188>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800482c:	06d0      	lsls	r0, r2, #27
 800482e:	d553      	bpl.n	80048d8 <HAL_UART_IRQHandler+0x188>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004830:	06cd      	lsls	r5, r1, #27
 8004832:	d551      	bpl.n	80048d8 <HAL_UART_IRQHandler+0x188>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004834:	2100      	movs	r1, #0
 8004836:	9101      	str	r1, [sp, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	9201      	str	r2, [sp, #4]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	9201      	str	r2, [sp, #4]
 8004840:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 8004848:	d02a      	beq.n	80048a0 <HAL_UART_IRQHandler+0x150>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800484a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800484c:	6802      	ldr	r2, [r0, #0]
 800484e:	6852      	ldr	r2, [r2, #4]
 8004850:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8004852:	2a00      	cmp	r2, #0
 8004854:	d0e1      	beq.n	800481a <HAL_UART_IRQHandler+0xca>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004856:	8da5      	ldrh	r5, [r4, #44]	@ 0x2c
 8004858:	4295      	cmp	r5, r2
 800485a:	d9de      	bls.n	800481a <HAL_UART_IRQHandler+0xca>
        huart->RxXferCount = nb_remaining_rx_data;
 800485c:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800485e:	6982      	ldr	r2, [r0, #24]
 8004860:	2a20      	cmp	r2, #32
 8004862:	d015      	beq.n	8004890 <HAL_UART_IRQHandler+0x140>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800486a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800487a:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800487c:	2220      	movs	r2, #32
 800487e:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	6321      	str	r1, [r4, #48]	@ 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	f022 0210 	bic.w	r2, r2, #16
 800488a:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800488c:	f7fe fa42 	bl	8002d14 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004890:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004892:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004894:	1ac9      	subs	r1, r1, r3
 8004896:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004898:	4620      	mov	r0, r4
 800489a:	f7ff ff07 	bl	80046ac <HAL_UARTEx_RxEventCallback>
 800489e:	e7bc      	b.n	800481a <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a0:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      if (  (huart->RxXferCount > 0U)
 80048a2:	8de5      	ldrh	r5, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if (  (huart->RxXferCount > 0U)
 80048a6:	b2ad      	uxth	r5, r5
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a8:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80048aa:	2d00      	cmp	r5, #0
 80048ac:	d0b5      	beq.n	800481a <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048ae:	1a09      	subs	r1, r1, r0
 80048b0:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80048b2:	2900      	cmp	r1, #0
 80048b4:	d0b1      	beq.n	800481a <HAL_UART_IRQHandler+0xca>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b6:	68d8      	ldr	r0, [r3, #12]
 80048b8:	f420 7090 	bic.w	r0, r0, #288	@ 0x120
 80048bc:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	6958      	ldr	r0, [r3, #20]
 80048c0:	f020 0001 	bic.w	r0, r0, #1
 80048c4:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80048c6:	2020      	movs	r0, #32
 80048c8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048cc:	6322      	str	r2, [r4, #48]	@ 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	f022 0210 	bic.w	r2, r2, #16
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	e7df      	b.n	8004898 <HAL_UART_IRQHandler+0x148>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048d8:	0610      	lsls	r0, r2, #24
 80048da:	d526      	bpl.n	800492a <HAL_UART_IRQHandler+0x1da>
 80048dc:	060d      	lsls	r5, r1, #24
 80048de:	d524      	bpl.n	800492a <HAL_UART_IRQHandler+0x1da>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048e0:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80048e4:	2a21      	cmp	r2, #33	@ 0x21
 80048e6:	d198      	bne.n	800481a <HAL_UART_IRQHandler+0xca>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048ea:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ec:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80048f0:	d116      	bne.n	8004920 <HAL_UART_IRQHandler+0x1d0>
 80048f2:	6921      	ldr	r1, [r4, #16]
 80048f4:	b9a1      	cbnz	r1, 8004920 <HAL_UART_IRQHandler+0x1d0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048f6:	f832 1b02 	ldrh.w	r1, [r2], #2
 80048fa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80048fe:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004900:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004902:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004904:	3a01      	subs	r2, #1
 8004906:	b292      	uxth	r2, r2
 8004908:	84e2      	strh	r2, [r4, #38]	@ 0x26
 800490a:	2a00      	cmp	r2, #0
 800490c:	d185      	bne.n	800481a <HAL_UART_IRQHandler+0xca>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004914:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	e77c      	b.n	800481a <HAL_UART_IRQHandler+0xca>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004920:	1c51      	adds	r1, r2, #1
 8004922:	6221      	str	r1, [r4, #32]
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	e7eb      	b.n	8004902 <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800492a:	0650      	lsls	r0, r2, #25
 800492c:	f57f af75 	bpl.w	800481a <HAL_UART_IRQHandler+0xca>
 8004930:	064a      	lsls	r2, r1, #25
 8004932:	f57f af72 	bpl.w	800481a <HAL_UART_IRQHandler+0xca>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004936:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004938:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800493a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800493e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004940:	2320      	movs	r3, #32
 8004942:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004946:	f7fd fafb 	bl	8001f40 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800494a:	e766      	b.n	800481a <HAL_UART_IRQHandler+0xca>
 800494c:	0800469d 	.word	0x0800469d

08004950 <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 8004950:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->RxXferSize = Size;
 8004952:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->pRxBuffPtr = pData;
 8004954:	6281      	str	r1, [r0, #40]	@ 0x28
{
 8004956:	4603      	mov	r3, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004958:	2222      	movs	r2, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495a:	2000      	movs	r0, #0
 800495c:	6418      	str	r0, [r3, #64]	@ 0x40
  __HAL_UNLOCK(huart);
 800495e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800496e:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	f042 0220 	orr.w	r2, r2, #32
 800497e:	60da      	str	r2, [r3, #12]
}
 8004980:	4770      	bx	lr

08004982 <HAL_UART_Receive_IT>:
{
 8004982:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004984:	f890 603e 	ldrb.w	r6, [r0, #62]	@ 0x3e
 8004988:	2e20      	cmp	r6, #32
 800498a:	d10d      	bne.n	80049a8 <HAL_UART_Receive_IT+0x26>
    if ((pData == NULL) || (Size == 0U))
 800498c:	b149      	cbz	r1, 80049a2 <HAL_UART_Receive_IT+0x20>
 800498e:	b142      	cbz	r2, 80049a2 <HAL_UART_Receive_IT+0x20>
    __HAL_LOCK(huart);
 8004990:	f890 403c 	ldrb.w	r4, [r0, #60]	@ 0x3c
 8004994:	2c01      	cmp	r4, #1
 8004996:	d007      	beq.n	80049a8 <HAL_UART_Receive_IT+0x26>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004998:	2400      	movs	r4, #0
 800499a:	6304      	str	r4, [r0, #48]	@ 0x30
}
 800499c:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_IT(huart, pData, Size));
 800499e:	f7ff bfd7 	b.w	8004950 <UART_Start_Receive_IT>
      return HAL_ERROR;
 80049a2:	2001      	movs	r0, #1
}
 80049a4:	bc70      	pop	{r4, r5, r6}
 80049a6:	4770      	bx	lr
    __HAL_LOCK(huart);
 80049a8:	2002      	movs	r0, #2
 80049aa:	e7fb      	b.n	80049a4 <HAL_UART_Receive_IT+0x22>

080049ac <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80049ac:	b510      	push	{r4, lr}
    memset1( ctx->X, 0, sizeof ctx->X );
 80049ae:	2210      	movs	r2, #16
{
 80049b0:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80049b2:	2100      	movs	r1, #0
 80049b4:	30f1      	adds	r0, #241	@ 0xf1
 80049b6:	f005 feef 	bl	800a798 <memset1>
    ctx->M_n = 0;
 80049ba:	2100      	movs	r1, #0
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80049bc:	4620      	mov	r0, r4
    ctx->M_n = 0;
 80049be:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80049c2:	22f0      	movs	r2, #240	@ 0xf0
}
 80049c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80049c8:	f005 bee6 	b.w	800a798 <memset1>

080049cc <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80049cc:	4602      	mov	r2, r0
 80049ce:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80049d0:	2110      	movs	r1, #16
 80049d2:	f000 b9a3 	b.w	8004d1c <lorawan_aes_set_key>

080049d6 <AES_CMAC_Update>:
}

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80049d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049da:	4604      	mov	r4, r0
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80049dc:	f8d0 0114 	ldr.w	r0, [r0, #276]	@ 0x114
{
 80049e0:	460e      	mov	r6, r1
 80049e2:	4615      	mov	r5, r2
 80049e4:	b085      	sub	sp, #20
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80049e6:	f204 1901 	addw	r9, r4, #257	@ 0x101
    if( ctx->M_n > 0 )
 80049ea:	b388      	cbz	r0, 8004a50 <AES_CMAC_Update+0x7a>
        mlen = MIN( 16 - ctx->M_n, len );
 80049ec:	f1c0 0810 	rsb	r8, r0, #16
 80049f0:	4590      	cmp	r8, r2
 80049f2:	4647      	mov	r7, r8
 80049f4:	bf28      	it	cs
 80049f6:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80049f8:	4448      	add	r0, r9
 80049fa:	b2ba      	uxth	r2, r7
 80049fc:	f005 feb8 	bl	800a770 <memcpy1>
        ctx->M_n += mlen;
 8004a00:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 8004a04:	443b      	add	r3, r7
        if( ctx->M_n < 16 || len == mlen )
 8004a06:	2b0f      	cmp	r3, #15
        ctx->M_n += mlen;
 8004a08:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 8004a0c:	d92d      	bls.n	8004a6a <AES_CMAC_Update+0x94>
 8004a0e:	45a8      	cmp	r8, r5
 8004a10:	d22b      	bcs.n	8004a6a <AES_CMAC_Update+0x94>
 8004a12:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8004a16:	f504 7180 	add.w	r1, r4, #256	@ 0x100
            return;
        XOR( ctx->M_last, ctx->X );
 8004a1a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004a1e:	7c18      	ldrb	r0, [r3, #16]
 8004a20:	428b      	cmp	r3, r1
 8004a22:	ea82 0200 	eor.w	r2, r2, r0
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	d1f7      	bne.n	8004a1a <AES_CMAC_Update+0x44>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8004a2a:	f104 08f1 	add.w	r8, r4, #241	@ 0xf1
 8004a2e:	2210      	movs	r2, #16
 8004a30:	4641      	mov	r1, r8
 8004a32:	4668      	mov	r0, sp
 8004a34:	f005 fe9c 	bl	800a770 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8004a38:	4622      	mov	r2, r4
 8004a3a:	4669      	mov	r1, sp
 8004a3c:	4668      	mov	r0, sp
 8004a3e:	f000 f9f3 	bl	8004e28 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8004a42:	2210      	movs	r2, #16
 8004a44:	4669      	mov	r1, sp
 8004a46:	4640      	mov	r0, r8
 8004a48:	f005 fe92 	bl	800a770 <memcpy1>

        data += mlen;
 8004a4c:	443e      	add	r6, r7
        len -= mlen;
 8004a4e:	1bed      	subs	r5, r5, r7
 8004a50:	f504 7880 	add.w	r8, r4, #256	@ 0x100
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8004a54:	f104 07f1 	add.w	r7, r4, #241	@ 0xf1
    while( len > 16 )
 8004a58:	2d10      	cmp	r5, #16
 8004a5a:	d809      	bhi.n	8004a70 <AES_CMAC_Update+0x9a>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4648      	mov	r0, r9
 8004a60:	b2aa      	uxth	r2, r5
 8004a62:	f005 fe85 	bl	800a770 <memcpy1>
    ctx->M_n = len;
 8004a66:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
}
 8004a6a:	b005      	add	sp, #20
 8004a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a70:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8004a74:	1e71      	subs	r1, r6, #1
        XOR( data, ctx->X );
 8004a76:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004a7a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004a7e:	4543      	cmp	r3, r8
 8004a80:	ea82 0200 	eor.w	r2, r2, r0
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	d1f6      	bne.n	8004a76 <AES_CMAC_Update+0xa0>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8004a88:	2210      	movs	r2, #16
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	4668      	mov	r0, sp
 8004a8e:	f005 fe6f 	bl	800a770 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8004a92:	4622      	mov	r2, r4
 8004a94:	4669      	mov	r1, sp
 8004a96:	4668      	mov	r0, sp
 8004a98:	f000 f9c6 	bl	8004e28 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	4669      	mov	r1, sp
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f005 fe65 	bl	800a770 <memcpy1>
        data += 16;
 8004aa6:	3610      	adds	r6, #16
        len -= 16;
 8004aa8:	3d10      	subs	r5, #16
 8004aaa:	e7d5      	b.n	8004a58 <AES_CMAC_Update+0x82>

08004aac <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8004aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b089      	sub	sp, #36	@ 0x24
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8004ab2:	2210      	movs	r2, #16
 8004ab4:	2100      	movs	r1, #0
{
 8004ab6:	4605      	mov	r5, r0
    memset1( K, '\0', 16 );
 8004ab8:	4668      	mov	r0, sp
 8004aba:	f005 fe6d 	bl	800a798 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8004abe:	4622      	mov	r2, r4
 8004ac0:	4669      	mov	r1, sp
 8004ac2:	4668      	mov	r0, sp
 8004ac4:	f000 f9b0 	bl	8004e28 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8004ac8:	f99d 3000 	ldrsb.w	r3, [sp]
 8004acc:	466a      	mov	r2, sp
 8004ace:	2b00      	cmp	r3, #0
    {
        LSHIFT( K, K );
 8004ad0:	f04f 0100 	mov.w	r1, #0
    if( K[0] & 0x80 )
 8004ad4:	da43      	bge.n	8004b5e <AES_CMAC_Final+0xb2>
        LSHIFT( K, K );
 8004ad6:	7813      	ldrb	r3, [r2, #0]
 8004ad8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8004adc:	3101      	adds	r1, #1
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8004ae4:	290f      	cmp	r1, #15
 8004ae6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004aea:	d1f4      	bne.n	8004ad6 <AES_CMAC_Final+0x2a>
 8004aec:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004af0:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
 8004af2:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
    }
    else
        LSHIFT( K, K );

    if( ctx->M_n == 16 )
 8004af6:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
        LSHIFT( K, K );
 8004afa:	b2db      	uxtb	r3, r3
    if( ctx->M_n == 16 )
 8004afc:	2810      	cmp	r0, #16
        K[15] ^= 0x87;
 8004afe:	f88d 300f 	strb.w	r3, [sp, #15]
    if( ctx->M_n == 16 )
 8004b02:	d13b      	bne.n	8004b7c <AES_CMAC_Final+0xd0>
 8004b04:	4669      	mov	r1, sp
 8004b06:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 8004b0a:	f504 7088 	add.w	r0, r4, #272	@ 0x110
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8004b0e:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8004b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b16:	4298      	cmp	r0, r3
 8004b18:	ea82 0206 	eor.w	r2, r2, r6
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	d1f6      	bne.n	8004b0e <AES_CMAC_Final+0x62>
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8004b20:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8004b24:	f504 7180 	add.w	r1, r4, #256	@ 0x100
 8004b28:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004b2c:	7c18      	ldrb	r0, [r3, #16]
 8004b2e:	428b      	cmp	r3, r1
 8004b30:	ea82 0200 	eor.w	r2, r2, r0
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	d1f7      	bne.n	8004b28 <AES_CMAC_Final+0x7c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8004b38:	2210      	movs	r2, #16
 8004b3a:	f104 01f1 	add.w	r1, r4, #241	@ 0xf1
 8004b3e:	eb0d 0002 	add.w	r0, sp, r2
 8004b42:	f005 fe15 	bl	800a770 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8004b46:	4622      	mov	r2, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	a804      	add	r0, sp, #16
 8004b4c:	f000 f96c 	bl	8004e28 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8004b50:	2210      	movs	r2, #16
 8004b52:	2100      	movs	r1, #0
 8004b54:	4668      	mov	r0, sp
 8004b56:	f005 fe1f 	bl	800a798 <memset1>
}
 8004b5a:	b009      	add	sp, #36	@ 0x24
 8004b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 8004b5e:	7813      	ldrb	r3, [r2, #0]
 8004b60:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8004b64:	3101      	adds	r1, #1
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8004b6c:	290f      	cmp	r1, #15
 8004b6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b72:	d1f4      	bne.n	8004b5e <AES_CMAC_Final+0xb2>
 8004b74:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	e7bc      	b.n	8004af6 <AES_CMAC_Final+0x4a>
        if( K[0] & 0x80 )
 8004b7c:	f99d 3000 	ldrsb.w	r3, [sp]
 8004b80:	466a      	mov	r2, sp
 8004b82:	2b00      	cmp	r3, #0
            LSHIFT( K, K );
 8004b84:	f04f 0100 	mov.w	r1, #0
        if( K[0] & 0x80 )
 8004b88:	da36      	bge.n	8004bf8 <AES_CMAC_Final+0x14c>
            LSHIFT( K, K );
 8004b8a:	7813      	ldrb	r3, [r2, #0]
 8004b8c:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8004b90:	3101      	adds	r1, #1
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
 8004b98:	290f      	cmp	r1, #15
 8004b9a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b9e:	d1f4      	bne.n	8004b8a <AES_CMAC_Final+0xde>
 8004ba0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004ba4:	005b      	lsls	r3, r3, #1
            K[15] ^= 0x87;
 8004ba6:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
            ctx->M_last[ctx->M_n] = 0;
 8004baa:	1c47      	adds	r7, r0, #1
 8004bac:	2f10      	cmp	r7, #16
 8004bae:	f1c0 060f 	rsb	r6, r0, #15
        ctx->M_last[ctx->M_n] = 0x80;
 8004bb2:	f04f 0280 	mov.w	r2, #128	@ 0x80
            ctx->M_last[ctx->M_n] = 0;
 8004bb6:	bf88      	it	hi
 8004bb8:	2600      	movhi	r6, #0
            LSHIFT( K, K );
 8004bba:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 8004bbc:	f88d 300f 	strb.w	r3, [sp, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 8004bc0:	1823      	adds	r3, r4, r0
            ctx->M_last[ctx->M_n] = 0;
 8004bc2:	f500 7081 	add.w	r0, r0, #258	@ 0x102
        ctx->M_last[ctx->M_n] = 0x80;
 8004bc6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
            ctx->M_last[ctx->M_n] = 0;
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4632      	mov	r2, r6
 8004bce:	4420      	add	r0, r4
 8004bd0:	f007 fdfc 	bl	800c7cc <memset>
 8004bd4:	4669      	mov	r1, sp
        while( ++ctx->M_n < 16 )
 8004bd6:	443e      	add	r6, r7
 8004bd8:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
 8004bdc:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 8004be0:	f504 7088 	add.w	r0, r4, #272	@ 0x110
        XOR( K, ctx->M_last );
 8004be4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8004be8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bec:	4298      	cmp	r0, r3
 8004bee:	ea82 0206 	eor.w	r2, r2, r6
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	d1f6      	bne.n	8004be4 <AES_CMAC_Final+0x138>
 8004bf6:	e793      	b.n	8004b20 <AES_CMAC_Final+0x74>
            LSHIFT( K, K );
 8004bf8:	7813      	ldrb	r3, [r2, #0]
 8004bfa:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8004bfe:	3101      	adds	r1, #1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
 8004c06:	290f      	cmp	r1, #15
 8004c08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004c0c:	d1f4      	bne.n	8004bf8 <AES_CMAC_Final+0x14c>
 8004c0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	e7c9      	b.n	8004baa <AES_CMAC_Final+0xfe>

08004c16 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8004c16:	780a      	ldrb	r2, [r1, #0]
 8004c18:	7803      	ldrb	r3, [r0, #0]
 8004c1a:	4053      	eors	r3, r2
 8004c1c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8004c1e:	784a      	ldrb	r2, [r1, #1]
 8004c20:	7843      	ldrb	r3, [r0, #1]
 8004c22:	4053      	eors	r3, r2
 8004c24:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8004c26:	788a      	ldrb	r2, [r1, #2]
 8004c28:	7883      	ldrb	r3, [r0, #2]
 8004c2a:	4053      	eors	r3, r2
 8004c2c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8004c2e:	78ca      	ldrb	r2, [r1, #3]
 8004c30:	78c3      	ldrb	r3, [r0, #3]
 8004c32:	4053      	eors	r3, r2
 8004c34:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8004c36:	790a      	ldrb	r2, [r1, #4]
 8004c38:	7903      	ldrb	r3, [r0, #4]
 8004c3a:	4053      	eors	r3, r2
 8004c3c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8004c3e:	794a      	ldrb	r2, [r1, #5]
 8004c40:	7943      	ldrb	r3, [r0, #5]
 8004c42:	4053      	eors	r3, r2
 8004c44:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8004c46:	798a      	ldrb	r2, [r1, #6]
 8004c48:	7983      	ldrb	r3, [r0, #6]
 8004c4a:	4053      	eors	r3, r2
 8004c4c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8004c4e:	79ca      	ldrb	r2, [r1, #7]
 8004c50:	79c3      	ldrb	r3, [r0, #7]
 8004c52:	4053      	eors	r3, r2
 8004c54:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8004c56:	7a0a      	ldrb	r2, [r1, #8]
 8004c58:	7a03      	ldrb	r3, [r0, #8]
 8004c5a:	4053      	eors	r3, r2
 8004c5c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8004c5e:	7a4a      	ldrb	r2, [r1, #9]
 8004c60:	7a43      	ldrb	r3, [r0, #9]
 8004c62:	4053      	eors	r3, r2
 8004c64:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8004c66:	7a8a      	ldrb	r2, [r1, #10]
 8004c68:	7a83      	ldrb	r3, [r0, #10]
 8004c6a:	4053      	eors	r3, r2
 8004c6c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8004c6e:	7aca      	ldrb	r2, [r1, #11]
 8004c70:	7ac3      	ldrb	r3, [r0, #11]
 8004c72:	4053      	eors	r3, r2
 8004c74:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8004c76:	7b0a      	ldrb	r2, [r1, #12]
 8004c78:	7b03      	ldrb	r3, [r0, #12]
 8004c7a:	4053      	eors	r3, r2
 8004c7c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8004c7e:	7b4a      	ldrb	r2, [r1, #13]
 8004c80:	7b43      	ldrb	r3, [r0, #13]
 8004c82:	4053      	eors	r3, r2
 8004c84:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8004c86:	7b8a      	ldrb	r2, [r1, #14]
 8004c88:	7b83      	ldrb	r3, [r0, #14]
 8004c8a:	4053      	eors	r3, r2
 8004c8c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8004c8e:	7bca      	ldrb	r2, [r1, #15]
 8004c90:	7bc3      	ldrb	r3, [r0, #15]
 8004c92:	4053      	eors	r3, r2
 8004c94:	73c3      	strb	r3, [r0, #15]
#endif
}
 8004c96:	4770      	bx	lr

08004c98 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8004c98:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8004c9a:	780b      	ldrb	r3, [r1, #0]
 8004c9c:	7814      	ldrb	r4, [r2, #0]
 8004c9e:	4063      	eors	r3, r4
 8004ca0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8004ca2:	7854      	ldrb	r4, [r2, #1]
 8004ca4:	784b      	ldrb	r3, [r1, #1]
 8004ca6:	4063      	eors	r3, r4
 8004ca8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8004caa:	7894      	ldrb	r4, [r2, #2]
 8004cac:	788b      	ldrb	r3, [r1, #2]
 8004cae:	4063      	eors	r3, r4
 8004cb0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8004cb2:	78d4      	ldrb	r4, [r2, #3]
 8004cb4:	78cb      	ldrb	r3, [r1, #3]
 8004cb6:	4063      	eors	r3, r4
 8004cb8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8004cba:	7914      	ldrb	r4, [r2, #4]
 8004cbc:	790b      	ldrb	r3, [r1, #4]
 8004cbe:	4063      	eors	r3, r4
 8004cc0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8004cc2:	7954      	ldrb	r4, [r2, #5]
 8004cc4:	794b      	ldrb	r3, [r1, #5]
 8004cc6:	4063      	eors	r3, r4
 8004cc8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8004cca:	7994      	ldrb	r4, [r2, #6]
 8004ccc:	798b      	ldrb	r3, [r1, #6]
 8004cce:	4063      	eors	r3, r4
 8004cd0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8004cd2:	79d4      	ldrb	r4, [r2, #7]
 8004cd4:	79cb      	ldrb	r3, [r1, #7]
 8004cd6:	4063      	eors	r3, r4
 8004cd8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8004cda:	7a14      	ldrb	r4, [r2, #8]
 8004cdc:	7a0b      	ldrb	r3, [r1, #8]
 8004cde:	4063      	eors	r3, r4
 8004ce0:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8004ce2:	7a54      	ldrb	r4, [r2, #9]
 8004ce4:	7a4b      	ldrb	r3, [r1, #9]
 8004ce6:	4063      	eors	r3, r4
 8004ce8:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8004cea:	7a8b      	ldrb	r3, [r1, #10]
 8004cec:	7a94      	ldrb	r4, [r2, #10]
 8004cee:	4063      	eors	r3, r4
 8004cf0:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8004cf2:	7ad4      	ldrb	r4, [r2, #11]
 8004cf4:	7acb      	ldrb	r3, [r1, #11]
 8004cf6:	4063      	eors	r3, r4
 8004cf8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8004cfa:	7b14      	ldrb	r4, [r2, #12]
 8004cfc:	7b0b      	ldrb	r3, [r1, #12]
 8004cfe:	4063      	eors	r3, r4
 8004d00:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8004d02:	7b54      	ldrb	r4, [r2, #13]
 8004d04:	7b4b      	ldrb	r3, [r1, #13]
 8004d06:	4063      	eors	r3, r4
 8004d08:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8004d0a:	7b94      	ldrb	r4, [r2, #14]
 8004d0c:	7b8b      	ldrb	r3, [r1, #14]
 8004d0e:	4063      	eors	r3, r4
 8004d10:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8004d12:	7bcb      	ldrb	r3, [r1, #15]
 8004d14:	7bd2      	ldrb	r2, [r2, #15]
 8004d16:	4053      	eors	r3, r2
 8004d18:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8004d1a:	bd10      	pop	{r4, pc}

08004d1c <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8004d1c:	f1a1 0310 	sub.w	r3, r1, #16
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b10      	cmp	r3, #16
{
 8004d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	4604      	mov	r4, r0
    switch( keylen )
 8004d2a:	d804      	bhi.n	8004d36 <lorawan_aes_set_key+0x1a>
 8004d2c:	483c      	ldr	r0, [pc, #240]	@ (8004e20 <lorawan_aes_set_key+0x104>)
 8004d2e:	fa20 f303 	lsr.w	r3, r0, r3
 8004d32:	07db      	lsls	r3, r3, #31
 8004d34:	d405      	bmi.n	8004d42 <lorawan_aes_set_key+0x26>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8004d36:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8004d38:	20ff      	movs	r0, #255	@ 0xff
        ctx->rnd = 0;
 8004d3a:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8004d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch( keylen )
 8004d42:	4625      	mov	r5, r4
 8004d44:	1e56      	subs	r6, r2, #1
        *d++ = *s++;
 8004d46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d4a:	f806 3f01 	strb.w	r3, [r6, #1]!
    while( nn-- )
 8004d4e:	1b63      	subs	r3, r4, r5
 8004d50:	440b      	add	r3, r1
 8004d52:	f013 00ff 	ands.w	r0, r3, #255	@ 0xff
 8004d56:	d1f6      	bne.n	8004d46 <lorawan_aes_set_key+0x2a>
    ctx->rnd = (hi >> 4) - 1;
 8004d58:	4688      	mov	r8, r1
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8004d5a:	f04f 0e01 	mov.w	lr, #1
    hi = (keylen + 28) << 2;
 8004d5e:	f101 031c 	add.w	r3, r1, #28
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	fa5f fc83 	uxtb.w	ip, r3
    ctx->rnd = (hi >> 4) - 1;
 8004d68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d6c:	3b01      	subs	r3, #1
            t0 = s_box(t1) ^ rc;
 8004d6e:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 8004e24 <lorawan_aes_set_key+0x108>
    ctx->rnd = (hi >> 4) - 1;
 8004d72:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8004d76:	1853      	adds	r3, r2, r1
        if( cc % keylen == 0 )
 8004d78:	fbb8 faf1 	udiv	sl, r8, r1
 8004d7c:	fb01 8a1a 	mls	sl, r1, sl, r8
 8004d80:	f01a 0aff 	ands.w	sl, sl, #255	@ 0xff
        t0 = ctx->ksch[cc - 4];
 8004d84:	f813 7c04 	ldrb.w	r7, [r3, #-4]
        t1 = ctx->ksch[cc - 3];
 8004d88:	f813 6c03 	ldrb.w	r6, [r3, #-3]
        t2 = ctx->ksch[cc - 2];
 8004d8c:	f813 5c02 	ldrb.w	r5, [r3, #-2]
        t3 = ctx->ksch[cc - 1];
 8004d90:	f813 4c01 	ldrb.w	r4, [r3, #-1]
        if( cc % keylen == 0 )
 8004d94:	d133      	bne.n	8004dfe <lorawan_aes_set_key+0xe2>
            t0 = s_box(t1) ^ rc;
 8004d96:	f819 a006 	ldrb.w	sl, [r9, r6]
            t1 = s_box(t2);
 8004d9a:	f819 6005 	ldrb.w	r6, [r9, r5]
            t2 = s_box(t3);
 8004d9e:	f819 5004 	ldrb.w	r5, [r9, r4]
            t3 = s_box(tt);
 8004da2:	f819 4007 	ldrb.w	r4, [r9, r7]
            rc = f2(rc);
 8004da6:	ea4f 17de 	mov.w	r7, lr, lsr #7
 8004daa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
            t0 = s_box(t1) ^ rc;
 8004dae:	ea8e 0a0a 	eor.w	sl, lr, sl
            rc = f2(rc);
 8004db2:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8004db6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8004dba:	b2ff      	uxtb	r7, r7
 8004dbc:	fa5f fe8e 	uxtb.w	lr, lr
 8004dc0:	ea87 0e0e 	eor.w	lr, r7, lr
            t0 = s_box(t1) ^ rc;
 8004dc4:	4657      	mov	r7, sl
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8004dc6:	f892 a000 	ldrb.w	sl, [r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8004dca:	f108 0804 	add.w	r8, r8, #4
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8004dce:	ea87 070a 	eor.w	r7, r7, sl
 8004dd2:	701f      	strb	r7, [r3, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8004dd4:	7857      	ldrb	r7, [r2, #1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8004dd6:	fa5f f888 	uxtb.w	r8, r8
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8004dda:	407e      	eors	r6, r7
 8004ddc:	705e      	strb	r6, [r3, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8004dde:	7896      	ldrb	r6, [r2, #2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8004de0:	45c4      	cmp	ip, r8
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8004de2:	ea85 0506 	eor.w	r5, r5, r6
 8004de6:	709d      	strb	r5, [r3, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8004de8:	78d5      	ldrb	r5, [r2, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8004dea:	f103 0304 	add.w	r3, r3, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8004dee:	ea84 0405 	eor.w	r4, r4, r5
 8004df2:	f803 4c01 	strb.w	r4, [r3, #-1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8004df6:	f102 0204 	add.w	r2, r2, #4
 8004dfa:	d8bd      	bhi.n	8004d78 <lorawan_aes_set_key+0x5c>
 8004dfc:	e79f      	b.n	8004d3e <lorawan_aes_set_key+0x22>
        else if( keylen > 24 && cc % keylen == 16 )
 8004dfe:	2918      	cmp	r1, #24
 8004e00:	d9e1      	bls.n	8004dc6 <lorawan_aes_set_key+0xaa>
 8004e02:	f1ba 0f10 	cmp.w	sl, #16
 8004e06:	d1de      	bne.n	8004dc6 <lorawan_aes_set_key+0xaa>
            t0 = s_box(t0);
 8004e08:	f8df a018 	ldr.w	sl, [pc, #24]	@ 8004e24 <lorawan_aes_set_key+0x108>
 8004e0c:	f81a 7007 	ldrb.w	r7, [sl, r7]
            t1 = s_box(t1);
 8004e10:	f81a 6006 	ldrb.w	r6, [sl, r6]
            t2 = s_box(t2);
 8004e14:	f81a 5005 	ldrb.w	r5, [sl, r5]
            t3 = s_box(t3);
 8004e18:	f81a 4004 	ldrb.w	r4, [sl, r4]
 8004e1c:	e7d3      	b.n	8004dc6 <lorawan_aes_set_key+0xaa>
 8004e1e:	bf00      	nop
 8004e20:	00010101 	.word	0x00010101
 8004e24:	0800ca31 	.word	0x0800ca31

08004e28 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( ctx->rnd )
 8004e2c:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
{
 8004e30:	b0a1      	sub	sp, #132	@ 0x84
 8004e32:	911b      	str	r1, [sp, #108]	@ 0x6c
 8004e34:	920d      	str	r2, [sp, #52]	@ 0x34
    if( ctx->rnd )
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8168 	beq.w	800510e <lorawan_aes_encrypt+0x2e6>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8004e3e:	4601      	mov	r1, r0
 8004e40:	a81c      	add	r0, sp, #112	@ 0x70
 8004e42:	f7ff ff29 	bl	8004c98 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8004e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004e48:	4cb2      	ldr	r4, [pc, #712]	@ (8005114 <lorawan_aes_encrypt+0x2ec>)
 8004e4a:	3310      	adds	r3, #16
 8004e4c:	9301      	str	r3, [sp, #4]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9302      	str	r3, [sp, #8]
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8004e52:	9b01      	ldr	r3, [sp, #4]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004e54:	f89d c070 	ldrb.w	ip, [sp, #112]	@ 0x70
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8004e58:	931a      	str	r3, [sp, #104]	@ 0x68
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004e5a:	f89d 3074 	ldrb.w	r3, [sp, #116]	@ 0x74
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004e5e:	f89d 7075 	ldrb.w	r7, [sp, #117]	@ 0x75
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004e62:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e64:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004e68:	f89d 807a 	ldrb.w	r8, [sp, #122]	@ 0x7a
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004e6c:	930f      	str	r3, [sp, #60]	@ 0x3c
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8004e6e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004e70:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8004e74:	5da6      	ldrb	r6, [r4, r6]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004e76:	9310      	str	r3, [sp, #64]	@ 0x40
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8004e78:	9604      	str	r6, [sp, #16]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004e7a:	5ce3      	ldrb	r3, [r4, r3]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8004e7c:	f89d 6078 	ldrb.w	r6, [sp, #120]	@ 0x78
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004e80:	9303      	str	r3, [sp, #12]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8004e82:	9612      	str	r6, [sp, #72]	@ 0x48
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004e84:	f89d 3073 	ldrb.w	r3, [sp, #115]	@ 0x73
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8004e88:	f89d 607d 	ldrb.w	r6, [sp, #125]	@ 0x7d
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004e8c:	f89d e07f 	ldrb.w	lr, [sp, #127]	@ 0x7f
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004e90:	5ce0      	ldrb	r0, [r4, r3]
 8004e92:	9311      	str	r3, [sp, #68]	@ 0x44
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8004e94:	9613      	str	r6, [sp, #76]	@ 0x4c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8004e96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8004e98:	f89d 6072 	ldrb.w	r6, [sp, #114]	@ 0x72
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004e9c:	f814 5008 	ldrb.w	r5, [r4, r8]
 8004ea0:	f814 100e 	ldrb.w	r1, [r4, lr]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8004ea4:	f814 200c 	ldrb.w	r2, [r4, ip]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8004ea8:	f814 a007 	ldrb.w	sl, [r4, r7]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8004eac:	5ce3      	ldrb	r3, [r4, r3]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8004eae:	9614      	str	r6, [sp, #80]	@ 0x50
 8004eb0:	5da6      	ldrb	r6, [r4, r6]
 8004eb2:	9605      	str	r6, [sp, #20]
 8004eb4:	f89d 6077 	ldrb.w	r6, [sp, #119]	@ 0x77
 8004eb8:	9615      	str	r6, [sp, #84]	@ 0x54
 8004eba:	5da6      	ldrb	r6, [r4, r6]
 8004ebc:	9606      	str	r6, [sp, #24]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8004ebe:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8004ec0:	5da6      	ldrb	r6, [r4, r6]
 8004ec2:	9607      	str	r6, [sp, #28]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8004ec4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004ec6:	5da6      	ldrb	r6, [r4, r6]
 8004ec8:	9608      	str	r6, [sp, #32]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8004eca:	f89d 607c 	ldrb.w	r6, [sp, #124]	@ 0x7c
 8004ece:	9616      	str	r6, [sp, #88]	@ 0x58
 8004ed0:	f89d 6071 	ldrb.w	r6, [sp, #113]	@ 0x71
 8004ed4:	9617      	str	r6, [sp, #92]	@ 0x5c
 8004ed6:	f89d 6076 	ldrb.w	r6, [sp, #118]	@ 0x76
 8004eda:	9618      	str	r6, [sp, #96]	@ 0x60
 8004edc:	5da6      	ldrb	r6, [r4, r6]
 8004ede:	9609      	str	r6, [sp, #36]	@ 0x24
 8004ee0:	f89d 607b 	ldrb.w	r6, [sp, #123]	@ 0x7b
 8004ee4:	9619      	str	r6, [sp, #100]	@ 0x64
 8004ee6:	5da6      	ldrb	r6, [r4, r6]
 8004ee8:	960a      	str	r6, [sp, #40]	@ 0x28
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8004eea:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8004eec:	5da6      	ldrb	r6, [r4, r6]
 8004eee:	960b      	str	r6, [sp, #44]	@ 0x2c
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8004ef0:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8004ef2:	5da6      	ldrb	r6, [r4, r6]
 8004ef4:	960c      	str	r6, [sp, #48]	@ 0x30
        for( r = 1 ; r < ctx->rnd ; ++r )
 8004ef6:	9e02      	ldr	r6, [sp, #8]
 8004ef8:	3601      	adds	r6, #1
 8004efa:	9602      	str	r6, [sp, #8]
 8004efc:	9e01      	ldr	r6, [sp, #4]
 8004efe:	f89d 9008 	ldrb.w	r9, [sp, #8]
 8004f02:	3610      	adds	r6, #16
 8004f04:	9601      	str	r6, [sp, #4]
 8004f06:	9e00      	ldr	r6, [sp, #0]
 8004f08:	454e      	cmp	r6, r9
 8004f0a:	d834      	bhi.n	8004f76 <lorawan_aes_encrypt+0x14e>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8004f0c:	f88d 3074 	strb.w	r3, [sp, #116]	@ 0x74
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8004f10:	9b07      	ldr	r3, [sp, #28]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8004f12:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8004f16:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8004f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8004f1c:	f88d 0077 	strb.w	r0, [sp, #119]	@ 0x77
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8004f20:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8004f24:	9b04      	ldr	r3, [sp, #16]
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8004f26:	981b      	ldr	r0, [sp, #108]	@ 0x6c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8004f28:	f88d 3075 	strb.w	r3, [sp, #117]	@ 0x75
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8004f2c:	9b08      	ldr	r3, [sp, #32]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8004f2e:	f88d 1073 	strb.w	r1, [sp, #115]	@ 0x73
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8004f32:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
 8004f36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8004f38:	a91c      	add	r1, sp, #112	@ 0x70
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8004f3a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8004f3e:	9b05      	ldr	r3, [sp, #20]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8004f40:	f88d a071 	strb.w	sl, [sp, #113]	@ 0x71
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8004f44:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8004f48:	9b03      	ldr	r3, [sp, #12]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8004f4a:	f88d 5072 	strb.w	r5, [sp, #114]	@ 0x72
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8004f4e:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
 8004f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f54:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8004f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f5a:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
 8004f5e:	9b06      	ldr	r3, [sp, #24]
 8004f60:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8004f64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f66:	eb03 1206 	add.w	r2, r3, r6, lsl #4
 8004f6a:	f7ff fe95 	bl	8004c98 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8004f6e:	2000      	movs	r0, #0
}
 8004f70:	b021      	add	sp, #132	@ 0x84
 8004f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004f76:	44a4      	add	ip, r4
 8004f78:	f89c 9100 	ldrb.w	r9, [ip, #256]	@ 0x100
 8004f7c:	ea85 0b01 	eor.w	fp, r5, r1
 8004f80:	4427      	add	r7, r4
 8004f82:	ea89 090b 	eor.w	r9, r9, fp
 8004f86:	f897 b200 	ldrb.w	fp, [r7, #512]	@ 0x200
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8004f8a:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
 8004f8e:	44a0      	add	r8, r4
 8004f90:	4051      	eors	r1, r2
 8004f92:	4079      	eors	r1, r7
 8004f94:	f898 7200 	ldrb.w	r7, [r8, #512]	@ 0x200
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8004f98:	44a6      	add	lr, r4
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8004f9a:	4079      	eors	r1, r7
 8004f9c:	f88d 1071 	strb.w	r1, [sp, #113]	@ 0x71
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8004fa0:	f898 1100 	ldrb.w	r1, [r8, #256]	@ 0x100
 8004fa4:	ea82 020a 	eor.w	r2, r2, sl
 8004fa8:	404a      	eors	r2, r1
 8004faa:	f89e 1200 	ldrb.w	r1, [lr, #512]	@ 0x200
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8004fae:	ea85 050a 	eor.w	r5, r5, sl
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8004fb2:	404a      	eors	r2, r1
 8004fb4:	f88d 2072 	strb.w	r2, [sp, #114]	@ 0x72
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8004fb8:	f89c 2200 	ldrb.w	r2, [ip, #512]	@ 0x200
 8004fbc:	f89e 1100 	ldrb.w	r1, [lr, #256]	@ 0x100
 8004fc0:	406a      	eors	r2, r5
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004fc2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8004fc4:	404a      	eors	r2, r1
 8004fc6:	f88d 2073 	strb.w	r2, [sp, #115]	@ 0x73
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004fca:	9a03      	ldr	r2, [sp, #12]
 8004fcc:	4426      	add	r6, r4
 8004fce:	ea82 0100 	eor.w	r1, r2, r0
 8004fd2:	f896 2100 	ldrb.w	r2, [r6, #256]	@ 0x100
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004fd6:	ea89 090b 	eor.w	r9, r9, fp
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004fda:	404a      	eors	r2, r1
 8004fdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004fde:	f88d 9070 	strb.w	r9, [sp, #112]	@ 0x70
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004fe2:	4421      	add	r1, r4
 8004fe4:	f891 5200 	ldrb.w	r5, [r1, #512]	@ 0x200
 8004fe8:	406a      	eors	r2, r5
 8004fea:	f88d 2074 	strb.w	r2, [sp, #116]	@ 0x74
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8004fee:	ea80 0203 	eor.w	r2, r0, r3
 8004ff2:	f891 0100 	ldrb.w	r0, [r1, #256]	@ 0x100
 8004ff6:	4050      	eors	r0, r2
 8004ff8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004ffa:	4422      	add	r2, r4
 8004ffc:	f892 1200 	ldrb.w	r1, [r2, #512]	@ 0x200
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8005000:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8005004:	4048      	eors	r0, r1
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8005006:	9904      	ldr	r1, [sp, #16]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8005008:	f88d 0075 	strb.w	r0, [sp, #117]	@ 0x75
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800500c:	404b      	eors	r3, r1
 800500e:	4053      	eors	r3, r2
 8005010:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005012:	4422      	add	r2, r4
 8005014:	f892 1200 	ldrb.w	r1, [r2, #512]	@ 0x200
 8005018:	404b      	eors	r3, r1
 800501a:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800501e:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 8005022:	404b      	eors	r3, r1
 8005024:	f896 1200 	ldrb.w	r1, [r6, #512]	@ 0x200
 8005028:	4059      	eors	r1, r3
 800502a:	f892 3100 	ldrb.w	r3, [r2, #256]	@ 0x100
 800502e:	4059      	eors	r1, r3
 8005030:	f88d 1077 	strb.w	r1, [sp, #119]	@ 0x77
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8005034:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005036:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 800503a:	4422      	add	r2, r4
 800503c:	4059      	eors	r1, r3
 800503e:	f892 3100 	ldrb.w	r3, [r2, #256]	@ 0x100
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8005042:	f892 2200 	ldrb.w	r2, [r2, #512]	@ 0x200
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8005046:	404b      	eors	r3, r1
 8005048:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800504a:	4421      	add	r1, r4
 800504c:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
 8005050:	4043      	eors	r3, r0
 8005052:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8005056:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 800505a:	4058      	eors	r0, r3
 800505c:	f891 3100 	ldrb.w	r3, [r1, #256]	@ 0x100
 8005060:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8005062:	4043      	eors	r3, r0
 8005064:	4421      	add	r1, r4
 8005066:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800506a:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800506e:	4043      	eors	r3, r0
 8005070:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8005074:	e9dd 3007 	ldrd	r3, r0, [sp, #28]
 8005078:	4043      	eors	r3, r0
 800507a:	404b      	eors	r3, r1
 800507c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800507e:	4421      	add	r1, r4
 8005080:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
 8005084:	4043      	eors	r3, r0
 8005086:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800508a:	9808      	ldr	r0, [sp, #32]
 800508c:	9b05      	ldr	r3, [sp, #20]
 800508e:	4043      	eors	r3, r0
 8005090:	405a      	eors	r2, r3
 8005092:	f891 3100 	ldrb.w	r3, [r1, #256]	@ 0x100
 8005096:	405a      	eors	r2, r3
 8005098:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800509c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800509e:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	@ 0x24
 80050a2:	4422      	add	r2, r4
 80050a4:	4059      	eors	r1, r3
 80050a6:	f892 3100 	ldrb.w	r3, [r2, #256]	@ 0x100
 80050aa:	404b      	eors	r3, r1
 80050ac:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80050ae:	4421      	add	r1, r4
 80050b0:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
 80050b4:	4043      	eors	r3, r0
 80050b6:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80050ba:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	@ 0x28
 80050be:	4058      	eors	r0, r3
 80050c0:	f891 3100 	ldrb.w	r3, [r1, #256]	@ 0x100
 80050c4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80050c6:	4043      	eors	r3, r0
 80050c8:	4421      	add	r1, r4
 80050ca:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80050ce:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80050d2:	4043      	eors	r3, r0
 80050d4:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80050d8:	e9dd 300b 	ldrd	r3, r0, [sp, #44]	@ 0x2c
 80050dc:	4043      	eors	r3, r0
 80050de:	404b      	eors	r3, r1
 80050e0:	9919      	ldr	r1, [sp, #100]	@ 0x64
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80050e2:	f892 2200 	ldrb.w	r2, [r2, #512]	@ 0x200
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80050e6:	4421      	add	r1, r4
 80050e8:	f891 0200 	ldrb.w	r0, [r1, #512]	@ 0x200
 80050ec:	4043      	eors	r3, r0
 80050ee:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80050f2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80050f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050f6:	4043      	eors	r3, r0
 80050f8:	4053      	eors	r3, r2
 80050fa:	f891 2100 	ldrb.w	r2, [r1, #256]	@ 0x100
    xor_block(d, k);
 80050fe:	a81c      	add	r0, sp, #112	@ 0x70
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8005100:	4053      	eors	r3, r2
    xor_block(d, k);
 8005102:	991a      	ldr	r1, [sp, #104]	@ 0x68
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8005104:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
    xor_block(d, k);
 8005108:	f7ff fd85 	bl	8004c16 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800510c:	e6a1      	b.n	8004e52 <lorawan_aes_encrypt+0x2a>
        return ( uint8_t )-1;
 800510e:	20ff      	movs	r0, #255	@ 0xff
 8005110:	e72e      	b.n	8004f70 <lorawan_aes_encrypt+0x148>
 8005112:	bf00      	nop
 8005114:	0800ca31 	.word	0x0800ca31

08005118 <SecureElementGetKeyByID>:
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8005118:	4b0a      	ldr	r3, [pc, #40]	@ (8005144 <SecureElementGetKeyByID+0x2c>)
{
 800511a:	b570      	push	{r4, r5, r6, lr}
        if (SeNvm->KeyList[i].KeyID == keyID)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	2300      	movs	r3, #0
 8005120:	f102 0510 	add.w	r5, r2, #16
 8005124:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8005128:	5d2e      	ldrb	r6, [r5, r4]
 800512a:	4286      	cmp	r6, r0
 800512c:	d104      	bne.n	8005138 <SecureElementGetKeyByID+0x20>
        {
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
 800512e:	2000      	movs	r0, #0
            *keyItem = &(SeNvm->KeyList[i]);
 8005130:	3410      	adds	r4, #16
 8005132:	4422      	add	r2, r4
 8005134:	600a      	str	r2, [r1, #0]
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8005136:	bd70      	pop	{r4, r5, r6, pc}
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8005138:	3301      	adds	r3, #1
 800513a:	2b0a      	cmp	r3, #10
 800513c:	d1f2      	bne.n	8005124 <SecureElementGetKeyByID+0xc>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800513e:	2003      	movs	r0, #3
 8005140:	e7f9      	b.n	8005136 <SecureElementGetKeyByID+0x1e>
 8005142:	bf00      	nop
 8005144:	2000046c 	.word	0x2000046c

08005148 <ComputeCmac>:
{
 8005148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800514c:	b0cc      	sub	sp, #304	@ 0x130
 800514e:	4606      	mov	r6, r0
 8005150:	4617      	mov	r7, r2
 8005152:	461c      	mov	r4, r3
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8005154:	460d      	mov	r5, r1
{
 8005156:	f8dd 8148 	ldr.w	r8, [sp, #328]	@ 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800515a:	b331      	cbz	r1, 80051aa <ComputeCmac+0x62>
 800515c:	f1b8 0f00 	cmp.w	r8, #0
 8005160:	d023      	beq.n	80051aa <ComputeCmac+0x62>
    AES_CMAC_Init( aesCmacCtx );
 8005162:	a806      	add	r0, sp, #24
 8005164:	f7ff fc22 	bl	80049ac <AES_CMAC_Init>
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8005168:	4620      	mov	r0, r4
 800516a:	a901      	add	r1, sp, #4
 800516c:	f7ff ffd4 	bl	8005118 <SecureElementGetKeyByID>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8005170:	4604      	mov	r4, r0
 8005172:	b9b0      	cbnz	r0, 80051a2 <ComputeCmac+0x5a>
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8005174:	9901      	ldr	r1, [sp, #4]
 8005176:	a806      	add	r0, sp, #24
 8005178:	3101      	adds	r1, #1
 800517a:	f7ff fc27 	bl	80049cc <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800517e:	b126      	cbz	r6, 800518a <ComputeCmac+0x42>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8005180:	2210      	movs	r2, #16
 8005182:	4631      	mov	r1, r6
 8005184:	a806      	add	r0, sp, #24
 8005186:	f7ff fc26 	bl	80049d6 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800518a:	463a      	mov	r2, r7
 800518c:	4629      	mov	r1, r5
 800518e:	a806      	add	r0, sp, #24
 8005190:	f7ff fc21 	bl	80049d6 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8005194:	a906      	add	r1, sp, #24
 8005196:	a802      	add	r0, sp, #8
 8005198:	f7ff fc88 	bl	8004aac <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800519c:	9b02      	ldr	r3, [sp, #8]
 800519e:	f8c8 3000 	str.w	r3, [r8]
}
 80051a2:	4620      	mov	r0, r4
 80051a4:	b04c      	add	sp, #304	@ 0x130
 80051a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80051aa:	2402      	movs	r4, #2
 80051ac:	e7f9      	b.n	80051a2 <ComputeCmac+0x5a>
	...

080051b0 <PrintKey>:
{
 80051b0:	b510      	push	{r4, lr}
 80051b2:	b092      	sub	sp, #72	@ 0x48
    retval = SecureElementGetKeyByID(key, &keyItem);
 80051b4:	a911      	add	r1, sp, #68	@ 0x44
{
 80051b6:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 80051b8:	f7ff ffae 	bl	8005118 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 80051bc:	4602      	mov	r2, r0
 80051be:	2800      	cmp	r0, #0
 80051c0:	d132      	bne.n	8005228 <PrintKey+0x78>
        if (key == APP_KEY)
 80051c2:	2c02      	cmp	r4, #2
 80051c4:	d034      	beq.n	8005230 <PrintKey+0x80>
 80051c6:	2c03      	cmp	r4, #3
 80051c8:	d030      	beq.n	800522c <PrintKey+0x7c>
 80051ca:	2c01      	cmp	r4, #1
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 80051cc:	bf14      	ite	ne
 80051ce:	4b1a      	ldrne	r3, [pc, #104]	@ (8005238 <PrintKey+0x88>)
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 80051d0:	4b1a      	ldreq	r3, [pc, #104]	@ (800523c <PrintKey+0x8c>)
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 80051d2:	4611      	mov	r1, r2
 80051d4:	2002      	movs	r0, #2
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 80051d6:	f006 fdcf 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80051da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80051dc:	2002      	movs	r0, #2
 80051de:	7c1a      	ldrb	r2, [r3, #16]
 80051e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80051e2:	7bda      	ldrb	r2, [r3, #15]
 80051e4:	920e      	str	r2, [sp, #56]	@ 0x38
 80051e6:	7b9a      	ldrb	r2, [r3, #14]
 80051e8:	920d      	str	r2, [sp, #52]	@ 0x34
 80051ea:	7b5a      	ldrb	r2, [r3, #13]
 80051ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80051ee:	7b1a      	ldrb	r2, [r3, #12]
 80051f0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80051f2:	7ada      	ldrb	r2, [r3, #11]
 80051f4:	920a      	str	r2, [sp, #40]	@ 0x28
 80051f6:	7a9a      	ldrb	r2, [r3, #10]
 80051f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80051fa:	7a5a      	ldrb	r2, [r3, #9]
 80051fc:	9208      	str	r2, [sp, #32]
 80051fe:	7a1a      	ldrb	r2, [r3, #8]
 8005200:	9207      	str	r2, [sp, #28]
 8005202:	79da      	ldrb	r2, [r3, #7]
 8005204:	9206      	str	r2, [sp, #24]
 8005206:	799a      	ldrb	r2, [r3, #6]
 8005208:	9205      	str	r2, [sp, #20]
 800520a:	795a      	ldrb	r2, [r3, #5]
 800520c:	9204      	str	r2, [sp, #16]
 800520e:	791a      	ldrb	r2, [r3, #4]
 8005210:	9203      	str	r2, [sp, #12]
 8005212:	78da      	ldrb	r2, [r3, #3]
 8005214:	9202      	str	r2, [sp, #8]
 8005216:	789a      	ldrb	r2, [r3, #2]
 8005218:	9201      	str	r2, [sp, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	4611      	mov	r1, r2
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	4b07      	ldr	r3, [pc, #28]	@ (8005240 <PrintKey+0x90>)
 8005224:	f006 fda8 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
}
 8005228:	b012      	add	sp, #72	@ 0x48
 800522a:	bd10      	pop	{r4, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800522c:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <PrintKey+0x94>)
 800522e:	e7d0      	b.n	80051d2 <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8005230:	4601      	mov	r1, r0
 8005232:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <PrintKey+0x98>)
 8005234:	4620      	mov	r0, r4
 8005236:	e7ce      	b.n	80051d6 <PrintKey+0x26>
 8005238:	0800d1b5 	.word	0x0800d1b5
 800523c:	0800d1ca 	.word	0x0800d1ca
 8005240:	0800d209 	.word	0x0800d209
 8005244:	0800d1df 	.word	0x0800d1df
 8005248:	0800d1f4 	.word	0x0800d1f4

0800524c <SecureElementInit>:
{
 800524c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800524e:	b0b1      	sub	sp, #196	@ 0xc4
    SecureElementNvmData_t seNvmInit =
 8005250:	22b0      	movs	r2, #176	@ 0xb0
{
 8005252:	4604      	mov	r4, r0
 8005254:	460d      	mov	r5, r1
    SecureElementNvmData_t seNvmInit =
 8005256:	a804      	add	r0, sp, #16
 8005258:	2100      	movs	r1, #0
 800525a:	f007 fab7 	bl	800c7cc <memset>
 800525e:	466a      	mov	r2, sp
 8005260:	4617      	mov	r7, r2
 8005262:	4b24      	ldr	r3, [pc, #144]	@ (80052f4 <SecureElementInit+0xa8>)
 8005264:	f103 0c10 	add.w	ip, r3, #16
 8005268:	4616      	mov	r6, r2
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	3308      	adds	r3, #8
 8005270:	c603      	stmia	r6!, {r0, r1}
 8005272:	4563      	cmp	r3, ip
 8005274:	4632      	mov	r2, r6
 8005276:	d1f7      	bne.n	8005268 <SecureElementInit+0x1c>
 8005278:	2244      	movs	r2, #68	@ 0x44
 800527a:	491f      	ldr	r1, [pc, #124]	@ (80052f8 <SecureElementInit+0xac>)
 800527c:	f10d 0011 	add.w	r0, sp, #17
 8005280:	f007 fad0 	bl	800c824 <memcpy>
 8005284:	237f      	movs	r3, #127	@ 0x7f
 8005286:	f88d 3065 	strb.w	r3, [sp, #101]	@ 0x65
 800528a:	2380      	movs	r3, #128	@ 0x80
 800528c:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
 8005290:	2381      	movs	r3, #129	@ 0x81
 8005292:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
 8005296:	2382      	movs	r3, #130	@ 0x82
 8005298:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800529c:	2383      	movs	r3, #131	@ 0x83
 800529e:	f88d 30a9 	strb.w	r3, [sp, #169]	@ 0xa9
    if( nvm == NULL )
 80052a2:	b32c      	cbz	r4, 80052f0 <SecureElementInit+0xa4>
    SeNvm = nvm;
 80052a4:	4e15      	ldr	r6, [pc, #84]	@ (80052fc <SecureElementInit+0xb0>)
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 80052a6:	22c0      	movs	r2, #192	@ 0xc0
 80052a8:	4639      	mov	r1, r7
 80052aa:	4620      	mov	r0, r4
    SeNvm = nvm;
 80052ac:	6034      	str	r4, [r6, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 80052ae:	f005 fa5f 	bl	800a770 <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 80052b2:	2200      	movs	r2, #0
 80052b4:	4b12      	ldr	r3, [pc, #72]	@ (8005300 <SecureElementInit+0xb4>)
 80052b6:	4611      	mov	r1, r2
 80052b8:	2002      	movs	r0, #2
 80052ba:	f006 fd5d 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 80052be:	2000      	movs	r0, #0
 80052c0:	f7ff ff76 	bl	80051b0 <PrintKey>
    PrintKey(NWK_KEY);
 80052c4:	2001      	movs	r0, #1
 80052c6:	f7ff ff73 	bl	80051b0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 80052ca:	2200      	movs	r2, #0
 80052cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <SecureElementInit+0xb8>)
 80052ce:	4611      	mov	r1, r2
 80052d0:	2002      	movs	r0, #2
 80052d2:	f006 fd51 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 80052d6:	2003      	movs	r0, #3
 80052d8:	f7ff ff6a 	bl	80051b0 <PrintKey>
    PrintKey(NWK_S_KEY);
 80052dc:	2002      	movs	r0, #2
 80052de:	f7ff ff67 	bl	80051b0 <PrintKey>
    if (seGetUniqueId != NULL)
 80052e2:	b915      	cbnz	r5, 80052ea <SecureElementInit+0x9e>
    return SECURE_ELEMENT_SUCCESS;
 80052e4:	2000      	movs	r0, #0
}
 80052e6:	b031      	add	sp, #196	@ 0xc4
 80052e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        seGetUniqueId(SeNvm->DevEui);
 80052ea:	6830      	ldr	r0, [r6, #0]
 80052ec:	47a8      	blx	r5
 80052ee:	e7f9      	b.n	80052e4 <SecureElementInit+0x98>
        return SECURE_ELEMENT_ERROR_NPE;
 80052f0:	2002      	movs	r0, #2
 80052f2:	e7f8      	b.n	80052e6 <SecureElementInit+0x9a>
 80052f4:	0800cd31 	.word	0x0800cd31
 80052f8:	0800d285 	.word	0x0800d285
 80052fc:	2000046c 	.word	0x2000046c
 8005300:	0800d25b 	.word	0x0800d25b
 8005304:	0800d270 	.word	0x0800d270

08005308 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 8005308:	b410      	push	{r4}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800530a:	2b7e      	cmp	r3, #126	@ 0x7e
{
 800530c:	9c01      	ldr	r4, [sp, #4]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800530e:	d803      	bhi.n	8005318 <SecureElementComputeAesCmac+0x10>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8005310:	9401      	str	r4, [sp, #4]
}
 8005312:	bc10      	pop	{r4}
    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8005314:	f7ff bf18 	b.w	8005148 <ComputeCmac>
}
 8005318:	2003      	movs	r0, #3
 800531a:	bc10      	pop	{r4}
 800531c:	4770      	bx	lr

0800531e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800531e:	b530      	push	{r4, r5, lr}
 8005320:	460d      	mov	r5, r1
 8005322:	4614      	mov	r4, r2
    if( buffer == NULL )
 8005324:	4601      	mov	r1, r0
{
 8005326:	b085      	sub	sp, #20
    if( buffer == NULL )
 8005328:	b168      	cbz	r0, 8005346 <SecureElementVerifyAesCmac+0x28>
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800532a:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800532c:	aa03      	add	r2, sp, #12
 800532e:	9200      	str	r2, [sp, #0]
 8005330:	462a      	mov	r2, r5
    uint32_t              compCmac = 0;
 8005332:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8005334:	f7ff ff08 	bl	8005148 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8005338:	b918      	cbnz	r0, 8005342 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800533a:	9803      	ldr	r0, [sp, #12]
 800533c:	1b00      	subs	r0, r0, r4
 800533e:	bf18      	it	ne
 8005340:	2001      	movne	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8005342:	b005      	add	sp, #20
 8005344:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8005346:	2002      	movs	r0, #2
 8005348:	e7fb      	b.n	8005342 <SecureElementVerifyAesCmac+0x24>

0800534a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800534a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800534e:	460e      	mov	r6, r1
 8005350:	4614      	mov	r4, r2
 8005352:	4699      	mov	r9, r3
    if( buffer == NULL || encBuffer == NULL )
 8005354:	4680      	mov	r8, r0
{
 8005356:	b0bf      	sub	sp, #252	@ 0xfc
    if( buffer == NULL || encBuffer == NULL )
 8005358:	b328      	cbz	r0, 80053a6 <SecureElementAesEncrypt+0x5c>
 800535a:	b323      	cbz	r3, 80053a6 <SecureElementAesEncrypt+0x5c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800535c:	f011 010f 	ands.w	r1, r1, #15
 8005360:	d123      	bne.n	80053aa <SecureElementAesEncrypt+0x60>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8005362:	22f0      	movs	r2, #240	@ 0xf0
 8005364:	a801      	add	r0, sp, #4
 8005366:	f005 fa17 	bl	800a798 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800536a:	4620      	mov	r0, r4
 800536c:	4669      	mov	r1, sp
 800536e:	f7ff fed3 	bl	8005118 <SecureElementGetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8005372:	4604      	mov	r4, r0
 8005374:	b948      	cbnz	r0, 800538a <SecureElementAesEncrypt+0x40>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8005376:	9800      	ldr	r0, [sp, #0]
 8005378:	2110      	movs	r1, #16
 800537a:	aa01      	add	r2, sp, #4
 800537c:	3001      	adds	r0, #1
 800537e:	f7ff fccd 	bl	8004d1c <lorawan_aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 8005382:	4635      	mov	r5, r6
 8005384:	1b77      	subs	r7, r6, r5
 8005386:	b2ff      	uxtb	r7, r7
 8005388:	b91d      	cbnz	r5, 8005392 <SecureElementAesEncrypt+0x48>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800538a:	4620      	mov	r0, r4
 800538c:	b03f      	add	sp, #252	@ 0xfc
 800538e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8005392:	aa01      	add	r2, sp, #4
 8005394:	eb09 0107 	add.w	r1, r9, r7
 8005398:	eb08 0007 	add.w	r0, r8, r7
            size  = size - 16;
 800539c:	3d10      	subs	r5, #16
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800539e:	f7ff fd43 	bl	8004e28 <lorawan_aes_encrypt>
            size  = size - 16;
 80053a2:	b2ad      	uxth	r5, r5
 80053a4:	e7ee      	b.n	8005384 <SecureElementAesEncrypt+0x3a>
        return SECURE_ELEMENT_ERROR_NPE;
 80053a6:	2402      	movs	r4, #2
 80053a8:	e7ef      	b.n	800538a <SecureElementAesEncrypt+0x40>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80053aa:	2405      	movs	r4, #5
 80053ac:	e7ed      	b.n	800538a <SecureElementAesEncrypt+0x40>
	...

080053b0 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 80053b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 80053b2:	2300      	movs	r3, #0
 80053b4:	4e17      	ldr	r6, [pc, #92]	@ (8005414 <SecureElementSetKey.part.0+0x64>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 80053b6:	4602      	mov	r2, r0
        if( SeNvm->KeyList[i].KeyID == keyID )
 80053b8:	6835      	ldr	r5, [r6, #0]
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 80053ba:	4608      	mov	r0, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 80053bc:	f105 0110 	add.w	r1, r5, #16
 80053c0:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 80053c4:	5d0c      	ldrb	r4, [r1, r4]
 80053c6:	3301      	adds	r3, #1
 80053c8:	4294      	cmp	r4, r2
 80053ca:	d11e      	bne.n	800540a <SecureElementSetKey.part.0+0x5a>
            if ( keyID == MC_KEY_0 )
 80053cc:	2a80      	cmp	r2, #128	@ 0x80
 80053ce:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 80053d2:	d113      	bne.n	80053fc <SecureElementSetKey.part.0+0x4c>
                uint8_t               decryptedKey[16] = { 0 };
 80053d4:	2300      	movs	r3, #0
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80053d6:	227f      	movs	r2, #127	@ 0x7f
 80053d8:	2110      	movs	r1, #16
                uint8_t               decryptedKey[16] = { 0 };
 80053da:	e9cd 3300 	strd	r3, r3, [sp]
 80053de:	e9cd 3302 	strd	r3, r3, [sp, #8]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80053e2:	466b      	mov	r3, sp
 80053e4:	f7ff ffb1 	bl	800534a <SecureElementAesEncrypt>
 80053e8:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80053ea:	6830      	ldr	r0, [r6, #0]
 80053ec:	2210      	movs	r2, #16
 80053ee:	4669      	mov	r1, sp
 80053f0:	4420      	add	r0, r4
 80053f2:	f005 f9bd 	bl	800a770 <memcpy1>
}
 80053f6:	4628      	mov	r0, r5
 80053f8:	b004      	add	sp, #16
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80053fc:	4601      	mov	r1, r0
 80053fe:	2210      	movs	r2, #16
 8005400:	1928      	adds	r0, r5, r4
 8005402:	f005 f9b5 	bl	800a770 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8005406:	2500      	movs	r5, #0
 8005408:	e7f5      	b.n	80053f6 <SecureElementSetKey.part.0+0x46>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800540a:	2b0a      	cmp	r3, #10
 800540c:	d1d8      	bne.n	80053c0 <SecureElementSetKey.part.0+0x10>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800540e:	2503      	movs	r5, #3
 8005410:	e7f1      	b.n	80053f6 <SecureElementSetKey.part.0+0x46>
 8005412:	bf00      	nop
 8005414:	2000046c 	.word	0x2000046c

08005418 <SecureElementSetKey>:
    if( key == NULL )
 8005418:	b109      	cbz	r1, 800541e <SecureElementSetKey+0x6>
 800541a:	f7ff bfc9 	b.w	80053b0 <SecureElementSetKey.part.0>
}
 800541e:	2002      	movs	r0, #2
 8005420:	4770      	bx	lr

08005422 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8005422:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005424:	4614      	mov	r4, r2
    if( input == NULL )
 8005426:	b1a0      	cbz	r0, 8005452 <SecureElementDeriveAndStoreKey+0x30>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8005428:	2a7f      	cmp	r2, #127	@ 0x7f
 800542a:	d101      	bne.n	8005430 <SecureElementDeriveAndStoreKey+0xe>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800542c:	2904      	cmp	r1, #4
 800542e:	d112      	bne.n	8005456 <SecureElementDeriveAndStoreKey+0x34>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8005430:	2300      	movs	r3, #0
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8005432:	460a      	mov	r2, r1
    uint8_t key[16] = { 0 };
 8005434:	e9cd 3300 	strd	r3, r3, [sp]
 8005438:	e9cd 3302 	strd	r3, r3, [sp, #8]
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800543c:	2110      	movs	r1, #16
 800543e:	466b      	mov	r3, sp
 8005440:	f7ff ff83 	bl	800534a <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8005444:	b918      	cbnz	r0, 800544e <SecureElementDeriveAndStoreKey+0x2c>
    if( key == NULL )
 8005446:	4669      	mov	r1, sp
 8005448:	4620      	mov	r0, r4
 800544a:	f7ff ffb1 	bl	80053b0 <SecureElementSetKey.part.0>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800544e:	b004      	add	sp, #16
 8005450:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8005452:	2002      	movs	r0, #2
 8005454:	e7fb      	b.n	800544e <SecureElementDeriveAndStoreKey+0x2c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8005456:	2003      	movs	r0, #3
 8005458:	e7f9      	b.n	800544e <SecureElementDeriveAndStoreKey+0x2c>

0800545a <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800545a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800545c:	461e      	mov	r6, r3
{
 800545e:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
 8005462:	f89d 4018 	ldrb.w	r4, [sp, #24]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8005466:	b36b      	cbz	r3, 80054c4 <SecureElementProcessJoinAccept+0x6a>
 8005468:	b365      	cbz	r5, 80054c4 <SecureElementProcessJoinAccept+0x6a>
 800546a:	b35f      	cbz	r7, 80054c4 <SecureElementProcessJoinAccept+0x6a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800546c:	2c21      	cmp	r4, #33	@ 0x21
 800546e:	d82b      	bhi.n	80054c8 <SecureElementProcessJoinAccept+0x6e>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8005470:	4619      	mov	r1, r3
 8005472:	4622      	mov	r2, r4
 8005474:	4628      	mov	r0, r5
 8005476:	f005 f97b 	bl	800a770 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800547a:	2201      	movs	r2, #1
 800547c:	1e61      	subs	r1, r4, #1
 800547e:	1c6b      	adds	r3, r5, #1
 8005480:	b289      	uxth	r1, r1
 8005482:	18b0      	adds	r0, r6, r2
 8005484:	f7ff ff61 	bl	800534a <SecureElementAesEncrypt>
 8005488:	bb00      	cbnz	r0, 80054cc <SecureElementProcessJoinAccept+0x72>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800548a:	7aeb      	ldrb	r3, [r5, #11]
 800548c:	09db      	lsrs	r3, r3, #7
 800548e:	703b      	strb	r3, [r7, #0]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 8005490:	b9f3      	cbnz	r3, 80054d0 <SecureElementProcessJoinAccept+0x76>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8005492:	192b      	adds	r3, r5, r4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8005494:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8005498:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800549c:	0612      	lsls	r2, r2, #24
 800549e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 80054a2:	f813 1c04 	ldrb.w	r1, [r3, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 80054a6:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 80054aa:	430a      	orrs	r2, r1
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80054ac:	1f21      	subs	r1, r4, #4
 80054ae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80054b2:	2301      	movs	r3, #1
 80054b4:	4628      	mov	r0, r5
 80054b6:	b289      	uxth	r1, r1
 80054b8:	f7ff ff31 	bl	800531e <SecureElementVerifyAesCmac>
 80054bc:	3800      	subs	r0, #0
 80054be:	bf18      	it	ne
 80054c0:	2001      	movne	r0, #1
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 80054c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80054c4:	2002      	movs	r0, #2
 80054c6:	e7fc      	b.n	80054c2 <SecureElementProcessJoinAccept+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80054c8:	2005      	movs	r0, #5
 80054ca:	e7fa      	b.n	80054c2 <SecureElementProcessJoinAccept+0x68>
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 80054cc:	2007      	movs	r0, #7
 80054ce:	e7f8      	b.n	80054c2 <SecureElementProcessJoinAccept+0x68>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80054d0:	2004      	movs	r0, #4
 80054d2:	e7f6      	b.n	80054c2 <SecureElementProcessJoinAccept+0x68>

080054d4 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 80054d4:	b510      	push	{r4, lr}
    if( randomNum == NULL )
 80054d6:	4604      	mov	r4, r0
 80054d8:	b128      	cbz	r0, 80054e6 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 80054da:	4b04      	ldr	r3, [pc, #16]	@ (80054ec <SecureElementRandomNumber+0x18>)
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	4798      	blx	r3
 80054e0:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 80054e2:	2000      	movs	r0, #0
}
 80054e4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80054e6:	2002      	movs	r0, #2
 80054e8:	e7fc      	b.n	80054e4 <SecureElementRandomNumber+0x10>
 80054ea:	bf00      	nop
 80054ec:	0800cec4 	.word	0x0800cec4

080054f0 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 80054f0:	4601      	mov	r1, r0
{
 80054f2:	b508      	push	{r3, lr}
    if( devEui == NULL )
 80054f4:	b130      	cbz	r0, 8005504 <SecureElementSetDevEui+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 80054f6:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <SecureElementSetDevEui+0x18>)
 80054f8:	2208      	movs	r2, #8
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	f005 f938 	bl	800a770 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8005500:	2000      	movs	r0, #0
}
 8005502:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8005504:	2002      	movs	r0, #2
 8005506:	e7fc      	b.n	8005502 <SecureElementSetDevEui+0x12>
 8005508:	2000046c 	.word	0x2000046c

0800550c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800550c:	4b01      	ldr	r3, [pc, #4]	@ (8005514 <SecureElementGetDevEui+0x8>)
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000046c 	.word	0x2000046c

08005518 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8005518:	4601      	mov	r1, r0
{
 800551a:	b508      	push	{r3, lr}
    if( joinEui == NULL )
 800551c:	b138      	cbz	r0, 800552e <SecureElementSetJoinEui+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800551e:	2208      	movs	r2, #8
 8005520:	4b04      	ldr	r3, [pc, #16]	@ (8005534 <SecureElementSetJoinEui+0x1c>)
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	4410      	add	r0, r2
 8005526:	f005 f923 	bl	800a770 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800552a:	2000      	movs	r0, #0
}
 800552c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800552e:	2002      	movs	r0, #2
 8005530:	e7fc      	b.n	800552c <SecureElementSetJoinEui+0x14>
 8005532:	bf00      	nop
 8005534:	2000046c 	.word	0x2000046c

08005538 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8005538:	4b01      	ldr	r3, [pc, #4]	@ (8005540 <SecureElementGetJoinEui+0x8>)
 800553a:	6818      	ldr	r0, [r3, #0]
}
 800553c:	3008      	adds	r0, #8
 800553e:	4770      	bx	lr
 8005540:	2000046c 	.word	0x2000046c

08005544 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8005544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8005546:	230a      	movs	r3, #10

    status = LoRaMacMlmeRequest( &mlmeReq );
 8005548:	a801      	add	r0, sp, #4
    mlmeReq.Type = MLME_DEVICE_TIME;
 800554a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800554e:	f002 fe33 	bl	80081b8 <LoRaMacMlmeRequest>

    if( status == LORAMAC_STATUS_OK )
 8005552:	3800      	subs	r0, #0
 8005554:	bf18      	it	ne
 8005556:	2001      	movne	r0, #1
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
    }
}
 8005558:	4240      	negs	r0, r0
 800555a:	b007      	add	sp, #28
 800555c:	f85d fb04 	ldr.w	pc, [sp], #4

08005560 <McpsConfirm>:
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    TxParams.IsMcpsConfirm = 1;
 8005560:	2301      	movs	r3, #1
{
 8005562:	b570      	push	{r4, r5, r6, lr}
    TxParams.IsMcpsConfirm = 1;
 8005564:	4c10      	ldr	r4, [pc, #64]	@ (80055a8 <McpsConfirm+0x48>)
{
 8005566:	4605      	mov	r5, r0
    TxParams.IsMcpsConfirm = 1;
 8005568:	7023      	strb	r3, [r4, #0]
    TxParams.Status = mcpsConfirm->Status;
 800556a:	7843      	ldrb	r3, [r0, #1]
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800556c:	2600      	movs	r6, #0
    TxParams.Status = mcpsConfirm->Status;
 800556e:	7063      	strb	r3, [r4, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8005570:	7883      	ldrb	r3, [r0, #2]
 8005572:	7123      	strb	r3, [r4, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8005574:	68c3      	ldr	r3, [r0, #12]
 8005576:	60a3      	str	r3, [r4, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8005578:	78c3      	ldrb	r3, [r0, #3]
 800557a:	7523      	strb	r3, [r4, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800557c:	6903      	ldr	r3, [r0, #16]
 800557e:	7563      	strb	r3, [r4, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8005580:	7903      	ldrb	r3, [r0, #4]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8005582:	4620      	mov	r0, r4
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8005584:	70e3      	strb	r3, [r4, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8005586:	69a3      	ldr	r3, [r4, #24]
 8005588:	341c      	adds	r4, #28
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	4798      	blx	r3
    {
        if( LmHandlerPackages[i] != NULL )
 800558e:	f854 3b04 	ldr.w	r3, [r4], #4
 8005592:	b11b      	cbz	r3, 800559c <McpsConfirm+0x3c>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	b10b      	cbz	r3, 800559c <McpsConfirm+0x3c>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8005598:	4628      	mov	r0, r5
 800559a:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800559c:	3601      	adds	r6, #1
 800559e:	b2f3      	uxtb	r3, r6
 80055a0:	2b05      	cmp	r3, #5
 80055a2:	b276      	sxtb	r6, r6
 80055a4:	d1f3      	bne.n	800558e <McpsConfirm+0x2e>
}
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
 80055a8:	20000470 	.word	0x20000470

080055ac <LmHandlerConfigure>:
{
 80055ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80055b0:	4e61      	ldr	r6, [pc, #388]	@ (8005738 <LmHandlerConfigure+0x18c>)
{
 80055b2:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80055b4:	2210      	movs	r2, #16
{
 80055b6:	b09e      	sub	sp, #120	@ 0x78
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80055b8:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 80055bc:	f006 fcf0 	bl	800bfa0 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 80055c0:	f7fb fe6c 	bl	800129c <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80055c4:	f04f 0801 	mov.w	r8, #1
 80055c8:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 80055cc:	6843      	ldr	r3, [r0, #4]
 80055ce:	fa08 f102 	lsl.w	r1, r8, r2
 80055d2:	4019      	ands	r1, r3
 80055d4:	d00a      	beq.n	80055ec <LmHandlerConfigure+0x40>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80055d6:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 80055da:	f106 0054 	add.w	r0, r6, #84	@ 0x54
 80055de:	f002 f8e7 	bl	80077b0 <LoRaMacInitialization>
 80055e2:	4605      	mov	r5, r0
 80055e4:	b140      	cbz	r0, 80055f8 <LmHandlerConfigure+0x4c>
            return LORAMAC_HANDLER_ERROR;
 80055e6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ea:	e0a2      	b.n	8005732 <LmHandlerConfigure+0x186>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80055ec:	4642      	mov	r2, r8
 80055ee:	4608      	mov	r0, r1
 80055f0:	4b52      	ldr	r3, [pc, #328]	@ (800573c <LmHandlerConfigure+0x190>)
 80055f2:	f006 fbc1 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 80055f6:	e7fe      	b.n	80055f6 <LmHandlerConfigure+0x4a>
    nbNvmData = NvmDataMgmtRestore( );
 80055f8:	f000 fcef 	bl	8005fda <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 80055fc:	3800      	subs	r0, #0
 80055fe:	bf18      	it	ne
 8005600:	2001      	movne	r0, #1
    mibReq.Type = MIB_DEV_EUI;
 8005602:	2702      	movs	r7, #2
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8005604:	4c4e      	ldr	r4, [pc, #312]	@ (8005740 <LmHandlerConfigure+0x194>)
    if( nbNvmData > 0 )
 8005606:	f886 0064 	strb.w	r0, [r6, #100]	@ 0x64
    LoRaMacMibGetRequestConfirm( &mibReq );
 800560a:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_DEV_EUI;
 800560c:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
    LoRaMacMibGetRequestConfirm( &mibReq );
 8005610:	f002 faf0 	bl	8007bf4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8005614:	2208      	movs	r2, #8
 8005616:	4620      	mov	r0, r4
 8005618:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800561a:	f005 f8a9 	bl	800a770 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 800561e:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm( &mibReq );
 8005620:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_JOIN_EUI;
 8005622:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    LoRaMacMibGetRequestConfirm( &mibReq );
 8005626:	f002 fae5 	bl	8007bf4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800562a:	2208      	movs	r2, #8
 800562c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800562e:	18a0      	adds	r0, r4, r2
 8005630:	f005 f89e 	bl	800a770 <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8005634:	69b3      	ldr	r3, [r6, #24]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4798      	blx	r3
    mibReq.Type = MIB_DEV_ADDR;
 800563a:	2306      	movs	r3, #6
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800563c:	6160      	str	r0, [r4, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800563e:	900d      	str	r0, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm(&mibReq);
 8005640:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_DEV_ADDR;
 8005642:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 8005646:	f002 fb91 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800564a:	79e3      	ldrb	r3, [r4, #7]
 800564c:	462a      	mov	r2, r5
 800564e:	9307      	str	r3, [sp, #28]
 8005650:	79a3      	ldrb	r3, [r4, #6]
 8005652:	4629      	mov	r1, r5
 8005654:	9306      	str	r3, [sp, #24]
 8005656:	7963      	ldrb	r3, [r4, #5]
 8005658:	4638      	mov	r0, r7
 800565a:	9305      	str	r3, [sp, #20]
 800565c:	7923      	ldrb	r3, [r4, #4]
 800565e:	9304      	str	r3, [sp, #16]
 8005660:	78e3      	ldrb	r3, [r4, #3]
 8005662:	9303      	str	r3, [sp, #12]
 8005664:	78a3      	ldrb	r3, [r4, #2]
 8005666:	9302      	str	r3, [sp, #8]
 8005668:	7863      	ldrb	r3, [r4, #1]
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	7823      	ldrb	r3, [r4, #0]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4b34      	ldr	r3, [pc, #208]	@ (8005744 <LmHandlerConfigure+0x198>)
 8005672:	f006 fb81 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8005676:	7be3      	ldrb	r3, [r4, #15]
 8005678:	462a      	mov	r2, r5
 800567a:	9307      	str	r3, [sp, #28]
 800567c:	7ba3      	ldrb	r3, [r4, #14]
 800567e:	4629      	mov	r1, r5
 8005680:	9306      	str	r3, [sp, #24]
 8005682:	7b63      	ldrb	r3, [r4, #13]
 8005684:	4638      	mov	r0, r7
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	7b23      	ldrb	r3, [r4, #12]
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	7ae3      	ldrb	r3, [r4, #11]
 800568e:	9303      	str	r3, [sp, #12]
 8005690:	7aa3      	ldrb	r3, [r4, #10]
 8005692:	9302      	str	r3, [sp, #8]
 8005694:	7a63      	ldrb	r3, [r4, #9]
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	7a23      	ldrb	r3, [r4, #8]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	4b2a      	ldr	r3, [pc, #168]	@ (8005748 <LmHandlerConfigure+0x19c>)
 800569e:	f006 fb6b 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 80056a2:	7d23      	ldrb	r3, [r4, #20]
 80056a4:	462a      	mov	r2, r5
 80056a6:	9303      	str	r3, [sp, #12]
 80056a8:	7d63      	ldrb	r3, [r4, #21]
 80056aa:	4629      	mov	r1, r5
 80056ac:	9302      	str	r3, [sp, #8]
 80056ae:	7da3      	ldrb	r3, [r4, #22]
 80056b0:	4638      	mov	r0, r7
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	7de3      	ldrb	r3, [r4, #23]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80056b6:	240f      	movs	r4, #15
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	4b24      	ldr	r3, [pc, #144]	@ (800574c <LmHandlerConfigure+0x1a0>)
 80056bc:	f006 fb5c 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacMibSetRequestConfirm(&mibReq);
 80056c0:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80056c2:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80056c6:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm(&mibReq);
 80056ca:	f002 fb4f 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 80056ce:	2305      	movs	r3, #5
    LoRaMacMibSetRequestConfirm(&mibReq);
 80056d0:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_NET_ID;
 80056d2:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80056d6:	950d      	str	r5, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm(&mibReq);
 80056d8:	f002 fb48 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80056dc:	2310      	movs	r3, #16
    LoRaMacMibSetRequestConfirm( &mibReq );
 80056de:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80056e0:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80056e4:	f88d 5034 	strb.w	r5, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm( &mibReq );
 80056e8:	f002 fb40 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80056ec:	2304      	movs	r3, #4
 80056ee:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80056f2:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
    LoRaMacMibSetRequestConfirm( &mibReq );
 80056f6:	a80c      	add	r0, sp, #48	@ 0x30
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80056f8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
    LoRaMacMibSetRequestConfirm( &mibReq );
 80056fc:	f002 fb36 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8005700:	a90a      	add	r1, sp, #40	@ 0x28
 8005702:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8005706:	f88d 4028 	strb.w	r4, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800570a:	f003 febf 	bl	800948c <RegionGetPhyParam>
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800570e:	2322      	movs	r3, #34	@ 0x22
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8005710:	3800      	subs	r0, #0
 8005712:	bf18      	it	ne
 8005714:	2001      	movne	r0, #1
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8005716:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800571a:	2314      	movs	r3, #20
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800571c:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8005720:	a815      	add	r0, sp, #84	@ 0x54
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8005722:	9316      	str	r3, [sp, #88]	@ 0x58
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8005724:	f002 fb22 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8005728:	f896 0035 	ldrb.w	r0, [r6, #53]	@ 0x35
 800572c:	f002 ffc8 	bl	80086c0 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8005730:	4628      	mov	r0, r5
}
 8005732:	b01e      	add	sp, #120	@ 0x78
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005738:	20000470 	.word	0x20000470
 800573c:	0800d2ca 	.word	0x0800d2ca
 8005740:	20000058 	.word	0x20000058
 8005744:	0800d313 	.word	0x0800d313
 8005748:	0800d34d 	.word	0x0800d34d
 800574c:	0800d387 	.word	0x0800d387

08005750 <LmHandlerProcess>:
{
 8005750:	b538      	push	{r3, r4, r5, lr}
    LoRaMacProcess( );
 8005752:	f001 fb77 	bl	8006e44 <LoRaMacProcess>
 8005756:	2405      	movs	r4, #5
 8005758:	4d0a      	ldr	r5, [pc, #40]	@ (8005784 <LmHandlerProcess+0x34>)

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800575a:	f855 3b04 	ldr.w	r3, [r5], #4
 800575e:	b14b      	cbz	r3, 8005774 <LmHandlerProcess+0x24>
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	b13a      	cbz	r2, 8005774 <LmHandlerProcess+0x24>
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	b12b      	cbz	r3, 8005774 <LmHandlerProcess+0x24>
        return LmHandlerPackages[id]->IsInitialized( );
 8005768:	4798      	blx	r3
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800576a:	b118      	cbz	r0, 8005774 <LmHandlerProcess+0x24>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 800576c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8005774:	3c01      	subs	r4, #1
 8005776:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800577a:	d1ee      	bne.n	800575a <LmHandlerProcess+0xa>
}
 800577c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    NvmDataMgmtStore( );
 8005780:	f000 bc29 	b.w	8005fd6 <NvmDataMgmtStore>
 8005784:	2000048c 	.word	0x2000048c

08005788 <LmHandlerJoinStatus>:
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8005788:	2301      	movs	r3, #1
{
 800578a:	b500      	push	{lr}
 800578c:	b08b      	sub	sp, #44	@ 0x2c
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800578e:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8005790:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8005794:	f002 fa2e 	bl	8007bf4 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8005798:	b938      	cbnz	r0, 80057aa <LmHandlerJoinStatus+0x22>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800579a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800579e:	3800      	subs	r0, #0
 80057a0:	bf18      	it	ne
 80057a2:	2001      	movne	r0, #1
}
 80057a4:	b00b      	add	sp, #44	@ 0x2c
 80057a6:	f85d fb04 	ldr.w	pc, [sp], #4
            return LORAMAC_HANDLER_RESET;
 80057aa:	2000      	movs	r0, #0
 80057ac:	e7fa      	b.n	80057a4 <LmHandlerJoinStatus+0x1c>
	...

080057b0 <LmHandlerRequestClass>:
{
 80057b0:	b530      	push	{r4, r5, lr}
 80057b2:	b08d      	sub	sp, #52	@ 0x34
 80057b4:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 80057b6:	f001 fb37 	bl	8006e28 <LoRaMacIsBusy>
 80057ba:	4605      	mov	r5, r0
 80057bc:	2800      	cmp	r0, #0
 80057be:	d147      	bne.n	8005850 <LmHandlerRequestClass+0xa0>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80057c0:	f7ff ffe2 	bl	8005788 <LmHandlerJoinStatus>
 80057c4:	2801      	cmp	r0, #1
 80057c6:	d146      	bne.n	8005856 <LmHandlerRequestClass+0xa6>
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80057c8:	a803      	add	r0, sp, #12
    mibReq.Type = MIB_DEVICE_CLASS;
 80057ca:	f88d 500c 	strb.w	r5, [sp, #12]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80057ce:	f002 fa11 	bl	8007bf4 <LoRaMacMibGetRequestConfirm>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d139      	bne.n	800584a <LmHandlerRequestClass+0x9a>
    currentClass = mibReq.Param.Class;
 80057d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    if( currentClass != newClass )
 80057da:	42a3      	cmp	r3, r4
 80057dc:	d004      	beq.n	80057e8 <LmHandlerRequestClass+0x38>
        switch( newClass )
 80057de:	2c01      	cmp	r4, #1
 80057e0:	d033      	beq.n	800584a <LmHandlerRequestClass+0x9a>
 80057e2:	2c02      	cmp	r4, #2
 80057e4:	d01b      	beq.n	800581e <LmHandlerRequestClass+0x6e>
 80057e6:	b114      	cbz	r4, 80057ee <LmHandlerRequestClass+0x3e>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80057e8:	2000      	movs	r0, #0
}
 80057ea:	b00d      	add	sp, #52	@ 0x34
 80057ec:	bd30      	pop	{r4, r5, pc}
                if( currentClass != CLASS_A )
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0fa      	beq.n	80057e8 <LmHandlerRequestClass+0x38>
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80057f2:	a803      	add	r0, sp, #12
                    mibReq.Param.Class = newClass;
 80057f4:	f88d 4010 	strb.w	r4, [sp, #16]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80057f8:	f002 fab8 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
 80057fc:	4602      	mov	r2, r0
 80057fe:	bb20      	cbnz	r0, 800584a <LmHandlerRequestClass+0x9a>
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8005800:	2341      	movs	r3, #65	@ 0x41
 8005802:	4601      	mov	r1, r0
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2002      	movs	r0, #2
 8005808:	4b14      	ldr	r3, [pc, #80]	@ (800585c <LmHandlerRequestClass+0xac>)
 800580a:	f006 fab5 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800580e:	4b14      	ldr	r3, [pc, #80]	@ (8005860 <LmHandlerRequestClass+0xb0>)
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0e7      	beq.n	80057e8 <LmHandlerRequestClass+0x38>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8005818:	2000      	movs	r0, #0
                            LmHandlerCallbacks->OnClassChange( newClass );
 800581a:	4798      	blx	r3
 800581c:	e7e4      	b.n	80057e8 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 800581e:	b9a3      	cbnz	r3, 800584a <LmHandlerRequestClass+0x9a>
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8005820:	a803      	add	r0, sp, #12
                    mibReq.Param.Class = newClass;
 8005822:	f88d 4010 	strb.w	r4, [sp, #16]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8005826:	f002 faa1 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
 800582a:	4602      	mov	r2, r0
 800582c:	b968      	cbnz	r0, 800584a <LmHandlerRequestClass+0x9a>
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800582e:	2343      	movs	r3, #67	@ 0x43
 8005830:	4601      	mov	r1, r0
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	4620      	mov	r0, r4
 8005836:	4b09      	ldr	r3, [pc, #36]	@ (800585c <LmHandlerRequestClass+0xac>)
 8005838:	f006 fa9e 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800583c:	4b08      	ldr	r3, [pc, #32]	@ (8005860 <LmHandlerRequestClass+0xb0>)
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0d0      	beq.n	80057e8 <LmHandlerRequestClass+0x38>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8005846:	4620      	mov	r0, r4
 8005848:	e7e7      	b.n	800581a <LmHandlerRequestClass+0x6a>
        return LORAMAC_HANDLER_ERROR;
 800584a:	f04f 30ff 	mov.w	r0, #4294967295
 800584e:	e7cc      	b.n	80057ea <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8005850:	f06f 0001 	mvn.w	r0, #1
 8005854:	e7c9      	b.n	80057ea <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8005856:	f06f 0002 	mvn.w	r0, #2
 800585a:	e7c6      	b.n	80057ea <LmHandlerRequestClass+0x3a>
 800585c:	0800d3ad 	.word	0x0800d3ad
 8005860:	20000470 	.word	0x20000470

08005864 <LmHandlerJoin>:
{
 8005864:	b530      	push	{r4, r5, lr}
    if ( mode == ACTIVATION_TYPE_OTAA )
 8005866:	2802      	cmp	r0, #2
 8005868:	f04f 0501 	mov.w	r5, #1
 800586c:	4b1a      	ldr	r3, [pc, #104]	@ (80058d8 <LmHandlerJoin+0x74>)
 800586e:	4c1b      	ldr	r4, [pc, #108]	@ (80058dc <LmHandlerJoin+0x78>)
{
 8005870:	b08b      	sub	sp, #44	@ 0x2c
    if ( mode == ACTIVATION_TYPE_OTAA )
 8005872:	d10d      	bne.n	8005890 <LmHandlerJoin+0x2c>
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8005874:	7698      	strb	r0, [r3, #26]
        LoRaMacStart();
 8005876:	f002 f95b 	bl	8007b30 <LoRaMacStart>
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800587a:	f894 3033 	ldrb.w	r3, [r4, #51]	@ 0x33
        LoRaMacMlmeRequest( &mlmeReq );
 800587e:	a801      	add	r0, sp, #4
        mlmeReq.Type = MLME_JOIN;
 8005880:	f88d 5004 	strb.w	r5, [sp, #4]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8005884:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMlmeRequest( &mlmeReq );
 8005888:	f002 fc96 	bl	80081b8 <LoRaMacMlmeRequest>
}
 800588c:	b00b      	add	sp, #44	@ 0x2c
 800588e:	bd30      	pop	{r4, r5, pc}
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8005890:	f894 2033 	ldrb.w	r2, [r4, #51]	@ 0x33
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8005894:	769d      	strb	r5, [r3, #26]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8005896:	761a      	strb	r2, [r3, #24]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8005898:	2200      	movs	r2, #0
 800589a:	765a      	strb	r2, [r3, #25]
        if (CtxRestoreDone == false)
 800589c:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 80058a0:	b93b      	cbnz	r3, 80058b2 <LmHandlerJoin+0x4e>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80058a2:	2327      	movs	r3, #39	@ 0x27
 80058a4:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80058a8:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <LmHandlerJoin+0x7c>)
            LoRaMacMibSetRequestConfirm(&mibReq);
 80058aa:	a801      	add	r0, sp, #4
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80058ac:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80058ae:	f002 fa5d 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 80058b2:	f002 f93d 	bl	8007b30 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80058b6:	2301      	movs	r3, #1
        LoRaMacMibSetRequestConfirm( &mibReq );
 80058b8:	a801      	add	r0, sp, #4
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80058ba:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80058be:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80058c2:	f002 fa53 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80058c6:	69a3      	ldr	r3, [r4, #24]
 80058c8:	4806      	ldr	r0, [pc, #24]	@ (80058e4 <LmHandlerJoin+0x80>)
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80058ce:	f894 0031 	ldrb.w	r0, [r4, #49]	@ 0x31
 80058d2:	f7ff ff6d 	bl	80057b0 <LmHandlerRequestClass>
}
 80058d6:	e7d9      	b.n	800588c <LmHandlerJoin+0x28>
 80058d8:	20000058 	.word	0x20000058
 80058dc:	20000470 	.word	0x20000470
 80058e0:	01000300 	.word	0x01000300
 80058e4:	20000070 	.word	0x20000070

080058e8 <LmHandlerSend>:
{
 80058e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	4604      	mov	r4, r0
 80058f0:	460e      	mov	r6, r1
 80058f2:	4617      	mov	r7, r2
 80058f4:	4698      	mov	r8, r3
    if (LoRaMacIsBusy() == true)
 80058f6:	f001 fa97 	bl	8006e28 <LoRaMacIsBusy>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d179      	bne.n	80059f2 <LmHandlerSend+0x10a>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80058fe:	f7ff ff43 	bl	8005788 <LmHandlerJoinStatus>
 8005902:	2801      	cmp	r0, #1
 8005904:	d008      	beq.n	8005918 <LmHandlerSend+0x30>
        LmHandlerJoin(JoinParams.Mode);
 8005906:	4b42      	ldr	r3, [pc, #264]	@ (8005a10 <LmHandlerSend+0x128>)
 8005908:	7e98      	ldrb	r0, [r3, #26]
 800590a:	f7ff ffab 	bl	8005864 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800590e:	f06f 0002 	mvn.w	r0, #2
}
 8005912:	b006      	add	sp, #24
 8005914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8005918:	4d3e      	ldr	r5, [pc, #248]	@ (8005a14 <LmHandlerSend+0x12c>)
 800591a:	69eb      	ldr	r3, [r5, #28]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	4798      	blx	r3
 8005920:	b130      	cbz	r0, 8005930 <LmHandlerSend+0x48>
 8005922:	69ea      	ldr	r2, [r5, #28]
 8005924:	7823      	ldrb	r3, [r4, #0]
 8005926:	7812      	ldrb	r2, [r2, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <LmHandlerSend+0x48>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d169      	bne.n	8005a04 <LmHandlerSend+0x11c>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8005930:	f895 3033 	ldrb.w	r3, [r5, #51]	@ 0x33
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8005934:	4669      	mov	r1, sp
 8005936:	7860      	ldrb	r0, [r4, #1]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8005938:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800593c:	f002 f900 	bl	8007b40 <LoRaMacQueryTxPossible>
 8005940:	2800      	cmp	r0, #0
 8005942:	d03f      	beq.n	80059c4 <LmHandlerSend+0xdc>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8005944:	2200      	movs	r2, #0
 8005946:	70aa      	strb	r2, [r5, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8005948:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800594c:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800594e:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 8005952:	4b31      	ldr	r3, [pc, #196]	@ (8005a18 <LmHandlerSend+0x130>)
 8005954:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005958:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800595c:	f895 3033 	ldrb.w	r3, [r5, #51]	@ 0x33
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8005960:	4641      	mov	r1, r8
 8005962:	a801      	add	r0, sp, #4
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8005964:	712b      	strb	r3, [r5, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8005966:	f002 fd17 	bl	8008398 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 800596a:	b10f      	cbz	r7, 8005970 <LmHandlerSend+0x88>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800596c:	9b05      	ldr	r3, [sp, #20]
 800596e:	603b      	str	r3, [r7, #0]
    switch (status)
 8005970:	2811      	cmp	r0, #17
 8005972:	d844      	bhi.n	80059fe <LmHandlerSend+0x116>
 8005974:	a301      	add	r3, pc, #4	@ (adr r3, 800597c <LmHandlerSend+0x94>)
 8005976:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 800597a:	bf00      	nop
 800597c:	08005a0b 	.word	0x08005a0b
 8005980:	080059f3 	.word	0x080059f3
 8005984:	080059ff 	.word	0x080059ff
 8005988:	080059ff 	.word	0x080059ff
 800598c:	080059ff 	.word	0x080059ff
 8005990:	080059ff 	.word	0x080059ff
 8005994:	080059ff 	.word	0x080059ff
 8005998:	0800590f 	.word	0x0800590f
 800599c:	080059ff 	.word	0x080059ff
 80059a0:	080059ff 	.word	0x080059ff
 80059a4:	080059ff 	.word	0x080059ff
 80059a8:	080059f9 	.word	0x080059f9
 80059ac:	080059ff 	.word	0x080059ff
 80059b0:	080059ff 	.word	0x080059ff
 80059b4:	080059f3 	.word	0x080059f3
 80059b8:	080059f3 	.word	0x080059f3
 80059bc:	080059f3 	.word	0x080059f3
 80059c0:	080059ed 	.word	0x080059ed
        TxParams.MsgType = isTxConfirmed;
 80059c4:	70ae      	strb	r6, [r5, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80059c6:	7823      	ldrb	r3, [r4, #0]
 80059c8:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80059cc:	7863      	ldrb	r3, [r4, #1]
 80059ce:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80059d2:	6863      	ldr	r3, [r4, #4]
 80059d4:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 80059d6:	b916      	cbnz	r6, 80059de <LmHandlerSend+0xf6>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 80059d8:	f88d 6004 	strb.w	r6, [sp, #4]
 80059dc:	e7b9      	b.n	8005952 <LmHandlerSend+0x6a>
            mcpsReq.Type = MCPS_CONFIRMED;
 80059de:	2301      	movs	r3, #1
 80059e0:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80059e4:	2308      	movs	r3, #8
 80059e6:	f88d 3013 	strb.w	r3, [sp, #19]
 80059ea:	e7b2      	b.n	8005952 <LmHandlerSend+0x6a>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80059ec:	f06f 0004 	mvn.w	r0, #4
 80059f0:	e78f      	b.n	8005912 <LmHandlerSend+0x2a>
{
 80059f2:	f06f 0001 	mvn.w	r0, #1
 80059f6:	e78c      	b.n	8005912 <LmHandlerSend+0x2a>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80059f8:	f06f 0005 	mvn.w	r0, #5
            break;
 80059fc:	e789      	b.n	8005912 <LmHandlerSend+0x2a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80059fe:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 8005a02:	e786      	b.n	8005912 <LmHandlerSend+0x2a>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8005a04:	f06f 0003 	mvn.w	r0, #3
 8005a08:	e783      	b.n	8005912 <LmHandlerSend+0x2a>
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e781      	b.n	8005912 <LmHandlerSend+0x2a>
 8005a0e:	bf00      	nop
 8005a10:	20000058 	.word	0x20000058
 8005a14:	20000470 	.word	0x20000470
 8005a18:	2000047c 	.word	0x2000047c

08005a1c <MlmeIndication>:
{
 8005a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a1e:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8005a20:	2000      	movs	r0, #0
 8005a22:	4b14      	ldr	r3, [pc, #80]	@ (8005a74 <MlmeIndication+0x58>)
    RxParams.Status = mlmeIndication->Status;
 8005a24:	7862      	ldrb	r2, [r4, #1]
    RxParams.IsMcpsIndication = 0;
 8005a26:	7718      	strb	r0, [r3, #28]
    RxParams.Status = mlmeIndication->Status;
 8005a28:	775a      	strb	r2, [r3, #29]
    RxParams.Rssi = RxStatus->Rssi;
 8005a2a:	880d      	ldrh	r5, [r1, #0]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8005a2c:	2a0e      	cmp	r2, #14
    RxParams.Rssi = RxStatus->Rssi;
 8005a2e:	77dd      	strb	r5, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 8005a30:	788d      	ldrb	r5, [r1, #2]
 8005a32:	f883 5020 	strb.w	r5, [r3, #32]
    RxParams.RxSlot = RxStatus->RxSlot;
 8005a36:	78c9      	ldrb	r1, [r1, #3]
 8005a38:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8005a3c:	d005      	beq.n	8005a4a <MlmeIndication+0x2e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8005a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005a78 <MlmeIndication+0x5c>)
 8005a40:	f103 011c 	add.w	r1, r3, #28
 8005a44:	6992      	ldr	r2, [r2, #24]
 8005a46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a48:	4790      	blx	r2
    switch( mlmeIndication->MlmeIndication )
 8005a4a:	7823      	ldrb	r3, [r4, #0]
 8005a4c:	2b07      	cmp	r3, #7
 8005a4e:	d10e      	bne.n	8005a6e <MlmeIndication+0x52>
            LmHandlerAppData_t appData =
 8005a50:	2300      	movs	r3, #0
 8005a52:	f8ad 3000 	strh.w	r3, [sp]
 8005a56:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8005a58:	4b07      	ldr	r3, [pc, #28]	@ (8005a78 <MlmeIndication+0x5c>)
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	4798      	blx	r3
 8005a60:	4602      	mov	r2, r0
 8005a62:	b920      	cbnz	r0, 8005a6e <MlmeIndication+0x52>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 8005a64:	4601      	mov	r1, r0
 8005a66:	2301      	movs	r3, #1
 8005a68:	4668      	mov	r0, sp
 8005a6a:	f7ff ff3d 	bl	80058e8 <LmHandlerSend>
}
 8005a6e:	b003      	add	sp, #12
 8005a70:	bd30      	pop	{r4, r5, pc}
 8005a72:	bf00      	nop
 8005a74:	20000058 	.word	0x20000058
 8005a78:	20000470 	.word	0x20000470

08005a7c <LmHandlerGetCurrentClass>:
{
 8005a7c:	b510      	push	{r4, lr}
    if (deviceClass == NULL)
 8005a7e:	4604      	mov	r4, r0
{
 8005a80:	b08a      	sub	sp, #40	@ 0x28
    if (deviceClass == NULL)
 8005a82:	b918      	cbnz	r0, 8005a8c <LmHandlerGetCurrentClass+0x10>
        return LORAMAC_HANDLER_ERROR;
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005a88:	b00a      	add	sp, #40	@ 0x28
 8005a8a:	bd10      	pop	{r4, pc}
    mibReq.Type = MIB_DEVICE_CLASS;
 8005a8c:	2300      	movs	r3, #0
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8005a8e:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_DEVICE_CLASS;
 8005a90:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8005a94:	f002 f8ae 	bl	8007bf4 <LoRaMacMibGetRequestConfirm>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d1f3      	bne.n	8005a84 <LmHandlerGetCurrentClass+0x8>
    *deviceClass = mibReq.Param.Class;
 8005a9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005aa0:	7023      	strb	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8005aa2:	e7f1      	b.n	8005a88 <LmHandlerGetCurrentClass+0xc>

08005aa4 <McpsIndication>:
    DeviceClass_t deviceClass = CLASS_A;
 8005aa4:	2300      	movs	r3, #0
    RxParams.IsMcpsIndication = 1;
 8005aa6:	2201      	movs	r2, #1
{
 8005aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aaa:	b087      	sub	sp, #28
    DeviceClass_t deviceClass = CLASS_A;
 8005aac:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8005ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b64 <McpsIndication+0xc0>)
{
 8005ab2:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 1;
 8005ab4:	771a      	strb	r2, [r3, #28]
    RxParams.Status = mcpsIndication->Status;
 8005ab6:	7842      	ldrb	r2, [r0, #1]
 8005ab8:	775a      	strb	r2, [r3, #29]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8005aba:	2a00      	cmp	r2, #0
 8005abc:	d146      	bne.n	8005b4c <McpsIndication+0xa8>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8005abe:	7902      	ldrb	r2, [r0, #4]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8005ac0:	4f29      	ldr	r7, [pc, #164]	@ (8005b68 <McpsIndication+0xc4>)
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8005ac2:	779a      	strb	r2, [r3, #30]
    RxParams.Rssi = RxStatus->Rssi;
 8005ac4:	880a      	ldrh	r2, [r1, #0]
 8005ac6:	77da      	strb	r2, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 8005ac8:	788a      	ldrb	r2, [r1, #2]
 8005aca:	f883 2020 	strb.w	r2, [r3, #32]
    RxParams.RxSlot = RxStatus->RxSlot;
 8005ace:	78ca      	ldrb	r2, [r1, #3]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8005ad0:	f103 011c 	add.w	r1, r3, #28
    RxParams.RxSlot = RxStatus->RxSlot;
 8005ad4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8005ad8:	6902      	ldr	r2, [r0, #16]
 8005ada:	625a      	str	r2, [r3, #36]	@ 0x24
    appData.Port = mcpsIndication->Port;
 8005adc:	78c2      	ldrb	r2, [r0, #3]
 8005ade:	f88d 2008 	strb.w	r2, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8005ae2:	7b02      	ldrb	r2, [r0, #12]
 8005ae4:	f88d 2009 	strb.w	r2, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8005ae8:	6882      	ldr	r2, [r0, #8]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8005aea:	a802      	add	r0, sp, #8
    appData.Buffer = mcpsIndication->Buffer;
 8005aec:	9203      	str	r2, [sp, #12]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005af2:	4790      	blx	r2
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af8:	b113      	cbz	r3, 8005b00 <McpsIndication+0x5c>
 8005afa:	7e22      	ldrb	r2, [r4, #24]
 8005afc:	b102      	cbz	r2, 8005b00 <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8005afe:	4798      	blx	r3
{
 8005b00:	2500      	movs	r5, #0
 8005b02:	4e1a      	ldr	r6, [pc, #104]	@ (8005b6c <McpsIndication+0xc8>)
        if( LmHandlerPackages[i] != NULL )
 8005b04:	f856 3b04 	ldr.w	r3, [r6], #4
 8005b08:	b153      	cbz	r3, 8005b20 <McpsIndication+0x7c>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	b142      	cbz	r2, 8005b20 <McpsIndication+0x7c>
 8005b0e:	781a      	ldrb	r2, [r3, #0]
 8005b10:	78e3      	ldrb	r3, [r4, #3]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d11c      	bne.n	8005b50 <McpsIndication+0xac>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8005b16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8005b20:	3501      	adds	r5, #1
 8005b22:	b2eb      	uxtb	r3, r5
 8005b24:	2b05      	cmp	r3, #5
 8005b26:	b26d      	sxtb	r5, r5
 8005b28:	d1ec      	bne.n	8005b04 <McpsIndication+0x60>
    LmHandlerGetCurrentClass(&deviceClass);
 8005b2a:	f10d 0007 	add.w	r0, sp, #7
 8005b2e:	f7ff ffa5 	bl	8005a7c <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8005b32:	7963      	ldrb	r3, [r4, #5]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d109      	bne.n	8005b4c <McpsIndication+0xa8>
 8005b38:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005b3c:	b932      	cbnz	r2, 8005b4c <McpsIndication+0xa8>
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8005b3e:	4611      	mov	r1, r2
 8005b40:	a804      	add	r0, sp, #16
        LmHandlerAppData_t appData =
 8005b42:	f8ad 2010 	strh.w	r2, [sp, #16]
 8005b46:	9205      	str	r2, [sp, #20]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8005b48:	f7ff fece 	bl	80058e8 <LmHandlerSend>
}
 8005b4c:	b007      	add	sp, #28
 8005b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	d1e5      	bne.n	8005b20 <McpsIndication+0x7c>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4798      	blx	r3
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d1db      	bne.n	8005b16 <McpsIndication+0x72>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8005b5e:	2501      	movs	r5, #1
 8005b60:	e7d0      	b.n	8005b04 <McpsIndication+0x60>
 8005b62:	bf00      	nop
 8005b64:	20000058 	.word	0x20000058
 8005b68:	20000470 	.word	0x20000470
 8005b6c:	2000048c 	.word	0x2000048c

08005b70 <LmHandlerGetTxDatarate>:
{
 8005b70:	b510      	push	{r4, lr}
    if (txDatarate == NULL)
 8005b72:	4604      	mov	r4, r0
{
 8005b74:	b08a      	sub	sp, #40	@ 0x28
    if (txDatarate == NULL)
 8005b76:	b918      	cbnz	r0, 8005b80 <LmHandlerGetTxDatarate+0x10>
        return LORAMAC_HANDLER_ERROR;
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005b7c:	b00a      	add	sp, #40	@ 0x28
 8005b7e:	bd10      	pop	{r4, pc}
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8005b80:	231f      	movs	r3, #31
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8005b82:	a801      	add	r0, sp, #4
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8005b84:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8005b88:	f002 f834 	bl	8007bf4 <LoRaMacMibGetRequestConfirm>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d1f3      	bne.n	8005b78 <LmHandlerGetTxDatarate+0x8>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8005b90:	f99d 3008 	ldrsb.w	r3, [sp, #8]
    LmHandlerParams.TxDatarate = *txDatarate;
 8005b94:	4a02      	ldr	r2, [pc, #8]	@ (8005ba0 <LmHandlerGetTxDatarate+0x30>)
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8005b96:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8005b98:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
    return LORAMAC_HANDLER_SUCCESS;
 8005b9c:	e7ee      	b.n	8005b7c <LmHandlerGetTxDatarate+0xc>
 8005b9e:	bf00      	nop
 8005ba0:	20000470 	.word	0x20000470

08005ba4 <MlmeConfirm>:
{
 8005ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    TxParams.IsMcpsConfirm = 0;
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	4e22      	ldr	r6, [pc, #136]	@ (8005c34 <MlmeConfirm+0x90>)
    TxParams.Status = mlmeConfirm->Status;
 8005baa:	7843      	ldrb	r3, [r0, #1]
{
 8005bac:	4604      	mov	r4, r0
    TxParams.Status = mlmeConfirm->Status;
 8005bae:	7073      	strb	r3, [r6, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8005bb0:	69b3      	ldr	r3, [r6, #24]
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
{
 8005bb6:	b08b      	sub	sp, #44	@ 0x2c
    TxParams.IsMcpsConfirm = 0;
 8005bb8:	7035      	strb	r5, [r6, #0]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8005bba:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8005bbc:	f106 071c 	add.w	r7, r6, #28
        if( LmHandlerPackages[i] != NULL )
 8005bc0:	f857 3b04 	ldr.w	r3, [r7], #4
 8005bc4:	b11b      	cbz	r3, 8005bce <MlmeConfirm+0x2a>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	b10b      	cbz	r3, 8005bce <MlmeConfirm+0x2a>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8005bca:	4620      	mov	r0, r4
 8005bcc:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8005bce:	3501      	adds	r5, #1
 8005bd0:	b2eb      	uxtb	r3, r5
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	b26d      	sxtb	r5, r5
 8005bd6:	d1f3      	bne.n	8005bc0 <MlmeConfirm+0x1c>
    switch( mlmeConfirm->MlmeRequest )
 8005bd8:	7823      	ldrb	r3, [r4, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d003      	beq.n	8005be6 <MlmeConfirm+0x42>
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d01d      	beq.n	8005c1e <MlmeConfirm+0x7a>
}
 8005be2:	b00b      	add	sp, #44	@ 0x2c
 8005be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8005be6:	2306      	movs	r3, #6
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8005be8:	4d13      	ldr	r5, [pc, #76]	@ (8005c38 <MlmeConfirm+0x94>)
            LoRaMacMibGetRequestConfirm( &mibReq );
 8005bea:	a801      	add	r0, sp, #4
            mibReq.Type = MIB_DEV_ADDR;
 8005bec:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8005bf0:	f002 f800 	bl	8007bf4 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8005bf4:	9b02      	ldr	r3, [sp, #8]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8005bf6:	f105 0018 	add.w	r0, r5, #24
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8005bfa:	616b      	str	r3, [r5, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8005bfc:	f7ff ffb8 	bl	8005b70 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8005c00:	7863      	ldrb	r3, [r4, #1]
 8005c02:	b94b      	cbnz	r3, 8005c18 <MlmeConfirm+0x74>
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8005c04:	f896 0031 	ldrb.w	r0, [r6, #49]	@ 0x31
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8005c08:	766b      	strb	r3, [r5, #25]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8005c0a:	f7ff fdd1 	bl	80057b0 <LmHandlerRequestClass>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8005c0e:	69b3      	ldr	r3, [r6, #24]
 8005c10:	480a      	ldr	r0, [pc, #40]	@ (8005c3c <MlmeConfirm+0x98>)
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	4798      	blx	r3
        break;
 8005c16:	e7e4      	b.n	8005be2 <MlmeConfirm+0x3e>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8005c18:	23ff      	movs	r3, #255	@ 0xff
 8005c1a:	766b      	strb	r3, [r5, #25]
 8005c1c:	e7f7      	b.n	8005c0e <MlmeConfirm+0x6a>
            RxParams.LinkCheck = true;
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4b05      	ldr	r3, [pc, #20]	@ (8005c38 <MlmeConfirm+0x94>)
 8005c22:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8005c26:	7a22      	ldrb	r2, [r4, #8]
 8005c28:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8005c2c:	7a62      	ldrb	r2, [r4, #9]
 8005c2e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 8005c32:	e7d6      	b.n	8005be2 <MlmeConfirm+0x3e>
 8005c34:	20000470 	.word	0x20000470
 8005c38:	20000058 	.word	0x20000058
 8005c3c:	20000070 	.word	0x20000070

08005c40 <LmHandlerPackageRegister>:
{
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	460d      	mov	r5, r1
    switch( id )
 8005c44:	4604      	mov	r4, r0
 8005c46:	b110      	cbz	r0, 8005c4e <LmHandlerPackageRegister+0xe>
        return LORAMAC_HANDLER_ERROR;
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005c4c:	bd38      	pop	{r3, r4, r5, pc}
            package = LmhpCompliancePackageFactory( );
 8005c4e:	f000 f9bd 	bl	8005fcc <LmhpCompliancePackageFactory>
    if( package != NULL )
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d0f8      	beq.n	8005c48 <LmHandlerPackageRegister+0x8>
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8005c56:	4b09      	ldr	r3, [pc, #36]	@ (8005c7c <LmHandlerPackageRegister+0x3c>)
        LmHandlerPackages[id] = package;
 8005c58:	4909      	ldr	r1, [pc, #36]	@ (8005c80 <LmHandlerPackageRegister+0x40>)
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8005c5a:	6243      	str	r3, [r0, #36]	@ 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8005c5c:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <LmHandlerPackageRegister+0x44>)
        LmHandlerPackages[id] = package;
 8005c5e:	61c8      	str	r0, [r1, #28]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8005c60:	6283      	str	r3, [r0, #40]	@ 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8005c62:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <LmHandlerPackageRegister+0x48>)
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8005c64:	22f2      	movs	r2, #242	@ 0xf2
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8005c66:	62c3      	str	r3, [r0, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8005c68:	698b      	ldr	r3, [r1, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8005c6a:	3165      	adds	r1, #101	@ 0x65
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	6143      	str	r3, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8005c70:	6843      	ldr	r3, [r0, #4]
 8005c72:	4628      	mov	r0, r5
 8005c74:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8005c76:	4620      	mov	r0, r4
 8005c78:	e7e8      	b.n	8005c4c <LmHandlerPackageRegister+0xc>
 8005c7a:	bf00      	nop
 8005c7c:	08005865 	.word	0x08005865
 8005c80:	20000470 	.word	0x20000470
 8005c84:	080058e9 	.word	0x080058e9
 8005c88:	08005545 	.word	0x08005545

08005c8c <LmHandlerInit>:
{
 8005c8c:	b508      	push	{r3, lr}
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8005c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8005cc8 <LmHandlerInit+0x3c>)
    LmHandlerCallbacks = handlerCallbacks;
 8005c90:	4b0e      	ldr	r3, [pc, #56]	@ (8005ccc <LmHandlerInit+0x40>)
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8005c92:	490f      	ldr	r1, [pc, #60]	@ (8005cd0 <LmHandlerInit+0x44>)
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8005c94:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8005c96:	4a0f      	ldr	r2, [pc, #60]	@ (8005cd4 <LmHandlerInit+0x48>)
    LmHandlerCallbacks = handlerCallbacks;
 8005c98:	6198      	str	r0, [r3, #24]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8005c9a:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8005c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8005cd8 <LmHandlerInit+0x4c>)
 8005c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8005ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8005cdc <LmHandlerInit+0x50>)
 8005ca2:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8005ca4:	6802      	ldr	r2, [r0, #0]
 8005ca6:	641a      	str	r2, [r3, #64]	@ 0x40
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8005ca8:	6842      	ldr	r2, [r0, #4]
 8005caa:	645a      	str	r2, [r3, #68]	@ 0x44
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8005cac:	6882      	ldr	r2, [r0, #8]
 8005cae:	649a      	str	r2, [r3, #72]	@ 0x48
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8005cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8005ce0 <LmHandlerInit+0x54>)
 8005cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8005cb4:	6902      	ldr	r2, [r0, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8005cb6:	2000      	movs	r0, #0
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8005cb8:	651a      	str	r2, [r3, #80]	@ 0x50
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8005cba:	f7ff ffc1 	bl	8005c40 <LmHandlerPackageRegister>
 8005cbe:	3800      	subs	r0, #0
 8005cc0:	bf18      	it	ne
 8005cc2:	2001      	movne	r0, #1
}
 8005cc4:	4240      	negs	r0, r0
 8005cc6:	bd08      	pop	{r3, pc}
 8005cc8:	08005561 	.word	0x08005561
 8005ccc:	20000470 	.word	0x20000470
 8005cd0:	20000084 	.word	0x20000084
 8005cd4:	08005aa5 	.word	0x08005aa5
 8005cd8:	08005ba5 	.word	0x08005ba5
 8005cdc:	08005a1d 	.word	0x08005a1d
 8005ce0:	08005fd5 	.word	0x08005fd5

08005ce4 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8005ce4:	4b01      	ldr	r3, [pc, #4]	@ (8005cec <LmhpComplianceIsInitialized+0x8>)
 8005ce6:	7818      	ldrb	r0, [r3, #0]
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	200005c8 	.word	0x200005c8

08005cf0 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8005cf0:	4b02      	ldr	r3, [pc, #8]	@ (8005cfc <LmhpComplianceIsRunning+0xc>)
 8005cf2:	7818      	ldrb	r0, [r3, #0]
 8005cf4:	b100      	cbz	r0, 8005cf8 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8005cf6:	7858      	ldrb	r0, [r3, #1]
}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	200005c8 	.word	0x200005c8

08005d00 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8005d00:	4770      	bx	lr
	...

08005d04 <LmhpComplianceInit>:
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <LmhpComplianceInit+0x18>)
 8005d06:	b130      	cbz	r0, 8005d16 <LmhpComplianceInit+0x12>
 8005d08:	b129      	cbz	r1, 8005d16 <LmhpComplianceInit+0x12>
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8005d0a:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8005d0c:	2201      	movs	r2, #1
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8005d0e:	6158      	str	r0, [r3, #20]
        ComplianceTestState.DataBuffer = dataBuffer;
 8005d10:	6099      	str	r1, [r3, #8]
        ComplianceTestState.Initialized = true;
 8005d12:	701a      	strb	r2, [r3, #0]
}
 8005d14:	4770      	bx	lr
        LmhpComplianceParams = NULL;
 8005d16:	2200      	movs	r2, #0
 8005d18:	615a      	str	r2, [r3, #20]
}
 8005d1a:	e7fa      	b.n	8005d12 <LmhpComplianceInit+0xe>
 8005d1c:	200005c8 	.word	0x200005c8

08005d20 <LmhpComplianceOnMcpsConfirm>:
    if (ComplianceTestState.Initialized == false)
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <LmhpComplianceOnMcpsConfirm+0x1c>)
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	b14a      	cbz	r2, 8005d3a <LmhpComplianceOnMcpsConfirm+0x1a>
    if ((ComplianceTestState.IsRunning == true) &&
 8005d26:	785a      	ldrb	r2, [r3, #1]
 8005d28:	b13a      	cbz	r2, 8005d3a <LmhpComplianceOnMcpsConfirm+0x1a>
 8005d2a:	7802      	ldrb	r2, [r0, #0]
 8005d2c:	2a01      	cmp	r2, #1
 8005d2e:	d104      	bne.n	8005d3a <LmhpComplianceOnMcpsConfirm+0x1a>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8005d30:	7902      	ldrb	r2, [r0, #4]
 8005d32:	b112      	cbz	r2, 8005d3a <LmhpComplianceOnMcpsConfirm+0x1a>
        ComplianceTestState.DownLinkCounter++;
 8005d34:	899a      	ldrh	r2, [r3, #12]
 8005d36:	3201      	adds	r2, #1
 8005d38:	819a      	strh	r2, [r3, #12]
}
 8005d3a:	4770      	bx	lr
 8005d3c:	200005c8 	.word	0x200005c8

08005d40 <LmhpComplianceOnMlmeConfirm>:
    if( ComplianceTestState.Initialized == false )
 8005d40:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <LmhpComplianceOnMlmeConfirm+0x20>)
 8005d42:	781a      	ldrb	r2, [r3, #0]
 8005d44:	b152      	cbz	r2, 8005d5c <LmhpComplianceOnMlmeConfirm+0x1c>
    if( ComplianceTestState.IsRunning == false )
 8005d46:	785a      	ldrb	r2, [r3, #1]
 8005d48:	b142      	cbz	r2, 8005d5c <LmhpComplianceOnMlmeConfirm+0x1c>
    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8005d4a:	7802      	ldrb	r2, [r0, #0]
 8005d4c:	2a04      	cmp	r2, #4
 8005d4e:	d105      	bne.n	8005d5c <LmhpComplianceOnMlmeConfirm+0x1c>
 8005d50:	7a01      	ldrb	r1, [r0, #8]
 8005d52:	7a42      	ldrb	r2, [r0, #9]
        ComplianceTestState.LinkCheck = true;
 8005d54:	2001      	movs	r0, #1
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8005d56:	73d9      	strb	r1, [r3, #15]
        ComplianceTestState.LinkCheck = true;
 8005d58:	7398      	strb	r0, [r3, #14]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8005d5a:	741a      	strb	r2, [r3, #16]
}
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	200005c8 	.word	0x200005c8

08005d64 <LmhpComplianceTxProcess.isra.0>:
static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
 8005d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 8005d66:	4c1a      	ldr	r4, [pc, #104]	@ (8005dd0 <LmhpComplianceTxProcess.isra.0+0x6c>)
 8005d68:	7823      	ldrb	r3, [r4, #0]
 8005d6a:	b33b      	cbz	r3, 8005dbc <LmhpComplianceTxProcess.isra.0+0x58>
    if( ComplianceTestState.IsRunning == false )
 8005d6c:	7863      	ldrb	r3, [r4, #1]
 8005d6e:	b32b      	cbz	r3, 8005dbc <LmhpComplianceTxProcess.isra.0+0x58>
    if( ComplianceTestState.LinkCheck == true )
 8005d70:	7ba2      	ldrb	r2, [r4, #14]
        ComplianceTestState.DataBuffer[0] = 5;
 8005d72:	68a3      	ldr	r3, [r4, #8]
    if( ComplianceTestState.LinkCheck == true )
 8005d74:	b162      	cbz	r2, 8005d90 <LmhpComplianceTxProcess.isra.0+0x2c>
        ComplianceTestState.LinkCheck = false;
 8005d76:	2200      	movs	r2, #0
 8005d78:	73a2      	strb	r2, [r4, #14]
        ComplianceTestState.DataBufferSize = 3;
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	71a2      	strb	r2, [r4, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8005d7e:	2205      	movs	r2, #5
 8005d80:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8005d82:	7be2      	ldrb	r2, [r4, #15]
 8005d84:	705a      	strb	r2, [r3, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8005d86:	7c22      	ldrb	r2, [r4, #16]
 8005d88:	709a      	strb	r2, [r3, #2]
            ComplianceTestState.State = 1;
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	70a2      	strb	r2, [r4, #2]
            break;
 8005d8e:	e004      	b.n	8005d9a <LmhpComplianceTxProcess.isra.0+0x36>
        switch( ComplianceTestState.State )
 8005d90:	78a2      	ldrb	r2, [r4, #2]
 8005d92:	2a01      	cmp	r2, #1
 8005d94:	d014      	beq.n	8005dc0 <LmhpComplianceTxProcess.isra.0+0x5c>
 8005d96:	2a04      	cmp	r2, #4
 8005d98:	d0f7      	beq.n	8005d8a <LmhpComplianceTxProcess.isra.0+0x26>
    LmHandlerAppData_t appData =
 8005d9a:	22e0      	movs	r2, #224	@ 0xe0
 8005d9c:	f88d 2000 	strb.w	r2, [sp]
 8005da0:	79a2      	ldrb	r2, [r4, #6]
    TimerStart( &ComplianceTxNextPacketTimer );
 8005da2:	480c      	ldr	r0, [pc, #48]	@ (8005dd4 <LmhpComplianceTxProcess.isra.0+0x70>)
    LmHandlerAppData_t appData =
 8005da4:	f88d 2001 	strb.w	r2, [sp, #1]
 8005da8:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8005daa:	f006 fb57 	bl	800c45c <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8005dae:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <LmhpComplianceTxProcess.isra.0+0x74>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8005db4:	4668      	mov	r0, sp
 8005db6:	2301      	movs	r3, #1
 8005db8:	78e1      	ldrb	r1, [r4, #3]
 8005dba:	47a8      	blx	r5
}
 8005dbc:	b003      	add	sp, #12
 8005dbe:	bd30      	pop	{r4, r5, pc}
            ComplianceTestState.DataBufferSize = 2;
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	71a2      	strb	r2, [r4, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8005dc4:	89a2      	ldrh	r2, [r4, #12]
 8005dc6:	0a11      	lsrs	r1, r2, #8
 8005dc8:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8005dca:	705a      	strb	r2, [r3, #1]
            break;
 8005dcc:	e7e5      	b.n	8005d9a <LmhpComplianceTxProcess.isra.0+0x36>
 8005dce:	bf00      	nop
 8005dd0:	200005c8 	.word	0x200005c8
 8005dd4:	200005e0 	.word	0x200005e0
 8005dd8:	20000090 	.word	0x20000090

08005ddc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
    LmhpComplianceTxProcess( );
 8005ddc:	f7ff bfc2 	b.w	8005d64 <LmhpComplianceTxProcess.isra.0>

08005de0 <LmhpComplianceOnMcpsIndication>:
{
 8005de0:	b530      	push	{r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 8005de2:	4c76      	ldr	r4, [pc, #472]	@ (8005fbc <LmhpComplianceOnMcpsIndication+0x1dc>)
{
 8005de4:	b08d      	sub	sp, #52	@ 0x34
    if( ComplianceTestState.Initialized == false )
 8005de6:	7823      	ldrb	r3, [r4, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d042      	beq.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
    if( mcpsIndication->RxData == false )
 8005dec:	7b43      	ldrb	r3, [r0, #13]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d03f      	beq.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
    if ((ComplianceTestState.IsRunning == true) &&
 8005df2:	7865      	ldrb	r5, [r4, #1]
 8005df4:	b125      	cbz	r5, 8005e00 <LmhpComplianceOnMcpsIndication+0x20>
 8005df6:	7b83      	ldrb	r3, [r0, #14]
 8005df8:	b913      	cbnz	r3, 8005e00 <LmhpComplianceOnMcpsIndication+0x20>
        ComplianceTestState.DownLinkCounter++;
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	81a3      	strh	r3, [r4, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8005e00:	78c1      	ldrb	r1, [r0, #3]
 8005e02:	29e0      	cmp	r1, #224	@ 0xe0
 8005e04:	d135      	bne.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
    if( ComplianceTestState.IsRunning == false )
 8005e06:	2d00      	cmp	r5, #0
 8005e08:	d135      	bne.n	8005e76 <LmhpComplianceOnMcpsIndication+0x96>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8005e0a:	7b02      	ldrb	r2, [r0, #12]
 8005e0c:	2a04      	cmp	r2, #4
 8005e0e:	d130      	bne.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8005e10:	6883      	ldr	r3, [r0, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8005e12:	7818      	ldrb	r0, [r3, #0]
 8005e14:	2801      	cmp	r0, #1
 8005e16:	d12c      	bne.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8005e18:	7858      	ldrb	r0, [r3, #1]
 8005e1a:	2801      	cmp	r0, #1
 8005e1c:	d129      	bne.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8005e1e:	7898      	ldrb	r0, [r3, #2]
 8005e20:	2801      	cmp	r0, #1
 8005e22:	d126      	bne.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8005e24:	78db      	ldrb	r3, [r3, #3]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d123      	bne.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
            ComplianceTestState.DataBufferSize = 2;
 8005e2a:	2002      	movs	r0, #2
 8005e2c:	71a0      	strb	r0, [r4, #6]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8005e2e:	a803      	add	r0, sp, #12
            ComplianceTestState.IsRunning = true;
 8005e30:	7063      	strb	r3, [r4, #1]
            ComplianceTestState.State = 1;
 8005e32:	8063      	strh	r3, [r4, #2]
            mibReq.Param.AdrEnable = true;
 8005e34:	f88d 3010 	strb.w	r3, [sp, #16]
            ComplianceTestState.Port = 224;
 8005e38:	7121      	strb	r1, [r4, #4]
            mibReq.Type = MIB_ADR;
 8005e3a:	f88d 200c 	strb.w	r2, [sp, #12]
            ComplianceTestState.DownLinkCounter = 0;
 8005e3e:	60e5      	str	r5, [r4, #12]
            ComplianceTestState.NbGateways = 0;
 8005e40:	7425      	strb	r5, [r4, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8005e42:	f001 ff93 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8005e46:	4628      	mov	r0, r5
 8005e48:	f002 fc3a 	bl	80086c0 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8005e4c:	6963      	ldr	r3, [r4, #20]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	b103      	cbz	r3, 8005e54 <LmhpComplianceOnMcpsIndication+0x74>
                LmhpComplianceParams->StopPeripherals( );
 8005e52:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8005e54:	2200      	movs	r2, #0
 8005e56:	f04f 31ff 	mov.w	r1, #4294967295
 8005e5a:	4b59      	ldr	r3, [pc, #356]	@ (8005fc0 <LmhpComplianceOnMcpsIndication+0x1e0>)
 8005e5c:	9200      	str	r2, [sp, #0]
 8005e5e:	4859      	ldr	r0, [pc, #356]	@ (8005fc4 <LmhpComplianceOnMcpsIndication+0x1e4>)
 8005e60:	f006 fa50 	bl	800c304 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8005e64:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005e68:	4856      	ldr	r0, [pc, #344]	@ (8005fc4 <LmhpComplianceOnMcpsIndication+0x1e4>)
 8005e6a:	f006 fb31 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8005e6e:	f7ff ff79 	bl	8005d64 <LmhpComplianceTxProcess.isra.0>
}
 8005e72:	b00d      	add	sp, #52	@ 0x34
 8005e74:	bd30      	pop	{r4, r5, pc}
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8005e76:	6883      	ldr	r3, [r0, #8]
 8005e78:	781a      	ldrb	r2, [r3, #0]
 8005e7a:	70a2      	strb	r2, [r4, #2]
        switch( ComplianceTestState.State )
 8005e7c:	2a0a      	cmp	r2, #10
 8005e7e:	d8f8      	bhi.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
 8005e80:	e8df f002 	tbb	[pc, r2]
 8005e84:	27232006 	.word	0x27232006
 8005e88:	60433c29 	.word	0x60433c29
 8005e8c:	8b89      	.short	0x8b89
 8005e8e:	95          	.byte	0x95
 8005e8f:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8005e90:	484c      	ldr	r0, [pc, #304]	@ (8005fc4 <LmhpComplianceOnMcpsIndication+0x1e4>)
 8005e92:	f006 fa95 	bl	800c3c0 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	81a3      	strh	r3, [r4, #12]
                ComplianceTestState.IsRunning = false;
 8005e9a:	7063      	strb	r3, [r4, #1]
                mibReq.Type = MIB_ADR;
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8005ea2:	6963      	ldr	r3, [r4, #20]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8005ea4:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8005eac:	f001 ff5e 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8005eb0:	6963      	ldr	r3, [r4, #20]
 8005eb2:	7858      	ldrb	r0, [r3, #1]
 8005eb4:	f002 fc04 	bl	80086c0 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8005eb8:	6963      	ldr	r3, [r4, #20]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0d8      	beq.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
                    LmhpComplianceParams->StartPeripherals( );
 8005ec0:	4798      	blx	r3
            break;
 8005ec2:	e7d6      	b.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
            ComplianceTestState.DataBufferSize = 2;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	71a3      	strb	r3, [r4, #6]
            break;
 8005ec8:	e7d3      	b.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
            ComplianceTestState.State = 1;
 8005eca:	f240 1301 	movw	r3, #257	@ 0x101
            ComplianceTestState.State = 1;
 8005ece:	8063      	strh	r3, [r4, #2]
            break;
 8005ed0:	e7cf      	b.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
            ComplianceTestState.State = 1;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e7fb      	b.n	8005ece <LmhpComplianceOnMcpsIndication+0xee>
            ComplianceTestState.DataBuffer[0] = 4;
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	68a5      	ldr	r5, [r4, #8]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8005eda:	7b03      	ldrb	r3, [r0, #12]
            ComplianceTestState.DataBuffer[0] = 4;
 8005edc:	702a      	strb	r2, [r5, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8005ede:	7962      	ldrb	r2, [r4, #5]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8005ee0:	71a3      	strb	r3, [r4, #6]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bf28      	it	cs
 8005ee6:	461a      	movcs	r2, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	3301      	adds	r3, #1
 8005eec:	b2d9      	uxtb	r1, r3
 8005eee:	428a      	cmp	r2, r1
 8005ef0:	d9bf      	bls.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8005ef2:	6881      	ldr	r1, [r0, #8]
 8005ef4:	5cc9      	ldrb	r1, [r1, r3]
 8005ef6:	3101      	adds	r1, #1
 8005ef8:	54e9      	strb	r1, [r5, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8005efa:	e7f6      	b.n	8005eea <LmhpComplianceOnMcpsIndication+0x10a>
                mlmeReq.Type = MLME_LINK_CHECK;
 8005efc:	2304      	movs	r3, #4
                mlmeReq.Type = MLME_DEVICE_TIME;
 8005efe:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8005f02:	a803      	add	r0, sp, #12
 8005f04:	f002 f958 	bl	80081b8 <LoRaMacMlmeRequest>
            break;
 8005f08:	e7b3      	b.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
                TimerStop(&ComplianceTxNextPacketTimer);
 8005f0a:	482e      	ldr	r0, [pc, #184]	@ (8005fc4 <LmhpComplianceOnMcpsIndication+0x1e4>)
 8005f0c:	f006 fa58 	bl	800c3c0 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	81a3      	strh	r3, [r4, #12]
                ComplianceTestState.IsRunning = false;
 8005f14:	7063      	strb	r3, [r4, #1]
                mibReq.Type = MIB_ADR;
 8005f16:	2304      	movs	r3, #4
 8005f18:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8005f1c:	6963      	ldr	r3, [r4, #20]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8005f1e:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8005f26:	f001 ff21 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8005f2a:	6963      	ldr	r3, [r4, #20]
 8005f2c:	7858      	ldrb	r0, [r3, #1]
 8005f2e:	f002 fbc7 	bl	80086c0 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8005f32:	6963      	ldr	r3, [r4, #20]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	b103      	cbz	r3, 8005f3a <LmhpComplianceOnMcpsIndication+0x15a>
                    LmhpComplianceParams->StartPeripherals( );
 8005f38:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8005f3a:	4b23      	ldr	r3, [pc, #140]	@ (8005fc8 <LmhpComplianceOnMcpsIndication+0x1e8>)
 8005f3c:	2002      	movs	r0, #2
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	4798      	blx	r3
            break;
 8005f42:	e796      	b.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
                if( mcpsIndication->BufferSize == 3 )
 8005f44:	7b02      	ldrb	r2, [r0, #12]
 8005f46:	2a03      	cmp	r2, #3
 8005f48:	d10d      	bne.n	8005f66 <LmhpComplianceOnMcpsIndication+0x186>
                    mlmeReq.Type = MLME_TXCW;
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	f88d 200c 	strb.w	r2, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8005f50:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005f54:	ba5b      	rev16	r3, r3
 8005f56:	f8ad 3010 	strh.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8005f5a:	a803      	add	r0, sp, #12
 8005f5c:	f002 f92c 	bl	80081b8 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8005f60:	2301      	movs	r3, #1
 8005f62:	70a3      	strb	r3, [r4, #2]
            break;
 8005f64:	e785      	b.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
                else if( mcpsIndication->BufferSize == 7 )
 8005f66:	2a07      	cmp	r2, #7
 8005f68:	d1f7      	bne.n	8005f5a <LmhpComplianceOnMcpsIndication+0x17a>
                    mlmeReq.Type = MLME_TXCW_1;
 8005f6a:	2206      	movs	r2, #6
 8005f6c:	f88d 200c 	strb.w	r2, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8005f70:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 8005f74:	ba52      	rev16	r2, r2
 8005f76:	f8ad 2010 	strh.w	r2, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8005f7a:	791a      	ldrb	r2, [r3, #4]
 8005f7c:	78d9      	ldrb	r1, [r3, #3]
 8005f7e:	0212      	lsls	r2, r2, #8
 8005f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005f84:	7959      	ldrb	r1, [r3, #5]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	2164      	movs	r1, #100	@ 0x64
 8005f8a:	434a      	muls	r2, r1
 8005f8c:	9205      	str	r2, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8005f8e:	799b      	ldrb	r3, [r3, #6]
 8005f90:	f88d 3018 	strb.w	r3, [sp, #24]
 8005f94:	e7e1      	b.n	8005f5a <LmhpComplianceOnMcpsIndication+0x17a>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8005f96:	230a      	movs	r3, #10
 8005f98:	e7b1      	b.n	8005efe <LmhpComplianceOnMcpsIndication+0x11e>
                mibReq.Type = MIB_DEVICE_CLASS;
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f88d 200c 	strb.w	r2, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8005fa0:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8005fa2:	a803      	add	r0, sp, #12
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8005fa4:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8005fa8:	f001 fee0 	bl	8007d6c <LoRaMacMibSetRequestConfirm>
            break;
 8005fac:	e761      	b.n	8005e72 <LmhpComplianceOnMcpsIndication+0x92>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8005fae:	220d      	movs	r2, #13
 8005fb0:	f88d 200c 	strb.w	r2, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	f88d 3010 	strb.w	r3, [sp, #16]
 8005fba:	e7a2      	b.n	8005f02 <LmhpComplianceOnMcpsIndication+0x122>
 8005fbc:	200005c8 	.word	0x200005c8
 8005fc0:	08005ddd 	.word	0x08005ddd
 8005fc4:	200005e0 	.word	0x200005e0
 8005fc8:	20000090 	.word	0x20000090

08005fcc <LmhpCompliancePackageFactory>:
}
 8005fcc:	4800      	ldr	r0, [pc, #0]	@ (8005fd0 <LmhpCompliancePackageFactory+0x4>)
 8005fce:	4770      	bx	lr
 8005fd0:	20000090 	.word	0x20000090

08005fd4 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8005fd4:	4770      	bx	lr

08005fd6 <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	4770      	bx	lr

08005fda <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
 8005fda:	2000      	movs	r0, #0
 8005fdc:	4770      	bx	lr
	...

08005fe0 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8005fe0:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <OnRadioRxError+0x18>)
 8005fe2:	781a      	ldrb	r2, [r3, #0]
 8005fe4:	f042 0202 	orr.w	r2, r2, #2
 8005fe8:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8005fea:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8005fee:	b113      	cbz	r3, 8005ff6 <OnRadioRxError+0x16>
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	b103      	cbz	r3, 8005ff6 <OnRadioRxError+0x16>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8005ff4:	4718      	bx	r3
    }
}
 8005ff6:	4770      	bx	lr
 8005ff8:	200005f8 	.word	0x200005f8

08005ffc <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005ffc:	4a04      	ldr	r2, [pc, #16]	@ (8006010 <UpdateRxSlotIdleState+0x14>)
 8005ffe:	f892 3608 	ldrb.w	r3, [r2, #1544]	@ 0x608
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8006002:	2b02      	cmp	r3, #2
 8006004:	bf18      	it	ne
 8006006:	2306      	movne	r3, #6
 8006008:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	200005f8 	.word	0x200005f8

08006014 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8006014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006016:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <GetMaxAppPayloadWithoutFOptsLength+0x2c>)
    getPhy.Datarate = datarate;
 8006018:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800601c:	f893 2580 	ldrb.w	r2, [r3, #1408]	@ 0x580
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006020:	f893 054c 	ldrb.w	r0, [r3, #1356]	@ 0x54c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006024:	f88d 200a 	strb.w	r2, [sp, #10]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8006028:	f893 258c 	ldrb.w	r2, [r3, #1420]	@ 0x58c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800602c:	a902      	add	r1, sp, #8
 800602e:	320d      	adds	r2, #13
 8006030:	f88d 2008 	strb.w	r2, [sp, #8]
 8006034:	f003 fa2a 	bl	800948c <RegionGetPhyParam>

    return phyParam.Value;
}
 8006038:	b2c0      	uxtb	r0, r0
 800603a:	b005      	add	sp, #20
 800603c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006040:	200005f8 	.word	0x200005f8

08006044 <OnAckTimeoutTimerEvent>:
{
 8006044:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8006046:	4c0f      	ldr	r4, [pc, #60]	@ (8006084 <OnAckTimeoutTimerEvent+0x40>)
 8006048:	f504 707f 	add.w	r0, r4, #1020	@ 0x3fc
 800604c:	f006 f9b8 	bl	800c3c0 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8006050:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8006054:	b113      	cbz	r3, 800605c <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8006056:	2301      	movs	r3, #1
 8006058:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800605c:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8006060:	2b02      	cmp	r3, #2
        MacCtx.MacFlags.Bits.MacDone = 1;
 8006062:	bf02      	ittt	eq
 8006064:	f894 3485 	ldrbeq.w	r3, [r4, #1157]	@ 0x485
 8006068:	f043 0320 	orreq.w	r3, r3, #32
 800606c:	f884 3485 	strbeq.w	r3, [r4, #1157]	@ 0x485
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006070:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
 8006074:	b123      	cbz	r3, 8006080 <OnAckTimeoutTimerEvent+0x3c>
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	b113      	cbz	r3, 8006080 <OnAckTimeoutTimerEvent+0x3c>
}
 800607a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 800607e:	4718      	bx	r3
}
 8006080:	bd10      	pop	{r4, pc}
 8006082:	bf00      	nop
 8006084:	200005f8 	.word	0x200005f8

08006088 <PrepareRxDoneAbort>:
{
 8006088:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800608a:	4c0c      	ldr	r4, [pc, #48]	@ (80060bc <PrepareRxDoneAbort+0x34>)
 800608c:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 8006090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006094:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    if( MacCtx.NodeAckRequested == true )
 8006098:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 800609c:	b113      	cbz	r3, 80060a4 <PrepareRxDoneAbort+0x1c>
        OnAckTimeoutTimerEvent( NULL );
 800609e:	2000      	movs	r0, #0
 80060a0:	f7ff ffd0 	bl	8006044 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80060a4:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80060a8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80060ac:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 80060b0:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
}
 80060b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 80060b8:	f7ff bfa0 	b.w	8005ffc <UpdateRxSlotIdleState>
 80060bc:	200005f8 	.word	0x200005f8

080060c0 <HandleRadioRxErrorTimeout>:
{
 80060c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80060c4:	4c2c      	ldr	r4, [pc, #176]	@ (8006178 <HandleRadioRxErrorTimeout+0xb8>)
{
 80060c6:	4607      	mov	r7, r0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80060c8:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
{
 80060cc:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d002      	beq.n	80060d8 <HandleRadioRxErrorTimeout+0x18>
        Radio.Sleep( );
 80060d2:	4b2a      	ldr	r3, [pc, #168]	@ (800617c <HandleRadioRxErrorTimeout+0xbc>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d6:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80060d8:	f002 fb7d 	bl	80087d6 <LoRaMacClassBIsBeaconExpected>
 80060dc:	4605      	mov	r5, r0
 80060de:	b128      	cbz	r0, 80060ec <HandleRadioRxErrorTimeout+0x2c>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80060e0:	2002      	movs	r0, #2
 80060e2:	f002 fb6e 	bl	80087c2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80060e6:	2000      	movs	r0, #0
 80060e8:	f002 fb70 	bl	80087cc <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80060ec:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d117      	bne.n	8006124 <HandleRadioRxErrorTimeout+0x64>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80060f4:	f002 fb71 	bl	80087da <LoRaMacClassBIsPingExpected>
 80060f8:	4680      	mov	r8, r0
 80060fa:	b130      	cbz	r0, 800610a <HandleRadioRxErrorTimeout+0x4a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80060fc:	2000      	movs	r0, #0
 80060fe:	f002 fb61 	bl	80087c4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8006102:	2000      	movs	r0, #0
 8006104:	f002 fb63 	bl	80087ce <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8006108:	4645      	mov	r5, r8
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800610a:	f002 fb68 	bl	80087de <LoRaMacClassBIsMulticastExpected>
 800610e:	b148      	cbz	r0, 8006124 <HandleRadioRxErrorTimeout+0x64>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006110:	2000      	movs	r0, #0
 8006112:	f002 fb58 	bl	80087c6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8006116:	2000      	movs	r0, #0
 8006118:	f002 fb5a 	bl	80087d0 <LoRaMacClassBMulticastSlotTimerEvent>
}
 800611c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 8006120:	f7ff bf6c 	b.w	8005ffc <UpdateRxSlotIdleState>
    if( classBRx == false )
 8006124:	2d00      	cmp	r5, #0
 8006126:	d1f9      	bne.n	800611c <HandleRadioRxErrorTimeout+0x5c>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8006128:	f894 2484 	ldrb.w	r2, [r4, #1156]	@ 0x484
            if( MacCtx.NodeAckRequested == true )
 800612c:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8006130:	b9ba      	cbnz	r2, 8006162 <HandleRadioRxErrorTimeout+0xa2>
            if( MacCtx.NodeAckRequested == true )
 8006132:	b10b      	cbz	r3, 8006138 <HandleRadioRxErrorTimeout+0x78>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8006134:	f884 743d 	strb.w	r7, [r4, #1085]	@ 0x43d
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8006138:	4638      	mov	r0, r7
 800613a:	f002 fce5 	bl	8008b08 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800613e:	f8d4 0538 	ldr.w	r0, [r4, #1336]	@ 0x538
 8006142:	f006 f903 	bl	800c34c <UTIL_TIMER_GetElapsedTime>
 8006146:	f8d4 33b8 	ldr.w	r3, [r4, #952]	@ 0x3b8
 800614a:	4298      	cmp	r0, r3
 800614c:	d3e6      	bcc.n	800611c <HandleRadioRxErrorTimeout+0x5c>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800614e:	480c      	ldr	r0, [pc, #48]	@ (8006180 <HandleRadioRxErrorTimeout+0xc0>)
 8006150:	f006 f936 	bl	800c3c0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8006154:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8006158:	f043 0320 	orr.w	r3, r3, #32
 800615c:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
 8006160:	e7dc      	b.n	800611c <HandleRadioRxErrorTimeout+0x5c>
            if( MacCtx.NodeAckRequested == true )
 8006162:	b10b      	cbz	r3, 8006168 <HandleRadioRxErrorTimeout+0xa8>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8006164:	f884 643d 	strb.w	r6, [r4, #1085]	@ 0x43d
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8006168:	4630      	mov	r0, r6
 800616a:	f002 fccd 	bl	8008b08 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800616e:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8006172:	2b02      	cmp	r3, #2
 8006174:	d1ee      	bne.n	8006154 <HandleRadioRxErrorTimeout+0x94>
 8006176:	e7d1      	b.n	800611c <HandleRadioRxErrorTimeout+0x5c>
 8006178:	200005f8 	.word	0x200005f8
 800617c:	0800cec4 	.word	0x0800cec4
 8006180:	20000994 	.word	0x20000994

08006184 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8006184:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <OnRadioRxTimeout+0x28>)
{
 8006186:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006190:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8006194:	b113      	cbz	r3, 800619c <OnRadioRxTimeout+0x18>
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	b103      	cbz	r3, 800619c <OnRadioRxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800619a:	4798      	blx	r3
}
 800619c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80061a0:	2201      	movs	r2, #1
 80061a2:	2100      	movs	r1, #0
 80061a4:	2002      	movs	r0, #2
 80061a6:	4b02      	ldr	r3, [pc, #8]	@ (80061b0 <OnRadioRxTimeout+0x2c>)
 80061a8:	f005 bde6 	b.w	800bd78 <UTIL_ADV_TRACE_COND_FSend>
 80061ac:	200005f8 	.word	0x200005f8
 80061b0:	0800d3c7 	.word	0x0800d3c7

080061b4 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80061b4:	4b09      	ldr	r3, [pc, #36]	@ (80061dc <OnRadioTxTimeout+0x28>)
{
 80061b6:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	f042 0204 	orr.w	r2, r2, #4
 80061be:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80061c0:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80061c4:	b113      	cbz	r3, 80061cc <OnRadioTxTimeout+0x18>
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	b103      	cbz	r3, 80061cc <OnRadioTxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80061ca:	4798      	blx	r3
}
 80061cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80061d0:	2201      	movs	r2, #1
 80061d2:	2100      	movs	r1, #0
 80061d4:	2002      	movs	r0, #2
 80061d6:	4b02      	ldr	r3, [pc, #8]	@ (80061e0 <OnRadioTxTimeout+0x2c>)
 80061d8:	f005 bdce 	b.w	800bd78 <UTIL_ADV_TRACE_COND_FSend>
 80061dc:	200005f8 	.word	0x200005f8
 80061e0:	0800d3d7 	.word	0x0800d3d7

080061e4 <OnRadioRxDone>:
{
 80061e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e8:	461d      	mov	r5, r3
 80061ea:	4680      	mov	r8, r0
 80061ec:	460f      	mov	r7, r1
 80061ee:	4616      	mov	r6, r2
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80061f0:	f006 f8a2 	bl	800c338 <UTIL_TIMER_GetCurrentTime>
 80061f4:	4c0e      	ldr	r4, [pc, #56]	@ (8006230 <OnRadioRxDone+0x4c>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 80061f6:	7823      	ldrb	r3, [r4, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80061f8:	f8c4 0858 	str.w	r0, [r4, #2136]	@ 0x858
    LoRaMacRadioEvents.Events.RxDone = 1;
 80061fc:	f043 0308 	orr.w	r3, r3, #8
 8006200:	7023      	strb	r3, [r4, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006202:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
    RxDoneParams.Payload = payload;
 8006206:	f8c4 885c 	str.w	r8, [r4, #2140]	@ 0x85c
    RxDoneParams.Size = size;
 800620a:	f8a4 7860 	strh.w	r7, [r4, #2144]	@ 0x860
    RxDoneParams.Rssi = rssi;
 800620e:	f8a4 6862 	strh.w	r6, [r4, #2146]	@ 0x862
    RxDoneParams.Snr = snr;
 8006212:	f884 5864 	strb.w	r5, [r4, #2148]	@ 0x864
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006216:	b113      	cbz	r3, 800621e <OnRadioRxDone+0x3a>
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	b103      	cbz	r3, 800621e <OnRadioRxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800621c:	4798      	blx	r3
}
 800621e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8006222:	2201      	movs	r2, #1
 8006224:	2100      	movs	r1, #0
 8006226:	2002      	movs	r0, #2
 8006228:	4b02      	ldr	r3, [pc, #8]	@ (8006234 <OnRadioRxDone+0x50>)
 800622a:	f005 bda5 	b.w	800bd78 <UTIL_ADV_TRACE_COND_FSend>
 800622e:	bf00      	nop
 8006230:	200005f8 	.word	0x200005f8
 8006234:	0800d3e7 	.word	0x0800d3e7

08006238 <OnRadioTxDone>:
{
 8006238:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800623a:	f006 f87d 	bl	800c338 <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 800623e:	466d      	mov	r5, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8006240:	4c0f      	ldr	r4, [pc, #60]	@ (8006280 <OnRadioTxDone+0x48>)
 8006242:	f8c4 0868 	str.w	r0, [r4, #2152]	@ 0x868
    MacCtx.LastTxSysTime = SysTimeGet( );
 8006246:	4628      	mov	r0, r5
 8006248:	f005 ffcc 	bl	800c1e4 <SysTimeGet>
 800624c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006250:	f504 734f 	add.w	r3, r4, #828	@ 0x33c
 8006254:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8006258:	7823      	ldrb	r3, [r4, #0]
 800625a:	f043 0310 	orr.w	r3, r3, #16
 800625e:	7023      	strb	r3, [r4, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006260:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
 8006264:	b113      	cbz	r3, 800626c <OnRadioTxDone+0x34>
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	b103      	cbz	r3, 800626c <OnRadioTxDone+0x34>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800626a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800626c:	2201      	movs	r2, #1
 800626e:	2100      	movs	r1, #0
 8006270:	2002      	movs	r0, #2
 8006272:	4b04      	ldr	r3, [pc, #16]	@ (8006284 <OnRadioTxDone+0x4c>)
}
 8006274:	b003      	add	sp, #12
 8006276:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800627a:	f005 bd7d 	b.w	800bd78 <UTIL_ADV_TRACE_COND_FSend>
 800627e:	bf00      	nop
 8006280:	200005f8 	.word	0x200005f8
 8006284:	0800d3f4 	.word	0x0800d3f4

08006288 <ResetMacParameters>:
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;

    Nvm.MacGroup2.MaxDCycle = 0;
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8006288:	2301      	movs	r3, #1
{
 800628a:	b5f0      	push	{r4, r5, r6, r7, lr}
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800628c:	2500      	movs	r5, #0
 800628e:	4c45      	ldr	r4, [pc, #276]	@ (80063a4 <ResetMacParameters+0x11c>)
{
 8006290:	b08f      	sub	sp, #60	@ 0x3c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8006292:	f8b4 25d0 	ldrh.w	r2, [r4, #1488]	@ 0x5d0
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8006296:	f8d4 15b4 	ldr.w	r1, [r4, #1460]	@ 0x5b4
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800629a:	f8a4 2544 	strh.w	r2, [r4, #1348]	@ 0x544
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800629e:	f894 25ad 	ldrb.w	r2, [r4, #1453]	@ 0x5ad
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80062a2:	f8d4 05b0 	ldr.w	r0, [r4, #1456]	@ 0x5b0
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80062a6:	f884 256d 	strb.w	r2, [r4, #1389]	@ 0x56d
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80062aa:	f504 62ae 	add.w	r2, r4, #1392	@ 0x570
 80062ae:	e882 0003 	stmia.w	r2, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80062b2:	f8d4 15bc 	ldr.w	r1, [r4, #1468]	@ 0x5bc
 80062b6:	f8d4 05b8 	ldr.w	r0, [r4, #1464]	@ 0x5b8
 80062ba:	f504 62af 	add.w	r2, r4, #1400	@ 0x578
 80062be:	e882 0003 	stmia.w	r2, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80062c2:	f8b4 25c0 	ldrh.w	r2, [r4, #1472]	@ 0x5c0
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80062c6:	f8a4 360e 	strh.w	r3, [r4, #1550]	@ 0x60e
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80062ca:	f8a4 2580 	strh.w	r2, [r4, #1408]	@ 0x580
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80062ce:	f8d4 25c4 	ldr.w	r2, [r4, #1476]	@ 0x5c4
    MacCtx.NodeAckRequested = false;
    Nvm.MacGroup1.SrvAckRequested = false;

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80062d2:	f88d 3014 	strb.w	r3, [sp, #20]
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80062d6:	f8c4 2584 	str.w	r2, [r4, #1412]	@ 0x584
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80062da:	f8d4 25c8 	ldr.w	r2, [r4, #1480]	@ 0x5c8
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80062de:	f204 63e4 	addw	r3, r4, #1764	@ 0x6e4
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80062e2:	f8c4 2588 	str.w	r2, [r4, #1416]	@ 0x588
    MacCtx.ChannelsNbTransCounter = 0;
 80062e6:	4a30      	ldr	r2, [pc, #192]	@ (80063a8 <ResetMacParameters+0x120>)
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80062e8:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80062ec:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80062ee:	a903      	add	r1, sp, #12
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80062f0:	f504 63ef 	add.w	r3, r4, #1912	@ 0x778
    MacCtx.ChannelsNbTransCounter = 0;
 80062f4:	f8c4 2414 	str.w	r2, [r4, #1044]	@ 0x414
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80062f8:	9304      	str	r3, [sp, #16]
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80062fa:	f884 561c 	strb.w	r5, [r4, #1564]	@ 0x61c
    Nvm.MacGroup1.AdrAckCounter = 0;
 80062fe:	f8c4 5534 	str.w	r5, [r4, #1332]	@ 0x534
    Nvm.MacGroup2.MaxDCycle = 0;
 8006302:	f884 560b 	strb.w	r5, [r4, #1547]	@ 0x60b
    MacCtx.NodeAckRequested = false;
 8006306:	f884 5418 	strb.w	r5, [r4, #1048]	@ 0x418
    Nvm.MacGroup1.SrvAckRequested = false;
 800630a:	f884 5546 	strb.w	r5, [r4, #1350]	@ 0x546
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800630e:	f003 f8cd 	bl	80094ac <RegionInitDefaults>
    // Initialize channel index.
    MacCtx.Channel = 0;

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8006312:	f8d4 3570 	ldr.w	r3, [r4, #1392]	@ 0x570
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8006316:	f884 53d0 	strb.w	r5, [r4, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800631a:	f8c4 33d4 	str.w	r3, [r4, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800631e:	f894 3581 	ldrb.w	r3, [r4, #1409]	@ 0x581
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
    MacCtx.RxWindow2Config.RxContinuous = false;
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8006322:	f504 7679 	add.w	r6, r4, #996	@ 0x3e4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006326:	f884 33e0 	strb.w	r3, [r4, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800632a:	f894 358c 	ldrb.w	r3, [r4, #1420]	@ 0x58c
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800632e:	f504 7774 	add.w	r7, r4, #976	@ 0x3d0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8006332:	f884 33e1 	strb.w	r3, [r4, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8006336:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800633a:	f8a4 33e2 	strh.w	r3, [r4, #994]	@ 0x3e2
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800633e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006340:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006342:	683b      	ldr	r3, [r7, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
    classBCallbacks.MacProcessNotify = NULL;
 8006344:	e9cd 5501 	strd	r5, r5, [sp, #4]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8006348:	6033      	str	r3, [r6, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800634a:	f240 2301 	movw	r3, #513	@ 0x201
 800634e:	f8a4 33f6 	strh.w	r3, [r4, #1014]	@ 0x3f6

    if( MacCtx.MacCallbacks != NULL )
 8006352:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
    MacCtx.Channel = 0;
 8006356:	f884 5419 	strb.w	r5, [r4, #1049]	@ 0x419
    if( MacCtx.MacCallbacks != NULL )
 800635a:	b11b      	cbz	r3, 8006364 <ResetMacParameters+0xdc>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800635c:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800635e:	691b      	ldr	r3, [r3, #16]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8006360:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8006362:	9302      	str	r3, [sp, #8]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8006364:	4a11      	ldr	r2, [pc, #68]	@ (80063ac <ResetMacParameters+0x124>)
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8006366:	a901      	add	r1, sp, #4
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8006368:	f1a2 0344 	sub.w	r3, r2, #68	@ 0x44
 800636c:	9307      	str	r3, [sp, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800636e:	f1a2 0314 	sub.w	r3, r2, #20
 8006372:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8006374:	f102 0321 	add.w	r3, r2, #33	@ 0x21
 8006378:	9309      	str	r3, [sp, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800637a:	f502 73ba 	add.w	r3, r2, #372	@ 0x174
 800637e:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8006380:	f102 03e8 	add.w	r3, r2, #232	@ 0xe8
 8006384:	930b      	str	r3, [sp, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8006386:	f102 03ec 	add.w	r3, r2, #236	@ 0xec
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800638a:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800638c:	930c      	str	r3, [sp, #48]	@ 0x30
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800638e:	a806      	add	r0, sp, #24
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8006390:	f502 73bc 	add.w	r3, r2, #376	@ 0x178
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8006394:	f502 7277 	add.w	r2, r2, #988	@ 0x3dc
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8006398:	930d      	str	r3, [sp, #52]	@ 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800639a:	f002 fa11 	bl	80087c0 <LoRaMacClassBInit>
}
 800639e:	b00f      	add	sp, #60	@ 0x3c
 80063a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a2:	bf00      	nop
 80063a4:	200005f8 	.word	0x200005f8
 80063a8:	00010100 	.word	0x00010100
 80063ac:	20000a5c 	.word	0x20000a5c

080063b0 <ScheduleTx>:
{
 80063b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b2:	b093      	sub	sp, #76	@ 0x4c
 80063b4:	4607      	mov	r7, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80063b6:	f002 fa0e 	bl	80087d6 <LoRaMacClassBIsBeaconExpected>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f040 8163 	bne.w	8006686 <ScheduleTx+0x2d6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80063c0:	4cb2      	ldr	r4, [pc, #712]	@ (800668c <ScheduleTx+0x2dc>)
 80063c2:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d009      	beq.n	80063de <ScheduleTx+0x2e>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80063ca:	f8d4 353c 	ldr.w	r3, [r4, #1340]	@ 0x53c
 80063ce:	b193      	cbz	r3, 80063f6 <ScheduleTx+0x46>
    switch( MacCtx.TxMsg.Type )
 80063d0:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 80063d4:	b1c3      	cbz	r3, 8006408 <ScheduleTx+0x58>
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d076      	beq.n	80064c8 <ScheduleTx+0x118>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80063da:	2503      	movs	r5, #3
 80063dc:	e003      	b.n	80063e6 <ScheduleTx+0x36>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80063de:	f002 f9fc 	bl	80087da <LoRaMacClassBIsPingExpected>
 80063e2:	b118      	cbz	r0, 80063ec <ScheduleTx+0x3c>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80063e4:	250f      	movs	r5, #15
}
 80063e6:	4628      	mov	r0, r5
 80063e8:	b013      	add	sp, #76	@ 0x4c
 80063ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80063ec:	f002 f9f7 	bl	80087de <LoRaMacClassBIsMulticastExpected>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d0ea      	beq.n	80063ca <ScheduleTx+0x1a>
 80063f4:	e7f6      	b.n	80063e4 <ScheduleTx+0x34>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80063f6:	f8b4 360e 	ldrh.w	r3, [r4, #1550]	@ 0x60e
 80063fa:	f8d4 241c 	ldr.w	r2, [r4, #1052]	@ 0x41c
 80063fe:	3b01      	subs	r3, #1
 8006400:	4353      	muls	r3, r2
 8006402:	f8c4 353c 	str.w	r3, [r4, #1340]	@ 0x53c
 8006406:	e7e3      	b.n	80063d0 <ScheduleTx+0x20>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8006408:	48a1      	ldr	r0, [pc, #644]	@ (8006690 <ScheduleTx+0x2e0>)
 800640a:	f002 ff9b 	bl	8009344 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800640e:	2800      	cmp	r0, #0
 8006410:	f040 811f 	bne.w	8006652 <ScheduleTx+0x2a2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8006414:	f894 3110 	ldrb.w	r3, [r4, #272]	@ 0x110
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006418:	ae06      	add	r6, sp, #24
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800641a:	80a3      	strh	r3, [r4, #4]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800641c:	f8d4 353c 	ldr.w	r3, [r4, #1340]	@ 0x53c
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006420:	4630      	mov	r0, r6
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8006422:	930c      	str	r3, [sp, #48]	@ 0x30
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006424:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006428:	ad02      	add	r5, sp, #8
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800642a:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800642e:	f894 360c 	ldrb.w	r3, [r4, #1548]	@ 0x60c
 8006432:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006436:	f005 fefb 	bl	800c230 <SysTimeGetMcuTime>
 800643a:	f8d4 3614 	ldr.w	r3, [r4, #1556]	@ 0x614
 800643e:	4628      	mov	r0, r5
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	e896 0006 	ldmia.w	r6, {r1, r2}
 8006446:	f8d4 3610 	ldr.w	r3, [r4, #1552]	@ 0x610
 800644a:	f005 fe88 	bl	800c15e <SysTimeSub>
 800644e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006452:	ab0f      	add	r3, sp, #60	@ 0x3c
 8006454:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8006458:	f8d4 3538 	ldr.w	r3, [r4, #1336]	@ 0x538
    nextChan.Joined = true;
 800645c:	2201      	movs	r2, #1
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800645e:	930d      	str	r3, [sp, #52]	@ 0x34
    nextChan.LastTxIsJoinRequest = false;
 8006460:	2300      	movs	r3, #0
 8006462:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
    nextChan.PktLen = MacCtx.PktBufferLen;
 8006466:	88a3      	ldrh	r3, [r4, #4]
    nextChan.Joined = true;
 8006468:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
    nextChan.PktLen = MacCtx.PktBufferLen;
 800646c:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006470:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
 8006474:	b91b      	cbnz	r3, 800647e <ScheduleTx+0xce>
        nextChan.LastTxIsJoinRequest = true;
 8006476:	f88d 2044 	strb.w	r2, [sp, #68]	@ 0x44
        nextChan.Joined = false;
 800647a:	f88d 3039 	strb.w	r3, [sp, #57]	@ 0x39
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800647e:	f46f 7291 	mvn.w	r2, #290	@ 0x122
 8006482:	4e84      	ldr	r6, [pc, #528]	@ (8006694 <ScheduleTx+0x2e4>)
 8006484:	a90c      	add	r1, sp, #48	@ 0x30
 8006486:	9600      	str	r6, [sp, #0]
 8006488:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 800648c:	f1a6 03b4 	sub.w	r3, r6, #180	@ 0xb4
 8006490:	18b2      	adds	r2, r6, r2
 8006492:	f003 f87f 	bl	8009594 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8006496:	4605      	mov	r5, r0
 8006498:	b1d0      	cbz	r0, 80064d0 <ScheduleTx+0x120>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800649a:	280b      	cmp	r0, #11
 800649c:	d1a3      	bne.n	80063e6 <ScheduleTx+0x36>
 800649e:	2f00      	cmp	r7, #0
 80064a0:	d0a1      	beq.n	80063e6 <ScheduleTx+0x36>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80064a2:	f8d4 1488 	ldr.w	r1, [r4, #1160]	@ 0x488
 80064a6:	b169      	cbz	r1, 80064c4 <ScheduleTx+0x114>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80064a8:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80064ac:	f5a6 70e8 	sub.w	r0, r6, #464	@ 0x1d0
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80064b0:	f043 0320 	orr.w	r3, r3, #32
 80064b4:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80064b8:	f006 f80a 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80064bc:	f5a6 70e8 	sub.w	r0, r6, #464	@ 0x1d0
 80064c0:	f005 ffcc 	bl	800c45c <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 80064c4:	2500      	movs	r5, #0
 80064c6:	e78e      	b.n	80063e6 <ScheduleTx+0x36>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80064c8:	4871      	ldr	r0, [pc, #452]	@ (8006690 <ScheduleTx+0x2e0>)
 80064ca:	f002 ff6f 	bl	80093ac <LoRaMacSerializerData>
 80064ce:	e79e      	b.n	800640e <ScheduleTx+0x5e>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80064d0:	f894 754c 	ldrb.w	r7, [r4, #1356]	@ 0x54c
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80064d4:	f994 356d 	ldrsb.w	r3, [r4, #1389]	@ 0x56d
 80064d8:	f994 2545 	ldrsb.w	r2, [r4, #1349]	@ 0x545
 80064dc:	f894 1581 	ldrb.w	r1, [r4, #1409]	@ 0x581
 80064e0:	4638      	mov	r0, r7
 80064e2:	f003 f86b 	bl	80095bc <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80064e6:	f5a6 73c0 	sub.w	r3, r6, #384	@ 0x180
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	b241      	sxtb	r1, r0
 80064ee:	f8d4 3550 	ldr.w	r3, [r4, #1360]	@ 0x550
 80064f2:	4638      	mov	r0, r7
 80064f4:	f894 2554 	ldrb.w	r2, [r4, #1364]	@ 0x554
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80064f8:	f5a6 76b6 	sub.w	r6, r6, #364	@ 0x16c
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80064fc:	f002 fff2 	bl	80094e4 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006500:	9600      	str	r6, [sp, #0]
 8006502:	f8d4 3550 	ldr.w	r3, [r4, #1360]	@ 0x550
 8006506:	f894 2554 	ldrb.w	r2, [r4, #1364]	@ 0x554
 800650a:	f994 1574 	ldrsb.w	r1, [r4, #1396]	@ 0x574
 800650e:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8006512:	f002 ffe7 	bl	80094e4 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8006516:	f8d4 13c8 	ldr.w	r1, [r4, #968]	@ 0x3c8
 800651a:	f8d4 355c 	ldr.w	r3, [r4, #1372]	@ 0x55c
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800651e:	f8d4 23dc 	ldr.w	r2, [r4, #988]	@ 0x3dc
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8006522:	440b      	add	r3, r1
 8006524:	f8c4 33b4 	str.w	r3, [r4, #948]	@ 0x3b4
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8006528:	f8d4 3560 	ldr.w	r3, [r4, #1376]	@ 0x560
 800652c:	4413      	add	r3, r2
 800652e:	f8c4 33b8 	str.w	r3, [r4, #952]	@ 0x3b8
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006532:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d16b      	bne.n	8006612 <ScheduleTx+0x262>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800653a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	@ 0x564
 800653e:	440b      	add	r3, r1
 8006540:	f8c4 33b4 	str.w	r3, [r4, #948]	@ 0x3b4
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8006544:	f8d4 3568 	ldr.w	r3, [r4, #1384]	@ 0x568
 8006548:	4413      	add	r3, r2
 800654a:	f8c4 33b8 	str.w	r3, [r4, #952]	@ 0x3b8

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	f88d 3013 	strb.w	r3, [sp, #19]

    txConfig.Channel = channel;
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006554:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
    return SendFrameOnChannel( MacCtx.Channel );
 8006558:	f894 6419 	ldrb.w	r6, [r4, #1049]	@ 0x419
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800655c:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8006560:	f894 3544 	ldrb.w	r3, [r4, #1348]	@ 0x544
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
    txConfig.PktLen = MacCtx.PktBufferLen;

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8006564:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8006568:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800656c:	f8d4 3584 	ldr.w	r3, [r4, #1412]	@ 0x584
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8006570:	f10d 0213 	add.w	r2, sp, #19
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8006574:	9309      	str	r3, [sp, #36]	@ 0x24
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8006576:	f8d4 3588 	ldr.w	r3, [r4, #1416]	@ 0x588
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800657a:	a908      	add	r1, sp, #32
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800657c:	930a      	str	r3, [sp, #40]	@ 0x28
    txConfig.PktLen = MacCtx.PktBufferLen;
 800657e:	88a3      	ldrh	r3, [r4, #4]
    txConfig.Channel = channel;
 8006580:	f88d 6020 	strb.w	r6, [sp, #32]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8006584:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8006588:	4b43      	ldr	r3, [pc, #268]	@ (8006698 <ScheduleTx+0x2e8>)
 800658a:	f002 ffc1 	bl	8009510 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f884 343d 	strb.w	r3, [r4, #1085]	@ 0x43d
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006594:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
    MacCtx.McpsConfirm.TxPower = txPower;
    MacCtx.McpsConfirm.Channel = channel;
 8006598:	f8c4 644c 	str.w	r6, [r4, #1100]	@ 0x44c
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800659c:	f884 343e 	strb.w	r3, [r4, #1086]	@ 0x43e
    MacCtx.McpsConfirm.TxPower = txPower;
 80065a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80065a4:	f884 343f 	strb.w	r3, [r4, #1087]	@ 0x43f

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80065a8:	f8d4 341c 	ldr.w	r3, [r4, #1052]	@ 0x41c
 80065ac:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80065b0:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80065b4:	f002 f915 	bl	80087e2 <LoRaMacClassBIsBeaconModeActive>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d13e      	bne.n	800663a <ScheduleTx+0x28a>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80065bc:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <ScheduleTx+0x218>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80065c4:	f002 f921 	bl	800880a <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80065c8:	f002 f90e 	bl	80087e8 <LoRaMacClassBHaltBeaconing>
    uint32_t fCntUp = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	9305      	str	r3, [sp, #20]
    switch( MacCtx.TxMsg.Type )
 80065d0:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80065d4:	f994 6545 	ldrsb.w	r6, [r4, #1349]	@ 0x545
 80065d8:	f894 7419 	ldrb.w	r7, [r4, #1049]	@ 0x419
    switch( MacCtx.TxMsg.Type )
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d034      	beq.n	800664a <ScheduleTx+0x29a>
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	f47f aefa 	bne.w	80063da <ScheduleTx+0x2a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80065e6:	a805      	add	r0, sp, #20
 80065e8:	f002 fc02 	bl	8008df0 <LoRaMacCryptoGetFCntUp>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d148      	bne.n	8006682 <ScheduleTx+0x2d2>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80065f0:	f894 3414 	ldrb.w	r3, [r4, #1044]	@ 0x414
 80065f4:	b91b      	cbnz	r3, 80065fe <ScheduleTx+0x24e>
 80065f6:	f894 3416 	ldrb.w	r3, [r4, #1046]	@ 0x416
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d902      	bls.n	8006604 <ScheduleTx+0x254>
                fCntUp -= 1;
 80065fe:	9b05      	ldr	r3, [sp, #20]
 8006600:	3b01      	subs	r3, #1
 8006602:	9305      	str	r3, [sp, #20]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8006604:	463a      	mov	r2, r7
 8006606:	4b22      	ldr	r3, [pc, #136]	@ (8006690 <ScheduleTx+0x2e0>)
 8006608:	9805      	ldr	r0, [sp, #20]
 800660a:	b2f1      	uxtb	r1, r6
 800660c:	f002 fc64 	bl	8008ed8 <LoRaMacCryptoSecureMessage>
 8006610:	e01e      	b.n	8006650 <ScheduleTx+0x2a0>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8006612:	a808      	add	r0, sp, #32
    size_t macCmdsSize = 0;
 8006614:	9508      	str	r5, [sp, #32]
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8006616:	f002 f997 	bl	8008948 <LoRaMacCommandsGetSizeSerializedCmds>
 800661a:	b960      	cbnz	r0, 8006636 <ScheduleTx+0x286>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800661c:	f994 0545 	ldrsb.w	r0, [r4, #1349]	@ 0x545
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8006620:	f894 623b 	ldrb.w	r6, [r4, #571]	@ 0x23b
 8006624:	f89d 7020 	ldrb.w	r7, [sp, #32]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8006628:	f7ff fcf4 	bl	8006014 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800662c:	443e      	add	r6, r7
 800662e:	42b0      	cmp	r0, r6
 8006630:	d28d      	bcs.n	800654e <ScheduleTx+0x19e>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8006632:	2508      	movs	r5, #8
 8006634:	e6d7      	b.n	80063e6 <ScheduleTx+0x36>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8006636:	2513      	movs	r5, #19
 8006638:	e6d5      	b.n	80063e6 <ScheduleTx+0x36>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800663a:	f8d4 041c 	ldr.w	r0, [r4, #1052]	@ 0x41c
 800663e:	f002 f8e2 	bl	8008806 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8006642:	2800      	cmp	r0, #0
 8006644:	d0ba      	beq.n	80065bc <ScheduleTx+0x20c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8006646:	2510      	movs	r5, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8006648:	e6cd      	b.n	80063e6 <ScheduleTx+0x36>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800664a:	4811      	ldr	r0, [pc, #68]	@ (8006690 <ScheduleTx+0x2e0>)
 800664c:	f002 fc1a 	bl	8008e84 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8006650:	b108      	cbz	r0, 8006656 <ScheduleTx+0x2a6>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8006652:	2511      	movs	r5, #17
 8006654:	e6c7      	b.n	80063e6 <ScheduleTx+0x36>
    if( status != LORAMAC_STATUS_OK )
    {
        return status;
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8006656:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800665a:	f894 1110 	ldrb.w	r1, [r4, #272]	@ 0x110
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800665e:	f043 0302 	orr.w	r3, r3, #2
 8006662:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    if( MacCtx.NodeAckRequested == false )
 8006666:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800666a:	80a1      	strh	r1, [r4, #4]
    if( MacCtx.NodeAckRequested == false )
 800666c:	b923      	cbnz	r3, 8006678 <ScheduleTx+0x2c8>
    {
        MacCtx.ChannelsNbTransCounter++;
 800666e:	f894 3414 	ldrb.w	r3, [r4, #1044]	@ 0x414
 8006672:	3301      	adds	r3, #1
 8006674:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8006678:	4b08      	ldr	r3, [pc, #32]	@ (800669c <ScheduleTx+0x2ec>)
 800667a:	4809      	ldr	r0, [pc, #36]	@ (80066a0 <ScheduleTx+0x2f0>)
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8006680:	e6b1      	b.n	80063e6 <ScheduleTx+0x36>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8006682:	2512      	movs	r5, #18
 8006684:	e6af      	b.n	80063e6 <ScheduleTx+0x36>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8006686:	250e      	movs	r5, #14
 8006688:	e6ad      	b.n	80063e6 <ScheduleTx+0x36>
 800668a:	bf00      	nop
 800668c:	200005f8 	.word	0x200005f8
 8006690:	20000704 	.word	0x20000704
 8006694:	20000b34 	.word	0x20000b34
 8006698:	20000a14 	.word	0x20000a14
 800669c:	0800cec4 	.word	0x0800cec4
 80066a0:	200005fe 	.word	0x200005fe

080066a4 <OpenContinuousRxCWindow>:
{
 80066a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80066a6:	4c12      	ldr	r4, [pc, #72]	@ (80066f0 <OpenContinuousRxCWindow+0x4c>)
 80066a8:	f504 7579 	add.w	r5, r4, #996	@ 0x3e4
 80066ac:	9500      	str	r5, [sp, #0]
 80066ae:	f8d4 3550 	ldr.w	r3, [r4, #1360]	@ 0x550
 80066b2:	f894 2554 	ldrb.w	r2, [r4, #1364]	@ 0x554
 80066b6:	f994 157c 	ldrsb.w	r1, [r4, #1404]	@ 0x57c
 80066ba:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 80066be:	f002 ff11 	bl	80094e4 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80066c2:	f240 2301 	movw	r3, #513	@ 0x201
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80066c6:	4629      	mov	r1, r5
 80066c8:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 80066cc:	f204 4224 	addw	r2, r4, #1060	@ 0x424
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80066d0:	f8a4 33f6 	strh.w	r3, [r4, #1014]	@ 0x3f6
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80066d4:	f002 ff13 	bl	80094fe <RegionRxConfig>
 80066d8:	b138      	cbz	r0, 80066ea <OpenContinuousRxCWindow+0x46>
        Radio.Rx( 0 ); // Continuous mode
 80066da:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <OpenContinuousRxCWindow+0x50>)
 80066dc:	2000      	movs	r0, #0
 80066de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e0:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80066e2:	f894 33f7 	ldrb.w	r3, [r4, #1015]	@ 0x3f7
 80066e6:	f884 3484 	strb.w	r3, [r4, #1156]	@ 0x484
}
 80066ea:	b003      	add	sp, #12
 80066ec:	bd30      	pop	{r4, r5, pc}
 80066ee:	bf00      	nop
 80066f0:	200005f8 	.word	0x200005f8
 80066f4:	0800cec4 	.word	0x0800cec4

080066f8 <SwitchClass>:
{
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 80066fa:	4c2c      	ldr	r4, [pc, #176]	@ (80067ac <SwitchClass+0xb4>)
{
 80066fc:	4605      	mov	r5, r0
    switch( Nvm.MacGroup2.DeviceClass )
 80066fe:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8006702:	2b01      	cmp	r3, #1
 8006704:	d00f      	beq.n	8006726 <SwitchClass+0x2e>
 8006706:	2b02      	cmp	r3, #2
 8006708:	d048      	beq.n	800679c <SwitchClass+0xa4>
 800670a:	b943      	cbnz	r3, 800671e <SwitchClass+0x26>
            if( deviceClass == CLASS_A )
 800670c:	b948      	cbnz	r0, 8006722 <SwitchClass+0x2a>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800670e:	f8d4 1574 	ldr.w	r1, [r4, #1396]	@ 0x574
 8006712:	f8d4 0570 	ldr.w	r0, [r4, #1392]	@ 0x570
 8006716:	f504 63af 	add.w	r3, r4, #1400	@ 0x578
 800671a:	e883 0003 	stmia.w	r3, {r0, r1}
{
 800671e:	2003      	movs	r0, #3
 8006720:	e03b      	b.n	800679a <SwitchClass+0xa2>
            if( deviceClass == CLASS_B )
 8006722:	2801      	cmp	r0, #1
 8006724:	d105      	bne.n	8006732 <SwitchClass+0x3a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8006726:	f002 f861 	bl	80087ec <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800672a:	bbb0      	cbnz	r0, 800679a <SwitchClass+0xa2>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800672c:	f884 5608 	strb.w	r5, [r4, #1544]	@ 0x608
 8006730:	e033      	b.n	800679a <SwitchClass+0xa2>
            if( deviceClass == CLASS_C )
 8006732:	2802      	cmp	r0, #2
 8006734:	d1f3      	bne.n	800671e <SwitchClass+0x26>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8006736:	f504 7679 	add.w	r6, r4, #996	@ 0x3e4
 800673a:	f504 7774 	add.w	r7, r4, #976	@ 0x3d0
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800673e:	f884 0608 	strb.w	r0, [r4, #1544]	@ 0x608
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8006742:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006744:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6033      	str	r3, [r6, #0]
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800674a:	f894 35de 	ldrb.w	r3, [r4, #1502]	@ 0x5de
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800674e:	f884 53f7 	strb.w	r5, [r4, #1015]	@ 0x3f7
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8006752:	b1cb      	cbz	r3, 8006788 <SwitchClass+0x90>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8006754:	f8d4 35f4 	ldr.w	r3, [r4, #1524]	@ 0x5f4
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8006758:	f894 25f8 	ldrb.w	r2, [r4, #1528]	@ 0x5f8
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800675c:	f8c4 3578 	str.w	r3, [r4, #1400]	@ 0x578
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8006760:	f8c4 33e8 	str.w	r3, [r4, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006764:	f894 3581 	ldrb.w	r3, [r4, #1409]	@ 0x581
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8006768:	f884 257c 	strb.w	r2, [r4, #1404]	@ 0x57c
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800676c:	f884 33f4 	strb.w	r3, [r4, #1012]	@ 0x3f4
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8006770:	f894 358c 	ldrb.w	r3, [r4, #1420]	@ 0x58c
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8006774:	f894 2419 	ldrb.w	r2, [r4, #1049]	@ 0x419
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8006778:	f884 33f5 	strb.w	r3, [r4, #1013]	@ 0x3f5
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800677c:	f240 3301 	movw	r3, #769	@ 0x301
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8006780:	f884 23e4 	strb.w	r2, [r4, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8006784:	f8a4 33f6 	strh.w	r3, [r4, #1014]	@ 0x3f6
                MacCtx.NodeAckRequested = false;
 8006788:	2300      	movs	r3, #0
 800678a:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
                Radio.Sleep( );
 800678e:	4b08      	ldr	r3, [pc, #32]	@ (80067b0 <SwitchClass+0xb8>)
 8006790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006792:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8006794:	f7ff ff86 	bl	80066a4 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8006798:	2000      	movs	r0, #0
}
 800679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 800679c:	2800      	cmp	r0, #0
 800679e:	d1be      	bne.n	800671e <SwitchClass+0x26>
                Radio.Sleep( );
 80067a0:	4b03      	ldr	r3, [pc, #12]	@ (80067b0 <SwitchClass+0xb8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80067a2:	f884 0608 	strb.w	r0, [r4, #1544]	@ 0x608
                Radio.Sleep( );
 80067a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a8:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 80067aa:	e7f5      	b.n	8006798 <SwitchClass+0xa0>
 80067ac:	200005f8 	.word	0x200005f8
 80067b0:	0800cec4 	.word	0x0800cec4

080067b4 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	460d      	mov	r5, r1
    Radio.Standby( );
 80067b8:	4e0a      	ldr	r6, [pc, #40]	@ (80067e4 <RxWindowSetup.constprop.0+0x30>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80067ba:	4c0b      	ldr	r4, [pc, #44]	@ (80067e8 <RxWindowSetup.constprop.0+0x34>)
    TimerStop( rxTimer );
 80067bc:	f005 fe00 	bl	800c3c0 <UTIL_TIMER_Stop>
    Radio.Standby( );
 80067c0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80067c2:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80067c4:	4629      	mov	r1, r5
 80067c6:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 80067ca:	f204 4224 	addw	r2, r4, #1060	@ 0x424
 80067ce:	f002 fe96 	bl	80094fe <RegionRxConfig>
 80067d2:	b130      	cbz	r0, 80067e2 <RxWindowSetup.constprop.0+0x2e>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80067d4:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80067d6:	f8d4 0558 	ldr.w	r0, [r4, #1368]	@ 0x558
 80067da:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80067dc:	7ceb      	ldrb	r3, [r5, #19]
 80067de:	f884 3484 	strb.w	r3, [r4, #1156]	@ 0x484
}
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	0800cec4 	.word	0x0800cec4
 80067e8:	200005f8 	.word	0x200005f8

080067ec <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80067ec:	480c      	ldr	r0, [pc, #48]	@ (8006820 <OnRxWindow1TimerEvent+0x34>)
 80067ee:	f890 3419 	ldrb.w	r3, [r0, #1049]	@ 0x419
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80067f2:	f500 716f 	add.w	r1, r0, #956	@ 0x3bc
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80067f6:	f880 33bc 	strb.w	r3, [r0, #956]	@ 0x3bc
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80067fa:	f890 356d 	ldrb.w	r3, [r0, #1389]	@ 0x56d
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80067fe:	f500 7061 	add.w	r0, r0, #900	@ 0x384
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8006802:	f880 303b 	strb.w	r3, [r0, #59]	@ 0x3b
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006806:	f890 31fd 	ldrb.w	r3, [r0, #509]	@ 0x1fd
 800680a:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800680e:	f890 3208 	ldrb.w	r3, [r0, #520]	@ 0x208
 8006812:	f880 3049 	strb.w	r3, [r0, #73]	@ 0x49
    MacCtx.RxWindow1Config.RxContinuous = false;
 8006816:	2300      	movs	r3, #0
 8006818:	f8a0 304a 	strh.w	r3, [r0, #74]	@ 0x4a
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800681c:	f7ff bfca 	b.w	80067b4 <RxWindowSetup.constprop.0>
 8006820:	200005f8 	.word	0x200005f8

08006824 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8006824:	480e      	ldr	r0, [pc, #56]	@ (8006860 <OnRxWindow2TimerEvent+0x3c>)
 8006826:	f890 3484 	ldrb.w	r3, [r0, #1156]	@ 0x484
 800682a:	b1c3      	cbz	r3, 800685e <OnRxWindow2TimerEvent+0x3a>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800682c:	f890 3419 	ldrb.w	r3, [r0, #1049]	@ 0x419
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8006830:	f500 7174 	add.w	r1, r0, #976	@ 0x3d0
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8006834:	f880 33d0 	strb.w	r3, [r0, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8006838:	f8d0 3570 	ldr.w	r3, [r0, #1392]	@ 0x570
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800683c:	f500 7067 	add.w	r0, r0, #924	@ 0x39c
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8006840:	6383      	str	r3, [r0, #56]	@ 0x38
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006842:	f890 31e5 	ldrb.w	r3, [r0, #485]	@ 0x1e5
 8006846:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800684a:	f890 31f0 	ldrb.w	r3, [r0, #496]	@ 0x1f0
 800684e:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
    MacCtx.RxWindow2Config.RxContinuous = false;
 8006852:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006856:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800685a:	f7ff bfab 	b.w	80067b4 <RxWindowSetup.constprop.0>
}
 800685e:	4770      	bx	lr
 8006860:	200005f8 	.word	0x200005f8

08006864 <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t status = 0;
 8006868:	2700      	movs	r7, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800686a:	4606      	mov	r6, r0
 800686c:	4688      	mov	r8, r1
 800686e:	4691      	mov	r9, r2
    while( macIndex < commandsSize )
 8006870:	463c      	mov	r4, r7
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8006872:	b08f      	sub	sp, #60	@ 0x3c
    uint8_t status = 0;
 8006874:	f88d 700d 	strb.w	r7, [sp, #13]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8006878:	f8ad 7010 	strh.w	r7, [sp, #16]
    while( macIndex < commandsSize )
 800687c:	4544      	cmp	r4, r8
 800687e:	d302      	bcc.n	8006886 <ProcessMacCommands.constprop.0+0x22>
}
 8006880:	b00f      	add	sp, #60	@ 0x3c
 8006882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8006886:	5d30      	ldrb	r0, [r6, r4]
 8006888:	f002 f8ae 	bl	80089e8 <LoRaMacCommandsGetCmdSize>
 800688c:	4420      	add	r0, r4
 800688e:	4540      	cmp	r0, r8
 8006890:	dcf6      	bgt.n	8006880 <ProcessMacCommands.constprop.0+0x1c>
        switch( payload[macIndex++] )
 8006892:	5d33      	ldrb	r3, [r6, r4]
 8006894:	1c65      	adds	r5, r4, #1
 8006896:	3b02      	subs	r3, #2
 8006898:	b2ed      	uxtb	r5, r5
 800689a:	2b11      	cmp	r3, #17
 800689c:	d8f0      	bhi.n	8006880 <ProcessMacCommands.constprop.0+0x1c>
 800689e:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <ProcessMacCommands.constprop.0+0x40>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068ed 	.word	0x080068ed
 80068a8:	08006917 	.word	0x08006917
 80068ac:	080069d5 	.word	0x080069d5
 80068b0:	080069fb 	.word	0x080069fb
 80068b4:	08006a89 	.word	0x08006a89
 80068b8:	08006ab3 	.word	0x08006ab3
 80068bc:	08006b19 	.word	0x08006b19
 80068c0:	08006b55 	.word	0x08006b55
 80068c4:	08006bd5 	.word	0x08006bd5
 80068c8:	08006881 	.word	0x08006881
 80068cc:	08006881 	.word	0x08006881
 80068d0:	08006c29 	.word	0x08006c29
 80068d4:	08006881 	.word	0x08006881
 80068d8:	08006881 	.word	0x08006881
 80068dc:	08006ccd 	.word	0x08006ccd
 80068e0:	08006cf5 	.word	0x08006cf5
 80068e4:	08006d2d 	.word	0x08006d2d
 80068e8:	08006d63 	.word	0x08006d63
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80068ec:	2004      	movs	r0, #4
 80068ee:	f002 f925 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
 80068f2:	b170      	cbz	r0, 8006912 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80068f4:	2104      	movs	r1, #4
 80068f6:	2000      	movs	r0, #0
 80068f8:	f002 f8e4 	bl	8008ac4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80068fc:	5d72      	ldrb	r2, [r6, r5]
 80068fe:	4bb3      	ldr	r3, [pc, #716]	@ (8006bcc <ProcessMacCommands.constprop.0+0x368>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8006900:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8006902:	3402      	adds	r4, #2
 8006904:	f883 2458 	strb.w	r2, [r3, #1112]	@ 0x458
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8006908:	b2e4      	uxtb	r4, r4
 800690a:	5d32      	ldrb	r2, [r6, r4]
 800690c:	b2ed      	uxtb	r5, r5
 800690e:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459
                uint8_t eirpDwellTime = payload[macIndex++];
 8006912:	462c      	mov	r4, r5
 8006914:	e7b2      	b.n	800687c <ProcessMacCommands.constprop.0+0x18>
                int8_t linkAdrDatarate = DR_0;
 8006916:	2300      	movs	r3, #0
 8006918:	f88d 300e 	strb.w	r3, [sp, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 800691c:	f88d 300f 	strb.w	r3, [sp, #15]
                uint8_t linkAdrNbRep = 0;
 8006920:	f88d 3014 	strb.w	r3, [sp, #20]
                uint8_t linkAdrNbBytesParsed = 0;
 8006924:	f88d 3018 	strb.w	r3, [sp, #24]
                if( adrBlockFound == false )
 8006928:	2f00      	cmp	r7, #0
 800692a:	d151      	bne.n	80069d0 <ProcessMacCommands.constprop.0+0x16c>
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800692c:	eba8 0404 	sub.w	r4, r8, r4
 8006930:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8006934:	1e6b      	subs	r3, r5, #1
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8006936:	4ca5      	ldr	r4, [pc, #660]	@ (8006bcc <ProcessMacCommands.constprop.0+0x368>)
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8006938:	4433      	add	r3, r6
 800693a:	930b      	str	r3, [sp, #44]	@ 0x2c
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800693c:	f894 360a 	ldrb.w	r3, [r4, #1546]	@ 0x60a
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8006940:	f10d 020e 	add.w	r2, sp, #14
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8006944:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006948:	f894 3580 	ldrb.w	r3, [r4, #1408]	@ 0x580
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800694c:	a90a      	add	r1, sp, #40	@ 0x28
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800694e:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8006952:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
 8006956:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800695a:	f894 3544 	ldrb.w	r3, [r4, #1348]	@ 0x544
 800695e:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8006962:	f894 356c 	ldrb.w	r3, [r4, #1388]	@ 0x56c
 8006966:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800696a:	f8d4 3618 	ldr.w	r3, [r4, #1560]	@ 0x618
 800696e:	930a      	str	r3, [sp, #40]	@ 0x28
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8006970:	ab06      	add	r3, sp, #24
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	ab05      	add	r3, sp, #20
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 800697c:	f10d 030f 	add.w	r3, sp, #15
 8006980:	f002 fdd3 	bl	800952a <RegionLinkAdrReq>
 8006984:	f88d 000d 	strb.w	r0, [sp, #13]
                    if( ( status & 0x07 ) == 0x07 )
 8006988:	f000 0007 	and.w	r0, r0, #7
 800698c:	2807      	cmp	r0, #7
 800698e:	d10b      	bne.n	80069a8 <ProcessMacCommands.constprop.0+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8006990:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006994:	f884 3545 	strb.w	r3, [r4, #1349]	@ 0x545
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8006998:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800699c:	f884 3544 	strb.w	r3, [r4, #1348]	@ 0x544
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80069a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80069a4:	f884 356c 	strb.w	r3, [r4, #1388]	@ 0x56c
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80069a8:	2400      	movs	r4, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80069aa:	2705      	movs	r7, #5
 80069ac:	e006      	b.n	80069bc <ProcessMacCommands.constprop.0+0x158>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80069ae:	2201      	movs	r2, #1
 80069b0:	2003      	movs	r0, #3
 80069b2:	f10d 010d 	add.w	r1, sp, #13
 80069b6:	f001 ff39 	bl	800882c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80069ba:	3401      	adds	r4, #1
 80069bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80069c0:	b2e2      	uxtb	r2, r4
 80069c2:	fbb3 f1f7 	udiv	r1, r3, r7
 80069c6:	4291      	cmp	r1, r2
 80069c8:	d8f1      	bhi.n	80069ae <ProcessMacCommands.constprop.0+0x14a>
                    macIndex += linkAdrNbBytesParsed - 1;
 80069ca:	3b01      	subs	r3, #1
 80069cc:	442b      	add	r3, r5
 80069ce:	b2dd      	uxtb	r5, r3
                break;
 80069d0:	2701      	movs	r7, #1
 80069d2:	e79e      	b.n	8006912 <ProcessMacCommands.constprop.0+0xae>
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80069d4:	2201      	movs	r2, #1
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80069d6:	5d73      	ldrb	r3, [r6, r5]
 80069d8:	497c      	ldr	r1, [pc, #496]	@ (8006bcc <ProcessMacCommands.constprop.0+0x368>)
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	f881 360b 	strb.w	r3, [r1, #1547]	@ 0x60b
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80069e2:	2004      	movs	r0, #4
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80069e8:	2200      	movs	r2, #0
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80069ea:	3402      	adds	r4, #2
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80069ec:	f8a1 360e 	strh.w	r3, [r1, #1550]	@ 0x60e
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80069f0:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80069f2:	a904      	add	r1, sp, #16
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80069f4:	f001 ff1a 	bl	800882c <LoRaMacCommandsAddCmd>
 80069f8:	e0aa      	b.n	8006b50 <ProcessMacCommands.constprop.0+0x2ec>
                status = 0x07;
 80069fa:	2307      	movs	r3, #7
 80069fc:	f88d 300d 	strb.w	r3, [sp, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8006a00:	5d73      	ldrb	r3, [r6, r5]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006a02:	1d65      	adds	r5, r4, #5
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8006a04:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8006a10:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006a12:	b2db      	uxtb	r3, r3
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8006a14:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006a18:	5cf2      	ldrb	r2, [r6, r3]
 8006a1a:	1d23      	adds	r3, r4, #4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	5cf3      	ldrb	r3, [r6, r3]
                macIndex++;
 8006a20:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8006a22:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8006a2a:	5d32      	ldrb	r2, [r6, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8006a2c:	4c67      	ldr	r4, [pc, #412]	@ (8006bcc <ProcessMacCommands.constprop.0+0x368>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006a2e:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8006a30:	2264      	movs	r2, #100	@ 0x64
 8006a32:	4353      	muls	r3, r2
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8006a34:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8006a38:	a90a      	add	r1, sp, #40	@ 0x28
                rxParamSetupReq.Frequency *= 100;
 8006a3a:	930b      	str	r3, [sp, #44]	@ 0x2c
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8006a3c:	f002 fd85 	bl	800954a <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 8006a40:	f000 0307 	and.w	r3, r0, #7
 8006a44:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006a46:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8006a48:	f88d 000d 	strb.w	r0, [sp, #13]
                if( ( status & 0x07 ) == 0x07 )
 8006a4c:	d10e      	bne.n	8006a6c <ProcessMacCommands.constprop.0+0x208>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8006a4e:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8006a52:	f884 3574 	strb.w	r3, [r4, #1396]	@ 0x574
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8006a56:	f884 357c 	strb.w	r3, [r4, #1404]	@ 0x57c
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8006a5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a5c:	f8c4 3570 	str.w	r3, [r4, #1392]	@ 0x570
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8006a60:	f8c4 3578 	str.w	r3, [r4, #1400]	@ 0x578
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8006a64:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8006a68:	f884 356d 	strb.w	r3, [r4, #1389]	@ 0x56d
                macCmdPayload[0] = status;
 8006a6c:	f88d 0010 	strb.w	r0, [sp, #16]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8006a70:	2201      	movs	r2, #1
 8006a72:	2005      	movs	r0, #5
 8006a74:	a904      	add	r1, sp, #16
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8006a76:	f001 fed9 	bl	800882c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006a7a:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8006a7e:	f043 0310 	orr.w	r3, r3, #16
 8006a82:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
}
 8006a86:	e744      	b.n	8006912 <ProcessMacCommands.constprop.0+0xae>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8006a88:	4b50      	ldr	r3, [pc, #320]	@ (8006bcc <ProcessMacCommands.constprop.0+0x368>)
 8006a8a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8006a8e:	b173      	cbz	r3, 8006aae <ProcessMacCommands.constprop.0+0x24a>
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	b163      	cbz	r3, 8006aae <ProcessMacCommands.constprop.0+0x24a>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8006a94:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8006a96:	f88d 0010 	strb.w	r0, [sp, #16]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8006a9e:	f009 033f 	and.w	r3, r9, #63	@ 0x3f
 8006aa2:	f88d 3011 	strb.w	r3, [sp, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8006aa6:	a904      	add	r1, sp, #16
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8006aa8:	f001 fec0 	bl	800882c <LoRaMacCommandsAddCmd>
                break;
 8006aac:	e731      	b.n	8006912 <ProcessMacCommands.constprop.0+0xae>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8006aae:	20ff      	movs	r0, #255	@ 0xff
 8006ab0:	e7f1      	b.n	8006a96 <ProcessMacCommands.constprop.0+0x232>
                status = 0x03;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	f88d 300d 	strb.w	r3, [sp, #13]
                newChannelReq.ChannelId = payload[macIndex++];
 8006ab8:	5d73      	ldrb	r3, [r6, r5]
                chParam.DrRange.Value = payload[macIndex++];
 8006aba:	1da5      	adds	r5, r4, #6
                newChannelReq.ChannelId = payload[macIndex++];
 8006abc:	f88d 301c 	strb.w	r3, [sp, #28]
                newChannelReq.NewChannel = &chParam;
 8006ac0:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ac2:	9306      	str	r3, [sp, #24]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8006ac4:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	5cf2      	ldrb	r2, [r6, r3]
 8006aca:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	5cf3      	ldrb	r3, [r6, r3]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8006ad0:	a906      	add	r1, sp, #24
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006ad2:	041b      	lsls	r3, r3, #16
 8006ad4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                newChannelReq.ChannelId = payload[macIndex++];
 8006ad8:	1ca2      	adds	r2, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	5cb2      	ldrb	r2, [r6, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006ade:	3405      	adds	r4, #5
 8006ae0:	4313      	orrs	r3, r2
                chParam.Frequency *= 100;
 8006ae2:	2264      	movs	r2, #100	@ 0x64
 8006ae4:	4353      	muls	r3, r2
 8006ae6:	930a      	str	r3, [sp, #40]	@ 0x28
                chParam.Rx1Frequency = 0;
 8006ae8:	2300      	movs	r3, #0
                chParam.DrRange.Value = payload[macIndex++];
 8006aea:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 8006aec:	930b      	str	r3, [sp, #44]	@ 0x2c
                chParam.DrRange.Value = payload[macIndex++];
 8006aee:	5d33      	ldrb	r3, [r6, r4]
 8006af0:	b2ed      	uxtb	r5, r5
 8006af2:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8006af6:	4b35      	ldr	r3, [pc, #212]	@ (8006bcc <ProcessMacCommands.constprop.0+0x368>)
 8006af8:	f893 054c 	ldrb.w	r0, [r3, #1356]	@ 0x54c
 8006afc:	f002 fd2c 	bl	8009558 <RegionNewChannelReq>
 8006b00:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 8006b02:	2800      	cmp	r0, #0
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8006b04:	f88d 300d 	strb.w	r3, [sp, #13]
                if( ( int8_t )status >= 0 )
 8006b08:	f6ff af03 	blt.w	8006912 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
 8006b10:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8006b14:	a904      	add	r1, sp, #16
 8006b16:	e7c7      	b.n	8006aa8 <ProcessMacCommands.constprop.0+0x244>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006b18:	5d73      	ldrb	r3, [r6, r5]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8006b1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	bf38      	it	cc
 8006b26:	2301      	movcc	r3, #1
 8006b28:	4353      	muls	r3, r2
 8006b2a:	4d28      	ldr	r5, [pc, #160]	@ (8006bcc <ProcessMacCommands.constprop.0+0x368>)
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8006b2c:	2008      	movs	r0, #8
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8006b2e:	f8c5 355c 	str.w	r3, [r5, #1372]	@ 0x55c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8006b32:	a904      	add	r1, sp, #16
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8006b34:	4413      	add	r3, r2
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8006b36:	2200      	movs	r2, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8006b38:	f8c5 3560 	str.w	r3, [r5, #1376]	@ 0x560
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8006b3c:	f001 fe76 	bl	800882c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006b40:	f895 3485 	ldrb.w	r3, [r5, #1157]	@ 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006b44:	3402      	adds	r4, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006b46:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006b4a:	b2e4      	uxtb	r4, r4
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006b4c:	f885 3485 	strb.w	r3, [r5, #1157]	@ 0x485
                uint8_t eirpDwellTime = payload[macIndex++];
 8006b50:	4625      	mov	r5, r4
 8006b52:	e6de      	b.n	8006912 <ProcessMacCommands.constprop.0+0xae>
 8006b54:	5d73      	ldrb	r3, [r6, r5]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006b56:	4d1d      	ldr	r5, [pc, #116]	@ (8006bcc <ProcessMacCommands.constprop.0+0x368>)
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8006b58:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8006b5c:	f88d 2015 	strb.w	r2, [sp, #21]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006b60:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8006b64:	f3c3 1200 	ubfx	r2, r3, #4, #1
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006b68:	a905      	add	r1, sp, #20
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	f88d 2014 	strb.w	r2, [sp, #20]
 8006b72:	f88d 3016 	strb.w	r3, [sp, #22]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006b76:	f002 fcf6 	bl	8009566 <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 8006b7a:	3402      	adds	r4, #2
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006b7c:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 8006b7e:	b2e4      	uxtb	r4, r4
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006b80:	d0e6      	beq.n	8006b50 <ProcessMacCommands.constprop.0+0x2ec>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8006b82:	f8bd 3014 	ldrh.w	r3, [sp, #20]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006b86:	4a12      	ldr	r2, [pc, #72]	@ (8006bd0 <ProcessMacCommands.constprop.0+0x36c>)
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8006b88:	f8a5 3580 	strh.w	r3, [r5, #1408]	@ 0x580
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006b8c:	f89d 3016 	ldrb.w	r3, [sp, #22]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8006b90:	f89d a014 	ldrb.w	sl, [sp, #20]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006b94:	5cd0      	ldrb	r0, [r2, r3]
 8006b96:	f7f9 fe1d 	bl	80007d4 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8006b9a:	2302      	movs	r3, #2
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006b9c:	f8c5 0584 	str.w	r0, [r5, #1412]	@ 0x584
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006ba0:	a90a      	add	r1, sp, #40	@ 0x28
 8006ba2:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8006ba6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006baa:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006bae:	f002 fc6d 	bl	800948c <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8006bb2:	f995 3545 	ldrsb.w	r3, [r5, #1349]	@ 0x545
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006bb6:	9006      	str	r0, [sp, #24]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8006bb8:	b240      	sxtb	r0, r0
 8006bba:	4298      	cmp	r0, r3
 8006bbc:	bfb8      	it	lt
 8006bbe:	4618      	movlt	r0, r3
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8006bc0:	2200      	movs	r2, #0
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8006bc2:	f885 0545 	strb.w	r0, [r5, #1349]	@ 0x545
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8006bc6:	a904      	add	r1, sp, #16
 8006bc8:	2009      	movs	r0, #9
 8006bca:	e713      	b.n	80069f4 <ProcessMacCommands.constprop.0+0x190>
 8006bcc:	200005f8 	.word	0x200005f8
 8006bd0:	0800cd41 	.word	0x0800cd41
                status = 0x03;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	f88d 300d 	strb.w	r3, [sp, #13]
                dlChannelReq.ChannelId = payload[macIndex++];
 8006bda:	5d73      	ldrb	r3, [r6, r5]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006bdc:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8006bde:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8006be2:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	5cf2      	ldrb	r2, [r6, r3]
 8006be8:	1d23      	adds	r3, r4, #4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	5cf3      	ldrb	r3, [r6, r3]
                dlChannelReq.ChannelId = payload[macIndex++];
 8006bee:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8006bf0:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006bf2:	041b      	lsls	r3, r3, #16
 8006bf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8006bf8:	5d32      	ldrb	r2, [r6, r4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8006bfa:	4c65      	ldr	r4, [pc, #404]	@ (8006d90 <ProcessMacCommands.constprop.0+0x52c>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006bfc:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8006bfe:	2264      	movs	r2, #100	@ 0x64
 8006c00:	4353      	muls	r3, r2
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8006c02:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8006c06:	a90a      	add	r1, sp, #40	@ 0x28
                dlChannelReq.Rx1Frequency *= 100;
 8006c08:	930b      	str	r3, [sp, #44]	@ 0x2c
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8006c0a:	f002 fcb3 	bl	8009574 <RegionDlChannelReq>
 8006c0e:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 8006c10:	2800      	cmp	r0, #0
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006c12:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8006c14:	f88d 300d 	strb.w	r3, [sp, #13]
                if( ( int8_t )status >= 0 )
 8006c18:	f6ff ae7b 	blt.w	8006912 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
 8006c20:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8006c24:	a904      	add	r1, sp, #16
 8006c26:	e726      	b.n	8006a76 <ProcessMacCommands.constprop.0+0x212>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8006c28:	200a      	movs	r0, #10
 8006c2a:	f001 ff87 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f ae6f 	beq.w	8006912 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8006c34:	210a      	movs	r1, #10
 8006c36:	2000      	movs	r0, #0
 8006c38:	f001 ff44 	bl	8008ac4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f8ad 301e 	strh.w	r3, [sp, #30]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8006c42:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	5cf2      	ldrb	r2, [r6, r3]
 8006c48:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f816 a003 	ldrb.w	sl, [r6, r3]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8006c50:	5d73      	ldrb	r3, [r6, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8006c52:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8006c56:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8006c5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8006c5e:	ea4a 0a03 	orr.w	sl, sl, r3
 8006c62:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	5cf3      	ldrb	r3, [r6, r3]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8006c68:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8006c6a:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8006c6c:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8006c6e:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8006c72:	5d33      	ldrb	r3, [r6, r4]
                    sysTimeCurrent = SysTimeGet( );
 8006c74:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8006c78:	4353      	muls	r3, r2
                    sysTimeCurrent = SysTimeGet( );
 8006c7a:	4658      	mov	r0, fp
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8006c7c:	121b      	asrs	r3, r3, #8
 8006c7e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    sysTimeCurrent = SysTimeGet( );
 8006c82:	f005 faaf 	bl	800c1e4 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8006c86:	4b43      	ldr	r3, [pc, #268]	@ (8006d94 <ProcessMacCommands.constprop.0+0x530>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8006c88:	ac06      	add	r4, sp, #24
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8006c8a:	4453      	add	r3, sl
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8006c8c:	f8df a100 	ldr.w	sl, [pc, #256]	@ 8006d90 <ProcessMacCommands.constprop.0+0x52c>
 8006c90:	9306      	str	r3, [sp, #24]
 8006c92:	f8da 3340 	ldr.w	r3, [sl, #832]	@ 0x340
 8006c96:	a808      	add	r0, sp, #32
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	f8da 333c 	ldr.w	r3, [sl, #828]	@ 0x33c
 8006c9e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8006ca2:	f005 fa5c 	bl	800c15e <SysTimeSub>
 8006ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca8:	4620      	mov	r0, r4
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8006cb0:	9b08      	ldr	r3, [sp, #32]
 8006cb2:	f005 fa39 	bl	800c128 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8006cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006cba:	f005 fa6b 	bl	800c194 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8006cbe:	f001 fd9f 	bl	8008800 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8006cc2:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8006cc4:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8006cc6:	f88a 3438 	strb.w	r3, [sl, #1080]	@ 0x438
 8006cca:	e622      	b.n	8006912 <ProcessMacCommands.constprop.0+0xae>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8006ccc:	200d      	movs	r0, #13
 8006cce:	f001 ff35 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	f43f ae1d 	beq.w	8006912 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8006cd8:	210d      	movs	r1, #13
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f001 fef2 	bl	8008ac4 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8006ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8006d90 <ProcessMacCommands.constprop.0+0x52c>)
 8006ce2:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 8006ce6:	3b04      	subs	r3, #4
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	f67f ae12 	bls.w	8006912 <ProcessMacCommands.constprop.0+0xae>
                        LoRaMacClassBPingSlotInfoAns( );
 8006cee:	f001 fd83 	bl	80087f8 <LoRaMacClassBPingSlotInfoAns>
 8006cf2:	e60e      	b.n	8006912 <ProcessMacCommands.constprop.0+0xae>
                frequency = ( uint32_t )payload[macIndex++];
 8006cf4:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	5cf1      	ldrb	r1, [r6, r3]
 8006cfa:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	5cf3      	ldrb	r3, [r6, r3]
                frequency = ( uint32_t )payload[macIndex++];
 8006d00:	5d72      	ldrb	r2, [r6, r5]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8006d08:	2164      	movs	r1, #100	@ 0x64
                datarate = payload[macIndex++] & 0x0F;
 8006d0a:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006d0c:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8006d0e:	b2e4      	uxtb	r4, r4
 8006d10:	5d30      	ldrb	r0, [r6, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006d12:	4313      	orrs	r3, r2
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8006d14:	4359      	muls	r1, r3
 8006d16:	f000 000f 	and.w	r0, r0, #15
 8006d1a:	f001 fd6e 	bl	80087fa <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
 8006d1e:	b2ed      	uxtb	r5, r5
                macCmdPayload[0] = status;
 8006d20:	f88d 0010 	strb.w	r0, [sp, #16]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8006d24:	2201      	movs	r2, #1
 8006d26:	2011      	movs	r0, #17
 8006d28:	a904      	add	r1, sp, #16
 8006d2a:	e6bd      	b.n	8006aa8 <ProcessMacCommands.constprop.0+0x244>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8006d2c:	200e      	movs	r0, #14
 8006d2e:	f001 ff05 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	f43f aded 	beq.w	8006912 <ProcessMacCommands.constprop.0+0xae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8006d38:	210e      	movs	r1, #14
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	f001 fec2 	bl	8008ac4 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8006d40:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	5cf0      	ldrb	r0, [r6, r3]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8006d46:	4a12      	ldr	r2, [pc, #72]	@ (8006d90 <ProcessMacCommands.constprop.0+0x52c>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8006d48:	5d73      	ldrb	r3, [r6, r5]
                    beaconTimingChannel = payload[macIndex++];
 8006d4a:	1d25      	adds	r5, r4, #4
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8006d4c:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 8006d4e:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8006d50:	f8d2 2858 	ldr.w	r2, [r2, #2136]	@ 0x858
 8006d54:	5d31      	ldrb	r1, [r6, r4]
 8006d56:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
                    beaconTimingChannel = payload[macIndex++];
 8006d5a:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8006d5c:	f001 fd4f 	bl	80087fe <LoRaMacClassBBeaconTimingAns>
 8006d60:	e5d7      	b.n	8006912 <ProcessMacCommands.constprop.0+0xae>
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8006d62:	2064      	movs	r0, #100	@ 0x64
                    frequency = ( uint32_t )payload[macIndex++];
 8006d64:	5d72      	ldrb	r2, [r6, r5]
 8006d66:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006d68:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006d6a:	3403      	adds	r4, #3
 8006d6c:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006d6e:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006d70:	5cf1      	ldrb	r1, [r6, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006d72:	5d33      	ldrb	r3, [r6, r4]
 8006d74:	b2ed      	uxtb	r5, r5
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006d7c:	4313      	orrs	r3, r2
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8006d7e:	4358      	muls	r0, r3
 8006d80:	f001 fd3f 	bl	8008802 <LoRaMacClassBBeaconFreqReq>
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8006d84:	2201      	movs	r2, #1
 8006d86:	f88d 0010 	strb.w	r0, [sp, #16]
 8006d8a:	a904      	add	r1, sp, #16
 8006d8c:	2013      	movs	r0, #19
 8006d8e:	e68b      	b.n	8006aa8 <ProcessMacCommands.constprop.0+0x244>
 8006d90:	200005f8 	.word	0x200005f8
 8006d94:	12d53d80 	.word	0x12d53d80

08006d98 <StopRetransmission.isra.0>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8006d98:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd8 <StopRetransmission.isra.0+0x40>)
 8006d9a:	f893 2485 	ldrb.w	r2, [r3, #1157]	@ 0x485
 8006d9e:	0792      	lsls	r2, r2, #30
 8006da0:	d503      	bpl.n	8006daa <StopRetransmission.isra.0+0x12>
 8006da2:	f893 2483 	ldrb.w	r2, [r3, #1155]	@ 0x483
 8006da6:	2a01      	cmp	r2, #1
 8006da8:	d907      	bls.n	8006dba <StopRetransmission.isra.0+0x22>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8006daa:	f893 260a 	ldrb.w	r2, [r3, #1546]	@ 0x60a
 8006dae:	b122      	cbz	r2, 8006dba <StopRetransmission.isra.0+0x22>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8006db0:	f8d3 2534 	ldr.w	r2, [r3, #1332]	@ 0x534
 8006db4:	3201      	adds	r2, #1
 8006db6:	f8c3 2534 	str.w	r2, [r3, #1332]	@ 0x534
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    MacCtx.NodeAckRequested = false;
 8006dc0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.AckTimeoutRetry = false;
 8006dc4:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006dc8:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 8006dcc:	f022 0202 	bic.w	r2, r2, #2
 8006dd0:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344

    return true;
}
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	200005f8 	.word	0x200005f8

08006ddc <OnTxDelayedTimerEvent>:
{
 8006ddc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8006dde:	4c11      	ldr	r4, [pc, #68]	@ (8006e24 <OnTxDelayedTimerEvent+0x48>)
 8006de0:	f504 705b 	add.w	r0, r4, #876	@ 0x36c
 8006de4:	f005 faec 	bl	800c3c0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8006de8:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
    switch( ScheduleTx( true ) )
 8006dec:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8006dee:	f023 0320 	bic.w	r3, r3, #32
 8006df2:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    switch( ScheduleTx( true ) )
 8006df6:	f7ff fadb 	bl	80063b0 <ScheduleTx>
 8006dfa:	b190      	cbz	r0, 8006e22 <OnTxDelayedTimerEvent+0x46>
 8006dfc:	280b      	cmp	r0, #11
 8006dfe:	d010      	beq.n	8006e22 <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8006e00:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006e02:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8006e06:	f884 043d 	strb.w	r0, [r4, #1085]	@ 0x43d
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006e0a:	f884 343e 	strb.w	r3, [r4, #1086]	@ 0x43e
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8006e0e:	f894 3416 	ldrb.w	r3, [r4, #1046]	@ 0x416
 8006e12:	f884 3441 	strb.w	r3, [r4, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8006e16:	f001 fe77 	bl	8008b08 <LoRaMacConfirmQueueSetStatusCmn>
}
 8006e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8006e1e:	f7ff bfbb 	b.w	8006d98 <StopRetransmission.isra.0>
}
 8006e22:	bd10      	pop	{r4, pc}
 8006e24:	200005f8 	.word	0x200005f8

08006e28 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8006e28:	4b05      	ldr	r3, [pc, #20]	@ (8006e40 <LoRaMacIsBusy+0x18>)
 8006e2a:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 8006e2e:	b92a      	cbnz	r2, 8006e3c <LoRaMacIsBusy+0x14>
 8006e30:	f893 0486 	ldrb.w	r0, [r3, #1158]	@ 0x486
 8006e34:	3801      	subs	r0, #1
 8006e36:	bf18      	it	ne
 8006e38:	2001      	movne	r0, #1
 8006e3a:	4770      	bx	lr
    return true;
 8006e3c:	2001      	movs	r0, #1
}
 8006e3e:	4770      	bx	lr
 8006e40:	200005f8 	.word	0x200005f8

08006e44 <LoRaMacProcess>:
{
 8006e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e48:	b0a5      	sub	sp, #148	@ 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e4a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e4e:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 8006e50:	2100      	movs	r1, #0
    events = LoRaMacRadioEvents;
 8006e52:	4ccb      	ldr	r4, [pc, #812]	@ (8007180 <LoRaMacProcess+0x33c>)
 8006e54:	6823      	ldr	r3, [r4, #0]
    LoRaMacRadioEvents.Value = 0;
 8006e56:	6021      	str	r1, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e58:	f382 8810 	msr	PRIMASK, r2
    if( events.Value != 0 )
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80ce 	beq.w	8006ffe <LoRaMacProcess+0x1ba>
        if( events.Events.TxDone == 1 )
 8006e62:	06da      	lsls	r2, r3, #27
 8006e64:	fa5f fb83 	uxtb.w	fp, r3
 8006e68:	d560      	bpl.n	8006f2c <LoRaMacProcess+0xe8>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006e6a:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d002      	beq.n	8006e78 <LoRaMacProcess+0x34>
        Radio.Sleep( );
 8006e72:	4bc4      	ldr	r3, [pc, #784]	@ (8007184 <LoRaMacProcess+0x340>)
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8006e78:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8006e7c:	48c2      	ldr	r0, [pc, #776]	@ (8007188 <LoRaMacProcess+0x344>)
 8006e7e:	f005 fb27 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8006e82:	48c1      	ldr	r0, [pc, #772]	@ (8007188 <LoRaMacProcess+0x344>)
 8006e84:	f005 faea 	bl	800c45c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8006e88:	f8d4 13b8 	ldr.w	r1, [r4, #952]	@ 0x3b8
 8006e8c:	48bf      	ldr	r0, [pc, #764]	@ (800718c <LoRaMacProcess+0x348>)
 8006e8e:	f005 fb1f 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8006e92:	48be      	ldr	r0, [pc, #760]	@ (800718c <LoRaMacProcess+0x348>)
 8006e94:	f005 fae2 	bl	800c45c <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8006e98:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d002      	beq.n	8006ea6 <LoRaMacProcess+0x62>
 8006ea0:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8006ea4:	b18b      	cbz	r3, 8006eca <LoRaMacProcess+0x86>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8006ea6:	2316      	movs	r3, #22
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006ea8:	a90e      	add	r1, sp, #56	@ 0x38
 8006eaa:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8006eae:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006eb2:	f002 faeb 	bl	800948c <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8006eb6:	f8d4 13b8 	ldr.w	r1, [r4, #952]	@ 0x3b8
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006eba:	900c      	str	r0, [sp, #48]	@ 0x30
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8006ebc:	4401      	add	r1, r0
 8006ebe:	48b4      	ldr	r0, [pc, #720]	@ (8007190 <LoRaMacProcess+0x34c>)
 8006ec0:	f005 fb06 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8006ec4:	48b2      	ldr	r0, [pc, #712]	@ (8007190 <LoRaMacProcess+0x34c>)
 8006ec6:	f005 fac9 	bl	800c45c <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8006eca:	f8d4 3868 	ldr.w	r3, [r4, #2152]	@ 0x868
    txDone.Channel = MacCtx.Channel;
 8006ece:	f894 2419 	ldrb.w	r2, [r4, #1049]	@ 0x419
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006ed2:	ae0a      	add	r6, sp, #40	@ 0x28
 8006ed4:	4630      	mov	r0, r6
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8006ed6:	f8c4 3538 	str.w	r3, [r4, #1336]	@ 0x538
    txDone.Channel = MacCtx.Channel;
 8006eda:	f88d 2060 	strb.w	r2, [sp, #96]	@ 0x60
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8006ede:	9319      	str	r3, [sp, #100]	@ 0x64
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006ee0:	f005 f9a6 	bl	800c230 <SysTimeGetMcuTime>
 8006ee4:	f8d4 3614 	ldr.w	r3, [r4, #1556]	@ 0x614
 8006ee8:	ad04      	add	r5, sp, #16
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	e896 0006 	ldmia.w	r6, {r1, r2}
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f8d4 3610 	ldr.w	r3, [r4, #1552]	@ 0x610
 8006ef6:	f005 f932 	bl	800c15e <SysTimeSub>
 8006efa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006efe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f00:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8006f04:	f8d4 341c 	ldr.w	r3, [r4, #1052]	@ 0x41c
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8006f08:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8006f0c:	931a      	str	r3, [sp, #104]	@ 0x68
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006f0e:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8006f12:	a918      	add	r1, sp, #96	@ 0x60
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006f14:	3b00      	subs	r3, #0
 8006f16:	bf18      	it	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	f88d 3061 	strb.w	r3, [sp, #97]	@ 0x61
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8006f1e:	f002 fabf 	bl	80094a0 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8006f22:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8006f26:	b90b      	cbnz	r3, 8006f2c <LoRaMacProcess+0xe8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006f28:	f884 343d 	strb.w	r3, [r4, #1085]	@ 0x43d
        if( events.Events.RxDone == 1 )
 8006f2c:	f01b 0f08 	tst.w	fp, #8
 8006f30:	d03a      	beq.n	8006fa8 <LoRaMacProcess+0x164>
    uint32_t downLinkCounter = 0;
 8006f32:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8006f34:	f8d4 25d8 	ldr.w	r2, [r4, #1496]	@ 0x5d8
    int16_t rssi = RxDoneParams.Rssi;
 8006f38:	f9b4 7862 	ldrsh.w	r7, [r4, #2146]	@ 0x862
    int8_t snr = RxDoneParams.Snr;
 8006f3c:	f994 9864 	ldrsb.w	r9, [r4, #2148]	@ 0x864
    uint32_t downLinkCounter = 0;
 8006f40:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8006f42:	9203      	str	r2, [sp, #12]
    MacCtx.McpsConfirm.AckReceived = false;
 8006f44:	f884 3440 	strb.w	r3, [r4, #1088]	@ 0x440
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8006f48:	f894 2484 	ldrb.w	r2, [r4, #1156]	@ 0x484
    MacCtx.McpsIndication.Multicast = 0;
 8006f4c:	f8a4 3422 	strh.w	r3, [r4, #1058]	@ 0x422
    MacCtx.McpsIndication.FramePending = 0;
 8006f50:	f884 3425 	strb.w	r3, [r4, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8006f54:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8006f58:	f8a4 342c 	strh.w	r3, [r4, #1068]	@ 0x42c
    MacCtx.McpsIndication.AckReceived = false;
 8006f5c:	f884 342e 	strb.w	r3, [r4, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8006f60:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8006f64:	f884 3420 	strb.w	r3, [r4, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8006f68:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8006f6c:	f884 3438 	strb.w	r3, [r4, #1080]	@ 0x438
    Radio.Sleep( );
 8006f70:	4b84      	ldr	r3, [pc, #528]	@ (8007184 <LoRaMacProcess+0x340>)
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8006f72:	f884 2483 	strb.w	r2, [r4, #1155]	@ 0x483
    Radio.Sleep( );
 8006f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    uint8_t *payload = RxDoneParams.Payload;
 8006f78:	f8d4 685c 	ldr.w	r6, [r4, #2140]	@ 0x85c
    uint16_t size = RxDoneParams.Size;
 8006f7c:	f8b4 5860 	ldrh.w	r5, [r4, #2144]	@ 0x860
    MacCtx.RxStatus.Rssi = rssi;
 8006f80:	f8a4 7480 	strh.w	r7, [r4, #1152]	@ 0x480
    MacCtx.RxStatus.Snr = snr;
 8006f84:	f884 9482 	strb.w	r9, [r4, #1154]	@ 0x482
    Radio.Sleep( );
 8006f88:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8006f8a:	4880      	ldr	r0, [pc, #512]	@ (800718c <LoRaMacProcess+0x348>)
 8006f8c:	f005 fa18 	bl	800c3c0 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8006f90:	4629      	mov	r1, r5
 8006f92:	4630      	mov	r0, r6
 8006f94:	f001 fc1d 	bl	80087d2 <LoRaMacClassBRxBeacon>
 8006f98:	4680      	mov	r8, r0
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	f000 8160 	beq.w	8007260 <LoRaMacProcess+0x41c>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8006fa0:	f8a4 7476 	strh.w	r7, [r4, #1142]	@ 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8006fa4:	f884 9478 	strb.w	r9, [r4, #1144]	@ 0x478
        if( events.Events.TxTimeout == 1 )
 8006fa8:	f01b 0f04 	tst.w	fp, #4
 8006fac:	d019      	beq.n	8006fe2 <LoRaMacProcess+0x19e>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006fae:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d002      	beq.n	8006fbc <LoRaMacProcess+0x178>
        Radio.Sleep( );
 8006fb6:	4b73      	ldr	r3, [pc, #460]	@ (8007184 <LoRaMacProcess+0x340>)
 8006fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fba:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8006fbc:	2002      	movs	r0, #2
    UpdateRxSlotIdleState( );
 8006fbe:	f7ff f81d 	bl	8005ffc <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8006fc2:	f884 043d 	strb.w	r0, [r4, #1085]	@ 0x43d
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8006fc6:	f001 fd9f 	bl	8008b08 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8006fca:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8006fce:	b113      	cbz	r3, 8006fd6 <LoRaMacProcess+0x192>
        MacCtx.AckTimeoutRetry = true;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
    MacCtx.MacFlags.Bits.MacDone = 1;
 8006fd6:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8006fda:	f043 0320 	orr.w	r3, r3, #32
 8006fde:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
        if( events.Events.RxError == 1 )
 8006fe2:	f01b 0f02 	tst.w	fp, #2
 8006fe6:	d003      	beq.n	8006ff0 <LoRaMacProcess+0x1ac>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8006fe8:	2106      	movs	r1, #6
 8006fea:	2005      	movs	r0, #5
 8006fec:	f7ff f868 	bl	80060c0 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8006ff0:	f01b 0f01 	tst.w	fp, #1
 8006ff4:	d003      	beq.n	8006ffe <LoRaMacProcess+0x1ba>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8006ff6:	2104      	movs	r1, #4
 8006ff8:	2003      	movs	r0, #3
 8006ffa:	f7ff f861 	bl	80060c0 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8006ffe:	f001 fc05 	bl	800880c <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8007002:	f894 2485 	ldrb.w	r2, [r4, #1157]	@ 0x485
 8007006:	0697      	lsls	r7, r2, #26
 8007008:	f140 80ef 	bpl.w	80071ea <LoRaMacProcess+0x3a6>
    MacCtx.AllowRequests = requestState;
 800700c:	2300      	movs	r3, #0
 800700e:	f884 3486 	strb.w	r3, [r4, #1158]	@ 0x486
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007012:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 8007016:	061e      	lsls	r6, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007018:	bf44      	itt	mi
 800701a:	f023 0382 	bicmi.w	r3, r3, #130	@ 0x82
 800701e:	f8c4 3344 	strmi.w	r3, [r4, #836]	@ 0x344
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007022:	f012 0f05 	tst.w	r2, #5
 8007026:	f000 831b 	beq.w	8007660 <LoRaMacProcess+0x81c>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800702a:	200c      	movs	r0, #12
 800702c:	f001 fd86 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
 8007030:	2800      	cmp	r0, #0
 8007032:	f000 8315 	beq.w	8007660 <LoRaMacProcess+0x81c>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8007036:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800703a:	07dd      	lsls	r5, r3, #31
 800703c:	f100 8310 	bmi.w	8007660 <LoRaMacProcess+0x81c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007040:	0758      	lsls	r0, r3, #29
 8007042:	f140 8321 	bpl.w	8007688 <LoRaMacProcess+0x844>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007046:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 800704a:	f023 0302 	bic.w	r3, r3, #2
 800704e:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    if( MacCtx.MacState == LORAMAC_IDLE )
 8007052:	f8d4 2344 	ldr.w	r2, [r4, #836]	@ 0x344
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8007056:	f894 5485 	ldrb.w	r5, [r4, #1157]	@ 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 800705a:	2a00      	cmp	r2, #0
 800705c:	f040 80c2 	bne.w	80071e4 <LoRaMacProcess+0x3a0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8007060:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8007064:	bf1e      	ittt	ne
 8007066:	462b      	movne	r3, r5
 8007068:	f362 0300 	bfine	r3, r2, #0, #1
 800706c:	f884 3485 	strbne.w	r3, [r4, #1157]	@ 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007070:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007074:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8007076:	bf44      	itt	mi
 8007078:	f36f 0382 	bfcmi	r3, #2, #1
 800707c:	f884 3485 	strbmi.w	r3, [r4, #1157]	@ 0x485
    MacCtx.AllowRequests = requestState;
 8007080:	2301      	movs	r3, #1
 8007082:	f884 3486 	strb.w	r3, [r4, #1158]	@ 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 8007086:	b121      	cbz	r1, 8007092 <LoRaMacProcess+0x24e>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8007088:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 800708c:	4841      	ldr	r0, [pc, #260]	@ (8007194 <LoRaMacProcess+0x350>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8007092:	076d      	lsls	r5, r5, #29
 8007094:	d50b      	bpl.n	80070ae <LoRaMacProcess+0x26a>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8007096:	4840      	ldr	r0, [pc, #256]	@ (8007198 <LoRaMacProcess+0x354>)
 8007098:	f001 fd5c 	bl	8008b54 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800709c:	f001 fd84 	bl	8008ba8 <LoRaMacConfirmQueueGetCnt>
 80070a0:	b128      	cbz	r0, 80070ae <LoRaMacProcess+0x26a>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80070a2:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80070a6:	f043 0304 	orr.w	r3, r3, #4
 80070aa:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
        LoRaMacClassBResumeBeaconing( );
 80070ae:	f001 fb9c 	bl	80087ea <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80070b2:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80070b6:	f36f 1345 	bfc	r3, #5, #1
 80070ba:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 80070be:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f040 808e 	bne.w	80071e4 <LoRaMacProcess+0x3a0>
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80070c8:	a818      	add	r0, sp, #96	@ 0x60
        bool isStickyMacCommandPending = false;
 80070ca:	f88d 3060 	strb.w	r3, [sp, #96]	@ 0x60
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80070ce:	f001 fc79 	bl	80089c4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80070d2:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 80070d6:	b12b      	cbz	r3, 80070e4 <LoRaMacProcess+0x2a0>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80070d8:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80070dc:	f043 0310 	orr.w	r3, r3, #16
 80070e0:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    if( MacCtx.MacState != LORAMAC_IDLE )
 80070e4:	f8d4 5344 	ldr.w	r5, [r4, #836]	@ 0x344
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	d17b      	bne.n	80071e4 <LoRaMacProcess+0x3a0>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80070ec:	2124      	movs	r1, #36	@ 0x24
 80070ee:	482b      	ldr	r0, [pc, #172]	@ (800719c <LoRaMacProcess+0x358>)
 80070f0:	f003 fb54 	bl	800a79c <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 80070f4:	f8d4 3530 	ldr.w	r3, [r4, #1328]	@ 0x530
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80070f8:	2114      	movs	r1, #20
    if( crc != nvmData->Crypto.Crc32 )
 80070fa:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
 80070fc:	bf18      	it	ne
 80070fe:	f8c4 0530 	strne.w	r0, [r4, #1328]	@ 0x530
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8007102:	4827      	ldr	r0, [pc, #156]	@ (80071a0 <LoRaMacProcess+0x35c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8007104:	bf18      	it	ne
 8007106:	2501      	movne	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8007108:	f003 fb48 	bl	800a79c <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800710c:	f8d4 3548 	ldr.w	r3, [r4, #1352]	@ 0x548
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8007110:	21d4      	movs	r1, #212	@ 0xd4
    if( crc != nvmData->MacGroup1.Crc32 )
 8007112:	4298      	cmp	r0, r3
        nvmData->MacGroup1.Crc32 = crc;
 8007114:	bf18      	it	ne
 8007116:	f8c4 0548 	strne.w	r0, [r4, #1352]	@ 0x548
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800711a:	4822      	ldr	r0, [pc, #136]	@ (80071a4 <LoRaMacProcess+0x360>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800711c:	bf18      	it	ne
 800711e:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8007122:	f003 fb3b 	bl	800a79c <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8007126:	f8d4 3620 	ldr.w	r3, [r4, #1568]	@ 0x620
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800712a:	21bc      	movs	r1, #188	@ 0xbc
    if( crc != nvmData->MacGroup2.Crc32 )
 800712c:	4298      	cmp	r0, r3
        nvmData->MacGroup2.Crc32 = crc;
 800712e:	bf18      	it	ne
 8007130:	f8c4 0620 	strne.w	r0, [r4, #1568]	@ 0x620
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8007134:	481c      	ldr	r0, [pc, #112]	@ (80071a8 <LoRaMacProcess+0x364>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8007136:	bf18      	it	ne
 8007138:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800713c:	f003 fb2e 	bl	800a79c <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8007140:	f8d4 36e0 	ldr.w	r3, [r4, #1760]	@ 0x6e0
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8007144:	2190      	movs	r1, #144	@ 0x90
    if( crc != nvmData->SecureElement.Crc32 )
 8007146:	4298      	cmp	r0, r3
        nvmData->SecureElement.Crc32 = crc;
 8007148:	bf18      	it	ne
 800714a:	f8c4 06e0 	strne.w	r0, [r4, #1760]	@ 0x6e0
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800714e:	4817      	ldr	r0, [pc, #92]	@ (80071ac <LoRaMacProcess+0x368>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8007150:	bf18      	it	ne
 8007152:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8007156:	f003 fb21 	bl	800a79c <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800715a:	f8d4 3774 	ldr.w	r3, [r4, #1908]	@ 0x774
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800715e:	21c4      	movs	r1, #196	@ 0xc4
    if( crc != nvmData->RegionGroup1.Crc32 )
 8007160:	4298      	cmp	r0, r3
        nvmData->RegionGroup1.Crc32 = crc;
 8007162:	bf18      	it	ne
 8007164:	f8c4 0774 	strne.w	r0, [r4, #1908]	@ 0x774
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8007168:	4811      	ldr	r0, [pc, #68]	@ (80071b0 <LoRaMacProcess+0x36c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800716a:	bf18      	it	ne
 800716c:	f045 0510 	orrne.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8007170:	f003 fb14 	bl	800a79c <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8007174:	f8d4 383c 	ldr.w	r3, [r4, #2108]	@ 0x83c
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8007178:	2114      	movs	r1, #20
    if( crc != nvmData->RegionGroup2.Crc32 )
 800717a:	4298      	cmp	r0, r3
 800717c:	e01a      	b.n	80071b4 <LoRaMacProcess+0x370>
 800717e:	bf00      	nop
 8007180:	200005f8 	.word	0x200005f8
 8007184:	0800cec4 	.word	0x0800cec4
 8007188:	2000097c 	.word	0x2000097c
 800718c:	20000994 	.word	0x20000994
 8007190:	200009f4 	.word	0x200009f4
 8007194:	20000a34 	.word	0x20000a34
 8007198:	20000a48 	.word	0x20000a48
 800719c:	20000b04 	.word	0x20000b04
 80071a0:	20000b2c 	.word	0x20000b2c
 80071a4:	20000b44 	.word	0x20000b44
 80071a8:	20000c1c 	.word	0x20000c1c
 80071ac:	20000cdc 	.word	0x20000cdc
 80071b0:	20000d70 	.word	0x20000d70
        nvmData->RegionGroup2.Crc32 = crc;
 80071b4:	bf18      	it	ne
 80071b6:	f8c4 083c 	strne.w	r0, [r4, #2108]	@ 0x83c
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80071ba:	487d      	ldr	r0, [pc, #500]	@ (80073b0 <LoRaMacProcess+0x56c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80071bc:	bf18      	it	ne
 80071be:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80071c2:	f003 faeb 	bl	800a79c <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80071c6:	f8d4 3854 	ldr.w	r3, [r4, #2132]	@ 0x854
 80071ca:	4298      	cmp	r0, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80071cc:	f8d4 334c 	ldr.w	r3, [r4, #844]	@ 0x34c
        nvmData->ClassB.Crc32 = crc;
 80071d0:	bf1c      	itt	ne
 80071d2:	f8c4 0854 	strne.w	r0, [r4, #2132]	@ 0x854
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80071d6:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80071da:	b11b      	cbz	r3, 80071e4 <LoRaMacProcess+0x3a0>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80071dc:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80071de:	b10b      	cbz	r3, 80071e4 <LoRaMacProcess+0x3a0>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80071e0:	4628      	mov	r0, r5
 80071e2:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f884 3486 	strb.w	r3, [r4, #1158]	@ 0x486
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80071ea:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80071ee:	0718      	lsls	r0, r3, #28
 80071f0:	d50a      	bpl.n	8007208 <LoRaMacProcess+0x3c4>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80071f2:	f36f 03c3 	bfc	r3, #3, #1
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80071f6:	496f      	ldr	r1, [pc, #444]	@ (80073b4 <LoRaMacProcess+0x570>)
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80071f8:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80071fc:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 8007200:	f1a1 001c 	sub.w	r0, r1, #28
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8007208:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 800720c:	06d9      	lsls	r1, r3, #27
 800720e:	d50e      	bpl.n	800722e <LoRaMacProcess+0x3ea>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8007210:	2307      	movs	r3, #7
 8007212:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8007216:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 800721a:	4966      	ldr	r1, [pc, #408]	@ (80073b4 <LoRaMacProcess+0x570>)
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	a818      	add	r0, sp, #96	@ 0x60
 8007220:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8007222:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007226:	f36f 1304 	bfc	r3, #4, #1
 800722a:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800722e:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007232:	079a      	lsls	r2, r3, #30
 8007234:	d50a      	bpl.n	800724c <LoRaMacProcess+0x408>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8007236:	f36f 0341 	bfc	r3, #1, #1
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800723a:	495e      	ldr	r1, [pc, #376]	@ (80073b4 <LoRaMacProcess+0x570>)
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800723c:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8007240:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 8007244:	f1a1 0060 	sub.w	r0, r1, #96	@ 0x60
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800724c:	f894 3484 	ldrb.w	r3, [r4, #1156]	@ 0x484
 8007250:	2b02      	cmp	r3, #2
 8007252:	f040 82a7 	bne.w	80077a4 <LoRaMacProcess+0x960>
}
 8007256:	b025      	add	sp, #148	@ 0x94
 8007258:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        OpenContinuousRxCWindow( );
 800725c:	f7ff ba22 	b.w	80066a4 <OpenContinuousRxCWindow>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007260:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10c      	bne.n	8007282 <LoRaMacProcess+0x43e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007268:	f001 fab7 	bl	80087da <LoRaMacClassBIsPingExpected>
 800726c:	4607      	mov	r7, r0
 800726e:	b1c8      	cbz	r0, 80072a4 <LoRaMacProcess+0x460>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007270:	4640      	mov	r0, r8
 8007272:	f001 faa7 	bl	80087c4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007276:	4640      	mov	r0, r8
 8007278:	f001 faa9 	bl	80087ce <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800727c:	2304      	movs	r3, #4
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800727e:	f884 3483 	strb.w	r3, [r4, #1155]	@ 0x483
    macHdr.Value = payload[pktHeaderLen++];
 8007282:	f896 8000 	ldrb.w	r8, [r6]
    switch( macHdr.Bits.MType )
 8007286:	ea4f 1358 	mov.w	r3, r8, lsr #5
 800728a:	3b01      	subs	r3, #1
 800728c:	2b06      	cmp	r3, #6
 800728e:	f200 81db 	bhi.w	8007648 <LoRaMacProcess+0x804>
 8007292:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007296:	0013      	.short	0x0013
 8007298:	009401d9 	.word	0x009401d9
 800729c:	009101d9 	.word	0x009101d9
 80072a0:	01ca01d9 	.word	0x01ca01d9
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80072a4:	f001 fa9b 	bl	80087de <LoRaMacClassBIsMulticastExpected>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d0ea      	beq.n	8007282 <LoRaMacProcess+0x43e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80072ac:	4638      	mov	r0, r7
 80072ae:	f001 fa8a 	bl	80087c6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80072b2:	4638      	mov	r0, r7
 80072b4:	f001 fa8c 	bl	80087d0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80072b8:	2305      	movs	r3, #5
 80072ba:	e7e0      	b.n	800727e <LoRaMacProcess+0x43a>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80072bc:	2d10      	cmp	r5, #16
 80072be:	d803      	bhi.n	80072c8 <LoRaMacProcess+0x484>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f884 3421 	strb.w	r3, [r4, #1057]	@ 0x421
 80072c6:	e11c      	b.n	8007502 <LoRaMacProcess+0x6be>
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80072c8:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
            macMsgJoinAccept.BufSize = size;
 80072cc:	b2ed      	uxtb	r5, r5
            macMsgJoinAccept.Buffer = payload;
 80072ce:	960e      	str	r6, [sp, #56]	@ 0x38
            macMsgJoinAccept.BufSize = size;
 80072d0:	f88d 503c 	strb.w	r5, [sp, #60]	@ 0x3c
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f3      	bne.n	80072c0 <LoRaMacProcess+0x47c>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80072d8:	f7fe f92e 	bl	8005538 <SecureElementGetJoinEui>
 80072dc:	aa0e      	add	r2, sp, #56	@ 0x38
 80072de:	4601      	mov	r1, r0
 80072e0:	20ff      	movs	r0, #255	@ 0xff
 80072e2:	f001 ff05 	bl	80090f0 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80072e6:	4606      	mov	r6, r0
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d159      	bne.n	80073a0 <LoRaMacProcess+0x55c>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80072ec:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80072f0:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80072fa:	f89d 2041 	ldrb.w	r2, [sp, #65]	@ 0x41
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80072fe:	f884 061a 	strb.w	r0, [r4, #1562]	@ 0x61a
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c4 35d4 	str.w	r3, [r4, #1492]	@ 0x5d4
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8007308:	9b11      	ldr	r3, [sp, #68]	@ 0x44
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800730a:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800730e:	f8c4 35d8 	str.w	r3, [r4, #1496]	@ 0x5d8
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8007312:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
                applyCFList.Size = size - 17;
 8007316:	3d11      	subs	r5, #17
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8007318:	f3c3 1202 	ubfx	r2, r3, #4, #3
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800731c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007320:	f884 3574 	strb.w	r3, [r4, #1396]	@ 0x574
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8007324:	f884 357c 	strb.w	r3, [r4, #1404]	@ 0x57c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8007328:	f89d 3049 	ldrb.w	r3, [sp, #73]	@ 0x49
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800732c:	f884 256d 	strb.w	r2, [r4, #1389]	@ 0x56d
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8007330:	2b01      	cmp	r3, #1
 8007332:	bf38      	it	cc
 8007334:	2301      	movcc	r3, #1
 8007336:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800733a:	4353      	muls	r3, r2
 800733c:	f8c4 355c 	str.w	r3, [r4, #1372]	@ 0x55c
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8007340:	4413      	add	r3, r2
 8007342:	f8c4 3560 	str.w	r3, [r4, #1376]	@ 0x560
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8007346:	a90c      	add	r1, sp, #48	@ 0x30
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8007348:	f10d 034a 	add.w	r3, sp, #74	@ 0x4a
 800734c:	930c      	str	r3, [sp, #48]	@ 0x30
                applyCFList.Size = size - 17;
 800734e:	f88d 5034 	strb.w	r5, [sp, #52]	@ 0x34
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8007352:	f002 f8ba 	bl	80094ca <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007356:	2302      	movs	r3, #2
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007358:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800735a:	f884 361c 	strb.w	r3, [r4, #1564]	@ 0x61c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800735e:	f001 fbed 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
 8007362:	b118      	cbz	r0, 800736c <LoRaMacProcess+0x528>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8007364:	2101      	movs	r1, #1
 8007366:	4630      	mov	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8007368:	f001 fbac 	bl	8008ac4 <LoRaMacConfirmQueueSetStatus>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800736c:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007370:	f043 0308 	orr.w	r3, r3, #8
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007374:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    if( MacCtx.NodeAckRequested == true )
 8007378:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8169 	beq.w	8007654 <LoRaMacProcess+0x810>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007382:	f894 3440 	ldrb.w	r3, [r4, #1088]	@ 0x440
 8007386:	b113      	cbz	r3, 800738e <LoRaMacProcess+0x54a>
            OnAckTimeoutTimerEvent( NULL );
 8007388:	2000      	movs	r0, #0
 800738a:	f7fe fe5b 	bl	8006044 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800738e:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007392:	f043 0320 	orr.w	r3, r3, #32
 8007396:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    UpdateRxSlotIdleState( );
 800739a:	f7fe fe2f 	bl	8005ffc <UpdateRxSlotIdleState>
 800739e:	e603      	b.n	8006fa8 <LoRaMacProcess+0x164>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80073a0:	2001      	movs	r0, #1
 80073a2:	f001 fbcb 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d0e0      	beq.n	800736c <LoRaMacProcess+0x528>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80073aa:	2101      	movs	r1, #1
 80073ac:	2007      	movs	r0, #7
 80073ae:	e7db      	b.n	8007368 <LoRaMacProcess+0x524>
 80073b0:	20000e38 	.word	0x20000e38
 80073b4:	20000a78 	.word	0x20000a78
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f884 3420 	strb.w	r3, [r4, #1056]	@ 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80073be:	f894 3581 	ldrb.w	r3, [r4, #1409]	@ 0x581
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80073c2:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80073c6:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80073ca:	f894 3424 	ldrb.w	r3, [r4, #1060]	@ 0x424
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80073ce:	a908      	add	r1, sp, #32
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80073d0:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80073d4:	f894 358c 	ldrb.w	r3, [r4, #1420]	@ 0x58c
 80073d8:	330d      	adds	r3, #13
 80073da:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80073de:	f002 f855 	bl	800948c <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80073e2:	f1a5 030d 	sub.w	r3, r5, #13
 80073e6:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80073e8:	9006      	str	r0, [sp, #24]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80073ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073ee:	b200      	sxth	r0, r0
 80073f0:	4283      	cmp	r3, r0
 80073f2:	f73f af65 	bgt.w	80072c0 <LoRaMacProcess+0x47c>
 80073f6:	2d0b      	cmp	r5, #11
 80073f8:	f67f af62 	bls.w	80072c0 <LoRaMacProcess+0x47c>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80073fc:	4bb5      	ldr	r3, [pc, #724]	@ (80076d4 <LoRaMacProcess+0x890>)
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80073fe:	a818      	add	r0, sp, #96	@ 0x60
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8007400:	9321      	str	r3, [sp, #132]	@ 0x84
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8007402:	23ff      	movs	r3, #255	@ 0xff
            macMsgData.Buffer = payload;
 8007404:	9618      	str	r6, [sp, #96]	@ 0x60
            macMsgData.BufSize = size;
 8007406:	f88d 5064 	strb.w	r5, [sp, #100]	@ 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800740a:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800740e:	f001 ff2f 	bl	8009270 <LoRaMacParserData>
 8007412:	4606      	mov	r6, r0
 8007414:	2800      	cmp	r0, #0
 8007416:	f47f af53 	bne.w	80072c0 <LoRaMacProcess+0x47c>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800741a:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800741e:	991a      	ldr	r1, [sp, #104]	@ 0x68
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007420:	f013 020f 	ands.w	r2, r3, #15
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8007424:	f8c4 1434 	str.w	r1, [r4, #1076]	@ 0x434
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007428:	d003      	beq.n	8007432 <LoRaMacProcess+0x5ee>
 800742a:	f89d 0080 	ldrb.w	r0, [sp, #128]	@ 0x80
 800742e:	2800      	cmp	r0, #0
 8007430:	d16a      	bne.n	8007508 <LoRaMacProcess+0x6c4>
    else if( macMsg->FRMPayloadSize == 0 )
 8007432:	f89d 0088 	ldrb.w	r0, [sp, #136]	@ 0x88
 8007436:	2800      	cmp	r0, #0
 8007438:	d068      	beq.n	800750c <LoRaMacProcess+0x6c8>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800743a:	2a00      	cmp	r2, #0
 800743c:	f47f af40 	bne.w	80072c0 <LoRaMacProcess+0x47c>
 8007440:	f89d 2080 	ldrb.w	r2, [sp, #128]	@ 0x80
        *fType = FRAME_TYPE_C;
 8007444:	2a00      	cmp	r2, #0
 8007446:	bf14      	ite	ne
 8007448:	2703      	movne	r7, #3
 800744a:	2702      	moveq	r7, #2
            downLinkCounter = 0;
 800744c:	2200      	movs	r2, #0
 800744e:	9207      	str	r2, [sp, #28]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007450:	f8d4 25e0 	ldr.w	r2, [r4, #1504]	@ 0x5e0
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8007454:	f894 05de 	ldrb.w	r0, [r4, #1502]	@ 0x5de
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007458:	4291      	cmp	r1, r2
 800745a:	d159      	bne.n	8007510 <LoRaMacProcess+0x6cc>
 800745c:	2800      	cmp	r0, #0
 800745e:	d057      	beq.n	8007510 <LoRaMacProcess+0x6cc>
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8007460:	f8d4 15fc 	ldr.w	r1, [r4, #1532]	@ 0x5fc
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8007464:	f894 a5df 	ldrb.w	sl, [r4, #1503]	@ 0x5df
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8007468:	6809      	ldr	r1, [r1, #0]
 800746a:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800746c:	f894 1608 	ldrb.w	r1, [r4, #1544]	@ 0x608
 8007470:	2902      	cmp	r1, #2
 8007472:	d102      	bne.n	800747a <LoRaMacProcess+0x636>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007474:	2103      	movs	r1, #3
 8007476:	f884 1483 	strb.w	r1, [r4, #1155]	@ 0x483
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800747a:	2f03      	cmp	r7, #3
 800747c:	f47f af20 	bne.w	80072c0 <LoRaMacProcess+0x47c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8007480:	f013 0f60 	tst.w	r3, #96	@ 0x60
 8007484:	f47f af1c 	bne.w	80072c0 <LoRaMacProcess+0x47c>
 8007488:	2601      	movs	r6, #1
 800748a:	9203      	str	r2, [sp, #12]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800748c:	2315      	movs	r3, #21
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800748e:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8007492:	a908      	add	r1, sp, #32
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8007494:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007498:	f001 fff8 	bl	800948c <RegionGetPhyParam>
 800749c:	f894 361a 	ldrb.w	r3, [r4, #1562]	@ 0x61a
 80074a0:	9006      	str	r0, [sp, #24]
    switch( addrID )
 80074a2:	f1ba 0f00 	cmp.w	sl, #0
 80074a6:	d036      	beq.n	8007516 <LoRaMacProcess+0x6d2>
 80074a8:	f1ba 0f01 	cmp.w	sl, #1
 80074ac:	d13d      	bne.n	800752a <LoRaMacProcess+0x6e6>
            if( lrWanVersion.Fields.Minor == 1 )
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d133      	bne.n	800751a <LoRaMacProcess+0x6d6>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80074b2:	f06f 0509 	mvn.w	r5, #9
 80074b6:	413d      	asrs	r5, r7
 80074b8:	f005 0501 	and.w	r5, r5, #1
 80074bc:	f1c5 0502 	rsb	r5, r5, #2
 80074c0:	b2ed      	uxtb	r5, r5
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80074c2:	b281      	uxth	r1, r0
 80074c4:	f8bd 206e 	ldrh.w	r2, [sp, #110]	@ 0x6e
 80074c8:	4628      	mov	r0, r5
 80074ca:	ab07      	add	r3, sp, #28
 80074cc:	f001 fc9c 	bl	8008e08 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80074d0:	b368      	cbz	r0, 800752e <LoRaMacProcess+0x6ea>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80074d2:	2807      	cmp	r0, #7
 80074d4:	d123      	bne.n	800751e <LoRaMacProcess+0x6da>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80074d6:	2308      	movs	r3, #8
 80074d8:	f884 3421 	strb.w	r3, [r4, #1057]	@ 0x421
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80074dc:	f894 361a 	ldrb.w	r3, [r4, #1562]	@ 0x61a
 80074e0:	b963      	cbnz	r3, 80074fc <LoRaMacProcess+0x6b8>
 80074e2:	f008 08e0 	and.w	r8, r8, #224	@ 0xe0
 80074e6:	f1b8 0fa0 	cmp.w	r8, #160	@ 0xa0
 80074ea:	d107      	bne.n	80074fc <LoRaMacProcess+0x6b8>
 80074ec:	f8d4 2540 	ldr.w	r2, [r4, #1344]	@ 0x540
 80074f0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d102      	bne.n	80074fc <LoRaMacProcess+0x6b8>
                        Nvm.MacGroup1.SrvAckRequested = true;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f884 3546 	strb.w	r3, [r4, #1350]	@ 0x546
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80074fc:	9b07      	ldr	r3, [sp, #28]
 80074fe:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
                PrepareRxDoneAbort( );
 8007502:	f7fe fdc1 	bl	8006088 <PrepareRxDoneAbort>
                return;
 8007506:	e54f      	b.n	8006fa8 <LoRaMacProcess+0x164>
        *fType = FRAME_TYPE_A;
 8007508:	4637      	mov	r7, r6
 800750a:	e79f      	b.n	800744c <LoRaMacProcess+0x608>
        *fType = FRAME_TYPE_B;
 800750c:	2701      	movs	r7, #1
 800750e:	e79d      	b.n	800744c <LoRaMacProcess+0x608>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8007510:	f04f 0a01 	mov.w	sl, #1
 8007514:	e7ba      	b.n	800748c <LoRaMacProcess+0x648>
    switch( addrID )
 8007516:	2504      	movs	r5, #4
 8007518:	e7d3      	b.n	80074c2 <LoRaMacProcess+0x67e>
                *fCntID = FCNT_DOWN;
 800751a:	2503      	movs	r5, #3
 800751c:	e7d1      	b.n	80074c2 <LoRaMacProcess+0x67e>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800751e:	2808      	cmp	r0, #8
 8007520:	d103      	bne.n	800752a <LoRaMacProcess+0x6e6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8007522:	230a      	movs	r3, #10
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007524:	f884 3421 	strb.w	r3, [r4, #1057]	@ 0x421
 8007528:	e7e8      	b.n	80074fc <LoRaMacProcess+0x6b8>
 800752a:	2301      	movs	r3, #1
 800752c:	e7fa      	b.n	8007524 <LoRaMacProcess+0x6e0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800752e:	ab18      	add	r3, sp, #96	@ 0x60
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	462a      	mov	r2, r5
 8007534:	4650      	mov	r0, sl
 8007536:	9b07      	ldr	r3, [sp, #28]
 8007538:	9903      	ldr	r1, [sp, #12]
 800753a:	f001 fd33 	bl	8008fa4 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800753e:	b120      	cbz	r0, 800754a <LoRaMacProcess+0x706>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8007540:	2802      	cmp	r0, #2
 8007542:	bf14      	ite	ne
 8007544:	230c      	movne	r3, #12
 8007546:	230b      	moveq	r3, #11
 8007548:	e6bb      	b.n	80072c2 <LoRaMacProcess+0x47e>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800754a:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800754e:	f884 0421 	strb.w	r0, [r4, #1057]	@ 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8007552:	f3c3 1200 	ubfx	r2, r3, #4, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007556:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800755a:	f884 342e 	strb.w	r3, [r4, #1070]	@ 0x42e
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800755e:	f884 3440 	strb.w	r3, [r4, #1088]	@ 0x440
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8007562:	f894 3483 	ldrb.w	r3, [r4, #1155]	@ 0x483
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8007566:	f884 2425 	strb.w	r2, [r4, #1061]	@ 0x425
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800756a:	2b01      	cmp	r3, #1
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800756c:	9a07      	ldr	r2, [sp, #28]
                Nvm.MacGroup1.AdrAckCounter = 0;
 800756e:	bf98      	it	ls
 8007570:	f8c4 0534 	strls.w	r0, [r4, #1332]	@ 0x534
            if( multicast == 1 )
 8007574:	2e01      	cmp	r6, #1
            MacCtx.McpsIndication.Multicast = multicast;
 8007576:	f884 6422 	strb.w	r6, [r4, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800757a:	f8c4 0428 	str.w	r0, [r4, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800757e:	f884 042c 	strb.w	r0, [r4, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007582:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007586:	f884 043d 	strb.w	r0, [r4, #1085]	@ 0x43d
            if( multicast == 1 )
 800758a:	d03d      	beq.n	8007608 <LoRaMacProcess+0x7c4>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800758c:	f008 08e0 	and.w	r8, r8, #224	@ 0xe0
 8007590:	f1b8 0fa0 	cmp.w	r8, #160	@ 0xa0
 8007594:	d134      	bne.n	8007600 <LoRaMacProcess+0x7bc>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8007596:	2201      	movs	r2, #1
 8007598:	f884 2546 	strb.w	r2, [r4, #1350]	@ 0x546
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800759c:	f894 261a 	ldrb.w	r2, [r4, #1562]	@ 0x61a
 80075a0:	b912      	cbnz	r2, 80075a8 <LoRaMacProcess+0x764>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80075a2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80075a4:	f8c4 2540 	str.w	r2, [r4, #1344]	@ 0x540
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80075a8:	2601      	movs	r6, #1
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80075aa:	2b01      	cmp	r3, #1
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80075ac:	f894 143c 	ldrb.w	r1, [r4, #1084]	@ 0x43c
 80075b0:	f89d 206c 	ldrb.w	r2, [sp, #108]	@ 0x6c
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80075b4:	f884 6420 	strb.w	r6, [r4, #1056]	@ 0x420
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80075b8:	d805      	bhi.n	80075c6 <LoRaMacProcess+0x782>
        if( request == MCPS_CONFIRMED )
 80075ba:	2901      	cmp	r1, #1
 80075bc:	d101      	bne.n	80075c2 <LoRaMacProcess+0x77e>
            if( fCtrl.Bits.Ack == 1 )
 80075be:	0693      	lsls	r3, r2, #26
 80075c0:	d501      	bpl.n	80075c6 <LoRaMacProcess+0x782>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80075c2:	f001 f9af 	bl	8008924 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 80075c6:	2f02      	cmp	r7, #2
 80075c8:	d020      	beq.n	800760c <LoRaMacProcess+0x7c8>
 80075ca:	2f03      	cmp	r7, #3
 80075cc:	d009      	beq.n	80075e2 <LoRaMacProcess+0x79e>
 80075ce:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 80075d2:	2f01      	cmp	r7, #1
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80075d4:	464a      	mov	r2, r9
 80075d6:	f001 010f 	and.w	r1, r1, #15
 80075da:	a81c      	add	r0, sp, #112	@ 0x70
 80075dc:	d01a      	beq.n	8007614 <LoRaMacProcess+0x7d0>
 80075de:	f7ff f941 	bl	8006864 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80075e2:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 80075e6:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80075ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075ec:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80075f0:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80075f4:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80075f8:	2301      	movs	r3, #1
 80075fa:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
                    break;
 80075fe:	e00f      	b.n	8007620 <LoRaMacProcess+0x7dc>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8007600:	2200      	movs	r2, #0
 8007602:	f884 2546 	strb.w	r2, [r4, #1350]	@ 0x546
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007606:	e7d0      	b.n	80075aa <LoRaMacProcess+0x766>
 8007608:	2602      	movs	r6, #2
 800760a:	e7ce      	b.n	80075aa <LoRaMacProcess+0x766>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800760c:	464a      	mov	r2, r9
 800760e:	f89d 1088 	ldrb.w	r1, [sp, #136]	@ 0x88
 8007612:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8007614:	f7ff f926 	bl	8006864 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007618:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 800761c:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007620:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007624:	f043 0302 	orr.w	r3, r3, #2
 8007628:	e6a4      	b.n	8007374 <LoRaMacProcess+0x530>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800762a:	4f2a      	ldr	r7, [pc, #168]	@ (80076d4 <LoRaMacProcess+0x890>)
 800762c:	3d01      	subs	r5, #1
 800762e:	4638      	mov	r0, r7
 8007630:	b2aa      	uxth	r2, r5
 8007632:	1c71      	adds	r1, r6, #1
 8007634:	f003 f89c 	bl	800a770 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8007638:	2303      	movs	r3, #3
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800763a:	f8c4 7428 	str.w	r7, [r4, #1064]	@ 0x428
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800763e:	f8a4 3420 	strh.w	r3, [r4, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8007642:	f884 542c 	strb.w	r5, [r4, #1068]	@ 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007646:	e7eb      	b.n	8007620 <LoRaMacProcess+0x7dc>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	f884 3421 	strb.w	r3, [r4, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800764e:	f7fe fd1b 	bl	8006088 <PrepareRxDoneAbort>
            break;
 8007652:	e691      	b.n	8007378 <LoRaMacProcess+0x534>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007654:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 8007658:	2b02      	cmp	r3, #2
 800765a:	f47f ae98 	bne.w	800738e <LoRaMacProcess+0x54a>
 800765e:	e693      	b.n	8007388 <LoRaMacProcess+0x544>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007660:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 8007664:	0759      	lsls	r1, r3, #29
 8007666:	d50f      	bpl.n	8007688 <LoRaMacProcess+0x844>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007668:	2001      	movs	r0, #1
 800766a:	f001 fa67 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
 800766e:	b3a8      	cbz	r0, 80076dc <LoRaMacProcess+0x898>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8007670:	2001      	movs	r0, #1
 8007672:	f001 fa39 	bl	8008ae8 <LoRaMacConfirmQueueGetStatus>
 8007676:	b908      	cbnz	r0, 800767c <LoRaMacProcess+0x838>
                MacCtx.ChannelsNbTransCounter = 0;
 8007678:	f884 0414 	strb.w	r0, [r4, #1044]	@ 0x414
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800767c:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 8007680:	f023 0302 	bic.w	r3, r3, #2
 8007684:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8007688:	f894 1485 	ldrb.w	r1, [r4, #1157]	@ 0x485
 800768c:	07ca      	lsls	r2, r1, #31
 800768e:	f57f ace0 	bpl.w	8007052 <LoRaMacProcess+0x20e>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8007692:	f894 343c 	ldrb.w	r3, [r4, #1084]	@ 0x43c
 8007696:	b10b      	cbz	r3, 800769c <LoRaMacProcess+0x858>
 8007698:	2b03      	cmp	r3, #3
 800769a:	d12a      	bne.n	80076f2 <LoRaMacProcess+0x8ae>
    if( MacCtx.ChannelsNbTransCounter >=
 800769c:	f894 2414 	ldrb.w	r2, [r4, #1044]	@ 0x414
 80076a0:	f894 356c 	ldrb.w	r3, [r4, #1388]	@ 0x56c
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d208      	bcs.n	80076ba <LoRaMacProcess+0x876>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80076a8:	078b      	lsls	r3, r1, #30
 80076aa:	d554      	bpl.n	8007756 <LoRaMacProcess+0x912>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80076ac:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 80076b0:	b11b      	cbz	r3, 80076ba <LoRaMacProcess+0x876>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80076b2:	f894 3483 	ldrb.w	r3, [r4, #1155]	@ 0x483
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d14d      	bne.n	8007756 <LoRaMacProcess+0x912>
            TimerStop( &MacCtx.TxDelayedTimer );
 80076ba:	4807      	ldr	r0, [pc, #28]	@ (80076d8 <LoRaMacProcess+0x894>)
 80076bc:	f004 fe80 	bl	800c3c0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80076c0:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 80076c4:	f023 0320 	bic.w	r3, r3, #32
 80076c8:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
            StopRetransmission( );
 80076cc:	f7ff fb64 	bl	8006d98 <StopRetransmission.isra.0>
 80076d0:	e4bf      	b.n	8007052 <LoRaMacProcess+0x20e>
 80076d2:	bf00      	nop
 80076d4:	20000834 	.word	0x20000834
 80076d8:	20000964 	.word	0x20000964
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80076dc:	2005      	movs	r0, #5
 80076de:	f001 fa2d 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d1ca      	bne.n	800767c <LoRaMacProcess+0x838>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80076e6:	2006      	movs	r0, #6
 80076e8:	f001 fa28 	bl	8008b3c <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d1c5      	bne.n	800767c <LoRaMacProcess+0x838>
 80076f0:	e7ca      	b.n	8007688 <LoRaMacProcess+0x844>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d12f      	bne.n	8007756 <LoRaMacProcess+0x912>
            if( MacCtx.AckTimeoutRetry == true )
 80076f6:	f894 2417 	ldrb.w	r2, [r4, #1047]	@ 0x417
 80076fa:	2a00      	cmp	r2, #0
 80076fc:	f43f aca9 	beq.w	8007052 <LoRaMacProcess+0x20e>
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007700:	f894 3416 	ldrb.w	r3, [r4, #1046]	@ 0x416
        MacCtx.AckTimeoutRetries )
 8007704:	f894 0415 	ldrb.w	r0, [r4, #1045]	@ 0x415
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007708:	4283      	cmp	r3, r0
 800770a:	d204      	bcs.n	8007716 <LoRaMacProcess+0x8d2>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800770c:	f011 0202 	ands.w	r2, r1, #2
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007710:	bf18      	it	ne
 8007712:	f894 2440 	ldrbne.w	r2, [r4, #1088]	@ 0x440
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8007716:	f894 161a 	ldrb.w	r1, [r4, #1562]	@ 0x61a
 800771a:	2900      	cmp	r1, #0
 800771c:	d13f      	bne.n	800779e <LoRaMacProcess+0x95a>
                    if( stopRetransmission == false )
 800771e:	bb32      	cbnz	r2, 800776e <LoRaMacProcess+0x92a>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8007720:	4283      	cmp	r3, r0
 8007722:	d218      	bcs.n	8007756 <LoRaMacProcess+0x912>
        MacCtx.AckTimeoutRetriesCounter++;
 8007724:	3301      	adds	r3, #1
 8007726:	b2db      	uxtb	r3, r3
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8007728:	07df      	lsls	r7, r3, #31
        MacCtx.AckTimeoutRetriesCounter++;
 800772a:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800772e:	d512      	bpl.n	8007756 <LoRaMacProcess+0x912>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007730:	2322      	movs	r3, #34	@ 0x22
 8007732:	f88d 3060 	strb.w	r3, [sp, #96]	@ 0x60
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007736:	f894 3580 	ldrb.w	r3, [r4, #1408]	@ 0x580
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800773a:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800773e:	f88d 3062 	strb.w	r3, [sp, #98]	@ 0x62
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007742:	f894 3545 	ldrb.w	r3, [r4, #1349]	@ 0x545
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007746:	a918      	add	r1, sp, #96	@ 0x60
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007748:	f88d 3061 	strb.w	r3, [sp, #97]	@ 0x61
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800774c:	f001 fe9e 	bl	800948c <RegionGetPhyParam>
 8007750:	900e      	str	r0, [sp, #56]	@ 0x38
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8007752:	f884 0545 	strb.w	r0, [r4, #1349]	@ 0x545
            MacCtx.AckTimeoutRetry = false;
 8007756:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8007758:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
            MacCtx.AckTimeoutRetry = false;
 800775c:	f884 0417 	strb.w	r0, [r4, #1047]	@ 0x417
            MacCtx.MacFlags.Bits.MacDone = 0;
 8007760:	f36f 1345 	bfc	r3, #5, #1
 8007764:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
            OnTxDelayedTimerEvent( NULL );
 8007768:	f7ff fb38 	bl	8006ddc <OnTxDelayedTimerEvent>
 800776c:	e471      	b.n	8007052 <LoRaMacProcess+0x20e>
    if( MacCtx.McpsConfirm.AckReceived == false )
 800776e:	f894 5440 	ldrb.w	r5, [r4, #1088]	@ 0x440
 8007772:	b97d      	cbnz	r5, 8007794 <LoRaMacProcess+0x950>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8007774:	2302      	movs	r3, #2
 8007776:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800777a:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <LoRaMacProcess+0x968>)
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800777c:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8007780:	9318      	str	r3, [sp, #96]	@ 0x60
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007782:	a918      	add	r1, sp, #96	@ 0x60
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8007784:	3394      	adds	r3, #148	@ 0x94
 8007786:	9319      	str	r3, [sp, #100]	@ 0x64
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007788:	f001 fe90 	bl	80094ac <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800778c:	f884 5418 	strb.w	r5, [r4, #1048]	@ 0x418
        MacCtx.McpsConfirm.AckReceived = false;
 8007790:	f884 5440 	strb.w	r5, [r4, #1088]	@ 0x440
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8007794:	f894 3416 	ldrb.w	r3, [r4, #1046]	@ 0x416
 8007798:	f884 3441 	strb.w	r3, [r4, #1089]	@ 0x441
        if( stopRetransmission == true )
 800779c:	e78d      	b.n	80076ba <LoRaMacProcess+0x876>
 800779e:	2a00      	cmp	r2, #0
 80077a0:	d0d9      	beq.n	8007756 <LoRaMacProcess+0x912>
 80077a2:	e78a      	b.n	80076ba <LoRaMacProcess+0x876>
}
 80077a4:	b025      	add	sp, #148	@ 0x94
 80077a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077aa:	bf00      	nop
 80077ac:	20000cdc 	.word	0x20000cdc

080077b0 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80077b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	4688      	mov	r8, r1
 80077b6:	4691      	mov	r9, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80077b8:	4606      	mov	r6, r0
{
 80077ba:	b08a      	sub	sp, #40	@ 0x28
    if( ( primitives == NULL ) ||
 80077bc:	2800      	cmp	r0, #0
 80077be:	f000 8197 	beq.w	8007af0 <LoRaMacInitialization+0x340>
 80077c2:	2900      	cmp	r1, #0
 80077c4:	f000 8194 	beq.w	8007af0 <LoRaMacInitialization+0x340>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80077c8:	6803      	ldr	r3, [r0, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 8190 	beq.w	8007af0 <LoRaMacInitialization+0x340>
 80077d0:	6843      	ldr	r3, [r0, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 818c 	beq.w	8007af0 <LoRaMacInitialization+0x340>
        ( primitives->MacMcpsIndication == NULL ) ||
 80077d8:	6883      	ldr	r3, [r0, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 8188 	beq.w	8007af0 <LoRaMacInitialization+0x340>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80077e0:	68c3      	ldr	r3, [r0, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8184 	beq.w	8007af0 <LoRaMacInitialization+0x340>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80077e8:	4610      	mov	r0, r2
 80077ea:	f001 fe4b 	bl	8009484 <RegionIsActive>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f000 8180 	beq.w	8007af4 <LoRaMacInitialization+0x344>

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80077f4:	4cc1      	ldr	r4, [pc, #772]	@ (8007afc <LoRaMacInitialization+0x34c>)
    LoRaMacConfirmQueueInit( primitives );
 80077f6:	4630      	mov	r0, r6
 80077f8:	f001 f91c 	bl	8008a34 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80077fc:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8007800:	2100      	movs	r1, #0
 8007802:	f204 500c 	addw	r0, r4, #1292	@ 0x50c
 8007806:	f002 ffc7 	bl	800a798 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800780a:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 800780e:	2100      	movs	r1, #0
 8007810:	1d20      	adds	r0, r4, #4
 8007812:	f002 ffc1 	bl	800a798 <memset1>
    Nvm.MacGroup2.Region = region;
    Nvm.MacGroup2.DeviceClass = CLASS_A;
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8007816:	4bba      	ldr	r3, [pc, #744]	@ (8007b00 <LoRaMacInitialization+0x350>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8007818:	2500      	movs	r5, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 800781a:	2701      	movs	r7, #1
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800781c:	f8c4 3618 	str.w	r3, [r4, #1560]	@ 0x618

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007820:	230f      	movs	r3, #15
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007822:	4648      	mov	r0, r9
 8007824:	a905      	add	r1, sp, #20
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007826:	f88d 3014 	strb.w	r3, [sp, #20]
    Nvm.MacGroup2.Region = region;
 800782a:	f884 954c 	strb.w	r9, [r4, #1356]	@ 0x54c
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800782e:	f884 5608 	strb.w	r5, [r4, #1544]	@ 0x608
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8007832:	f884 558c 	strb.w	r5, [r4, #1420]	@ 0x58c
    MacCtx.AckTimeoutRetriesCounter = 1;
 8007836:	f884 7416 	strb.w	r7, [r4, #1046]	@ 0x416
    MacCtx.AckTimeoutRetries = 1;
 800783a:	f884 7415 	strb.w	r7, [r4, #1045]	@ 0x415
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800783e:	f001 fe25 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8007842:	1b40      	subs	r0, r0, r5
 8007844:	bf18      	it	ne
 8007846:	2001      	movne	r0, #1

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8007848:	f04f 0a0a 	mov.w	sl, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800784c:	f884 060c 	strb.w	r0, [r4, #1548]	@ 0x60c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007850:	a905      	add	r1, sp, #20
 8007852:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8007856:	f88d a014 	strb.w	sl, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800785a:	f001 fe17 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 800785e:	f04f 0906 	mov.w	r9, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8007862:	f884 05d0 	strb.w	r0, [r4, #1488]	@ 0x5d0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007866:	a905      	add	r1, sp, #20
 8007868:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_TX_DR;
 800786c:	f88d 9014 	strb.w	r9, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007870:	f001 fe0c 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8007874:	2310      	movs	r3, #16
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8007876:	f884 05d1 	strb.w	r0, [r4, #1489]	@ 0x5d1
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800787a:	a905      	add	r1, sp, #20
 800787c:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8007880:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007884:	f001 fe02 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8007888:	2311      	movs	r3, #17
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800788a:	f8c4 0598 	str.w	r0, [r4, #1432]	@ 0x598
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800788e:	a905      	add	r1, sp, #20
 8007890:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8007894:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007898:	f001 fdf8 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800789c:	2312      	movs	r3, #18
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800789e:	f8c4 059c 	str.w	r0, [r4, #1436]	@ 0x59c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078a2:	a905      	add	r1, sp, #20
 80078a4:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80078a8:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078ac:	f001 fdee 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80078b0:	2313      	movs	r3, #19
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80078b2:	f8c4 05a0 	str.w	r0, [r4, #1440]	@ 0x5a0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078b6:	a905      	add	r1, sp, #20
 80078b8:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80078bc:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078c0:	f001 fde4 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80078c4:	2314      	movs	r3, #20
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80078c6:	f8c4 05a4 	str.w	r0, [r4, #1444]	@ 0x5a4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078ca:	eb0d 0103 	add.w	r1, sp, r3
 80078ce:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80078d2:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078d6:	f001 fdd9 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80078da:	2317      	movs	r3, #23
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80078dc:	f8c4 05a8 	str.w	r0, [r4, #1448]	@ 0x5a8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078e0:	a905      	add	r1, sp, #20
 80078e2:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80078e6:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078ea:	f001 fdcf 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80078ee:	2318      	movs	r3, #24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80078f0:	f884 05ad 	strb.w	r0, [r4, #1453]	@ 0x5ad
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078f4:	a905      	add	r1, sp, #20
 80078f6:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80078fa:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078fe:	f001 fdc5 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8007902:	2319      	movs	r3, #25
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8007904:	f8c4 05b0 	str.w	r0, [r4, #1456]	@ 0x5b0
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8007908:	f8c4 05b8 	str.w	r0, [r4, #1464]	@ 0x5b8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800790c:	a905      	add	r1, sp, #20
 800790e:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8007912:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007916:	f001 fdb9 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800791a:	231e      	movs	r3, #30
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800791c:	b2c0      	uxtb	r0, r0
 800791e:	f884 05b4 	strb.w	r0, [r4, #1460]	@ 0x5b4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8007922:	f884 05bc 	strb.w	r0, [r4, #1468]	@ 0x5bc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007926:	a905      	add	r1, sp, #20
 8007928:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800792c:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007930:	f001 fdac 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8007934:	231f      	movs	r3, #31
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8007936:	f884 05c0 	strb.w	r0, [r4, #1472]	@ 0x5c0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800793a:	a905      	add	r1, sp, #20
 800793c:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8007940:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007944:	f001 fda2 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8007948:	2320      	movs	r3, #32
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800794a:	f884 05c1 	strb.w	r0, [r4, #1473]	@ 0x5c1
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800794e:	a905      	add	r1, sp, #20
 8007950:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8007954:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007958:	f001 fd98 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800795c:	2321      	movs	r3, #33	@ 0x21
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800795e:	f8c4 05c4 	str.w	r0, [r4, #1476]	@ 0x5c4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007962:	a905      	add	r1, sp, #20
 8007964:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8007968:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800796c:	f001 fd8e 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8007970:	230b      	movs	r3, #11
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8007972:	f8c4 05c8 	str.w	r0, [r4, #1480]	@ 0x5c8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007976:	a905      	add	r1, sp, #20
 8007978:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800797c:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007980:	f001 fd84 	bl	800948c <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8007984:	230c      	movs	r3, #12
    MacCtx.AdrAckLimit = phyParam.Value;
 8007986:	f8a4 03f8 	strh.w	r0, [r4, #1016]	@ 0x3f8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800798a:	a905      	add	r1, sp, #20
 800798c:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8007990:	f88d 3014 	strb.w	r3, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007994:	f001 fd7a 	bl	800948c <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8007998:	f8d4 3598 	ldr.w	r3, [r4, #1432]	@ 0x598

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800799c:	a907      	add	r1, sp, #28
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800799e:	f8c4 3558 	str.w	r3, [r4, #1368]	@ 0x558
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80079a2:	f8d4 359c 	ldr.w	r3, [r4, #1436]	@ 0x59c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80079a6:	9004      	str	r0, [sp, #16]
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80079a8:	f8c4 355c 	str.w	r3, [r4, #1372]	@ 0x55c
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80079ac:	f8d4 35a0 	ldr.w	r3, [r4, #1440]	@ 0x5a0
    MacCtx.AdrAckDelay = phyParam.Value;
 80079b0:	f8a4 03fa 	strh.w	r0, [r4, #1018]	@ 0x3fa
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80079b4:	f8c4 3560 	str.w	r3, [r4, #1376]	@ 0x560
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80079b8:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	@ 0x5a4
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80079bc:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80079c0:	f8c4 3564 	str.w	r3, [r4, #1380]	@ 0x564
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80079c4:	f8d4 35a8 	ldr.w	r3, [r4, #1448]	@ 0x5a8
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80079c8:	f884 9594 	strb.w	r9, [r4, #1428]	@ 0x594
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80079cc:	f884 9554 	strb.w	r9, [r4, #1364]	@ 0x554
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80079d0:	f8c4 3568 	str.w	r3, [r4, #1384]	@ 0x568
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80079d4:	f204 69e4 	addw	r9, r4, #1764	@ 0x6e4
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80079d8:	f504 63ef 	add.w	r3, r4, #1912	@ 0x778
 80079dc:	9308      	str	r3, [sp, #32]
    params.Type = INIT_TYPE_DEFAULTS;
 80079de:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80079e2:	f884 75ac 	strb.w	r7, [r4, #1452]	@ 0x5ac
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80079e6:	f8c4 a590 	str.w	sl, [r4, #1424]	@ 0x590
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80079ea:	f8c4 a550 	str.w	sl, [r4, #1360]	@ 0x550
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80079ee:	f884 756c 	strb.w	r7, [r4, #1388]	@ 0x56c
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80079f2:	f8cd 901c 	str.w	r9, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80079f6:	f001 fd59 	bl	80094ac <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 80079fa:	f8c4 834c 	str.w	r8, [r4, #844]	@ 0x34c
    ResetMacParameters( );
 80079fe:	f7fe fc43 	bl	8006288 <ResetMacParameters>
    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
    Nvm.MacGroup1.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8007a02:	462a      	mov	r2, r5
    MacCtx.MacPrimitives = primitives;
 8007a04:	f8c4 6348 	str.w	r6, [r4, #840]	@ 0x348
    MacCtx.MacFlags.Value = 0;
 8007a08:	f884 5485 	strb.w	r5, [r4, #1157]	@ 0x485
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8007a0c:	f8c4 5538 	str.w	r5, [r4, #1336]	@ 0x538
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8007a10:	f8c4 553c 	str.w	r5, [r4, #1340]	@ 0x53c
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8007a14:	f04f 31ff 	mov.w	r1, #4294967295
 8007a18:	4b3a      	ldr	r3, [pc, #232]	@ (8007b04 <LoRaMacInitialization+0x354>)
    Nvm.MacGroup2.PublicNetwork = true;
 8007a1a:	f884 7609 	strb.w	r7, [r4, #1545]	@ 0x609
    MacCtx.MacState = LORAMAC_STOPPED;
 8007a1e:	f8c4 7344 	str.w	r7, [r4, #836]	@ 0x344
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8007a22:	f504 705b 	add.w	r0, r4, #876	@ 0x36c
 8007a26:	9500      	str	r5, [sp, #0]
 8007a28:	f004 fc6c 	bl	800c304 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8007a2c:	462a      	mov	r2, r5
 8007a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8007a32:	4b35      	ldr	r3, [pc, #212]	@ (8007b08 <LoRaMacInitialization+0x358>)
 8007a34:	9500      	str	r5, [sp, #0]
 8007a36:	f504 7061 	add.w	r0, r4, #900	@ 0x384
 8007a3a:	f004 fc63 	bl	800c304 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8007a3e:	462a      	mov	r2, r5
 8007a40:	f04f 31ff 	mov.w	r1, #4294967295
 8007a44:	4b31      	ldr	r3, [pc, #196]	@ (8007b0c <LoRaMacInitialization+0x35c>)
 8007a46:	9500      	str	r5, [sp, #0]
 8007a48:	f504 7067 	add.w	r0, r4, #924	@ 0x39c
 8007a4c:	f004 fc5a 	bl	800c304 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8007a50:	462a      	mov	r2, r5
 8007a52:	f04f 31ff 	mov.w	r1, #4294967295
 8007a56:	4b2e      	ldr	r3, [pc, #184]	@ (8007b10 <LoRaMacInitialization+0x360>)
 8007a58:	9500      	str	r5, [sp, #0]
 8007a5a:	f504 707f 	add.w	r0, r4, #1020	@ 0x3fc

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8007a5e:	ad02      	add	r5, sp, #8
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8007a60:	f004 fc50 	bl	800c304 <UTIL_TIMER_Create>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8007a64:	4628      	mov	r0, r5
 8007a66:	f004 fbe3 	bl	800c230 <SysTimeGetMcuTime>
 8007a6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007a6e:	f504 63c2 	add.w	r3, r4, #1552	@ 0x610
 8007a72:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8007a76:	4b27      	ldr	r3, [pc, #156]	@ (8007b14 <LoRaMacInitialization+0x364>)
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
    MacCtx.RadioEvents.RxError = OnRadioRxError;
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 8007a78:	4e27      	ldr	r6, [pc, #156]	@ (8007b18 <LoRaMacInitialization+0x368>)
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8007a7a:	f8c4 3350 	str.w	r3, [r4, #848]	@ 0x350
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8007a7e:	4b27      	ldr	r3, [pc, #156]	@ (8007b1c <LoRaMacInitialization+0x36c>)
    Radio.Init( &MacCtx.RadioEvents );
 8007a80:	f504 7054 	add.w	r0, r4, #848	@ 0x350
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8007a84:	f8c4 3358 	str.w	r3, [r4, #856]	@ 0x358
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8007a88:	4b25      	ldr	r3, [pc, #148]	@ (8007b20 <LoRaMacInitialization+0x370>)
 8007a8a:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8007a8e:	4b25      	ldr	r3, [pc, #148]	@ (8007b24 <LoRaMacInitialization+0x374>)
 8007a90:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8007a94:	4b24      	ldr	r3, [pc, #144]	@ (8007b28 <LoRaMacInitialization+0x378>)
 8007a96:	f8c4 335c 	str.w	r3, [r4, #860]	@ 0x35c
    Radio.Init( &MacCtx.RadioEvents );
 8007a9a:	6833      	ldr	r3, [r6, #0]
 8007a9c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8007a9e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007aa2:	f204 6024 	addw	r0, r4, #1572	@ 0x624
 8007aa6:	f7fd fbd1 	bl	800524c <SecureElementInit>
 8007aaa:	b120      	cbz	r0, 8007ab6 <LoRaMacInitialization+0x306>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8007aac:	2511      	movs	r5, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8007aae:	4628      	mov	r0, r5
 8007ab0:	b00a      	add	sp, #40	@ 0x28
 8007ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8007ab6:	f5a9 70ec 	sub.w	r0, r9, #472	@ 0x1d8
 8007aba:	f001 f975 	bl	8008da8 <LoRaMacCryptoInit>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d1f4      	bne.n	8007aac <LoRaMacInitialization+0x2fc>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8007ac2:	f000 fea5 	bl	8008810 <LoRaMacCommandsInit>
 8007ac6:	b9b8      	cbnz	r0, 8007af8 <LoRaMacInitialization+0x348>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8007ac8:	4818      	ldr	r0, [pc, #96]	@ (8007b2c <LoRaMacInitialization+0x37c>)
 8007aca:	f001 f9cf 	bl	8008e6c <LoRaMacCryptoSetMulticastReference>
 8007ace:	4605      	mov	r5, r0
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d1eb      	bne.n	8007aac <LoRaMacInitialization+0x2fc>
    srand1( Radio.Random( ) );
 8007ad4:	6973      	ldr	r3, [r6, #20]
 8007ad6:	4798      	blx	r3
 8007ad8:	f002 fe28 	bl	800a72c <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8007adc:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8007ade:	f894 0609 	ldrb.w	r0, [r4, #1545]	@ 0x609
 8007ae2:	4798      	blx	r3
    Radio.Sleep( );
 8007ae4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8007ae6:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f884 3486 	strb.w	r3, [r4, #1158]	@ 0x486
    return LORAMAC_STATUS_OK;
 8007aee:	e7de      	b.n	8007aae <LoRaMacInitialization+0x2fe>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007af0:	2503      	movs	r5, #3
 8007af2:	e7dc      	b.n	8007aae <LoRaMacInitialization+0x2fe>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8007af4:	2509      	movs	r5, #9
 8007af6:	e7da      	b.n	8007aae <LoRaMacInitialization+0x2fe>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007af8:	2513      	movs	r5, #19
 8007afa:	e7d8      	b.n	8007aae <LoRaMacInitialization+0x2fe>
 8007afc:	200005f8 	.word	0x200005f8
 8007b00:	01000300 	.word	0x01000300
 8007b04:	08006ddd 	.word	0x08006ddd
 8007b08:	080067ed 	.word	0x080067ed
 8007b0c:	08006825 	.word	0x08006825
 8007b10:	08006045 	.word	0x08006045
 8007b14:	08006239 	.word	0x08006239
 8007b18:	0800cec4 	.word	0x0800cec4
 8007b1c:	080061e5 	.word	0x080061e5
 8007b20:	08005fe1 	.word	0x08005fe1
 8007b24:	080061b5 	.word	0x080061b5
 8007b28:	08006185 	.word	0x08006185
 8007b2c:	20000bd4 	.word	0x20000bd4

08007b30 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8007b30:	2000      	movs	r0, #0
 8007b32:	4b02      	ldr	r3, [pc, #8]	@ (8007b3c <LoRaMacStart+0xc>)
 8007b34:	f8c3 0344 	str.w	r0, [r3, #836]	@ 0x344
    return LORAMAC_STATUS_OK;
}
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	200005f8 	.word	0x200005f8

08007b40 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8007b40:	b530      	push	{r4, r5, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007b42:	4b2b      	ldr	r3, [pc, #172]	@ (8007bf0 <LoRaMacQueryTxPossible+0xb0>)
{
 8007b44:	4605      	mov	r5, r0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007b46:	f893 05d1 	ldrb.w	r0, [r3, #1489]	@ 0x5d1
{
 8007b4a:	b089      	sub	sp, #36	@ 0x24
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007b4c:	f88d 0002 	strb.w	r0, [sp, #2]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007b50:	f893 05d0 	ldrb.w	r0, [r3, #1488]	@ 0x5d0
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007b54:	f8d3 2534 	ldr.w	r2, [r3, #1332]	@ 0x534
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007b58:	f88d 0003 	strb.w	r0, [sp, #3]
    size_t macCmdsSize = 0;
 8007b5c:	2000      	movs	r0, #0

    if( txInfo == NULL )
 8007b5e:	460c      	mov	r4, r1
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007b60:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8007b62:	9002      	str	r0, [sp, #8]
    if( txInfo == NULL )
 8007b64:	2900      	cmp	r1, #0
 8007b66:	d03e      	beq.n	8007be6 <LoRaMacQueryTxPossible+0xa6>

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
    adrNext.UpdateChanMask = false;
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007b68:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8007b6a:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
    adrNext.Version = Nvm.MacGroup2.Version;
 8007b6e:	f8d3 1618 	ldr.w	r1, [r3, #1560]	@ 0x618
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8007b72:	9206      	str	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007b74:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	@ 0x544
    adrNext.Version = Nvm.MacGroup2.Version;
 8007b78:	9103      	str	r1, [sp, #12]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007b7a:	ba52      	rev16	r2, r2
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007b7c:	f893 160a 	ldrb.w	r1, [r3, #1546]	@ 0x60a
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007b80:	f8ad 201c 	strh.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007b84:	f893 2580 	ldrb.w	r2, [r3, #1408]	@ 0x580
    adrNext.Region = Nvm.MacGroup2.Region;
 8007b88:	f893 354c 	ldrb.w	r3, [r3, #1356]	@ 0x54c
    adrNext.UpdateChanMask = false;
 8007b8c:	f88d 0010 	strb.w	r0, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007b90:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007b94:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8007b98:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8007b9c:	f10d 0203 	add.w	r2, sp, #3
 8007ba0:	ab01      	add	r3, sp, #4
 8007ba2:	f10d 0102 	add.w	r1, sp, #2
 8007ba6:	a803      	add	r0, sp, #12
 8007ba8:	f000 fd9c 	bl	80086e4 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007bac:	f99d 0002 	ldrsb.w	r0, [sp, #2]
 8007bb0:	f7fe fa30 	bl	8006014 <GetMaxAppPayloadWithoutFOptsLength>
 8007bb4:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007bb6:	a802      	add	r0, sp, #8
 8007bb8:	f000 fec6 	bl	8008948 <LoRaMacCommandsGetSizeSerializedCmds>
 8007bbc:	b9a8      	cbnz	r0, 8007bea <LoRaMacQueryTxPossible+0xaa>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8007bbe:	9a02      	ldr	r2, [sp, #8]
 8007bc0:	2a0f      	cmp	r2, #15
 8007bc2:	d80c      	bhi.n	8007bde <LoRaMacQueryTxPossible+0x9e>
 8007bc4:	7863      	ldrb	r3, [r4, #1]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d809      	bhi.n	8007bde <LoRaMacQueryTxPossible+0x9e>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8007bca:	4415      	add	r5, r2
 8007bcc:	42ab      	cmp	r3, r5
 8007bce:	bf2c      	ite	cs
 8007bd0:	2000      	movcs	r0, #0
 8007bd2:	2001      	movcc	r0, #1
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8007bd4:	1a99      	subs	r1, r3, r2
 8007bd6:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8007bd8:	00c0      	lsls	r0, r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8007bda:	b009      	add	sp, #36	@ 0x24
 8007bdc:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8007bde:	2300      	movs	r3, #0
           return LORAMAC_STATUS_LENGTH_ERROR;
 8007be0:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 8007be2:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8007be4:	e7f9      	b.n	8007bda <LoRaMacQueryTxPossible+0x9a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007be6:	2003      	movs	r0, #3
 8007be8:	e7f7      	b.n	8007bda <LoRaMacQueryTxPossible+0x9a>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007bea:	2013      	movs	r0, #19
 8007bec:	e7f5      	b.n	8007bda <LoRaMacQueryTxPossible+0x9a>
 8007bee:	bf00      	nop
 8007bf0:	200005f8 	.word	0x200005f8

08007bf4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8007bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f000 80a8 	beq.w	8007d4e <LoRaMacMibGetRequestConfirm+0x15a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 8007bfe:	7803      	ldrb	r3, [r0, #0]
 8007c00:	2b28      	cmp	r3, #40	@ 0x28
 8007c02:	f200 809f 	bhi.w	8007d44 <LoRaMacMibGetRequestConfirm+0x150>
 8007c06:	e8df f003 	tbb	[pc, r3]
 8007c0a:	1c15      	.short	0x1c15
 8007c0c:	2b272420 	.word	0x2b272420
 8007c10:	9d9d9d30 	.word	0x9d9d9d30
 8007c14:	9d9d9d9d 	.word	0x9d9d9d9d
 8007c18:	3c38349d 	.word	0x3c38349d
 8007c1c:	53504d46 	.word	0x53504d46
 8007c20:	5e5a5658 	.word	0x5e5a5658
 8007c24:	6e6a6662 	.word	0x6e6a6662
 8007c28:	7a7e7672 	.word	0x7a7e7672
 8007c2c:	918a8682 	.word	0x918a8682
 8007c30:	9d8f      	.short	0x9d8f
 8007c32:	95          	.byte	0x95
 8007c33:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8007c34:	4b47      	ldr	r3, [pc, #284]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007c36:	f893 3608 	ldrb.w	r3, [r3, #1544]	@ 0x608
 8007c3a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8007c3c:	2000      	movs	r0, #0
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8007c3e:	b004      	add	sp, #16
 8007c40:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007c42:	4b44      	ldr	r3, [pc, #272]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007c44:	f893 361c 	ldrb.w	r3, [r3, #1564]	@ 0x61c
 8007c48:	e7f7      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8007c4a:	f7fd fc5f 	bl	800550c <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8007c4e:	6060      	str	r0, [r4, #4]
            break;
 8007c50:	e7f4      	b.n	8007c3c <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8007c52:	f7fd fc71 	bl	8005538 <SecureElementGetJoinEui>
 8007c56:	e7fa      	b.n	8007c4e <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8007c58:	4b3e      	ldr	r3, [pc, #248]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007c5a:	f893 360a 	ldrb.w	r3, [r3, #1546]	@ 0x60a
 8007c5e:	e7ec      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8007c60:	4b3c      	ldr	r3, [pc, #240]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007c62:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	@ 0x5d4
            mibGet->Param.Contexts = GetNvmData( );
 8007c66:	6063      	str	r3, [r4, #4]
            break;
 8007c68:	e7e8      	b.n	8007c3c <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8007c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007c6c:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	@ 0x5d8
 8007c70:	e7f9      	b.n	8007c66 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8007c72:	4b38      	ldr	r3, [pc, #224]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007c74:	f893 3609 	ldrb.w	r3, [r3, #1545]	@ 0x609
 8007c78:	e7df      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8007c7a:	4b36      	ldr	r3, [pc, #216]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007c7c:	f893 358c 	ldrb.w	r3, [r3, #1420]	@ 0x58c
 8007c80:	e7db      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            getPhy.Attribute = PHY_CHANNELS;
 8007c82:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8007c84:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007c88:	4b32      	ldr	r3, [pc, #200]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007c8a:	a902      	add	r1, sp, #8
 8007c8c:	f893 054c 	ldrb.w	r0, [r3, #1356]	@ 0x54c
 8007c90:	f001 fbfc 	bl	800948c <RegionGetPhyParam>
 8007c94:	e7db      	b.n	8007c4e <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8007c96:	4b30      	ldr	r3, [pc, #192]	@ (8007d58 <LoRaMacMibGetRequestConfirm+0x164>)
 8007c98:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007c9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007c9e:	e884 0003 	stmia.w	r4, {r0, r1}
            break;
 8007ca2:	e7cb      	b.n	8007c3c <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8007d5c <LoRaMacMibGetRequestConfirm+0x168>)
 8007ca6:	3404      	adds	r4, #4
 8007ca8:	e7f7      	b.n	8007c9a <LoRaMacMibGetRequestConfirm+0xa6>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8007caa:	4b2d      	ldr	r3, [pc, #180]	@ (8007d60 <LoRaMacMibGetRequestConfirm+0x16c>)
 8007cac:	3404      	adds	r4, #4
 8007cae:	e7f4      	b.n	8007c9a <LoRaMacMibGetRequestConfirm+0xa6>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8007d64 <LoRaMacMibGetRequestConfirm+0x170>)
 8007cb2:	3404      	adds	r4, #4
 8007cb4:	e7f1      	b.n	8007c9a <LoRaMacMibGetRequestConfirm+0xa6>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8007cb6:	231b      	movs	r3, #27
 8007cb8:	e7e4      	b.n	8007c84 <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8007cba:	231a      	movs	r3, #26
 8007cbc:	e7e2      	b.n	8007c84 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007cbe:	4b25      	ldr	r3, [pc, #148]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007cc0:	f893 356c 	ldrb.w	r3, [r3, #1388]	@ 0x56c
 8007cc4:	e7b9      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8007cc6:	4b23      	ldr	r3, [pc, #140]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007cc8:	f8d3 3558 	ldr.w	r3, [r3, #1368]	@ 0x558
 8007ccc:	e7cb      	b.n	8007c66 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8007cce:	4b21      	ldr	r3, [pc, #132]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007cd0:	f8d3 355c 	ldr.w	r3, [r3, #1372]	@ 0x55c
 8007cd4:	e7c7      	b.n	8007c66 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8007cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007cd8:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 8007cdc:	e7c3      	b.n	8007c66 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8007cde:	4b1d      	ldr	r3, [pc, #116]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007ce0:	f8d3 3564 	ldr.w	r3, [r3, #1380]	@ 0x564
 8007ce4:	e7bf      	b.n	8007c66 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8007ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007ce8:	f8d3 3568 	ldr.w	r3, [r3, #1384]	@ 0x568
 8007cec:	e7bb      	b.n	8007c66 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007cee:	4b19      	ldr	r3, [pc, #100]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007cf0:	f893 35d1 	ldrb.w	r3, [r3, #1489]	@ 0x5d1
 8007cf4:	e7a1      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007cf6:	4b17      	ldr	r3, [pc, #92]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007cf8:	f893 3545 	ldrb.w	r3, [r3, #1349]	@ 0x545
 8007cfc:	e79d      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007cfe:	4b15      	ldr	r3, [pc, #84]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007d00:	f893 35d0 	ldrb.w	r3, [r3, #1488]	@ 0x5d0
 8007d04:	e799      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007d06:	4b13      	ldr	r3, [pc, #76]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007d08:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8007d0c:	e795      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8007d0e:	4b11      	ldr	r3, [pc, #68]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007d10:	f8d3 3550 	ldr.w	r3, [r3, #1360]	@ 0x550
 8007d14:	e7a7      	b.n	8007c66 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8007d16:	4b0f      	ldr	r3, [pc, #60]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007d18:	f893 3554 	ldrb.w	r3, [r3, #1364]	@ 0x554
 8007d1c:	e78d      	b.n	8007c3a <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007d20:	f8d3 3588 	ldr.w	r3, [r3, #1416]	@ 0x588
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007d24:	6063      	str	r3, [r4, #4]
            break;
 8007d26:	e789      	b.n	8007c3c <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.Contexts = GetNvmData( );
 8007d28:	4b0f      	ldr	r3, [pc, #60]	@ (8007d68 <LoRaMacMibGetRequestConfirm+0x174>)
 8007d2a:	e79c      	b.n	8007c66 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007d2c:	4b09      	ldr	r3, [pc, #36]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007d2e:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 8007d32:	e7f7      	b.n	8007d24 <LoRaMacMibGetRequestConfirm+0x130>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8007d34:	4b07      	ldr	r3, [pc, #28]	@ (8007d54 <LoRaMacMibGetRequestConfirm+0x160>)
 8007d36:	f8d3 3618 	ldr.w	r3, [r3, #1560]	@ 0x618
 8007d3a:	6043      	str	r3, [r0, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8007d3c:	f001 fc4c 	bl	80095d8 <RegionGetVersion>
 8007d40:	60a0      	str	r0, [r4, #8]
            break;
 8007d42:	e77b      	b.n	8007c3c <LoRaMacMibGetRequestConfirm+0x48>
}
 8007d44:	b004      	add	sp, #16
 8007d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8007d4a:	f000 bd51 	b.w	80087f0 <LoRaMacClassBMibGetRequestConfirm>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007d4e:	2003      	movs	r0, #3
 8007d50:	e775      	b.n	8007c3e <LoRaMacMibGetRequestConfirm+0x4a>
 8007d52:	bf00      	nop
 8007d54:	200005f8 	.word	0x200005f8
 8007d58:	20000b68 	.word	0x20000b68
 8007d5c:	20000ba8 	.word	0x20000ba8
 8007d60:	20000b70 	.word	0x20000b70
 8007d64:	20000bb0 	.word	0x20000bb0
 8007d68:	20000b04 	.word	0x20000b04

08007d6c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8007d6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8007d6e:	4604      	mov	r4, r0
 8007d70:	b910      	cbnz	r0, 8007d78 <LoRaMacMibSetRequestConfirm+0xc>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007d72:	2003      	movs	r0, #3
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    return status;
}
 8007d74:	b002      	add	sp, #8
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8007d78:	4da8      	ldr	r5, [pc, #672]	@ (800801c <LoRaMacMibSetRequestConfirm+0x2b0>)
 8007d7a:	f8d5 3344 	ldr.w	r3, [r5, #836]	@ 0x344
 8007d7e:	079a      	lsls	r2, r3, #30
 8007d80:	f100 820c 	bmi.w	800819c <LoRaMacMibSetRequestConfirm+0x430>
    switch( mibSet->Type )
 8007d84:	7802      	ldrb	r2, [r0, #0]
 8007d86:	2a27      	cmp	r2, #39	@ 0x27
 8007d88:	f200 8203 	bhi.w	8008192 <LoRaMacMibSetRequestConfirm+0x426>
 8007d8c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007d90:	002e0028 	.word	0x002e0028
 8007d94:	003b0035 	.word	0x003b0035
 8007d98:	0043003f 	.word	0x0043003f
 8007d9c:	004b0047 	.word	0x004b0047
 8007da0:	005a0055 	.word	0x005a0055
 8007da4:	0064005f 	.word	0x0064005f
 8007da8:	006e0069 	.word	0x006e0069
 8007dac:	007a0074 	.word	0x007a0074
 8007db0:	02010083 	.word	0x02010083
 8007db4:	00a80087 	.word	0x00a80087
 8007db8:	00df00ba 	.word	0x00df00ba
 8007dbc:	00f100ff 	.word	0x00f100ff
 8007dc0:	010b0103 	.word	0x010b0103
 8007dc4:	0113010f 	.word	0x0113010f
 8007dc8:	011b0117 	.word	0x011b0117
 8007dcc:	0130011f 	.word	0x0130011f
 8007dd0:	01520163 	.word	0x01520163
 8007dd4:	017a0174 	.word	0x017a0174
 8007dd8:	01840180 	.word	0x01840180
 8007ddc:	01f60188 	.word	0x01f60188
            status = SwitchClass( mibSet->Param.Class );
 8007de0:	7900      	ldrb	r0, [r0, #4]
}
 8007de2:	b002      	add	sp, #8
 8007de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            status = SwitchClass( mibSet->Param.Class );
 8007de8:	f7fe bc86 	b.w	80066f8 <SwitchClass>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8007dec:	7903      	ldrb	r3, [r0, #4]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d0bf      	beq.n	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8007df2:	f885 361c 	strb.w	r3, [r5, #1564]	@ 0x61c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8007df6:	2000      	movs	r0, #0
 8007df8:	e7bc      	b.n	8007d74 <LoRaMacMibSetRequestConfirm+0x8>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8007dfa:	6840      	ldr	r0, [r0, #4]
 8007dfc:	f7fd fb78 	bl	80054f0 <SecureElementSetDevEui>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d0f8      	beq.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
 8007e04:	e7b5      	b.n	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
 8007e06:	6840      	ldr	r0, [r0, #4]
 8007e08:	f7fd fb86 	bl	8005518 <SecureElementSetJoinEui>
 8007e0c:	e7f8      	b.n	8007e00 <LoRaMacMibSetRequestConfirm+0x94>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8007e0e:	7903      	ldrb	r3, [r0, #4]
 8007e10:	f885 360a 	strb.w	r3, [r5, #1546]	@ 0x60a
            break;
 8007e14:	e7ef      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8007e16:	6843      	ldr	r3, [r0, #4]
 8007e18:	f8c5 35d4 	str.w	r3, [r5, #1492]	@ 0x5d4
            break;
 8007e1c:	e7eb      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8007e1e:	6843      	ldr	r3, [r0, #4]
 8007e20:	f8c5 35d8 	str.w	r3, [r5, #1496]	@ 0x5d8
            break;
 8007e24:	e7e7      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            if( mibSet->Param.AppKey != NULL )
 8007e26:	6841      	ldr	r1, [r0, #4]
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	d0a2      	beq.n	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	f001 f945 	bl	80090bc <LoRaMacCryptoSetKey>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d0df      	beq.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007e36:	2011      	movs	r0, #17
 8007e38:	e79c      	b.n	8007d74 <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NwkKey != NULL )
 8007e3a:	6841      	ldr	r1, [r0, #4]
 8007e3c:	2900      	cmp	r1, #0
 8007e3e:	d098      	beq.n	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8007e40:	2001      	movs	r0, #1
 8007e42:	e7f4      	b.n	8007e2e <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.NwkSKey != NULL )
 8007e44:	6841      	ldr	r1, [r0, #4]
 8007e46:	2900      	cmp	r1, #0
 8007e48:	d093      	beq.n	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8007e4a:	2002      	movs	r0, #2
 8007e4c:	e7ef      	b.n	8007e2e <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.AppSKey != NULL )
 8007e4e:	6841      	ldr	r1, [r0, #4]
 8007e50:	2900      	cmp	r1, #0
 8007e52:	d08e      	beq.n	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8007e54:	2003      	movs	r0, #3
 8007e56:	e7ea      	b.n	8007e2e <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.McKEKey != NULL )
 8007e58:	6841      	ldr	r1, [r0, #4]
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	d089      	beq.n	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8007e5e:	207f      	movs	r0, #127	@ 0x7f
 8007e60:	e7e5      	b.n	8007e2e <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.McKey0 != NULL )
 8007e62:	6841      	ldr	r1, [r0, #4]
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d084      	beq.n	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8007e68:	2080      	movs	r0, #128	@ 0x80
 8007e6a:	e7e0      	b.n	8007e2e <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.McAppSKey0 != NULL )
 8007e6c:	6841      	ldr	r1, [r0, #4]
 8007e6e:	2900      	cmp	r1, #0
 8007e70:	f43f af7f 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8007e74:	2081      	movs	r0, #129	@ 0x81
 8007e76:	e7da      	b.n	8007e2e <LoRaMacMibSetRequestConfirm+0xc2>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8007e78:	6841      	ldr	r1, [r0, #4]
 8007e7a:	2900      	cmp	r1, #0
 8007e7c:	f43f af79 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8007e80:	2082      	movs	r0, #130	@ 0x82
 8007e82:	e7d4      	b.n	8007e2e <LoRaMacMibSetRequestConfirm+0xc2>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8007e84:	7900      	ldrb	r0, [r0, #4]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8007e86:	4c66      	ldr	r4, [pc, #408]	@ (8008020 <LoRaMacMibSetRequestConfirm+0x2b4>)
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8007e88:	f885 0609 	strb.w	r0, [r5, #1545]	@ 0x609
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8007e8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e8e:	4798      	blx	r3
            Radio.Sleep( );
 8007e90:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e92:	4798      	blx	r3
            break;
 8007e94:	e7af      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8007e96:	7903      	ldrb	r3, [r0, #4]
 8007e98:	f885 358c 	strb.w	r3, [r5, #1420]	@ 0x58c
            break;
 8007e9c:	e7ab      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8007e9e:	7a03      	ldrb	r3, [r0, #8]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8007ea0:	2207      	movs	r2, #7
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8007ea2:	f88d 3000 	strb.w	r3, [sp]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007ea6:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8007eaa:	4669      	mov	r1, sp
 8007eac:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007eb0:	f88d 3001 	strb.w	r3, [sp, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8007eb4:	f001 fb00 	bl	80094b8 <RegionVerify>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	f43f af5a 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8007ebe:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4669      	mov	r1, sp
 8007ec4:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8007ec8:	9300      	str	r3, [sp, #0]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8007eca:	f001 faf5 	bl	80094b8 <RegionVerify>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f43f af4f 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8007ed4:	4b53      	ldr	r3, [pc, #332]	@ (8008024 <LoRaMacMibSetRequestConfirm+0x2b8>)
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8007ed6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8007eda:	e883 0003 	stmia.w	r3, {r0, r1}
 8007ede:	e78a      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8007ee0:	7a03      	ldrb	r3, [r0, #8]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007ee2:	2207      	movs	r2, #7
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8007ee4:	f88d 3000 	strb.w	r3, [sp]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007ee8:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007eec:	4669      	mov	r1, sp
 8007eee:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007ef2:	f88d 3001 	strb.w	r3, [sp, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007ef6:	f001 fadf 	bl	80094b8 <RegionVerify>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f43f af39 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8007f00:	4b49      	ldr	r3, [pc, #292]	@ (8008028 <LoRaMacMibSetRequestConfirm+0x2bc>)
 8007f02:	e7e8      	b.n	8007ed6 <LoRaMacMibSetRequestConfirm+0x16a>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8007f04:	7a03      	ldrb	r3, [r0, #8]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007f06:	2207      	movs	r2, #7
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8007f08:	f88d 3000 	strb.w	r3, [sp]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007f0c:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007f10:	4669      	mov	r1, sp
 8007f12:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007f16:	f88d 3001 	strb.w	r3, [sp, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007f1a:	f001 facd 	bl	80094b8 <RegionVerify>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f43f af27 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8007f24:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8007f28:	4b40      	ldr	r3, [pc, #256]	@ (800802c <LoRaMacMibSetRequestConfirm+0x2c0>)
 8007f2a:	e883 0003 	stmia.w	r3, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8007f2e:	f895 3608 	ldrb.w	r3, [r5, #1544]	@ 0x608
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	f47f af5f 	bne.w	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
 8007f38:	f895 361c 	ldrb.w	r3, [r5, #1564]	@ 0x61c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f43f af5a 	beq.w	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
                    Radio.Sleep( );
 8007f42:	4b37      	ldr	r3, [pc, #220]	@ (8008020 <LoRaMacMibSetRequestConfirm+0x2b4>)
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 8007f48:	f7fe fbac 	bl	80066a4 <OpenContinuousRxCWindow>
 8007f4c:	e753      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8007f4e:	7a03      	ldrb	r3, [r0, #8]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007f50:	2207      	movs	r2, #7
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8007f52:	f88d 3000 	strb.w	r3, [sp]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007f56:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007f5a:	4669      	mov	r1, sp
 8007f5c:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007f60:	f88d 3001 	strb.w	r3, [sp, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8007f64:	f001 faa8 	bl	80094b8 <RegionVerify>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f43f af02 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8007f6e:	4b30      	ldr	r3, [pc, #192]	@ (8008030 <LoRaMacMibSetRequestConfirm+0x2c4>)
 8007f70:	e7b1      	b.n	8007ed6 <LoRaMacMibSetRequestConfirm+0x16a>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8007f72:	6843      	ldr	r3, [r0, #4]
 8007f74:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8007f76:	2301      	movs	r3, #1
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8007f78:	4669      	mov	r1, sp
 8007f7a:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8007f7e:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8007f82:	f001 faa8 	bl	80094d6 <RegionChanMaskSet>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f47f af35 	bne.w	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
 8007f8c:	e6f1      	b.n	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8007f8e:	6843      	ldr	r3, [r0, #4]
 8007f90:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	e7f0      	b.n	8007f78 <LoRaMacMibSetRequestConfirm+0x20c>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8007f96:	7903      	ldrb	r3, [r0, #4]
 8007f98:	1e5a      	subs	r2, r3, #1
 8007f9a:	2a0e      	cmp	r2, #14
 8007f9c:	f63f aee9 	bhi.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8007fa0:	f885 356c 	strb.w	r3, [r5, #1388]	@ 0x56c
 8007fa4:	e727      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8007fa6:	6843      	ldr	r3, [r0, #4]
 8007fa8:	f8c5 3558 	str.w	r3, [r5, #1368]	@ 0x558
            break;
 8007fac:	e723      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8007fae:	6843      	ldr	r3, [r0, #4]
 8007fb0:	f8c5 355c 	str.w	r3, [r5, #1372]	@ 0x55c
            break;
 8007fb4:	e71f      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8007fb6:	6843      	ldr	r3, [r0, #4]
 8007fb8:	f8c5 3560 	str.w	r3, [r5, #1376]	@ 0x560
            break;
 8007fbc:	e71b      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8007fbe:	6843      	ldr	r3, [r0, #4]
 8007fc0:	f8c5 3564 	str.w	r3, [r5, #1380]	@ 0x564
            break;
 8007fc4:	e717      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8007fc6:	6843      	ldr	r3, [r0, #4]
 8007fc8:	f8c5 3568 	str.w	r3, [r5, #1384]	@ 0x568
            break;
 8007fcc:	e713      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8007fce:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8007fd0:	2206      	movs	r2, #6
 8007fd2:	4669      	mov	r1, sp
 8007fd4:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8007fd8:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8007fdc:	f001 fa6c 	bl	80094b8 <RegionVerify>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f43f aec6 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8007fe6:	f89d 3000 	ldrb.w	r3, [sp]
 8007fea:	f885 35d1 	strb.w	r3, [r5, #1489]	@ 0x5d1
 8007fee:	e702      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8007ff0:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007ff2:	2205      	movs	r2, #5
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8007ff4:	f88d 3000 	strb.w	r3, [sp]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007ff8:	f895 3580 	ldrb.w	r3, [r5, #1408]	@ 0x580
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007ffc:	4669      	mov	r1, sp
 8007ffe:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008002:	f88d 3002 	strb.w	r3, [sp, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8008006:	f001 fa57 	bl	80094b8 <RegionVerify>
 800800a:	2800      	cmp	r0, #0
 800800c:	f43f aeb1 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008010:	f89d 3000 	ldrb.w	r3, [sp]
 8008014:	f885 3545 	strb.w	r3, [r5, #1349]	@ 0x545
 8008018:	e6ed      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
 800801a:	bf00      	nop
 800801c:	200005f8 	.word	0x200005f8
 8008020:	0800cec4 	.word	0x0800cec4
 8008024:	20000b68 	.word	0x20000b68
 8008028:	20000ba8 	.word	0x20000ba8
 800802c:	20000b70 	.word	0x20000b70
 8008030:	20000bb0 	.word	0x20000bb0
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8008034:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8008036:	220a      	movs	r2, #10
 8008038:	4669      	mov	r1, sp
 800803a:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800803e:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8008042:	f001 fa39 	bl	80094b8 <RegionVerify>
 8008046:	2800      	cmp	r0, #0
 8008048:	f43f ae93 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800804c:	f89d 3000 	ldrb.w	r3, [sp]
 8008050:	f885 35d0 	strb.w	r3, [r5, #1488]	@ 0x5d0
 8008054:	e6cf      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8008056:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8008058:	2209      	movs	r2, #9
 800805a:	4669      	mov	r1, sp
 800805c:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8008060:	f88d 3000 	strb.w	r3, [sp]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8008064:	f001 fa28 	bl	80094b8 <RegionVerify>
 8008068:	2800      	cmp	r0, #0
 800806a:	f43f ae82 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800806e:	f89d 3000 	ldrb.w	r3, [sp]
 8008072:	f885 3544 	strb.w	r3, [r5, #1348]	@ 0x544
 8008076:	e6be      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8008078:	6843      	ldr	r3, [r0, #4]
 800807a:	f8c5 3590 	str.w	r3, [r5, #1424]	@ 0x590
 800807e:	f8c5 3550 	str.w	r3, [r5, #1360]	@ 0x550
            break;
 8008082:	e6b8      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8008084:	7903      	ldrb	r3, [r0, #4]
 8008086:	f885 3594 	strb.w	r3, [r5, #1428]	@ 0x594
 800808a:	f885 3554 	strb.w	r3, [r5, #1364]	@ 0x554
            break;
 800808e:	e6b2      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8008090:	6843      	ldr	r3, [r0, #4]
 8008092:	f8c5 3588 	str.w	r3, [r5, #1416]	@ 0x588
            break;
 8008096:	e6ae      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8008098:	6843      	ldr	r3, [r0, #4]
 800809a:	f8c5 35c8 	str.w	r3, [r5, #1480]	@ 0x5c8
            break;
 800809e:	e6aa      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            if( mibSet->Param.Contexts != 0 )
 80080a0:	6844      	ldr	r4, [r0, #4]
 80080a2:	2c00      	cmp	r4, #0
 80080a4:	f43f ae65 	beq.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d177      	bne.n	800819c <LoRaMacMibSetRequestConfirm+0x430>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 80080ac:	2124      	movs	r1, #36	@ 0x24
 80080ae:	4620      	mov	r0, r4
 80080b0:	f002 fb74 	bl	800a79c <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 80080b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080b6:	4298      	cmp	r0, r3
 80080b8:	d104      	bne.n	80080c4 <LoRaMacMibSetRequestConfirm+0x358>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 80080ba:	2228      	movs	r2, #40	@ 0x28
 80080bc:	4621      	mov	r1, r4
 80080be:	4838      	ldr	r0, [pc, #224]	@ (80081a0 <LoRaMacMibSetRequestConfirm+0x434>)
 80080c0:	f002 fb56 	bl	800a770 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 80080c4:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 80080c8:	2114      	movs	r1, #20
 80080ca:	4630      	mov	r0, r6
 80080cc:	f002 fb66 	bl	800a79c <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 80080d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80080d2:	4298      	cmp	r0, r3
 80080d4:	d104      	bne.n	80080e0 <LoRaMacMibSetRequestConfirm+0x374>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 80080d6:	2218      	movs	r2, #24
 80080d8:	4631      	mov	r1, r6
 80080da:	4832      	ldr	r0, [pc, #200]	@ (80081a4 <LoRaMacMibSetRequestConfirm+0x438>)
 80080dc:	f002 fb48 	bl	800a770 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80080e0:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 80080e4:	21d4      	movs	r1, #212	@ 0xd4
 80080e6:	4630      	mov	r0, r6
 80080e8:	f002 fb58 	bl	800a79c <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 80080ec:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 80080f0:	4298      	cmp	r0, r3
 80080f2:	d114      	bne.n	800811e <LoRaMacMibSetRequestConfirm+0x3b2>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80080f4:	22d8      	movs	r2, #216	@ 0xd8
 80080f6:	4631      	mov	r1, r6
 80080f8:	482b      	ldr	r0, [pc, #172]	@ (80081a8 <LoRaMacMibSetRequestConfirm+0x43c>)
 80080fa:	f002 fb39 	bl	800a770 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80080fe:	f895 3419 	ldrb.w	r3, [r5, #1049]	@ 0x419
 8008102:	f885 33e4 	strb.w	r3, [r5, #996]	@ 0x3e4
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8008106:	f8d5 3578 	ldr.w	r3, [r5, #1400]	@ 0x578
 800810a:	f8c5 33e8 	str.w	r3, [r5, #1000]	@ 0x3e8
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800810e:	f895 3581 	ldrb.w	r3, [r5, #1409]	@ 0x581
 8008112:	f885 33f4 	strb.w	r3, [r5, #1012]	@ 0x3f4
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8008116:	f240 2301 	movw	r3, #513	@ 0x201
 800811a:	f8a5 33f6 	strh.w	r3, [r5, #1014]	@ 0x3f6
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800811e:	f504 758c 	add.w	r5, r4, #280	@ 0x118
 8008122:	21bc      	movs	r1, #188	@ 0xbc
 8008124:	4628      	mov	r0, r5
 8008126:	f002 fb39 	bl	800a79c <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 800812a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
 800812e:	4298      	cmp	r0, r3
 8008130:	d104      	bne.n	800813c <LoRaMacMibSetRequestConfirm+0x3d0>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8008132:	22c0      	movs	r2, #192	@ 0xc0
 8008134:	4629      	mov	r1, r5
 8008136:	481d      	ldr	r0, [pc, #116]	@ (80081ac <LoRaMacMibSetRequestConfirm+0x440>)
 8008138:	f002 fb1a 	bl	800a770 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800813c:	f504 75ec 	add.w	r5, r4, #472	@ 0x1d8
 8008140:	2190      	movs	r1, #144	@ 0x90
 8008142:	4628      	mov	r0, r5
 8008144:	f002 fb2a 	bl	800a79c <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8008148:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 800814c:	4298      	cmp	r0, r3
 800814e:	d104      	bne.n	800815a <LoRaMacMibSetRequestConfirm+0x3ee>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8008150:	2294      	movs	r2, #148	@ 0x94
 8008152:	4629      	mov	r1, r5
 8008154:	4816      	ldr	r0, [pc, #88]	@ (80081b0 <LoRaMacMibSetRequestConfirm+0x444>)
 8008156:	f002 fb0b 	bl	800a770 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800815a:	f504 754d 	add.w	r5, r4, #820	@ 0x334
 800815e:	2114      	movs	r1, #20
 8008160:	4628      	mov	r0, r5
 8008162:	f002 fb1b 	bl	800a79c <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8008166:	f8d4 3348 	ldr.w	r3, [r4, #840]	@ 0x348
 800816a:	4298      	cmp	r0, r3
 800816c:	f47f ae43 	bne.w	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8008170:	2218      	movs	r2, #24
 8008172:	4629      	mov	r1, r5
 8008174:	480f      	ldr	r0, [pc, #60]	@ (80081b4 <LoRaMacMibSetRequestConfirm+0x448>)
 8008176:	f002 fafb 	bl	800a770 <memcpy1>
 800817a:	e63c      	b.n	8007df6 <LoRaMacMibSetRequestConfirm+0x8a>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800817c:	7983      	ldrb	r3, [r0, #6]
 800817e:	2b01      	cmp	r3, #1
 8008180:	f63f adf7 	bhi.w	8007d72 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8008184:	6843      	ldr	r3, [r0, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8008186:	6840      	ldr	r0, [r0, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8008188:	f8c5 3618 	str.w	r3, [r5, #1560]	@ 0x618
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800818c:	f000 fe28 	bl	8008de0 <LoRaMacCryptoSetLrWanVersion>
 8008190:	e64f      	b.n	8007e32 <LoRaMacMibSetRequestConfirm+0xc6>
}
 8008192:	b002      	add	sp, #8
 8008194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8008198:	f000 bb2c 	b.w	80087f4 <LoRaMacMibClassBSetRequestConfirm>
        return LORAMAC_STATUS_BUSY;
 800819c:	2001      	movs	r0, #1
 800819e:	e5e9      	b.n	8007d74 <LoRaMacMibSetRequestConfirm+0x8>
 80081a0:	20000b04 	.word	0x20000b04
 80081a4:	20000b2c 	.word	0x20000b2c
 80081a8:	20000b44 	.word	0x20000b44
 80081ac:	20000c1c 	.word	0x20000c1c
 80081b0:	20000cdc 	.word	0x20000cdc
 80081b4:	20000e38 	.word	0x20000e38

080081b8 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80081b8:	2300      	movs	r3, #0
{
 80081ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081bc:	b087      	sub	sp, #28

    if( mlmeRequest == NULL )
 80081be:	4606      	mov	r6, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80081c0:	f8ad 3000 	strh.w	r3, [sp]
    if( mlmeRequest == NULL )
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f000 80dd 	beq.w	8008384 <LoRaMacMlmeRequest+0x1cc>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 80081ca:	f7fe fe2d 	bl	8006e28 <LoRaMacIsBusy>
 80081ce:	b118      	cbz	r0, 80081d8 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 80081d0:	2501      	movs	r5, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 80081d2:	4628      	mov	r0, r5
 80081d4:	b007      	add	sp, #28
 80081d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80081d8:	f000 fcec 	bl	8008bb4 <LoRaMacConfirmQueueIsFull>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d1f7      	bne.n	80081d0 <LoRaMacMlmeRequest+0x18>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80081e0:	f000 fce2 	bl	8008ba8 <LoRaMacConfirmQueueGetCnt>
 80081e4:	4601      	mov	r1, r0
 80081e6:	b918      	cbnz	r0, 80081f0 <LoRaMacMlmeRequest+0x38>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80081e8:	2214      	movs	r2, #20
 80081ea:	4867      	ldr	r0, [pc, #412]	@ (8008388 <LoRaMacMlmeRequest+0x1d0>)
 80081ec:	f002 fad4 	bl	800a798 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80081f0:	2201      	movs	r2, #1
    queueElement.RestrictCommonReadyToHandle = false;
 80081f2:	2100      	movs	r1, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80081f4:	4c65      	ldr	r4, [pc, #404]	@ (800838c <LoRaMacMlmeRequest+0x1d4>)
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80081f6:	f88d 2005 	strb.w	r2, [sp, #5]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80081fa:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80081fe:	f884 2451 	strb.w	r2, [r4, #1105]	@ 0x451
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008202:	f043 0304 	orr.w	r3, r3, #4
 8008206:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    queueElement.Request = mlmeRequest->Type;
 800820a:	7833      	ldrb	r3, [r6, #0]
    queueElement.RestrictCommonReadyToHandle = false;
 800820c:	f88d 1007 	strb.w	r1, [sp, #7]
    queueElement.Request = mlmeRequest->Type;
 8008210:	f88d 3004 	strb.w	r3, [sp, #4]
    switch( mlmeRequest->Type )
 8008214:	3b01      	subs	r3, #1
 8008216:	2b0d      	cmp	r3, #13
 8008218:	f200 80ac 	bhi.w	8008374 <LoRaMacMlmeRequest+0x1bc>
 800821c:	e8df f003 	tbb	[pc, r3]
 8008220:	56aaaa07 	.word	0x56aaaa07
 8008224:	aaaa805e 	.word	0xaaaa805e
 8008228:	9eaa88aa 	.word	0x9eaa88aa
 800822c:	9a8c      	.short	0x9a8c
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800822e:	f8d4 5344 	ldr.w	r5, [r4, #836]	@ 0x344
 8008232:	f015 0520 	ands.w	r5, r5, #32
 8008236:	d1cb      	bne.n	80081d0 <LoRaMacMlmeRequest+0x18>
            ResetMacParameters( );
 8008238:	f7fe f826 	bl	8006288 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800823c:	462a      	mov	r2, r5
 800823e:	f996 1004 	ldrsb.w	r1, [r6, #4]
 8008242:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8008246:	f001 f99c 	bl	8009582 <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800824a:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800824c:	f884 0545 	strb.w	r0, [r4, #1349]	@ 0x545
            SwitchClass( CLASS_A );
 8008250:	4628      	mov	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8008252:	f88d 3005 	strb.w	r3, [sp, #5]
            SwitchClass( CLASS_A );
 8008256:	f7fe fa4f 	bl	80066f8 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800825a:	23ff      	movs	r3, #255	@ 0xff
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800825c:	4f4c      	ldr	r7, [pc, #304]	@ (8008390 <LoRaMacMlmeRequest+0x1d8>)
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800825e:	f8a4 3110 	strh.w	r3, [r4, #272]	@ 0x110
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008262:	f884 5108 	strb.w	r5, [r4, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8008266:	f8c4 710c 	str.w	r7, [r4, #268]	@ 0x10c
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800826a:	f7fd f965 	bl	8005538 <SecureElementGetJoinEui>
 800826e:	2208      	movs	r2, #8
 8008270:	4601      	mov	r1, r0
 8008272:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8008276:	f002 fa7b 	bl	800a770 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800827a:	f7fd f947 	bl	800550c <SecureElementGetDevEui>
 800827e:	2208      	movs	r2, #8
 8008280:	4601      	mov	r1, r0
 8008282:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8008286:	f002 fa73 	bl	800a770 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 800828a:	4628      	mov	r0, r5
 800828c:	f7fe f890 	bl	80063b0 <ScheduleTx>
            if( status != LORAMAC_STATUS_OK )
 8008290:	4605      	mov	r5, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	d042      	beq.n	800831c <LoRaMacMlmeRequest+0x164>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8008296:	2201      	movs	r2, #1
 8008298:	f996 1004 	ldrsb.w	r1, [r6, #4]
 800829c:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 80082a0:	f001 f96f 	bl	8009582 <RegionAlternateDr>
 80082a4:	f884 0545 	strb.w	r0, [r4, #1349]	@ 0x545
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80082a8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	@ 0x488
 80082ac:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	d064      	beq.n	800837c <LoRaMacMlmeRequest+0x1c4>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80082b2:	f000 fc79 	bl	8008ba8 <LoRaMacConfirmQueueGetCnt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d18b      	bne.n	80081d2 <LoRaMacMlmeRequest+0x1a>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80082ba:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
            MacCtx.NodeAckRequested = false;
 80082be:	f884 0418 	strb.w	r0, [r4, #1048]	@ 0x418
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80082c2:	f360 0382 	bfi	r3, r0, #2, #1
 80082c6:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
 80082ca:	e782      	b.n	80081d2 <LoRaMacMlmeRequest+0x1a>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80082cc:	2200      	movs	r2, #0
 80082ce:	4669      	mov	r1, sp
 80082d0:	2002      	movs	r0, #2
 80082d2:	f000 faab 	bl	800882c <LoRaMacCommandsAddCmd>
 80082d6:	b308      	cbz	r0, 800831c <LoRaMacMlmeRequest+0x164>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80082d8:	2513      	movs	r5, #19
 80082da:	e7e5      	b.n	80082a8 <LoRaMacMlmeRequest+0xf0>
    continuousWave.Channel = MacCtx.Channel;
 80082dc:	f894 2419 	ldrb.w	r2, [r4, #1049]	@ 0x419
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80082e0:	88b3      	ldrh	r3, [r6, #4]
    continuousWave.Channel = MacCtx.Channel;
 80082e2:	f88d 2008 	strb.w	r2, [sp, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80082e6:	f894 2545 	ldrb.w	r2, [r4, #1349]	@ 0x545
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80082ea:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80082ee:	f88d 2009 	strb.w	r2, [sp, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80082f2:	f894 2544 	ldrb.w	r2, [r4, #1348]	@ 0x544
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80082f6:	a902      	add	r1, sp, #8
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80082f8:	f88d 200a 	strb.w	r2, [sp, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80082fc:	f8d4 2584 	ldr.w	r2, [r4, #1412]	@ 0x584
    continuousWave.Timeout = timeout;
 8008300:	f8ad 3014 	strh.w	r3, [sp, #20]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8008304:	9203      	str	r2, [sp, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008306:	f8d4 2588 	ldr.w	r2, [r4, #1416]	@ 0x588
 800830a:	9204      	str	r2, [sp, #16]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800830c:	f001 f950 	bl	80095b0 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008310:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 8008314:	f043 0302 	orr.w	r3, r3, #2
 8008318:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800831c:	2500      	movs	r5, #0
 800831e:	e7c3      	b.n	80082a8 <LoRaMacMlmeRequest+0xf0>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008320:	4b1c      	ldr	r3, [pc, #112]	@ (8008394 <LoRaMacMlmeRequest+0x1dc>)
 8008322:	88b2      	ldrh	r2, [r6, #4]
 8008324:	f996 100c 	ldrsb.w	r1, [r6, #12]
 8008328:	68b0      	ldr	r0, [r6, #8]
 800832a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832c:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800832e:	e7ef      	b.n	8008310 <LoRaMacMlmeRequest+0x158>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8008330:	2200      	movs	r2, #0
 8008332:	4669      	mov	r1, sp
 8008334:	200d      	movs	r0, #13
 8008336:	e7cc      	b.n	80082d2 <LoRaMacMlmeRequest+0x11a>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8008338:	f894 3608 	ldrb.w	r3, [r4, #1544]	@ 0x608
 800833c:	b9d3      	cbnz	r3, 8008374 <LoRaMacMlmeRequest+0x1bc>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800833e:	7935      	ldrb	r5, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8008340:	f005 0007 	and.w	r0, r5, #7
 8008344:	f000 fa4f 	bl	80087e6 <LoRaMacClassBSetPingSlotInfo>
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8008348:	2201      	movs	r2, #1
 800834a:	4669      	mov	r1, sp
 800834c:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 800834e:	f88d 5000 	strb.w	r5, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8008352:	e7be      	b.n	80082d2 <LoRaMacMlmeRequest+0x11a>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8008354:	2200      	movs	r2, #0
 8008356:	4669      	mov	r1, sp
 8008358:	2012      	movs	r0, #18
 800835a:	e7ba      	b.n	80082d2 <LoRaMacMlmeRequest+0x11a>
            queueElement.RestrictCommonReadyToHandle = true;
 800835c:	f88d 2007 	strb.w	r2, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8008360:	f000 fa32 	bl	80087c8 <LoRaMacClassBIsAcquisitionInProgress>
 8008364:	4605      	mov	r5, r0
 8008366:	b938      	cbnz	r0, 8008378 <LoRaMacMlmeRequest+0x1c0>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8008368:	f000 fa2b 	bl	80087c2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800836c:	4628      	mov	r0, r5
 800836e:	f000 fa2d 	bl	80087cc <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8008372:	e7d3      	b.n	800831c <LoRaMacMlmeRequest+0x164>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008374:	2502      	movs	r5, #2
 8008376:	e797      	b.n	80082a8 <LoRaMacMlmeRequest+0xf0>
                status = LORAMAC_STATUS_BUSY;
 8008378:	2501      	movs	r5, #1
 800837a:	e795      	b.n	80082a8 <LoRaMacMlmeRequest+0xf0>
        LoRaMacConfirmQueueAdd( &queueElement );
 800837c:	a801      	add	r0, sp, #4
 800837e:	f000 fb6d 	bl	8008a5c <LoRaMacConfirmQueueAdd>
 8008382:	e726      	b.n	80081d2 <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008384:	2503      	movs	r5, #3
 8008386:	e724      	b.n	80081d2 <LoRaMacMlmeRequest+0x1a>
 8008388:	20000a48 	.word	0x20000a48
 800838c:	200005f8 	.word	0x200005f8
 8008390:	200005fe 	.word	0x200005fe
 8008394:	0800cec4 	.word	0x0800cec4

08008398 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	b091      	sub	sp, #68	@ 0x44
 800839e:	2600      	movs	r6, #0
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 80083a0:	4605      	mov	r5, r0
{
 80083a2:	9103      	str	r1, [sp, #12]
    if( mcpsRequest == NULL )
 80083a4:	b918      	cbnz	r0, 80083ae <LoRaMacMcpsRequest+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80083a6:	2003      	movs	r0, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 80083a8:	b011      	add	sp, #68	@ 0x44
 80083aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacIsBusy( ) == true )
 80083ae:	f7fe fd3b 	bl	8006e28 <LoRaMacIsBusy>
 80083b2:	4683      	mov	fp, r0
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f040 817a 	bne.w	80086ae <LoRaMacMcpsRequest+0x316>
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80083ba:	4cbe      	ldr	r4, [pc, #760]	@ (80086b4 <LoRaMacMcpsRequest+0x31c>)
 80083bc:	4601      	mov	r1, r0
 80083be:	2214      	movs	r2, #20
    macHdr.Value = 0;
 80083c0:	4607      	mov	r7, r0
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80083c2:	f204 403c 	addw	r0, r4, #1084	@ 0x43c
 80083c6:	f002 f9e7 	bl	800a798 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80083ca:	2201      	movs	r2, #1
 80083cc:	f884 243d 	strb.w	r2, [r4, #1085]	@ 0x43d
    MacCtx.AckTimeoutRetriesCounter = 1;
 80083d0:	f884 2416 	strb.w	r2, [r4, #1046]	@ 0x416
    switch( mcpsRequest->Type )
 80083d4:	7829      	ldrb	r1, [r5, #0]
 80083d6:	4291      	cmp	r1, r2
 80083d8:	f000 8109 	beq.w	80085ee <LoRaMacMcpsRequest+0x256>
 80083dc:	2903      	cmp	r1, #3
 80083de:	f000 8118 	beq.w	8008612 <LoRaMacMcpsRequest+0x27a>
 80083e2:	2900      	cmp	r1, #0
 80083e4:	f040 8122 	bne.w	800862c <LoRaMacMcpsRequest+0x294>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80083e8:	2302      	movs	r3, #2
            readyToSend = true;
 80083ea:	4693      	mov	fp, r2
            MacCtx.AckTimeoutRetries = 1;
 80083ec:	f884 2415 	strb.w	r2, [r4, #1045]	@ 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80083f0:	f363 1747 	bfi	r7, r3, #5, #3
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80083f4:	f895 9004 	ldrb.w	r9, [r5, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80083f8:	f8d5 8008 	ldr.w	r8, [r5, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80083fc:	89ae      	ldrh	r6, [r5, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80083fe:	f995 300e 	ldrsb.w	r3, [r5, #14]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8008402:	f04f 0a02 	mov.w	sl, #2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008406:	f894 2580 	ldrb.w	r2, [r4, #1408]	@ 0x580
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800840a:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 800840e:	a909      	add	r1, sp, #36	@ 0x24
 8008410:	9300      	str	r3, [sp, #0]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8008412:	f88d a024 	strb.w	sl, [sp, #36]	@ 0x24
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008416:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800841a:	f001 f837 	bl	800948c <RegionGetPhyParam>
    if( readyToSend == true )
 800841e:	f1bb 0f00 	cmp.w	fp, #0
 8008422:	f000 8142 	beq.w	80086aa <LoRaMacMcpsRequest+0x312>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8008426:	f894 260a 	ldrb.w	r2, [r4, #1546]	@ 0x60a
 800842a:	b9b2      	cbnz	r2, 800845a <LoRaMacMcpsRequest+0xc2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800842c:	9b00      	ldr	r3, [sp, #0]
 800842e:	b240      	sxtb	r0, r0
 8008430:	4298      	cmp	r0, r3
 8008432:	bfb8      	it	lt
 8008434:	4618      	movlt	r0, r3
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008436:	f894 3580 	ldrb.w	r3, [r4, #1408]	@ 0x580
            verify.DatarateParams.Datarate = datarate;
 800843a:	f88d 0014 	strb.w	r0, [sp, #20]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800843e:	2205      	movs	r2, #5
 8008440:	f894 054c 	ldrb.w	r0, [r4, #1356]	@ 0x54c
 8008444:	a905      	add	r1, sp, #20
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008446:	f88d 3016 	strb.w	r3, [sp, #22]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800844a:	f001 f835 	bl	80094b8 <RegionVerify>
 800844e:	2800      	cmp	r0, #0
 8008450:	d0a9      	beq.n	80083a6 <LoRaMacMcpsRequest+0xe>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008452:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008456:	f884 3545 	strb.w	r3, [r4, #1349]	@ 0x545
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800845a:	f8b4 2544 	ldrh.w	r2, [r4, #1348]	@ 0x544
 800845e:	f8b4 3544 	ldrh.w	r3, [r4, #1348]	@ 0x544
 8008462:	9201      	str	r2, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008464:	f894 161c 	ldrb.w	r1, [r4, #1564]	@ 0x61c
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008468:	f8d4 2534 	ldr.w	r2, [r4, #1332]	@ 0x534
 800846c:	ba5b      	rev16	r3, r3
 800846e:	9206      	str	r2, [sp, #24]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008470:	2900      	cmp	r1, #0
 8008472:	f000 8116 	beq.w	80086a2 <LoRaMacMcpsRequest+0x30a>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8008476:	f894 160b 	ldrb.w	r1, [r4, #1547]	@ 0x60b
 800847a:	b909      	cbnz	r1, 8008480 <LoRaMacMcpsRequest+0xe8>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800847c:	f8c4 153c 	str.w	r1, [r4, #1340]	@ 0x53c
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008480:	f894 1608 	ldrb.w	r1, [r4, #1544]	@ 0x608
    fCtrl.Value = 0;
 8008484:	f04f 0a00 	mov.w	sl, #0
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008488:	1e48      	subs	r0, r1, #1
 800848a:	4241      	negs	r1, r0
 800848c:	4141      	adcs	r1, r0
 800848e:	9102      	str	r1, [sp, #8]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8008490:	f894 1546 	ldrb.w	r1, [r4, #1350]	@ 0x546
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008494:	920d      	str	r2, [sp, #52]	@ 0x34
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8008496:	9100      	str	r1, [sp, #0]
    adrNext.Version = Nvm.MacGroup2.Version;
 8008498:	f8d4 1618 	ldr.w	r1, [r4, #1560]	@ 0x618
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800849c:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	@ 0x3f8
    adrNext.Version = Nvm.MacGroup2.Version;
 80084a0:	910b      	str	r1, [sp, #44]	@ 0x2c
    adrNext.UpdateChanMask = true;
 80084a2:	f04f 0101 	mov.w	r1, #1
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80084a6:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80084aa:	f894 3580 	ldrb.w	r3, [r4, #1408]	@ 0x580
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80084ae:	920e      	str	r2, [sp, #56]	@ 0x38
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80084b0:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80084b4:	4a80      	ldr	r2, [pc, #512]	@ (80086b8 <LoRaMacMcpsRequest+0x320>)
    adrNext.Region = Nvm.MacGroup2.Region;
 80084b6:	f894 354c 	ldrb.w	r3, [r4, #1356]	@ 0x54c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80084ba:	f894 b60a 	ldrb.w	fp, [r4, #1546]	@ 0x60a
    adrNext.UpdateChanMask = true;
 80084be:	f88d 1030 	strb.w	r1, [sp, #48]	@ 0x30
    adrNext.Region = Nvm.MacGroup2.Region;
 80084c2:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80084c6:	1c51      	adds	r1, r2, #1
 80084c8:	ab06      	add	r3, sp, #24
 80084ca:	a80b      	add	r0, sp, #44	@ 0x2c
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80084cc:	f88d b031 	strb.w	fp, [sp, #49]	@ 0x31
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80084d0:	f000 f908 	bl	80086e4 <LoRaMacAdrCalcNext>
        fBufferSize = 0;
 80084d4:	45d0      	cmp	r8, sl
 80084d6:	bf08      	it	eq
 80084d8:	4656      	moveq	r6, sl
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80084da:	9b02      	ldr	r3, [sp, #8]
 80084dc:	9a00      	ldr	r2, [sp, #0]
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    MacCtx.PktBufferLen = 0;
 80084e4:	f8a4 a004 	strh.w	sl, [r4, #4]
    MacCtx.NodeAckRequested = false;
 80084e8:	f884 a418 	strb.w	sl, [r4, #1048]	@ 0x418
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80084ec:	4c71      	ldr	r4, [pc, #452]	@ (80086b4 <LoRaMacMcpsRequest+0x31c>)
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80084ee:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80084f2:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80084f6:	4632      	mov	r2, r6
 80084f8:	4641      	mov	r1, r8
 80084fa:	f504 709e 	add.w	r0, r4, #316	@ 0x13c
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80084fe:	469b      	mov	fp, r3
 8008500:	9300      	str	r3, [sp, #0]
    size_t macCmdsSize = 0;
 8008502:	e9cd aa07 	strd	sl, sl, [sp, #28]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008506:	f002 f933 	bl	800a770 <memcpy1>
    MacCtx.PktBuffer[0] = macHdr->Value;
 800850a:	b2f9      	uxtb	r1, r7
 800850c:	71a7      	strb	r7, [r4, #6]
    switch( macHdr->Bits.MType )
 800850e:	f3c7 1742 	ubfx	r7, r7, #5, #3
    MacCtx.AppDataSize = fBufferSize;
 8008512:	b2f2      	uxtb	r2, r6
    switch( macHdr->Bits.MType )
 8008514:	2f04      	cmp	r7, #4
 8008516:	9b00      	ldr	r3, [sp, #0]
    MacCtx.AppDataSize = fBufferSize;
 8008518:	f884 223b 	strb.w	r2, [r4, #571]	@ 0x23b
    switch( macHdr->Bits.MType )
 800851c:	f000 808a 	beq.w	8008634 <LoRaMacMcpsRequest+0x29c>
 8008520:	2f07      	cmp	r7, #7
 8008522:	f000 80ac 	beq.w	800867e <LoRaMacMcpsRequest+0x2e6>
 8008526:	2f02      	cmp	r7, #2
 8008528:	f040 80b9 	bne.w	800869e <LoRaMacMcpsRequest+0x306>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800852c:	2004      	movs	r0, #4
 800852e:	f884 0108 	strb.w	r0, [r4, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008532:	20ff      	movs	r0, #255	@ 0xff
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8008534:	4f61      	ldr	r7, [pc, #388]	@ (80086bc <LoRaMacMcpsRequest+0x324>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8008536:	f884 1111 	strb.w	r1, [r4, #273]	@ 0x111
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800853a:	f8d4 15d8 	ldr.w	r1, [r4, #1496]	@ 0x5d8
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800853e:	f884 0110 	strb.w	r0, [r4, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008542:	f884 3118 	strb.w	r3, [r4, #280]	@ 0x118
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008546:	a807      	add	r0, sp, #28
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8008548:	f507 739b 	add.w	r3, r7, #310	@ 0x136
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800854c:	f8c4 710c 	str.w	r7, [r4, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8008550:	f884 912c 	strb.w	r9, [r4, #300]	@ 0x12c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8008554:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8008558:	f884 2134 	strb.w	r2, [r4, #308]	@ 0x134
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800855c:	f8c4 3130 	str.w	r3, [r4, #304]	@ 0x130
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008560:	f000 fc46 	bl	8008df0 <LoRaMacCryptoGetFCntUp>
 8008564:	2800      	cmp	r0, #0
 8008566:	f040 8098 	bne.w	800869a <LoRaMacMcpsRequest+0x302>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800856a:	9b07      	ldr	r3, [sp, #28]
            MacCtx.McpsConfirm.AckReceived = false;
 800856c:	f8a4 0440 	strh.w	r0, [r4, #1088]	@ 0x440
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008570:	a808      	add	r0, sp, #32
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8008572:	f8a4 311a 	strh.w	r3, [r4, #282]	@ 0x11a
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8008576:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800857a:	f000 f9e5 	bl	8008948 <LoRaMacCommandsGetSizeSerializedCmds>
 800857e:	2800      	cmp	r0, #0
 8008580:	d164      	bne.n	800864c <LoRaMacMcpsRequest+0x2b4>
            if( macCmdsSize > 0 )
 8008582:	9b08      	ldr	r3, [sp, #32]
 8008584:	b1bb      	cbz	r3, 80085b6 <LoRaMacMcpsRequest+0x21e>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8008586:	f994 0545 	ldrsb.w	r0, [r4, #1349]	@ 0x545
 800858a:	f7fd fd43 	bl	8006014 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800858e:	f894 323b 	ldrb.w	r3, [r4, #571]	@ 0x23b
 8008592:	2b00      	cmp	r3, #0
 8008594:	d063      	beq.n	800865e <LoRaMacMcpsRequest+0x2c6>
 8008596:	9b08      	ldr	r3, [sp, #32]
 8008598:	2b0f      	cmp	r3, #15
 800859a:	d850      	bhi.n	800863e <LoRaMacMcpsRequest+0x2a6>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800859c:	200f      	movs	r0, #15
 800859e:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 80085a2:	a908      	add	r1, sp, #32
 80085a4:	f000 f9dc 	bl	8008960 <LoRaMacCommandsSerializeCmds>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d14f      	bne.n	800864c <LoRaMacMcpsRequest+0x2b4>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80085ac:	9b08      	ldr	r3, [sp, #32]
 80085ae:	f363 0b03 	bfi	fp, r3, #0, #4
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80085b2:	f884 b118 	strb.w	fp, [r4, #280]	@ 0x118
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80085b6:	9803      	ldr	r0, [sp, #12]
 80085b8:	f7fd fefa 	bl	80063b0 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 80085bc:	2800      	cmp	r0, #0
 80085be:	d146      	bne.n	800864e <LoRaMacMcpsRequest+0x2b6>
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80085c0:	9b06      	ldr	r3, [sp, #24]
        Nvm.MacGroup1.SrvAckRequested = false;
 80085c2:	f884 0546 	strb.w	r0, [r4, #1350]	@ 0x546
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80085c6:	f8c4 3534 	str.w	r3, [r4, #1332]	@ 0x534
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80085ca:	f000 f99d 	bl	8008908 <LoRaMacCommandsRemoveNoneStickyCmds>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d169      	bne.n	80086a6 <LoRaMacMcpsRequest+0x30e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80085d2:	782b      	ldrb	r3, [r5, #0]
 80085d4:	f884 343c 	strb.w	r3, [r4, #1084]	@ 0x43c
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80085d8:	f894 3485 	ldrb.w	r3, [r4, #1157]	@ 0x485
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80085e4:	4b33      	ldr	r3, [pc, #204]	@ (80086b4 <LoRaMacMcpsRequest+0x31c>)
 80085e6:	f8d3 3488 	ldr.w	r3, [r3, #1160]	@ 0x488
 80085ea:	612b      	str	r3, [r5, #16]
    return status;
 80085ec:	e6dc      	b.n	80083a8 <LoRaMacMcpsRequest+0x10>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80085ee:	7beb      	ldrb	r3, [r5, #15]
            readyToSend = true;
 80085f0:	468b      	mov	fp, r1
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80085f2:	2b08      	cmp	r3, #8
 80085f4:	bf28      	it	cs
 80085f6:	2308      	movcs	r3, #8
 80085f8:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80085fc:	2304      	movs	r3, #4
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80085fe:	f895 9004 	ldrb.w	r9, [r5, #4]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8008602:	f363 1747 	bfi	r7, r3, #5, #3
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8008606:	f8d5 8008 	ldr.w	r8, [r5, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800860a:	89ae      	ldrh	r6, [r5, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800860c:	f995 300e 	ldrsb.w	r3, [r5, #14]
            break;
 8008610:	e6f7      	b.n	8008402 <LoRaMacMcpsRequest+0x6a>
            MacCtx.AckTimeoutRetries = 1;
 8008612:	f884 2415 	strb.w	r2, [r4, #1045]	@ 0x415
            readyToSend = true;
 8008616:	4693      	mov	fp, r2
    uint8_t fPort = 0;
 8008618:	f04f 0900 	mov.w	r9, #0
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800861c:	f8d5 8004 	ldr.w	r8, [r5, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8008620:	892e      	ldrh	r6, [r5, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8008622:	f995 300a 	ldrsb.w	r3, [r5, #10]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8008626:	f067 071f 	orn	r7, r7, #31
            break;
 800862a:	e6ea      	b.n	8008402 <LoRaMacMcpsRequest+0x6a>
    switch( mcpsRequest->Type )
 800862c:	465b      	mov	r3, fp
 800862e:	46d8      	mov	r8, fp
 8008630:	46d9      	mov	r9, fp
 8008632:	e6e6      	b.n	8008402 <LoRaMacMcpsRequest+0x6a>
            MacCtx.NodeAckRequested = true;
 8008634:	f04f 0001 	mov.w	r0, #1
 8008638:	f884 0418 	strb.w	r0, [r4, #1048]	@ 0x418
 800863c:	e776      	b.n	800852c <LoRaMacMcpsRequest+0x194>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800863e:	f207 4286 	addw	r2, r7, #1158	@ 0x486
 8008642:	a908      	add	r1, sp, #32
 8008644:	f000 f98c 	bl	8008960 <LoRaMacCommandsSerializeCmds>
 8008648:	2800      	cmp	r0, #0
 800864a:	d0b4      	beq.n	80085b6 <LoRaMacMcpsRequest+0x21e>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800864c:	2013      	movs	r0, #19
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	f8a4 3544 	strh.w	r3, [r4, #1348]	@ 0x544
            MacCtx.NodeAckRequested = false;
 8008654:	2200      	movs	r2, #0
 8008656:	4b17      	ldr	r3, [pc, #92]	@ (80086b4 <LoRaMacMcpsRequest+0x31c>)
 8008658:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800865c:	e7c2      	b.n	80085e4 <LoRaMacMcpsRequest+0x24c>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800865e:	f207 4786 	addw	r7, r7, #1158	@ 0x486
 8008662:	463a      	mov	r2, r7
 8008664:	a908      	add	r1, sp, #32
 8008666:	f000 f97b 	bl	8008960 <LoRaMacCommandsSerializeCmds>
 800866a:	2800      	cmp	r0, #0
 800866c:	d1ee      	bne.n	800864c <LoRaMacMcpsRequest+0x2b4>
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800866e:	9b08      	ldr	r3, [sp, #32]
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008670:	f884 012c 	strb.w	r0, [r4, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8008674:	f8c4 7130 	str.w	r7, [r4, #304]	@ 0x130
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008678:	f884 3134 	strb.w	r3, [r4, #308]	@ 0x134
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800867c:	e79b      	b.n	80085b6 <LoRaMacMcpsRequest+0x21e>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800867e:	f1b8 0f00 	cmp.w	r8, #0
 8008682:	d098      	beq.n	80085b6 <LoRaMacMcpsRequest+0x21e>
 8008684:	2a00      	cmp	r2, #0
 8008686:	d096      	beq.n	80085b6 <LoRaMacMcpsRequest+0x21e>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8008688:	4641      	mov	r1, r8
 800868a:	1de0      	adds	r0, r4, #7
 800868c:	f002 f870 	bl	800a770 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8008690:	f894 323b 	ldrb.w	r3, [r4, #571]	@ 0x23b
 8008694:	3301      	adds	r3, #1
 8008696:	80a3      	strh	r3, [r4, #4]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8008698:	e78d      	b.n	80085b6 <LoRaMacMcpsRequest+0x21e>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800869a:	2012      	movs	r0, #18
 800869c:	e7d7      	b.n	800864e <LoRaMacMcpsRequest+0x2b6>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800869e:	2002      	movs	r0, #2
 80086a0:	e7d5      	b.n	800864e <LoRaMacMcpsRequest+0x2b6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80086a2:	2007      	movs	r0, #7
 80086a4:	e7d6      	b.n	8008654 <LoRaMacMcpsRequest+0x2bc>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80086a6:	2013      	movs	r0, #19
 80086a8:	e7d4      	b.n	8008654 <LoRaMacMcpsRequest+0x2bc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80086aa:	4650      	mov	r0, sl
 80086ac:	e79a      	b.n	80085e4 <LoRaMacMcpsRequest+0x24c>
        return LORAMAC_STATUS_BUSY;
 80086ae:	2001      	movs	r0, #1
 80086b0:	e67a      	b.n	80083a8 <LoRaMacMcpsRequest+0x10>
 80086b2:	bf00      	nop
 80086b4:	200005f8 	.word	0x200005f8
 80086b8:	20000b3c 	.word	0x20000b3c
 80086bc:	200005fe 	.word	0x200005fe

080086c0 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80086c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80086c2:	4d07      	ldr	r5, [pc, #28]	@ (80086e0 <LoRaMacTestSetDutyCycleOn+0x20>)
{
 80086c4:	4604      	mov	r4, r0
    verify.DutyCycle = enable;
 80086c6:	f88d 0004 	strb.w	r0, [sp, #4]
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80086ca:	220f      	movs	r2, #15
 80086cc:	f895 054c 	ldrb.w	r0, [r5, #1356]	@ 0x54c
 80086d0:	a901      	add	r1, sp, #4
 80086d2:	f000 fef1 	bl	80094b8 <RegionVerify>
 80086d6:	b108      	cbz	r0, 80086dc <LoRaMacTestSetDutyCycleOn+0x1c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80086d8:	f885 460c 	strb.w	r4, [r5, #1548]	@ 0x60c
    }
}
 80086dc:	b003      	add	sp, #12
 80086de:	bd30      	pop	{r4, r5, pc}
 80086e0:	200005f8 	.word	0x200005f8

080086e4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80086e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	b08b      	sub	sp, #44	@ 0x2c
 80086ea:	9201      	str	r2, [sp, #4]
    if( adrNext->Version.Fields.Minor == 0 )
 80086ec:	7882      	ldrb	r2, [r0, #2]
{
 80086ee:	4604      	mov	r4, r0
 80086f0:	468a      	mov	sl, r1
 80086f2:	4699      	mov	r9, r3
    if( adrNext->Version.Fields.Minor == 0 )
 80086f4:	2a00      	cmp	r2, #0
 80086f6:	d161      	bne.n	80087bc <LoRaMacAdrCalcNext+0xd8>
    *adrAckCounter = adrNext->AdrAckCounter;
 80086f8:	6881      	ldr	r1, [r0, #8]
    if( adrNext->AdrEnabled == true )
 80086fa:	7946      	ldrb	r6, [r0, #5]
    int8_t datarate = adrNext->Datarate;
 80086fc:	f990 3010 	ldrsb.w	r3, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 8008700:	f990 8011 	ldrsb.w	r8, [r0, #17]
    *adrAckCounter = adrNext->AdrAckCounter;
 8008704:	f8c9 1000 	str.w	r1, [r9]
    if( adrNext->AdrEnabled == true )
 8008708:	2e00      	cmp	r6, #0
 800870a:	d055      	beq.n	80087b8 <LoRaMacAdrCalcNext+0xd4>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800870c:	f04f 0b02 	mov.w	fp, #2
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8008710:	7c81      	ldrb	r1, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8008712:	7cc0      	ldrb	r0, [r0, #19]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8008714:	f88d 1016 	strb.w	r1, [sp, #22]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8008718:	a905      	add	r1, sp, #20
 800871a:	e9cd 3202 	strd	r3, r2, [sp, #8]
        getPhy.Attribute = PHY_MIN_TX_DR;
 800871e:	f88d b014 	strb.w	fp, [sp, #20]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8008722:	f000 feb3 	bl	800948c <RegionGetPhyParam>
        datarate = MAX( datarate, minTxDatarate );
 8008726:	9b02      	ldr	r3, [sp, #8]
        minTxDatarate = phyParam.Value;
 8008728:	b247      	sxtb	r7, r0
        datarate = MAX( datarate, minTxDatarate );
 800872a:	42bb      	cmp	r3, r7
 800872c:	461d      	mov	r5, r3
 800872e:	bfb8      	it	lt
 8008730:	463d      	movlt	r5, r7
        if( datarate == minTxDatarate )
 8008732:	42bb      	cmp	r3, r7
 8008734:	dc0c      	bgt.n	8008750 <LoRaMacAdrCalcNext+0x6c>
            *adrAckCounter = 0;
 8008736:	9a03      	ldr	r2, [sp, #12]
 8008738:	f8c9 2000 	str.w	r2, [r9]
                        adrAckReq = false;
 800873c:	2600      	movs	r6, #0
    *txPowOut = txPower;
 800873e:	9b01      	ldr	r3, [sp, #4]
    *drOut = datarate;
 8008740:	f88a 5000 	strb.w	r5, [sl]
    *txPowOut = txPower;
 8008744:	f883 8000 	strb.w	r8, [r3]
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
}
 8008748:	4630      	mov	r0, r6
 800874a:	b00b      	add	sp, #44	@ 0x2c
 800874c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8008750:	68a2      	ldr	r2, [r4, #8]
 8008752:	89a1      	ldrh	r1, [r4, #12]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8008754:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8008756:	428a      	cmp	r2, r1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8008758:	440b      	add	r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800875a:	bf34      	ite	cc
 800875c:	2600      	movcc	r6, #0
 800875e:	2601      	movcs	r6, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8008760:	429a      	cmp	r2, r3
 8008762:	d3ec      	bcc.n	800873e <LoRaMacAdrCalcNext+0x5a>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8008764:	2308      	movs	r3, #8
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8008766:	a905      	add	r1, sp, #20
 8008768:	7ce0      	ldrb	r0, [r4, #19]
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800876a:	f88d 3014 	strb.w	r3, [sp, #20]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800876e:	f000 fe8d 	bl	800948c <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8008772:	89e2      	ldrh	r2, [r4, #14]
 8008774:	68a3      	ldr	r3, [r4, #8]
                txPower = phyParam.Value;
 8008776:	fa4f f880 	sxtb.w	r8, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800877a:	fbb3 f1f2 	udiv	r1, r3, r2
 800877e:	fb02 3311 	mls	r3, r2, r1, r3
 8008782:	2b01      	cmp	r3, #1
 8008784:	d1db      	bne.n	800873e <LoRaMacAdrCalcNext+0x5a>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8008786:	2322      	movs	r3, #34	@ 0x22
 8008788:	f88d 3014 	strb.w	r3, [sp, #20]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800878c:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800878e:	7ce0      	ldrb	r0, [r4, #19]
 8008790:	a905      	add	r1, sp, #20
                    getPhy.Datarate = datarate;
 8008792:	f88d 5015 	strb.w	r5, [sp, #21]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8008796:	f88d 3016 	strb.w	r3, [sp, #22]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800879a:	f000 fe77 	bl	800948c <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800879e:	b245      	sxtb	r5, r0
                    if( datarate == minTxDatarate )
 80087a0:	42af      	cmp	r7, r5
 80087a2:	d1cc      	bne.n	800873e <LoRaMacAdrCalcNext+0x5a>
                        if( adrNext->UpdateChanMask == true )
 80087a4:	7923      	ldrb	r3, [r4, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0c8      	beq.n	800873c <LoRaMacAdrCalcNext+0x58>
                            RegionInitDefaults( adrNext->Region, &params );
 80087aa:	7ce0      	ldrb	r0, [r4, #19]
 80087ac:	a907      	add	r1, sp, #28
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80087ae:	f88d b024 	strb.w	fp, [sp, #36]	@ 0x24
                            RegionInitDefaults( adrNext->Region, &params );
 80087b2:	f000 fe7b 	bl	80094ac <RegionInitDefaults>
 80087b6:	e7c1      	b.n	800873c <LoRaMacAdrCalcNext+0x58>
    int8_t datarate = adrNext->Datarate;
 80087b8:	461d      	mov	r5, r3
 80087ba:	e7c0      	b.n	800873e <LoRaMacAdrCalcNext+0x5a>
    return false;
 80087bc:	2600      	movs	r6, #0
 80087be:	e7c3      	b.n	8008748 <LoRaMacAdrCalcNext+0x64>

080087c0 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087c0:	4770      	bx	lr

080087c2 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087c2:	4770      	bx	lr

080087c4 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
 80087c4:	4770      	bx	lr

080087c6 <LoRaMacClassBSetMulticastSlotState>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
 80087c6:	4770      	bx	lr

080087c8 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087c8:	2000      	movs	r0, #0
 80087ca:	4770      	bx	lr

080087cc <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087cc:	4770      	bx	lr

080087ce <LoRaMacClassBPingSlotTimerEvent>:
        TimerStart( &Ctx.BeaconTimer );
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
 80087ce:	4770      	bx	lr

080087d0 <LoRaMacClassBMulticastSlotTimerEvent>:
        }
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
 80087d0:	4770      	bx	lr

080087d2 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087d2:	2000      	movs	r0, #0
 80087d4:	4770      	bx	lr

080087d6 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
 80087d6:	2000      	movs	r0, #0
 80087d8:	4770      	bx	lr

080087da <LoRaMacClassBIsPingExpected>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsPingExpected( void )
 80087da:	2000      	movs	r0, #0
 80087dc:	4770      	bx	lr

080087de <LoRaMacClassBIsMulticastExpected>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsMulticastExpected( void )
 80087de:	2000      	movs	r0, #0
 80087e0:	4770      	bx	lr

080087e2 <LoRaMacClassBIsBeaconModeActive>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
 80087e2:	2000      	movs	r0, #0
 80087e4:	4770      	bx	lr

080087e6 <LoRaMacClassBSetPingSlotInfo>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
 80087e6:	4770      	bx	lr

080087e8 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087e8:	4770      	bx	lr

080087ea <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
 80087ea:	4770      	bx	lr

080087ec <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087ec:	2002      	movs	r0, #2
 80087ee:	4770      	bx	lr

080087f0 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087f0:	2002      	movs	r0, #2
 80087f2:	4770      	bx	lr

080087f4 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
 80087f4:	2002      	movs	r0, #2
 80087f6:	4770      	bx	lr

080087f8 <LoRaMacClassBPingSlotInfoAns>:
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBPingSlotInfoAns( void )
 80087f8:	4770      	bx	lr

080087fa <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087fa:	2000      	movs	r0, #0
 80087fc:	4770      	bx	lr

080087fe <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80087fe:	4770      	bx	lr

08008800 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
 8008800:	4770      	bx	lr

08008802 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008802:	2000      	movs	r0, #0
 8008804:	4770      	bx	lr

08008806 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008806:	2000      	movs	r0, #0
 8008808:	4770      	bx	lr

0800880a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
 800880a:	4770      	bx	lr

0800880c <LoRaMacClassBProcess>:
        multicastChannel->PingPeriod = CalcPingPeriod( multicastChannel->PingNb );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
 800880c:	4770      	bx	lr
	...

08008810 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8008810:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8008812:	4c05      	ldr	r4, [pc, #20]	@ (8008828 <LoRaMacCommandsInit+0x18>)
 8008814:	22fc      	movs	r2, #252	@ 0xfc
 8008816:	4620      	mov	r0, r4
 8008818:	2100      	movs	r1, #0
 800881a:	f001 ffbd 	bl	800a798 <memset1>
    list->First = NULL;
 800881e:	2000      	movs	r0, #0
    list->Last = NULL;
 8008820:	e9c4 0000 	strd	r0, r0, [r4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 8008824:	bd10      	pop	{r4, pc}
 8008826:	bf00      	nop
 8008828:	20000e64 	.word	0x20000e64

0800882c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	4680      	mov	r8, r0
 8008832:	4616      	mov	r6, r2
    if( payload == NULL )
 8008834:	2900      	cmp	r1, #0
 8008836:	d037      	beq.n	80088a8 <LoRaMacCommandsAddCmd+0x7c>
 8008838:	230f      	movs	r3, #15
 800883a:	4c1c      	ldr	r4, [pc, #112]	@ (80088ac <LoRaMacCommandsAddCmd+0x80>)
 800883c:	4622      	mov	r2, r4
 800883e:	f104 0010 	add.w	r0, r4, #16
        if( mem[size] != 0x00 )
 8008842:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8008846:	bb37      	cbnz	r7, 8008896 <LoRaMacCommandsAddCmd+0x6a>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8008848:	4282      	cmp	r2, r0
 800884a:	d1fa      	bne.n	8008842 <LoRaMacCommandsAddCmd+0x16>
    if( list->First == NULL )
 800884c:	4d18      	ldr	r5, [pc, #96]	@ (80088b0 <LoRaMacCommandsAddCmd+0x84>)
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800884e:	3401      	adds	r4, #1
    if( list->First == NULL )
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b903      	cbnz	r3, 8008856 <LoRaMacCommandsAddCmd+0x2a>
        list->First = element;
 8008854:	602c      	str	r4, [r5, #0]
    if( list->Last )
 8008856:	686b      	ldr	r3, [r5, #4]
 8008858:	b103      	cbz	r3, 800885c <LoRaMacCommandsAddCmd+0x30>
        list->Last->Next = element;
 800885a:	601c      	str	r4, [r3, #0]
    element->Next = NULL;
 800885c:	2300      	movs	r3, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 800885e:	60a6      	str	r6, [r4, #8]
    element->Next = NULL;
 8008860:	6023      	str	r3, [r4, #0]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8008862:	b2b2      	uxth	r2, r6
    list->Last = element;
 8008864:	606c      	str	r4, [r5, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8008866:	1d60      	adds	r0, r4, #5
    newCmd->CID = cid;
 8008868:	f884 8004 	strb.w	r8, [r4, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800886c:	f001 ff80 	bl	800a770 <memcpy1>
    switch( cid )
 8008870:	f1b8 0f05 	cmp.w	r8, #5
 8008874:	d016      	beq.n	80088a4 <LoRaMacCommandsAddCmd+0x78>
 8008876:	f1a8 0008 	sub.w	r0, r8, #8
 800887a:	2802      	cmp	r0, #2
 800887c:	bf8c      	ite	hi
 800887e:	2000      	movhi	r0, #0
 8008880:	2001      	movls	r0, #1
    newCmd->IsSticky = IsSticky( cid );

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8008882:	f8d5 30f8 	ldr.w	r3, [r5, #248]	@ 0xf8
    newCmd->IsSticky = IsSticky( cid );
 8008886:	7320      	strb	r0, [r4, #12]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8008888:	3301      	adds	r3, #1
 800888a:	4433      	add	r3, r6
 800888c:	f8c5 30f8 	str.w	r3, [r5, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
}
 8008890:	4638      	mov	r0, r7
 8008892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 8008896:	3b01      	subs	r3, #1
 8008898:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 800889c:	4604      	mov	r4, r0
 800889e:	d1cd      	bne.n	800883c <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80088a0:	2702      	movs	r7, #2
 80088a2:	e7f5      	b.n	8008890 <LoRaMacCommandsAddCmd+0x64>
            return true;
 80088a4:	2001      	movs	r0, #1
 80088a6:	e7ec      	b.n	8008882 <LoRaMacCommandsAddCmd+0x56>
        return LORAMAC_COMMANDS_ERROR_NPE;
 80088a8:	2701      	movs	r7, #1
 80088aa:	e7f1      	b.n	8008890 <LoRaMacCommandsAddCmd+0x64>
 80088ac:	20000e6b 	.word	0x20000e6b
 80088b0:	20000e64 	.word	0x20000e64

080088b4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80088b4:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 80088b6:	b318      	cbz	r0, 8008900 <LoRaMacCommandsRemoveCmd+0x4c>
    curElement = list->First;
 80088b8:	4a12      	ldr	r2, [pc, #72]	@ (8008904 <LoRaMacCommandsRemoveCmd+0x50>)
 80088ba:	6813      	ldr	r3, [r2, #0]
    if( element != curElement )
 80088bc:	4298      	cmp	r0, r3
 80088be:	d104      	bne.n	80088ca <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 80088c0:	6803      	ldr	r3, [r0, #0]
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	2300      	movs	r3, #0
 80088c6:	e005      	b.n	80088d4 <LoRaMacCommandsRemoveCmd+0x20>
 80088c8:	460b      	mov	r3, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0fa      	beq.n	80088c4 <LoRaMacCommandsRemoveCmd+0x10>
 80088ce:	6819      	ldr	r1, [r3, #0]
 80088d0:	4288      	cmp	r0, r1
 80088d2:	d1f9      	bne.n	80088c8 <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 80088d4:	6851      	ldr	r1, [r2, #4]
 80088d6:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 80088d8:	bf08      	it	eq
 80088da:	6053      	streq	r3, [r2, #4]
    if( PrevElement != NULL )
 80088dc:	b10b      	cbz	r3, 80088e2 <LoRaMacCommandsRemoveCmd+0x2e>
        PrevElement->Next = element->Next;
 80088de:	6801      	ldr	r1, [r0, #0]
 80088e0:	6019      	str	r1, [r3, #0]
    element->Next = NULL;
 80088e2:	2400      	movs	r4, #0
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80088e4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
 80088e8:	6881      	ldr	r1, [r0, #8]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 80088ee:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80088f0:	4621      	mov	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80088f2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80088f6:	2210      	movs	r2, #16
 80088f8:	f001 ff4e 	bl	800a798 <memset1>
    return true;
 80088fc:	4620      	mov	r0, r4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80088fe:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008900:	2001      	movs	r0, #1
 8008902:	e7fc      	b.n	80088fe <LoRaMacCommandsRemoveCmd+0x4a>
 8008904:	20000e64 	.word	0x20000e64

08008908 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8008908:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800890a:	4b05      	ldr	r3, [pc, #20]	@ (8008920 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>)
 800890c:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800890e:	b900      	cbnz	r0, 8008912 <LoRaMacCommandsRemoveNoneStickyCmds+0xa>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8008910:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 8008912:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 8008914:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 8008916:	b90b      	cbnz	r3, 800891c <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            LoRaMacCommandsRemoveCmd( curElement );
 8008918:	f7ff ffcc 	bl	80088b4 <LoRaMacCommandsRemoveCmd>
{
 800891c:	4620      	mov	r0, r4
 800891e:	e7f6      	b.n	800890e <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 8008920:	20000e64 	.word	0x20000e64

08008924 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8008924:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8008926:	4b07      	ldr	r3, [pc, #28]	@ (8008944 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>)
 8008928:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800892a:	b900      	cbnz	r0, 800892e <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800892c:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
 800892e:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 8008930:	6804      	ldr	r4, [r0, #0]
    switch( cid )
 8008932:	2b05      	cmp	r3, #5
 8008934:	d002      	beq.n	800893c <LoRaMacCommandsRemoveStickyAnsCmds+0x18>
 8008936:	3b08      	subs	r3, #8
 8008938:	2b02      	cmp	r3, #2
 800893a:	d801      	bhi.n	8008940 <LoRaMacCommandsRemoveStickyAnsCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
 800893c:	f7ff ffba 	bl	80088b4 <LoRaMacCommandsRemoveCmd>
{
 8008940:	4620      	mov	r0, r4
 8008942:	e7f2      	b.n	800892a <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 8008944:	20000e64 	.word	0x20000e64

08008948 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 8008948:	b128      	cbz	r0, 8008956 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800894a:	4b04      	ldr	r3, [pc, #16]	@ (800895c <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800894c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008950:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8008952:	2000      	movs	r0, #0
 8008954:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008956:	2001      	movs	r0, #1
}
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	20000e64 	.word	0x20000e64

08008960 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8008960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008964:	4680      	mov	r8, r0
 8008966:	460f      	mov	r7, r1
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8008968:	4616      	mov	r6, r2
 800896a:	b332      	cbz	r2, 80089ba <LoRaMacCommandsSerializeCmds+0x5a>
 800896c:	b329      	cbz	r1, 80089ba <LoRaMacCommandsSerializeCmds+0x5a>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800896e:	4b14      	ldr	r3, [pc, #80]	@ (80089c0 <LoRaMacCommandsSerializeCmds+0x60>)
 8008970:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 8008972:	2300      	movs	r3, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 8008974:	b92c      	cbnz	r4, 8008982 <LoRaMacCommandsSerializeCmds+0x22>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8008976:	4638      	mov	r0, r7
 8008978:	f7ff ffe6 	bl	8008948 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800897c:	2000      	movs	r0, #0
}
 800897e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8008982:	68a2      	ldr	r2, [r4, #8]
 8008984:	eba8 0103 	sub.w	r1, r8, r3
 8008988:	3201      	adds	r2, #1
 800898a:	4291      	cmp	r1, r2
 800898c:	d312      	bcc.n	80089b4 <LoRaMacCommandsSerializeCmds+0x54>
            buffer[itr++] = curElement->CID;
 800898e:	7922      	ldrb	r2, [r4, #4]
 8008990:	1c5d      	adds	r5, r3, #1
 8008992:	54f2      	strb	r2, [r6, r3]
 8008994:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8008996:	8922      	ldrh	r2, [r4, #8]
 8008998:	1d61      	adds	r1, r4, #5
 800899a:	1970      	adds	r0, r6, r5
 800899c:	f001 fee8 	bl	800a770 <memcpy1>
            itr += curElement->PayloadSize;
 80089a0:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 80089a2:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 80089a4:	441d      	add	r5, r3
 80089a6:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 80089a8:	e7e4      	b.n	8008974 <LoRaMacCommandsSerializeCmds+0x14>
        nextElement = curElement->Next;
 80089aa:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 80089ac:	4620      	mov	r0, r4
 80089ae:	f7ff ff81 	bl	80088b4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80089b2:	462c      	mov	r4, r5
    while( curElement != NULL )
 80089b4:	2c00      	cmp	r4, #0
 80089b6:	d1f8      	bne.n	80089aa <LoRaMacCommandsSerializeCmds+0x4a>
 80089b8:	e7dd      	b.n	8008976 <LoRaMacCommandsSerializeCmds+0x16>
        return LORAMAC_COMMANDS_ERROR_NPE;
 80089ba:	2001      	movs	r0, #1
 80089bc:	e7df      	b.n	800897e <LoRaMacCommandsSerializeCmds+0x1e>
 80089be:	bf00      	nop
 80089c0:	20000e64 	.word	0x20000e64

080089c4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 80089c4:	b160      	cbz	r0, 80089e0 <LoRaMacCommandsStickyCmdsPending+0x1c>
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;

    *cmdsPending = false;
 80089c6:	2200      	movs	r2, #0
    curElement = CommandsCtx.MacCommandList.First;
 80089c8:	4b06      	ldr	r3, [pc, #24]	@ (80089e4 <LoRaMacCommandsStickyCmdsPending+0x20>)
 80089ca:	681b      	ldr	r3, [r3, #0]
    *cmdsPending = false;
 80089cc:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 80089ce:	b11b      	cbz	r3, 80089d8 <LoRaMacCommandsStickyCmdsPending+0x14>
    {
        if( curElement->IsSticky == true )
 80089d0:	7b1a      	ldrb	r2, [r3, #12]
 80089d2:	b11a      	cbz	r2, 80089dc <LoRaMacCommandsStickyCmdsPending+0x18>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80089d4:	2301      	movs	r3, #1
 80089d6:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80089d8:	2000      	movs	r0, #0
 80089da:	4770      	bx	lr
        }
        curElement = curElement->Next;
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	e7f6      	b.n	80089ce <LoRaMacCommandsStickyCmdsPending+0xa>
        return LORAMAC_COMMANDS_ERROR_NPE;
 80089e0:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80089e2:	4770      	bx	lr
 80089e4:	20000e64 	.word	0x20000e64

080089e8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 80089e8:	3802      	subs	r0, #2
 80089ea:	b2c0      	uxtb	r0, r0
 80089ec:	2811      	cmp	r0, #17
 80089ee:	bf9a      	itte	ls
 80089f0:	4b01      	ldrls	r3, [pc, #4]	@ (80089f8 <LoRaMacCommandsGetCmdSize+0x10>)
 80089f2:	5c18      	ldrbls	r0, [r3, r0]
{
 80089f4:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 80089f6:	4770      	bx	lr
 80089f8:	0800cd51 	.word	0x0800cd51

080089fc <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 80089fc:	b530      	push	{r4, r5, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80089fe:	4b0b      	ldr	r3, [pc, #44]	@ (8008a2c <GetElement.constprop.0+0x30>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 8008a00:	4604      	mov	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8008a02:	f893 2020 	ldrb.w	r2, [r3, #32]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 8008a06:	4608      	mov	r0, r1
    if( count == 0 )
 8008a08:	b172      	cbz	r2, 8008a28 <GetElement.constprop.0+0x2c>
 8008a0a:	2100      	movs	r1, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008a0c:	331c      	adds	r3, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 8008a0e:	7805      	ldrb	r5, [r0, #0]
 8008a10:	42a5      	cmp	r5, r4
 8008a12:	d008      	beq.n	8008a26 <GetElement.constprop.0+0x2a>
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8008a14:	3101      	adds	r1, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008a16:	4298      	cmp	r0, r3
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8008a18:	b2cd      	uxtb	r5, r1
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008a1a:	bf0c      	ite	eq
 8008a1c:	4804      	ldreq	r0, [pc, #16]	@ (8008a30 <GetElement.constprop.0+0x34>)
        bufferPointer++;
 8008a1e:	3004      	addne	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8008a20:	42aa      	cmp	r2, r5
 8008a22:	d8f4      	bhi.n	8008a0e <GetElement.constprop.0+0x12>
        return NULL;
 8008a24:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 8008a26:	bd30      	pop	{r4, r5, pc}
        return NULL;
 8008a28:	4610      	mov	r0, r2
 8008a2a:	e7fc      	b.n	8008a26 <GetElement.constprop.0+0x2a>
 8008a2c:	20000f60 	.word	0x20000f60
 8008a30:	20000f6c 	.word	0x20000f6c

08008a34 <LoRaMacConfirmQueueInit>:
void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
    ConfirmQueueCtx.Primitives = primitives;

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8008a34:	2300      	movs	r3, #0
{
 8008a36:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 8008a38:	4c07      	ldr	r4, [pc, #28]	@ (8008a58 <LoRaMacConfirmQueueInit+0x24>)

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8008a3a:	2214      	movs	r2, #20
    ConfirmQueueCtx.Primitives = primitives;
 8008a3c:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8008a3e:	21ff      	movs	r1, #255	@ 0xff
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008a40:	f104 000c 	add.w	r0, r4, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8008a44:	f884 3020 	strb.w	r3, [r4, #32]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008a48:	e9c4 0001 	strd	r0, r0, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8008a4c:	f001 fea4 	bl	800a798 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 8008a56:	bd10      	pop	{r4, pc}
 8008a58:	20000f60 	.word	0x20000f60

08008a5c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8008a5c:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8008a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8008a98 <LoRaMacConfirmQueueAdd+0x3c>)
 8008a60:	f892 1020 	ldrb.w	r1, [r2, #32]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8008a64:	2904      	cmp	r1, #4
 8008a66:	d815      	bhi.n	8008a94 <LoRaMacConfirmQueueAdd+0x38>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8008a68:	6893      	ldr	r3, [r2, #8]
 8008a6a:	7804      	ldrb	r4, [r0, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8008a6c:	3101      	adds	r1, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8008a6e:	701c      	strb	r4, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8008a70:	7844      	ldrb	r4, [r0, #1]
 8008a72:	705c      	strb	r4, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8008a74:	78c0      	ldrb	r0, [r0, #3]
 8008a76:	70d8      	strb	r0, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8008a78:	2000      	movs	r0, #0
 8008a7a:	7098      	strb	r0, [r3, #2]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 8008a7c:	2001      	movs	r0, #1
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8008a7e:	f882 1020 	strb.w	r1, [r2, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008a82:	f102 011c 	add.w	r1, r2, #28
 8008a86:	428b      	cmp	r3, r1
        bufferPointer++;
 8008a88:	bf14      	ite	ne
 8008a8a:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008a8c:	f102 030c 	addeq.w	r3, r2, #12
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8008a90:	6093      	str	r3, [r2, #8]
}
 8008a92:	bd10      	pop	{r4, pc}
        return false;
 8008a94:	2000      	movs	r0, #0
 8008a96:	e7fc      	b.n	8008a92 <LoRaMacConfirmQueueAdd+0x36>
 8008a98:	20000f60 	.word	0x20000f60

08008a9c <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8008a9c:	4b08      	ldr	r3, [pc, #32]	@ (8008ac0 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 8008a9e:	f893 0020 	ldrb.w	r0, [r3, #32]
    if( count == 0 )
 8008aa2:	b160      	cbz	r0, 8008abe <LoRaMacConfirmQueueRemoveFirst+0x22>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8008aa4:	3801      	subs	r0, #1
 8008aa6:	f883 0020 	strb.w	r0, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );

    return true;
 8008aaa:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8008aac:	685a      	ldr	r2, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008aae:	f103 011c 	add.w	r1, r3, #28
 8008ab2:	428a      	cmp	r2, r1
        bufferPointer++;
 8008ab4:	bf14      	ite	ne
 8008ab6:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008ab8:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8008abc:	605a      	str	r2, [r3, #4]
}
 8008abe:	4770      	bx	lr
 8008ac0:	20000f60 	.word	0x20000f60

08008ac4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8008ac4:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8008ac6:	4b07      	ldr	r3, [pc, #28]	@ (8008ae4 <LoRaMacConfirmQueueSetStatus+0x20>)
{
 8008ac8:	4604      	mov	r4, r0
    if( count == 0 )
 8008aca:	f893 2020 	ldrb.w	r2, [r3, #32]
{
 8008ace:	4608      	mov	r0, r1
    if( count == 0 )
 8008ad0:	b132      	cbz	r2, 8008ae0 <LoRaMacConfirmQueueSetStatus+0x1c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8008ad2:	6859      	ldr	r1, [r3, #4]
 8008ad4:	f7ff ff92 	bl	80089fc <GetElement.constprop.0>
        if( element != NULL )
 8008ad8:	b110      	cbz	r0, 8008ae0 <LoRaMacConfirmQueueSetStatus+0x1c>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 8008ada:	2301      	movs	r3, #1
            element->Status = status;
 8008adc:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 8008ade:	7083      	strb	r3, [r0, #2]
        }
    }
}
 8008ae0:	bd10      	pop	{r4, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000f60 	.word	0x20000f60

08008ae8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8008ae8:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8008aea:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <LoRaMacConfirmQueueGetStatus+0x1c>)
    if( count == 0 )
 8008aec:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008af0:	b12a      	cbz	r2, 8008afe <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8008af2:	6859      	ldr	r1, [r3, #4]
 8008af4:	f7ff ff82 	bl	80089fc <GetElement.constprop.0>
        if( element != NULL )
 8008af8:	b108      	cbz	r0, 8008afe <LoRaMacConfirmQueueGetStatus+0x16>
        {
            return element->Status;
 8008afa:	7840      	ldrb	r0, [r0, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
 8008afc:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008afe:	2001      	movs	r0, #1
 8008b00:	e7fc      	b.n	8008afc <LoRaMacConfirmQueueGetStatus+0x14>
 8008b02:	bf00      	nop
 8008b04:	20000f60 	.word	0x20000f60

08008b08 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8008b08:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8008b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8008b34 <LoRaMacConfirmQueueSetStatusCmn+0x2c>)
    if( count == 0 )
 8008b0c:	f892 1020 	ldrb.w	r1, [r2, #32]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8008b10:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8008b12:	f882 0021 	strb.w	r0, [r2, #33]	@ 0x21
    if( count == 0 )
 8008b16:	b161      	cbz	r1, 8008b32 <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 8008b18:	2401      	movs	r4, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 8008b1a:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008b1c:	321c      	adds	r2, #28
            if( element->RestrictCommonReadyToHandle == false )
 8008b1e:	78dd      	ldrb	r5, [r3, #3]
            element->Status = status;
 8008b20:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 8008b22:	b905      	cbnz	r5, 8008b26 <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 8008b24:	709c      	strb	r4, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008b26:	4293      	cmp	r3, r2
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008b28:	bf0c      	ite	eq
 8008b2a:	4b03      	ldreq	r3, [pc, #12]	@ (8008b38 <LoRaMacConfirmQueueSetStatusCmn+0x30>)
        bufferPointer++;
 8008b2c:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	d1f5      	bne.n	8008b1e <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 8008b32:	bd30      	pop	{r4, r5, pc}
 8008b34:	20000f60 	.word	0x20000f60
 8008b38:	20000f6c 	.word	0x20000f6c

08008b3c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8008b3c:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8008b3e:	4b04      	ldr	r3, [pc, #16]	@ (8008b50 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 8008b40:	6859      	ldr	r1, [r3, #4]
 8008b42:	f7ff ff5b 	bl	80089fc <GetElement.constprop.0>
    {
        return true;
    }
    return false;
}
 8008b46:	3800      	subs	r0, #0
 8008b48:	bf18      	it	ne
 8008b4a:	2001      	movne	r0, #1
 8008b4c:	bd08      	pop	{r3, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000f60 	.word	0x20000f60

08008b54 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8008b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b56:	4604      	mov	r4, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8008b58:	2500      	movs	r5, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8008b5a:	4e12      	ldr	r6, [pc, #72]	@ (8008ba4 <LoRaMacConfirmQueueHandleCb+0x50>)
 8008b5c:	f896 7020 	ldrb.w	r7, [r6, #32]
    for( uint8_t i = 0; i < nbElements; i++ )
 8008b60:	b2eb      	uxtb	r3, r5
 8008b62:	429f      	cmp	r7, r3
 8008b64:	d801      	bhi.n	8008b6a <LoRaMacConfirmQueueHandleCb+0x16>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 8008b66:	b003      	add	sp, #12
 8008b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8008b6a:	6873      	ldr	r3, [r6, #4]
 8008b6c:	7819      	ldrb	r1, [r3, #0]
 8008b6e:	7021      	strb	r1, [r4, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8008b70:	785a      	ldrb	r2, [r3, #1]
 8008b72:	7062      	strb	r2, [r4, #1]
        if( readyToHandle == true )
 8008b74:	7898      	ldrb	r0, [r3, #2]
 8008b76:	b138      	cbz	r0, 8008b88 <LoRaMacConfirmQueueHandleCb+0x34>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8008b78:	6833      	ldr	r3, [r6, #0]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 8008b80:	f7ff ff8c 	bl	8008a9c <LoRaMacConfirmQueueRemoveFirst>
    for( uint8_t i = 0; i < nbElements; i++ )
 8008b84:	3501      	adds	r5, #1
 8008b86:	e7eb      	b.n	8008b60 <LoRaMacConfirmQueueHandleCb+0xc>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8008b88:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8008b8a:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8008b8e:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8008b92:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacConfirmQueueRemoveFirst( );
 8008b96:	f7ff ff81 	bl	8008a9c <LoRaMacConfirmQueueRemoveFirst>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8008b9a:	a801      	add	r0, sp, #4
 8008b9c:	f7ff ff5e 	bl	8008a5c <LoRaMacConfirmQueueAdd>
 8008ba0:	e7f0      	b.n	8008b84 <LoRaMacConfirmQueueHandleCb+0x30>
 8008ba2:	bf00      	nop
 8008ba4:	20000f60 	.word	0x20000f60

08008ba8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 8008ba8:	4b01      	ldr	r3, [pc, #4]	@ (8008bb0 <LoRaMacConfirmQueueGetCnt+0x8>)
 8008baa:	f893 0020 	ldrb.w	r0, [r3, #32]
 8008bae:	4770      	bx	lr
 8008bb0:	20000f60 	.word	0x20000f60

08008bb4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8008bb4:	4b03      	ldr	r3, [pc, #12]	@ (8008bc4 <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8008bb6:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
 8008bba:	2804      	cmp	r0, #4
 8008bbc:	bf94      	ite	ls
 8008bbe:	2000      	movls	r0, #0
 8008bc0:	2001      	movhi	r0, #1
 8008bc2:	4770      	bx	lr
 8008bc4:	20000f60 	.word	0x20000f60

08008bc8 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8008bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t compBase[16] = { 0 };
 8008bca:	2400      	movs	r4, #0
 8008bcc:	e9cd 4402 	strd	r4, r4, [sp, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8008bd0:	1e44      	subs	r4, r0, #1
 8008bd2:	f88d 4000 	strb.w	r4, [sp]
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8008bd6:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8008bda:	0a0c      	lsrs	r4, r1, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8008bdc:	f8ad 2004 	strh.w	r2, [sp, #4]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8008be0:	0c09      	lsrs	r1, r1, #16
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8008be2:	0c12      	lsrs	r2, r2, #16
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8008be4:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8008be8:	f88d 2006 	strb.w	r2, [sp, #6]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8008bec:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8008bf0:	4602      	mov	r2, r0
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8008bf2:	0a1b      	lsrs	r3, r3, #8
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	4668      	mov	r0, sp
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8008bf8:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8008bfc:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8008c00:	f7fc fc0f 	bl	8005422 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008c04:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8008c06:	bf18      	it	ne
 8008c08:	200f      	movne	r0, #15
 8008c0a:	b004      	add	sp, #16
 8008c0c:	bd10      	pop	{r4, pc}

08008c0e <PayloadEncrypt>:
{
 8008c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	4690      	mov	r8, r2
 8008c16:	460d      	mov	r5, r1
    if( buffer == 0 )
 8008c18:	4607      	mov	r7, r0
{
 8008c1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    if( buffer == 0 )
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d047      	beq.n	8008cb0 <PayloadEncrypt+0xa2>
    uint8_t sBlock[16] = { 0 };
 8008c20:	2400      	movs	r4, #0
    aBlock[0] = 0x01;
 8008c22:	2101      	movs	r1, #1
    uint8_t aBlock[16] = { 0 };
 8008c24:	e9cd 4404 	strd	r4, r4, [sp, #16]
    aBlock[0] = 0x01;
 8008c28:	f88d 1010 	strb.w	r1, [sp, #16]
    aBlock[5] = dir;
 8008c2c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
    aBlock[6] = address & 0xFF;
 8008c30:	f8ad 3016 	strh.w	r3, [sp, #22]
    aBlock[5] = dir;
 8008c34:	f88d 1015 	strb.w	r1, [sp, #21]
    uint8_t sBlock[16] = { 0 };
 8008c38:	e9cd 4400 	strd	r4, r4, [sp]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8008c3c:	0c19      	lsrs	r1, r3, #16
    uint8_t sBlock[16] = { 0 };
 8008c3e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8008c42:	0e1b      	lsrs	r3, r3, #24
 8008c44:	f88d 3019 	strb.w	r3, [sp, #25]
    aBlock[10] = frameCounter & 0xFF;
 8008c48:	f8ad 201a 	strh.w	r2, [sp, #26]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8008c4c:	0c13      	lsrs	r3, r2, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8008c4e:	0e12      	lsrs	r2, r2, #24
    uint8_t aBlock[16] = { 0 };
 8008c50:	9407      	str	r4, [sp, #28]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8008c52:	f88d 1018 	strb.w	r1, [sp, #24]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8008c56:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8008c5a:	f88d 201d 	strb.w	r2, [sp, #29]
    while( size > 0 )
 8008c5e:	b2e3      	uxtb	r3, r4
 8008c60:	011e      	lsls	r6, r3, #4
 8008c62:	2d00      	cmp	r5, #0
 8008c64:	b2f6      	uxtb	r6, r6
 8008c66:	dc03      	bgt.n	8008c70 <PayloadEncrypt+0x62>
    return LORAMAC_CRYPTO_SUCCESS;
 8008c68:	2000      	movs	r0, #0
}
 8008c6a:	b008      	add	sp, #32
 8008c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8008c70:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 8008c72:	3301      	adds	r3, #1
 8008c74:	f88d 301f 	strb.w	r3, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8008c78:	4642      	mov	r2, r8
 8008c7a:	466b      	mov	r3, sp
 8008c7c:	eb0d 0001 	add.w	r0, sp, r1
 8008c80:	f7fc fb63 	bl	800534a <SecureElementAesEncrypt>
 8008c84:	4603      	mov	r3, r0
 8008c86:	b9a8      	cbnz	r0, 8008cb4 <PayloadEncrypt+0xa6>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8008c88:	2d10      	cmp	r5, #16
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	4669      	mov	r1, sp
 8008c8e:	bfa8      	it	ge
 8008c90:	2010      	movge	r0, #16
 8008c92:	443e      	add	r6, r7
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8008c94:	7832      	ldrb	r2, [r6, #0]
 8008c96:	f811 cb01 	ldrb.w	ip, [r1], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8008c9a:	3301      	adds	r3, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8008c9c:	ea82 020c 	eor.w	r2, r2, ip
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8008ca0:	4298      	cmp	r0, r3
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8008ca2:	f806 2b01 	strb.w	r2, [r6], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8008ca6:	dcf5      	bgt.n	8008c94 <PayloadEncrypt+0x86>
        size -= 16;
 8008ca8:	3d10      	subs	r5, #16
 8008caa:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 8008cac:	3401      	adds	r4, #1
 8008cae:	e7d6      	b.n	8008c5e <PayloadEncrypt+0x50>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008cb0:	200a      	movs	r0, #10
 8008cb2:	e7da      	b.n	8008c6a <PayloadEncrypt+0x5c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008cb4:	200f      	movs	r0, #15
 8008cb6:	e7d8      	b.n	8008c6a <PayloadEncrypt+0x5c>

08008cb8 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 8008cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 8008cba:	2300      	movs	r3, #0

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8008cbc:	227f      	movs	r2, #127	@ 0x7f
 8008cbe:	2104      	movs	r1, #4
 8008cc0:	4668      	mov	r0, sp
    uint8_t compBase[16] = { 0 };
 8008cc2:	e9cd 3300 	strd	r3, r3, [sp]
 8008cc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8008cca:	f7fc fbaa 	bl	8005422 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008cce:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8008cd0:	bf18      	it	ne
 8008cd2:	200f      	movne	r0, #15
 8008cd4:	b005      	add	sp, #20
 8008cd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008cdc <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 8008cdc:	3801      	subs	r0, #1
 8008cde:	2803      	cmp	r0, #3
 8008ce0:	d817      	bhi.n	8008d12 <GetLastFcntDown.constprop.0+0x36>
 8008ce2:	e8df f000 	tbb	[pc, r0]
 8008ce6:	0902      	.short	0x0902
 8008ce8:	110d      	.short	0x110d
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8008cea:	4b0b      	ldr	r3, [pc, #44]	@ (8008d18 <GetLastFcntDown.constprop.0+0x3c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	691a      	ldr	r2, [r3, #16]
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8008cf0:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8008cf2:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8008cf8:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <GetLastFcntDown.constprop.0+0x3c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695a      	ldr	r2, [r3, #20]
 8008cfe:	e7f7      	b.n	8008cf0 <GetLastFcntDown.constprop.0+0x14>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8008d00:	4b05      	ldr	r3, [pc, #20]	@ (8008d18 <GetLastFcntDown.constprop.0+0x3c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	699a      	ldr	r2, [r3, #24]
 8008d06:	e7f3      	b.n	8008cf0 <GetLastFcntDown.constprop.0+0x14>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8008d08:	4b03      	ldr	r3, [pc, #12]	@ (8008d18 <GetLastFcntDown.constprop.0+0x3c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	600b      	str	r3, [r1, #0]
            break;
 8008d10:	e7f0      	b.n	8008cf4 <GetLastFcntDown.constprop.0+0x18>
    switch( fCntID )
 8008d12:	2005      	movs	r0, #5
}
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	20000f84 	.word	0x20000f84

08008d1c <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8008d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d20:	b0c4      	sub	sp, #272	@ 0x110
 8008d22:	460c      	mov	r4, r1
 8008d24:	4617      	mov	r7, r2
 8008d26:	461d      	mov	r5, r3
    if( msg == 0 )
 8008d28:	4680      	mov	r8, r0
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8008d2a:	9e4a      	ldr	r6, [sp, #296]	@ 0x128
    if( msg == 0 )
 8008d2c:	b3b8      	cbz	r0, 8008d9e <VerifyCmacB0.constprop.0.isra.0+0x82>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8008d2e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008d32:	d836      	bhi.n	8008da2 <VerifyCmacB0.constprop.0.isra.0+0x86>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8008d34:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4668      	mov	r0, sp
 8008d3c:	f001 fd2c 	bl	800a798 <memset1>
    b0[0] = 0x49;
 8008d40:	2349      	movs	r3, #73	@ 0x49
 8008d42:	9300      	str	r3, [sp, #0]
    b0[4] = 0x00;
 8008d44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d48:	f8ad 3004 	strh.w	r3, [sp, #4]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008d4c:	0c2b      	lsrs	r3, r5, #16
 8008d4e:	f88d 3008 	strb.w	r3, [sp, #8]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8008d52:	0c33      	lsrs	r3, r6, #16
 8008d54:	f88d 300c 	strb.w	r3, [sp, #12]
    b0[14] = 0x00;
 8008d58:	2300      	movs	r3, #0
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	4641      	mov	r1, r8
    b0[6] = devAddr & 0xFF;
 8008d5e:	f8ad 5006 	strh.w	r5, [sp, #6]
    b0[10] = fCnt & 0xFF;
 8008d62:	f8ad 600a 	strh.w	r6, [sp, #10]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8008d66:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8008d68:	0e2d      	lsrs	r5, r5, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8008d6a:	0e36      	lsrs	r6, r6, #24
    b0[14] = 0x00;
 8008d6c:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8008d70:	f88d 5009 	strb.w	r5, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8008d74:	f88d 600d 	strb.w	r6, [sp, #13]
    b0[15] = msgLen & 0xFF;
 8008d78:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8008d7c:	f001 fcf8 	bl	800a770 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8008d80:	f104 0110 	add.w	r1, r4, #16
 8008d84:	463b      	mov	r3, r7
 8008d86:	4668      	mov	r0, sp
 8008d88:	9a4b      	ldr	r2, [sp, #300]	@ 0x12c
 8008d8a:	b289      	uxth	r1, r1
 8008d8c:	f7fc fac7 	bl	800531e <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8008d90:	b110      	cbz	r0, 8008d98 <VerifyCmacB0.constprop.0.isra.0+0x7c>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008d92:	2801      	cmp	r0, #1
 8008d94:	bf18      	it	ne
 8008d96:	200f      	movne	r0, #15
}
 8008d98:	b044      	add	sp, #272	@ 0x110
 8008d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008d9e:	200a      	movs	r0, #10
 8008da0:	e7fa      	b.n	8008d98 <VerifyCmacB0.constprop.0.isra.0+0x7c>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8008da2:	200e      	movs	r0, #14
 8008da4:	e7f8      	b.n	8008d98 <VerifyCmacB0.constprop.0.isra.0+0x7c>
	...

08008da8 <LoRaMacCryptoInit>:
{
 8008da8:	b510      	push	{r4, lr}
    if( nvm == NULL )
 8008daa:	b190      	cbz	r0, 8008dd2 <LoRaMacCryptoInit+0x2a>
    CryptoNvm = nvm;
 8008dac:	4c0a      	ldr	r4, [pc, #40]	@ (8008dd8 <LoRaMacCryptoInit+0x30>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8008dae:	2228      	movs	r2, #40	@ 0x28
 8008db0:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 8008db2:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8008db4:	f001 fcf0 	bl	800a798 <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8008db8:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8008dba:	4a08      	ldr	r2, [pc, #32]	@ (8008ddc <LoRaMacCryptoInit+0x34>)
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008dbc:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8008dbe:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc4:	e9c3 0203 	strd	r0, r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8008dc8:	e9c3 2205 	strd	r2, r2, [r3, #20]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8008dcc:	e9c3 2207 	strd	r2, r2, [r3, #28]
}
 8008dd0:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8008dd2:	2009      	movs	r0, #9
 8008dd4:	e7fc      	b.n	8008dd0 <LoRaMacCryptoInit+0x28>
 8008dd6:	bf00      	nop
 8008dd8:	20000f84 	.word	0x20000f84
 8008ddc:	01010100 	.word	0x01010100

08008de0 <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 8008de0:	4b02      	ldr	r3, [pc, #8]	@ (8008dec <LoRaMacCryptoSetLrWanVersion+0xc>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6018      	str	r0, [r3, #0]
}
 8008de6:	2000      	movs	r0, #0
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20000f84 	.word	0x20000f84

08008df0 <LoRaMacCryptoGetFCntUp>:
    if( currentUp == NULL )
 8008df0:	b130      	cbz	r0, 8008e00 <LoRaMacCryptoGetFCntUp+0x10>
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8008df2:	4b04      	ldr	r3, [pc, #16]	@ (8008e04 <LoRaMacCryptoGetFCntUp+0x14>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008e00:	200a      	movs	r0, #10
}
 8008e02:	4770      	bx	lr
 8008e04:	20000f84 	.word	0x20000f84

08008e08 <LoRaMacCryptoGetFCntDown>:
{
 8008e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e0a:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 8008e0c:	2200      	movs	r2, #0
{
 8008e0e:	460e      	mov	r6, r1
    if( currentDown == NULL )
 8008e10:	461d      	mov	r5, r3
    uint32_t lastDown = 0;
 8008e12:	9201      	str	r2, [sp, #4]
    if( currentDown == NULL )
 8008e14:	b333      	cbz	r3, 8008e64 <LoRaMacCryptoGetFCntDown+0x5c>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8008e16:	a901      	add	r1, sp, #4
 8008e18:	f7ff ff60 	bl	8008cdc <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008e1c:	b9d0      	cbnz	r0, 8008e54 <LoRaMacCryptoGetFCntDown+0x4c>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8008e1e:	9a01      	ldr	r2, [sp, #4]
 8008e20:	1c53      	adds	r3, r2, #1
 8008e22:	d004      	beq.n	8008e2e <LoRaMacCryptoGetFCntDown+0x26>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8008e24:	b293      	uxth	r3, r2
 8008e26:	1ae3      	subs	r3, r4, r3
        if( fCntDiff > 0 )
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	dd10      	ble.n	8008e4e <LoRaMacCryptoGetFCntDown+0x46>
            *currentDown = lastDown + fCntDiff;
 8008e2c:	18d4      	adds	r4, r2, r3
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e68 <LoRaMacCryptoGetFCntDown+0x60>)
        *currentDown = frameFcnt;
 8008e30:	602c      	str	r4, [r5, #0]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	789b      	ldrb	r3, [r3, #2]
 8008e36:	b96b      	cbnz	r3, 8008e54 <LoRaMacCryptoGetFCntDown+0x4c>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8008e38:	1aa4      	subs	r4, r4, r2
 8008e3a:	eb63 0303 	sbc.w	r3, r3, r3
 8008e3e:	42b4      	cmp	r4, r6
 8008e40:	f173 0300 	sbcs.w	r3, r3, #0
 8008e44:	bfac      	ite	ge
 8008e46:	2001      	movge	r0, #1
 8008e48:	2000      	movlt	r0, #0
 8008e4a:	00c0      	lsls	r0, r0, #3
 8008e4c:	e002      	b.n	8008e54 <LoRaMacCryptoGetFCntDown+0x4c>
        else if( fCntDiff == 0 )
 8008e4e:	d103      	bne.n	8008e58 <LoRaMacCryptoGetFCntDown+0x50>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8008e50:	2007      	movs	r0, #7
            *currentDown = lastDown;
 8008e52:	602a      	str	r2, [r5, #0]
}
 8008e54:	b002      	add	sp, #8
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8008e58:	0c13      	lsrs	r3, r2, #16
 8008e5a:	041b      	lsls	r3, r3, #16
 8008e5c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8008e60:	441c      	add	r4, r3
 8008e62:	e7e4      	b.n	8008e2e <LoRaMacCryptoGetFCntDown+0x26>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008e64:	200a      	movs	r0, #10
 8008e66:	e7f5      	b.n	8008e54 <LoRaMacCryptoGetFCntDown+0x4c>
 8008e68:	20000f84 	.word	0x20000f84

08008e6c <LoRaMacCryptoSetMulticastReference>:
    if( multicastList == NULL )
 8008e6c:	b128      	cbz	r0, 8008e7a <LoRaMacCryptoSetMulticastReference+0xe>
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8008e6e:	4b04      	ldr	r3, [pc, #16]	@ (8008e80 <LoRaMacCryptoSetMulticastReference+0x14>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	331c      	adds	r3, #28
 8008e74:	6203      	str	r3, [r0, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 8008e76:	2000      	movs	r0, #0
 8008e78:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008e7a:	200a      	movs	r0, #10
}
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000f84 	.word	0x20000f84

08008e84 <LoRaMacCryptoPrepareJoinRequest>:
{
 8008e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( macMsg == 0 )
 8008e86:	4604      	mov	r4, r0
 8008e88:	b300      	cbz	r0, 8008ecc <LoRaMacCryptoPrepareJoinRequest+0x48>
    uint32_t devNonce = 0;
 8008e8a:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 8008e8c:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 8008e8e:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 8008e90:	f7fc fb20 	bl	80054d4 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8008e94:	4a0f      	ldr	r2, [pc, #60]	@ (8008ed4 <LoRaMacCryptoPrepareJoinRequest+0x50>)
 8008e96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008e9a:	6812      	ldr	r2, [r2, #0]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008e9c:	4620      	mov	r0, r4
    CryptoNvm->DevNonce = devNonce;
 8008e9e:	8093      	strh	r3, [r2, #4]
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8008ea0:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008ea2:	f000 fa4f 	bl	8009344 <LoRaMacSerializerJoinRequest>
 8008ea6:	b110      	cbz	r0, 8008eae <LoRaMacCryptoPrepareJoinRequest+0x2a>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8008ea8:	2011      	movs	r0, #17
}
 8008eaa:	b004      	add	sp, #16
 8008eac:	bd10      	pop	{r4, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8008eae:	f104 0318 	add.w	r3, r4, #24
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	2213      	movs	r2, #19
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	6821      	ldr	r1, [r4, #0]
 8008eba:	f7fc fa25 	bl	8005308 <SecureElementComputeAesCmac>
 8008ebe:	b938      	cbnz	r0, 8008ed0 <LoRaMacCryptoPrepareJoinRequest+0x4c>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fa3f 	bl	8009344 <LoRaMacSerializerJoinRequest>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d0ef      	beq.n	8008eaa <LoRaMacCryptoPrepareJoinRequest+0x26>
 8008eca:	e7ed      	b.n	8008ea8 <LoRaMacCryptoPrepareJoinRequest+0x24>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008ecc:	200a      	movs	r0, #10
 8008ece:	e7ec      	b.n	8008eaa <LoRaMacCryptoPrepareJoinRequest+0x26>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008ed0:	200f      	movs	r0, #15
 8008ed2:	e7ea      	b.n	8008eaa <LoRaMacCryptoPrepareJoinRequest+0x26>
 8008ed4:	20000f84 	.word	0x20000f84

08008ed8 <LoRaMacCryptoSecureMessage>:
{
 8008ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eda:	4605      	mov	r5, r0
    if( macMsg == NULL )
 8008edc:	461c      	mov	r4, r3
{
 8008ede:	b087      	sub	sp, #28
    if( macMsg == NULL )
 8008ee0:	b913      	cbnz	r3, 8008ee8 <LoRaMacCryptoSecureMessage+0x10>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008ee2:	200a      	movs	r0, #10
}
 8008ee4:	b007      	add	sp, #28
 8008ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8008ee8:	4e2d      	ldr	r6, [pc, #180]	@ (8008fa0 <LoRaMacCryptoSecureMessage+0xc8>)
 8008eea:	6833      	ldr	r3, [r6, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	4283      	cmp	r3, r0
 8008ef0:	d854      	bhi.n	8008f9c <LoRaMacCryptoSecureMessage+0xc4>
    if( macMsg->FPort == 0 )
 8008ef2:	f894 2020 	ldrb.w	r2, [r4, #32]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8008ef6:	2a00      	cmp	r2, #0
 8008ef8:	bf0c      	ite	eq
 8008efa:	2202      	moveq	r2, #2
 8008efc:	2203      	movne	r2, #3
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8008efe:	4283      	cmp	r3, r0
 8008f00:	d305      	bcc.n	8008f0e <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 fa52 	bl	80093ac <LoRaMacSerializerData>
 8008f08:	b168      	cbz	r0, 8008f26 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8008f0a:	2011      	movs	r0, #17
 8008f0c:	e7ea      	b.n	8008ee4 <LoRaMacCryptoSecureMessage+0xc>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8008f0e:	2300      	movs	r3, #0
 8008f10:	9001      	str	r0, [sp, #4]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	68a3      	ldr	r3, [r4, #8]
 8008f16:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8008f1a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008f1c:	f7ff fe77 	bl	8008c0e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d0ee      	beq.n	8008f02 <LoRaMacCryptoSecureMessage+0x2a>
 8008f24:	e7de      	b.n	8008ee4 <LoRaMacCryptoSecureMessage+0xc>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8008f26:	7923      	ldrb	r3, [r4, #4]
 8008f28:	6821      	ldr	r1, [r4, #0]
 8008f2a:	3b04      	subs	r3, #4
 8008f2c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8008f30:	68a7      	ldr	r7, [r4, #8]
 8008f32:	b29a      	uxth	r2, r3
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8008f34:	2900      	cmp	r1, #0
 8008f36:	d0d4      	beq.n	8008ee2 <LoRaMacCryptoSecureMessage+0xa>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8008f38:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8008f3c:	d82c      	bhi.n	8008f98 <LoRaMacCryptoSecureMessage+0xc0>
    b0[0] = 0x49;
 8008f3e:	f04f 0e49 	mov.w	lr, #73	@ 0x49
    b0[6] = devAddr & 0xFF;
 8008f42:	f8ad c00e 	strh.w	ip, [sp, #14]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008f46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8008f4a:	0e3f      	lsrs	r7, r7, #24
 8008f4c:	f88d 7011 	strb.w	r7, [sp, #17]
    b0[15] = msgLen & 0xFF;
 8008f50:	f88d 3017 	strb.w	r3, [sp, #23]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8008f54:	0c2f      	lsrs	r7, r5, #16
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8008f56:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
    b0[4] = 0x00;
 8008f5a:	f8ad 000c 	strh.w	r0, [sp, #12]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8008f5e:	f88d 7014 	strb.w	r7, [sp, #20]
    b0[14] = 0x00;
 8008f62:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8008f66:	0e2f      	lsrs	r7, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	a802      	add	r0, sp, #8
 8008f6c:	2302      	movs	r3, #2
    b0[0] = 0x49;
 8008f6e:	f8cd e008 	str.w	lr, [sp, #8]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008f72:	f88d c010 	strb.w	ip, [sp, #16]
    b0[10] = fCnt & 0xFF;
 8008f76:	f8ad 5012 	strh.w	r5, [sp, #18]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8008f7a:	f88d 7015 	strb.w	r7, [sp, #21]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008f7e:	f7fc f9c3 	bl	8005308 <SecureElementComputeAesCmac>
 8008f82:	b108      	cbz	r0, 8008f88 <LoRaMacCryptoSecureMessage+0xb0>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008f84:	200f      	movs	r0, #15
 8008f86:	e7ad      	b.n	8008ee4 <LoRaMacCryptoSecureMessage+0xc>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 fa0f 	bl	80093ac <LoRaMacSerializerData>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1bb      	bne.n	8008f0a <LoRaMacCryptoSecureMessage+0x32>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 8008f92:	6833      	ldr	r3, [r6, #0]
 8008f94:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 8008f96:	e7a5      	b.n	8008ee4 <LoRaMacCryptoSecureMessage+0xc>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8008f98:	200e      	movs	r0, #14
 8008f9a:	e7a3      	b.n	8008ee4 <LoRaMacCryptoSecureMessage+0xc>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8008f9c:	2006      	movs	r0, #6
 8008f9e:	e7a1      	b.n	8008ee4 <LoRaMacCryptoSecureMessage+0xc>
 8008fa0:	20000f84 	.word	0x20000f84

08008fa4 <LoRaMacCryptoUnsecureMessage>:
{
 8008fa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008fa8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008faa:	4680      	mov	r8, r0
 8008fac:	460f      	mov	r7, r1
 8008fae:	4616      	mov	r6, r2
 8008fb0:	461c      	mov	r4, r3
    if( macMsg == 0 )
 8008fb2:	2d00      	cmp	r5, #0
 8008fb4:	d059      	beq.n	800906a <LoRaMacCryptoUnsecureMessage+0xc6>
    uint32_t lastDown = 0;
 8008fb6:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8008fb8:	4610      	mov	r0, r2
 8008fba:	a903      	add	r1, sp, #12
    uint32_t lastDown = 0;
 8008fbc:	9303      	str	r3, [sp, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8008fbe:	f7ff fe8d 	bl	8008cdc <GetLastFcntDown.constprop.0>
 8008fc2:	b118      	cbz	r0, 8008fcc <LoRaMacCryptoUnsecureMessage+0x28>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8008fc4:	2006      	movs	r0, #6
}
 8008fc6:	b004      	add	sp, #16
 8008fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( currentDown > lastDown ) ||
 8008fcc:	9b03      	ldr	r3, [sp, #12]
 8008fce:	429c      	cmp	r4, r3
 8008fd0:	d801      	bhi.n	8008fd6 <LoRaMacCryptoUnsecureMessage+0x32>
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	d1f6      	bne.n	8008fc4 <LoRaMacCryptoUnsecureMessage+0x20>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f000 f94a 	bl	8009270 <LoRaMacParserData>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d146      	bne.n	800906e <LoRaMacCryptoUnsecureMessage+0xca>
        if( KeyAddrList[i].AddrID == addrID )
 8008fe0:	4b26      	ldr	r3, [pc, #152]	@ (800907c <LoRaMacCryptoUnsecureMessage+0xd8>)
 8008fe2:	781a      	ldrb	r2, [r3, #0]
 8008fe4:	4542      	cmp	r2, r8
 8008fe6:	d003      	beq.n	8008ff0 <LoRaMacCryptoUnsecureMessage+0x4c>
 8008fe8:	791a      	ldrb	r2, [r3, #4]
 8008fea:	4542      	cmp	r2, r8
 8008fec:	d141      	bne.n	8009072 <LoRaMacCryptoUnsecureMessage+0xce>
 8008fee:	2001      	movs	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 8008ff0:	68aa      	ldr	r2, [r5, #8]
 8008ff2:	42ba      	cmp	r2, r7
 8008ff4:	d13f      	bne.n	8009076 <LoRaMacCryptoUnsecureMessage+0xd2>
    payloadDecryptionKeyID = curItem->AppSkey;
 8008ff6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008ffa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 8008ffc:	f892 8001 	ldrb.w	r8, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8009000:	7929      	ldrb	r1, [r5, #4]
 8009002:	e9cd 4300 	strd	r4, r3, [sp]
 8009006:	3904      	subs	r1, #4
 8009008:	463b      	mov	r3, r7
 800900a:	7892      	ldrb	r2, [r2, #2]
 800900c:	6828      	ldr	r0, [r5, #0]
 800900e:	b289      	uxth	r1, r1
 8009010:	f7ff fe84 	bl	8008d1c <VerifyCmacB0.constprop.0.isra.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009014:	2800      	cmp	r0, #0
 8009016:	d1d6      	bne.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
    if( macMsg->FPort == 0 )
 8009018:	f895 3020 	ldrb.w	r3, [r5, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800901c:	9401      	str	r4, [sp, #4]
        payloadDecryptionKeyID = NWK_S_KEY;
 800901e:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8009020:	f04f 0301 	mov.w	r3, #1
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	bf14      	ite	ne
 8009028:	4642      	movne	r2, r8
 800902a:	2202      	moveq	r2, #2
 800902c:	463b      	mov	r3, r7
 800902e:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 8009032:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8009034:	f7ff fdeb 	bl	8008c0e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009038:	2800      	cmp	r0, #0
 800903a:	d1c4      	bne.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
    switch( fCntID )
 800903c:	3e01      	subs	r6, #1
 800903e:	2e03      	cmp	r6, #3
 8009040:	d8c1      	bhi.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
 8009042:	e8df f006 	tbb	[pc, r6]
 8009046:	0602      	.short	0x0602
 8009048:	0e0a      	.short	0x0e0a
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800904a:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <LoRaMacCryptoUnsecureMessage+0xdc>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	611c      	str	r4, [r3, #16]
            break;
 8009050:	e7b9      	b.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8009052:	4b0b      	ldr	r3, [pc, #44]	@ (8009080 <LoRaMacCryptoUnsecureMessage+0xdc>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	615c      	str	r4, [r3, #20]
            break;
 8009058:	e7b5      	b.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800905a:	4b09      	ldr	r3, [pc, #36]	@ (8009080 <LoRaMacCryptoUnsecureMessage+0xdc>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	619c      	str	r4, [r3, #24]
            break;
 8009060:	e7b1      	b.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8009062:	4b07      	ldr	r3, [pc, #28]	@ (8009080 <LoRaMacCryptoUnsecureMessage+0xdc>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	61dc      	str	r4, [r3, #28]
            break;
 8009068:	e7ad      	b.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800906a:	200a      	movs	r0, #10
 800906c:	e7ab      	b.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800906e:	2010      	movs	r0, #16
 8009070:	e7a9      	b.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8009072:	200c      	movs	r0, #12
 8009074:	e7a7      	b.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8009076:	2002      	movs	r0, #2
 8009078:	e7a5      	b.n	8008fc6 <LoRaMacCryptoUnsecureMessage+0x22>
 800907a:	bf00      	nop
 800907c:	200000c4 	.word	0x200000c4
 8009080:	20000f84 	.word	0x20000f84

08009084 <LoRaMacCryptoDeriveMcRootKey>:
{
 8009084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( keyID != APP_KEY )
 8009086:	b9b1      	cbnz	r1, 80090b6 <LoRaMacCryptoDeriveMcRootKey+0x32>
    if( versionMinor == 1 )
 8009088:	2801      	cmp	r0, #1
        compBase[0] = 0x20;
 800908a:	bf08      	it	eq
 800908c:	2320      	moveq	r3, #32
    uint8_t compBase[16] = { 0 };
 800908e:	e9cd 1100 	strd	r1, r1, [sp]
 8009092:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8009096:	f04f 0204 	mov.w	r2, #4
 800909a:	f04f 0100 	mov.w	r1, #0
 800909e:	4668      	mov	r0, sp
        compBase[0] = 0x20;
 80090a0:	bf08      	it	eq
 80090a2:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80090a6:	f7fc f9bc 	bl	8005422 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80090aa:	2800      	cmp	r0, #0
 80090ac:	bf18      	it	ne
 80090ae:	200f      	movne	r0, #15
}
 80090b0:	b005      	add	sp, #20
 80090b2:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80090b6:	200b      	movs	r0, #11
 80090b8:	e7fa      	b.n	80090b0 <LoRaMacCryptoDeriveMcRootKey+0x2c>
	...

080090bc <LoRaMacCryptoSetKey>:
{
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4605      	mov	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80090c0:	f7fc f9aa 	bl	8005418 <SecureElementSetKey>
 80090c4:	4604      	mov	r4, r0
 80090c6:	b110      	cbz	r0, 80090ce <LoRaMacCryptoSetKey+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80090c8:	240f      	movs	r4, #15
}
 80090ca:	4620      	mov	r0, r4
 80090cc:	bd38      	pop	{r3, r4, r5, pc}
    if( keyID == APP_KEY )
 80090ce:	2d00      	cmp	r5, #0
 80090d0:	d1fb      	bne.n	80090ca <LoRaMacCryptoSetKey+0xe>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80090d2:	4b06      	ldr	r3, [pc, #24]	@ (80090ec <LoRaMacCryptoSetKey+0x30>)
 80090d4:	4601      	mov	r1, r0
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	7898      	ldrb	r0, [r3, #2]
 80090da:	f7ff ffd3 	bl	8009084 <LoRaMacCryptoDeriveMcRootKey>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d1f2      	bne.n	80090c8 <LoRaMacCryptoSetKey+0xc>
    if( keyID != MC_ROOT_KEY )
 80090e2:	f7ff fde9 	bl	8008cb8 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d0ef      	beq.n	80090ca <LoRaMacCryptoSetKey+0xe>
 80090ea:	e7ed      	b.n	80090c8 <LoRaMacCryptoSetKey+0xc>
 80090ec:	20000f84 	.word	0x20000f84

080090f0 <LoRaMacCryptoHandleJoinAccept>:
{
 80090f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090f4:	4680      	mov	r8, r0
 80090f6:	460d      	mov	r5, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80090f8:	4614      	mov	r4, r2
{
 80090fa:	b08f      	sub	sp, #60	@ 0x3c
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	d05f      	beq.n	80091c0 <LoRaMacCryptoHandleJoinAccept+0xd0>
 8009100:	2900      	cmp	r1, #0
 8009102:	d05d      	beq.n	80091c0 <LoRaMacCryptoHandleJoinAccept+0xd0>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8009104:	2600      	movs	r6, #0
 8009106:	221d      	movs	r2, #29
 8009108:	4631      	mov	r1, r6
 800910a:	a806      	add	r0, sp, #24
 800910c:	9605      	str	r6, [sp, #20]
 800910e:	f003 fb5d 	bl	800c7cc <memset>
    uint8_t versionMinor         = 0;
 8009112:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8009116:	4e2e      	ldr	r6, [pc, #184]	@ (80091d0 <LoRaMacCryptoHandleJoinAccept+0xe0>)
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8009118:	f10d 0914 	add.w	r9, sp, #20
    uint16_t nonce               = CryptoNvm->DevNonce;
 800911c:	6833      	ldr	r3, [r6, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800911e:	4629      	mov	r1, r5
    uint16_t nonce               = CryptoNvm->DevNonce;
 8009120:	889f      	ldrh	r7, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8009122:	f10d 0313 	add.w	r3, sp, #19
 8009126:	9302      	str	r3, [sp, #8]
 8009128:	f8cd 9004 	str.w	r9, [sp, #4]
 800912c:	7923      	ldrb	r3, [r4, #4]
 800912e:	463a      	mov	r2, r7
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	4640      	mov	r0, r8
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	f7fc f990 	bl	800545a <SecureElementProcessJoinAccept>
 800913a:	2800      	cmp	r0, #0
 800913c:	d142      	bne.n	80091c4 <LoRaMacCryptoHandleJoinAccept+0xd4>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800913e:	4649      	mov	r1, r9
 8009140:	7922      	ldrb	r2, [r4, #4]
 8009142:	6820      	ldr	r0, [r4, #0]
 8009144:	f001 fb14 	bl	800a770 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8009148:	4620      	mov	r0, r4
 800914a:	f000 f843 	bl	80091d4 <LoRaMacParserJoinAccept>
 800914e:	4601      	mov	r1, r0
 8009150:	2800      	cmp	r0, #0
 8009152:	d139      	bne.n	80091c8 <LoRaMacCryptoHandleJoinAccept+0xd8>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8009154:	7a25      	ldrb	r5, [r4, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8009156:	79e2      	ldrb	r2, [r4, #7]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8009158:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800915a:	042d      	lsls	r5, r5, #16
 800915c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8009160:	431d      	orrs	r5, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8009162:	6833      	ldr	r3, [r6, #0]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	42aa      	cmp	r2, r5
 8009168:	d030      	beq.n	80091cc <LoRaMacCryptoHandleJoinAccept+0xdc>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800916a:	f89d 0013 	ldrb.w	r0, [sp, #19]
        CryptoNvm->JoinNonce = currentJoinNonce;
 800916e:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8009170:	f7ff ff88 	bl	8009084 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009174:	bb08      	cbnz	r0, 80091ba <LoRaMacCryptoHandleJoinAccept+0xca>
    if( keyID != MC_ROOT_KEY )
 8009176:	f7ff fd9f 	bl	8008cb8 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800917a:	b9f0      	cbnz	r0, 80091ba <LoRaMacCryptoHandleJoinAccept+0xca>
        netID = ( uint32_t )macMsg->NetID[0];
 800917c:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800917e:	7aa2      	ldrb	r2, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8009180:	7ae4      	ldrb	r4, [r4, #11]
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8009182:	4629      	mov	r1, r5
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8009184:	0424      	lsls	r4, r4, #16
 8009186:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800918a:	431c      	orrs	r4, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800918c:	4622      	mov	r2, r4
 800918e:	463b      	mov	r3, r7
 8009190:	2003      	movs	r0, #3
 8009192:	f7ff fd19 	bl	8008bc8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009196:	b980      	cbnz	r0, 80091ba <LoRaMacCryptoHandleJoinAccept+0xca>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8009198:	463b      	mov	r3, r7
 800919a:	4622      	mov	r2, r4
 800919c:	4629      	mov	r1, r5
 800919e:	2002      	movs	r0, #2
 80091a0:	f7ff fd12 	bl	8008bc8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80091a4:	b948      	cbnz	r0, 80091ba <LoRaMacCryptoHandleJoinAccept+0xca>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80091a6:	6833      	ldr	r3, [r6, #0]
 80091a8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    CryptoNvm->FCntList.FCntUp = 0;
 80091ac:	60d8      	str	r0, [r3, #12]
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80091ae:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80091b4:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80091b8:	619a      	str	r2, [r3, #24]
}
 80091ba:	b00f      	add	sp, #60	@ 0x3c
 80091bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80091c0:	200a      	movs	r0, #10
 80091c2:	e7fa      	b.n	80091ba <LoRaMacCryptoHandleJoinAccept+0xca>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80091c4:	200f      	movs	r0, #15
 80091c6:	e7f8      	b.n	80091ba <LoRaMacCryptoHandleJoinAccept+0xca>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80091c8:	2010      	movs	r0, #16
 80091ca:	e7f6      	b.n	80091ba <LoRaMacCryptoHandleJoinAccept+0xca>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80091cc:	2003      	movs	r0, #3
 80091ce:	e7f4      	b.n	80091ba <LoRaMacCryptoHandleJoinAccept+0xca>
 80091d0:	20000f84 	.word	0x20000f84

080091d4 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80091d4:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80091d6:	4604      	mov	r4, r0
 80091d8:	2800      	cmp	r0, #0
 80091da:	d045      	beq.n	8009268 <LoRaMacParserJoinAccept+0x94>
 80091dc:	6801      	ldr	r1, [r0, #0]
 80091de:	2900      	cmp	r1, #0
 80091e0:	d042      	beq.n	8009268 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80091e2:	f811 3b01 	ldrb.w	r3, [r1], #1

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80091e6:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80091e8:	7143      	strb	r3, [r0, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80091ea:	3006      	adds	r0, #6
 80091ec:	f001 fac0 	bl	800a770 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80091f0:	4620      	mov	r0, r4
 80091f2:	f850 1b09 	ldr.w	r1, [r0], #9
 80091f6:	2203      	movs	r2, #3
 80091f8:	3104      	adds	r1, #4
 80091fa:	f001 fab9 	bl	800a770 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80091fe:	6821      	ldr	r1, [r4, #0]
 8009200:	79cb      	ldrb	r3, [r1, #7]
 8009202:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8009204:	7a0a      	ldrb	r2, [r1, #8]
 8009206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800920a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800920c:	7a4a      	ldrb	r2, [r1, #9]
 800920e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009212:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8009214:	7a8a      	ldrb	r2, [r1, #10]
 8009216:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800921a:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800921c:	7acb      	ldrb	r3, [r1, #11]
 800921e:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8009220:	7b0b      	ldrb	r3, [r1, #12]
 8009222:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8009224:	7923      	ldrb	r3, [r4, #4]
 8009226:	2b21      	cmp	r3, #33	@ 0x21
 8009228:	d11a      	bne.n	8009260 <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800922a:	2210      	movs	r2, #16
 800922c:	310d      	adds	r1, #13
 800922e:	f104 0012 	add.w	r0, r4, #18
 8009232:	f001 fa9d 	bl	800a770 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8009236:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8009238:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800923a:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800923c:	5c8b      	ldrb	r3, [r1, r2]
 800923e:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8009240:	5c08      	ldrb	r0, [r1, r0]
 8009242:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009246:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8009248:	1c90      	adds	r0, r2, #2
 800924a:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800924c:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800924e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

    return LORAMAC_PARSER_SUCCESS;
 8009252:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8009254:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8009256:	5c8a      	ldrb	r2, [r1, r2]
 8009258:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800925c:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800925e:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8009260:	2b11      	cmp	r3, #17
 8009262:	dc03      	bgt.n	800926c <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8009264:	220d      	movs	r2, #13
 8009266:	e7e7      	b.n	8009238 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 8009268:	2002      	movs	r0, #2
 800926a:	e7f8      	b.n	800925e <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 800926c:	2001      	movs	r0, #1
 800926e:	e7f6      	b.n	800925e <LoRaMacParserJoinAccept+0x8a>

08009270 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8009270:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8009272:	4604      	mov	r4, r0
 8009274:	2800      	cmp	r0, #0
 8009276:	d063      	beq.n	8009340 <LoRaMacParserData+0xd0>
 8009278:	6801      	ldr	r1, [r0, #0]
 800927a:	2900      	cmp	r1, #0
 800927c:	d060      	beq.n	8009340 <LoRaMacParserData+0xd0>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800927e:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8009280:	3010      	adds	r0, #16
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8009282:	f800 3c0b 	strb.w	r3, [r0, #-11]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8009286:	784b      	ldrb	r3, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8009288:	3108      	adds	r1, #8
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800928a:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800928e:	f811 2c06 	ldrb.w	r2, [r1, #-6]
 8009292:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009296:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800929a:	f811 2c05 	ldrb.w	r2, [r1, #-5]
 800929e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a2:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80092a6:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80092aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80092ae:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80092b2:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80092b6:	f800 3c04 	strb.w	r3, [r0, #-4]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80092ba:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80092be:	f820 3c02 	strh.w	r3, [r0, #-2]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80092c2:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80092c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80092ca:	f810 2c04 	ldrb.w	r2, [r0, #-4]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80092ce:	f820 3c02 	strh.w	r3, [r0, #-2]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80092d2:	f002 020f 	and.w	r2, r2, #15
 80092d6:	f001 fa4b 	bl	800a770 <memcpy1>
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80092da:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80092dc:	7b23      	ldrb	r3, [r4, #12]
    macMsg->FPort = 0;
 80092de:	f884 2020 	strb.w	r2, [r4, #32]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80092e2:	f003 030f 	and.w	r3, r3, #15
    macMsg->FRMPayloadSize = 0;
 80092e6:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80092ea:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80092ec:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80092f0:	1a11      	subs	r1, r2, r0
 80092f2:	2904      	cmp	r1, #4
 80092f4:	dd0d      	ble.n	8009312 <LoRaMacParserData+0xa2>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80092f6:	6821      	ldr	r1, [r4, #0]
 80092f8:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80092fa:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80092fc:	5c08      	ldrb	r0, [r1, r0]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80092fe:	1ad2      	subs	r2, r2, r3
 8009300:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8009302:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8009306:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800930a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800930c:	4419      	add	r1, r3
 800930e:	f001 fa2f 	bl	800a770 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 8009312:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8009314:	7923      	ldrb	r3, [r4, #4]
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	441a      	add	r2, r3
 800931a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800931e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8009320:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8009324:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009328:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800932a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800932e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009332:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8009334:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8009338:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800933c:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800933e:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 8009340:	2002      	movs	r0, #2
 8009342:	e7fc      	b.n	800933e <LoRaMacParserData+0xce>

08009344 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8009344:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8009346:	4604      	mov	r4, r0
 8009348:	b360      	cbz	r0, 80093a4 <LoRaMacSerializerJoinRequest+0x60>
 800934a:	6803      	ldr	r3, [r0, #0]
 800934c:	b353      	cbz	r3, 80093a4 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800934e:	7902      	ldrb	r2, [r0, #4]
 8009350:	2a16      	cmp	r2, #22
 8009352:	d929      	bls.n	80093a8 <LoRaMacSerializerJoinRequest+0x64>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009354:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8009356:	7942      	ldrb	r2, [r0, #5]
 8009358:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800935a:	f851 0b06 	ldr.w	r0, [r1], #6
 800935e:	2208      	movs	r2, #8
 8009360:	3001      	adds	r0, #1
 8009362:	f001 fa0f 	bl	800a784 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8009366:	4621      	mov	r1, r4
 8009368:	f851 0b0e 	ldr.w	r0, [r1], #14
 800936c:	2208      	movs	r2, #8
 800936e:	3009      	adds	r0, #9
 8009370:	f001 fa08 	bl	800a784 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	8ae2      	ldrh	r2, [r4, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 8009378:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800937a:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800937c:	8ae3      	ldrh	r3, [r4, #22]
 800937e:	6822      	ldr	r2, [r4, #0]
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	69a2      	ldr	r2, [r4, #24]
 8009388:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800938a:	69a3      	ldr	r3, [r4, #24]
 800938c:	6822      	ldr	r2, [r4, #0]
 800938e:	0a1b      	lsrs	r3, r3, #8
 8009390:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	8b62      	ldrh	r2, [r4, #26]
 8009396:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	7ee2      	ldrb	r2, [r4, #27]
 800939c:	759a      	strb	r2, [r3, #22]
    macMsg->BufSize = bufItr;
 800939e:	2317      	movs	r3, #23
 80093a0:	7123      	strb	r3, [r4, #4]
}
 80093a2:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80093a4:	2001      	movs	r0, #1
 80093a6:	e7fc      	b.n	80093a2 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80093a8:	2002      	movs	r0, #2
 80093aa:	e7fa      	b.n	80093a2 <LoRaMacSerializerJoinRequest+0x5e>

080093ac <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80093ac:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80093ae:	4604      	mov	r4, r0
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d063      	beq.n	800947c <LoRaMacSerializerData+0xd0>
 80093b4:	6801      	ldr	r1, [r0, #0]
 80093b6:	2900      	cmp	r1, #0
 80093b8:	d060      	beq.n	800947c <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80093ba:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80093bc:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80093c0:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 80093c4:	2a00      	cmp	r2, #0
 80093c6:	d157      	bne.n	8009478 <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80093c8:	3308      	adds	r3, #8
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
 80093ca:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80093cc:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
 80093ce:	4413      	add	r3, r2
 80093d0:	4298      	cmp	r0, r3
 80093d2:	d355      	bcc.n	8009480 <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80093d4:	7963      	ldrb	r3, [r4, #5]
 80093d6:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80093d8:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	68a2      	ldr	r2, [r4, #8]
 80093de:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80093e0:	68a3      	ldr	r3, [r4, #8]
 80093e2:	6822      	ldr	r2, [r4, #0]
 80093e4:	0a1b      	lsrs	r3, r3, #8
 80093e6:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	8962      	ldrh	r2, [r4, #10]
 80093ec:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	7ae2      	ldrb	r2, [r4, #11]
 80093f2:	711a      	strb	r2, [r3, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	7b22      	ldrb	r2, [r4, #12]
 80093f8:	715a      	strb	r2, [r3, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	89e2      	ldrh	r2, [r4, #14]
 80093fe:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8009400:	89e3      	ldrh	r3, [r4, #14]
 8009402:	6822      	ldr	r2, [r4, #0]
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8009408:	7b22      	ldrb	r2, [r4, #12]
 800940a:	f851 0b10 	ldr.w	r0, [r1], #16
 800940e:	f002 020f 	and.w	r2, r2, #15
 8009412:	3008      	adds	r0, #8
 8009414:	f001 f9ac 	bl	800a770 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8009418:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800941a:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800941e:	f003 030f 	and.w	r3, r3, #15
 8009422:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 8009426:	b12a      	cbz	r2, 8009434 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8009428:	f894 1020 	ldrb.w	r1, [r4, #32]
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	5551      	strb	r1, [r2, r5]
 8009430:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800943a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800943c:	4428      	add	r0, r5
 800943e:	f001 f997 	bl	800a770 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8009442:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8009446:	6822      	ldr	r2, [r4, #0]
 8009448:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800944a:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800944c:	54d1      	strb	r1, [r2, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800944e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009450:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8009452:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8009454:	b292      	uxth	r2, r2
 8009456:	0a09      	lsrs	r1, r1, #8
 8009458:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800945a:	6821      	ldr	r1, [r4, #0]
 800945c:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800945e:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8009460:	b292      	uxth	r2, r2
 8009462:	5488      	strb	r0, [r1, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8009464:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8009468:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800946a:	6821      	ldr	r1, [r4, #0]
 800946c:	b292      	uxth	r2, r2
 800946e:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 8009470:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8009472:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 8009474:	7123      	strb	r3, [r4, #4]
}
 8009476:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8009478:	3309      	adds	r3, #9
 800947a:	e7a6      	b.n	80093ca <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800947c:	2001      	movs	r0, #1
 800947e:	e7fa      	b.n	8009476 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8009480:	2002      	movs	r0, #2
 8009482:	e7f8      	b.n	8009476 <LoRaMacSerializerData+0xca>

08009484 <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 8009484:	1f43      	subs	r3, r0, #5
 8009486:	4258      	negs	r0, r3
 8009488:	4158      	adcs	r0, r3
 800948a:	4770      	bx	lr

0800948c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    PhyParam_t phyParam = { 0 };
    switch( region )
 800948c:	2805      	cmp	r0, #5
{
 800948e:	b082      	sub	sp, #8
    switch( region )
 8009490:	d103      	bne.n	800949a <RegionGetPhyParam+0xe>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8009492:	4608      	mov	r0, r1
        default:
        {
            return phyParam;
        }
    }
}
 8009494:	b002      	add	sp, #8
        EU868_GET_PHY_PARAM( );
 8009496:	f000 bc57 	b.w	8009d48 <RegionEU868GetPhyParam>
}
 800949a:	2000      	movs	r0, #0
 800949c:	b002      	add	sp, #8
 800949e:	4770      	bx	lr

080094a0 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 80094a0:	2805      	cmp	r0, #5
 80094a2:	d102      	bne.n	80094aa <RegionSetBandTxDone+0xa>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80094a4:	4608      	mov	r0, r1
 80094a6:	f000 bceb 	b.w	8009e80 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 80094aa:	4770      	bx	lr

080094ac <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 80094ac:	2805      	cmp	r0, #5
 80094ae:	d102      	bne.n	80094b6 <RegionInitDefaults+0xa>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80094b0:	4608      	mov	r0, r1
 80094b2:	f000 bcfd 	b.w	8009eb0 <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 80094b6:	4770      	bx	lr

080094b8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80094b8:	4603      	mov	r3, r0
    switch( region )
 80094ba:	2b05      	cmp	r3, #5
{
 80094bc:	4608      	mov	r0, r1
 80094be:	4611      	mov	r1, r2
    switch( region )
 80094c0:	d101      	bne.n	80094c6 <RegionVerify+0xe>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80094c2:	f000 bd57 	b.w	8009f74 <RegionEU868Verify>
        default:
        {
            return false;
        }
    }
}
 80094c6:	2000      	movs	r0, #0
 80094c8:	4770      	bx	lr

080094ca <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 80094ca:	2805      	cmp	r0, #5
 80094cc:	d102      	bne.n	80094d4 <RegionApplyCFList+0xa>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80094ce:	4608      	mov	r0, r1
 80094d0:	f001 b89e 	b.w	800a610 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 80094d4:	4770      	bx	lr

080094d6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 80094d6:	2805      	cmp	r0, #5
 80094d8:	d102      	bne.n	80094e0 <RegionChanMaskSet+0xa>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80094da:	4608      	mov	r0, r1
 80094dc:	f000 bd70 	b.w	8009fc0 <RegionEU868ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 80094e0:	2000      	movs	r0, #0
 80094e2:	4770      	bx	lr

080094e4 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80094e4:	b410      	push	{r4}
 80094e6:	4604      	mov	r4, r0
    switch( region )
 80094e8:	2c05      	cmp	r4, #5
{
 80094ea:	4608      	mov	r0, r1
 80094ec:	4611      	mov	r1, r2
 80094ee:	461a      	mov	r2, r3
 80094f0:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 80094f2:	d102      	bne.n	80094fa <RegionComputeRxWindowParameters+0x16>
        default:
        {
            break;
        }
    }
}
 80094f4:	bc10      	pop	{r4}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80094f6:	f000 bd7d 	b.w	8009ff4 <RegionEU868ComputeRxWindowParameters>
}
 80094fa:	bc10      	pop	{r4}
 80094fc:	4770      	bx	lr

080094fe <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80094fe:	4603      	mov	r3, r0
    switch( region )
 8009500:	2b05      	cmp	r3, #5
{
 8009502:	4608      	mov	r0, r1
 8009504:	4611      	mov	r1, r2
    switch( region )
 8009506:	d101      	bne.n	800950c <RegionRxConfig+0xe>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8009508:	f000 bda6 	b.w	800a058 <RegionEU868RxConfig>
        default:
        {
            return false;
        }
    }
}
 800950c:	2000      	movs	r0, #0
 800950e:	4770      	bx	lr

08009510 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8009510:	b410      	push	{r4}
 8009512:	4604      	mov	r4, r0
    switch( region )
 8009514:	2c05      	cmp	r4, #5
{
 8009516:	4608      	mov	r0, r1
 8009518:	4611      	mov	r1, r2
 800951a:	461a      	mov	r2, r3
    switch( region )
 800951c:	d102      	bne.n	8009524 <RegionTxConfig+0x14>
        default:
        {
            return false;
        }
    }
}
 800951e:	bc10      	pop	{r4}
        EU868_TX_CONFIG( );
 8009520:	f000 be12 	b.w	800a148 <RegionEU868TxConfig>
}
 8009524:	2000      	movs	r0, #0
 8009526:	bc10      	pop	{r4}
 8009528:	4770      	bx	lr

0800952a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800952a:	b430      	push	{r4, r5}
 800952c:	4605      	mov	r5, r0
    switch( region )
 800952e:	2d05      	cmp	r5, #5
{
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	461a      	mov	r2, r3
 8009536:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    switch( region )
 800953a:	d103      	bne.n	8009544 <RegionLinkAdrReq+0x1a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 800953c:	9402      	str	r4, [sp, #8]
        default:
        {
            return 0;
        }
    }
}
 800953e:	bc30      	pop	{r4, r5}
        EU868_LINK_ADR_REQ( );
 8009540:	f000 be86 	b.w	800a250 <RegionEU868LinkAdrReq>
}
 8009544:	2000      	movs	r0, #0
 8009546:	bc30      	pop	{r4, r5}
 8009548:	4770      	bx	lr

0800954a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800954a:	2805      	cmp	r0, #5
 800954c:	d102      	bne.n	8009554 <RegionRxParamSetupReq+0xa>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 800954e:	4608      	mov	r0, r1
 8009550:	f000 bf2c 	b.w	800a3ac <RegionEU868RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 8009554:	2000      	movs	r0, #0
 8009556:	4770      	bx	lr

08009558 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 8009558:	2805      	cmp	r0, #5
 800955a:	d102      	bne.n	8009562 <RegionNewChannelReq+0xa>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 800955c:	4608      	mov	r0, r1
 800955e:	f001 b895 	b.w	800a68c <RegionEU868NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 8009562:	2000      	movs	r0, #0
 8009564:	4770      	bx	lr

08009566 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 8009566:	2805      	cmp	r0, #5
 8009568:	d102      	bne.n	8009570 <RegionTxParamSetupReq+0xa>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 800956a:	4608      	mov	r0, r1
 800956c:	f000 bf3c 	b.w	800a3e8 <RegionEU868TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 8009570:	2000      	movs	r0, #0
 8009572:	4770      	bx	lr

08009574 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 8009574:	2805      	cmp	r0, #5
 8009576:	d102      	bne.n	800957e <RegionDlChannelReq+0xa>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8009578:	4608      	mov	r0, r1
 800957a:	f000 bf39 	b.w	800a3f0 <RegionEU868DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800957e:	2000      	movs	r0, #0
 8009580:	4770      	bx	lr

08009582 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8009582:	4603      	mov	r3, r0
    switch( region )
 8009584:	2b05      	cmp	r3, #5
{
 8009586:	4608      	mov	r0, r1
 8009588:	4611      	mov	r1, r2
    switch( region )
 800958a:	d101      	bne.n	8009590 <RegionAlternateDr+0xe>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 800958c:	f000 bf4e 	b.w	800a42c <RegionEU868AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 8009590:	2000      	movs	r0, #0
 8009592:	4770      	bx	lr

08009594 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8009594:	b410      	push	{r4}
 8009596:	4604      	mov	r4, r0
    switch( region )
 8009598:	2c05      	cmp	r4, #5
{
 800959a:	4608      	mov	r0, r1
 800959c:	4611      	mov	r1, r2
 800959e:	461a      	mov	r2, r3
 80095a0:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 80095a2:	d102      	bne.n	80095aa <RegionNextChannel+0x16>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 80095a4:	bc10      	pop	{r4}
        EU868_NEXT_CHANNEL( );
 80095a6:	f000 bf43 	b.w	800a430 <RegionEU868NextChannel>
}
 80095aa:	2009      	movs	r0, #9
 80095ac:	bc10      	pop	{r4}
 80095ae:	4770      	bx	lr

080095b0 <RegionSetContinuousWave>:
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 80095b0:	2805      	cmp	r0, #5
 80095b2:	d102      	bne.n	80095ba <RegionSetContinuousWave+0xa>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80095b4:	4608      	mov	r0, r1
 80095b6:	f001 b88b 	b.w	800a6d0 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 80095ba:	4770      	bx	lr

080095bc <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80095bc:	b410      	push	{r4}
 80095be:	4604      	mov	r4, r0
    switch( region )
 80095c0:	2c05      	cmp	r4, #5
{
 80095c2:	4608      	mov	r0, r1
 80095c4:	4611      	mov	r1, r2
 80095c6:	461a      	mov	r2, r3
    switch( region )
 80095c8:	d102      	bne.n	80095d0 <RegionApplyDrOffset+0x14>
        default:
        {
            return dr;
        }
    }
}
 80095ca:	bc10      	pop	{r4}
        EU868_APPLY_DR_OFFSET( );
 80095cc:	f001 b8a8 	b.w	800a720 <RegionEU868ApplyDrOffset>
}
 80095d0:	b2c8      	uxtb	r0, r1
 80095d2:	bc10      	pop	{r4}
 80095d4:	4770      	bx	lr
	...

080095d8 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 80095d8:	4800      	ldr	r0, [pc, #0]	@ (80095dc <RegionGetVersion+0x4>)
 80095da:	4770      	bx	lr
 80095dc:	01000300 	.word	0x01000300

080095e0 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80095e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 80095e4:	429a      	cmp	r2, r3
{
 80095e6:	9e07      	ldr	r6, [sp, #28]
    if( ( value >= min ) && ( value <= max ) )
 80095e8:	db03      	blt.n	80095f2 <RegionCommonChanVerifyDr+0x12>
 80095ea:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	dd1f      	ble.n	8009632 <RegionCommonChanVerifyDr+0x52>
        return false;
 80095f2:	2000      	movs	r0, #0
}
 80095f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80095f8:	2500      	movs	r5, #0
 80095fa:	fb0c 6303 	mla	r3, ip, r3, r6
 80095fe:	f831 e014 	ldrh.w	lr, [r1, r4, lsl #1]
 8009602:	fa4e f705 	asr.w	r7, lr, r5
 8009606:	07ff      	lsls	r7, r7, #31
 8009608:	d507      	bpl.n	800961a <RegionCommonChanVerifyDr+0x3a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800960a:	7a1f      	ldrb	r7, [r3, #8]
    if( ( value >= min ) && ( value <= max ) )
 800960c:	f007 080f 	and.w	r8, r7, #15
 8009610:	4590      	cmp	r8, r2
 8009612:	dc02      	bgt.n	800961a <RegionCommonChanVerifyDr+0x3a>
 8009614:	ebb2 1f17 	cmp.w	r2, r7, lsr #4
 8009618:	dd0f      	ble.n	800963a <RegionCommonChanVerifyDr+0x5a>
        for( uint8_t j = 0; j < 16; j++ )
 800961a:	3501      	adds	r5, #1
 800961c:	2d10      	cmp	r5, #16
 800961e:	f103 030c 	add.w	r3, r3, #12
 8009622:	d1ee      	bne.n	8009602 <RegionCommonChanVerifyDr+0x22>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8009624:	3401      	adds	r4, #1
 8009626:	b2e4      	uxtb	r4, r4
 8009628:	0123      	lsls	r3, r4, #4
 800962a:	b2db      	uxtb	r3, r3
 800962c:	4298      	cmp	r0, r3
 800962e:	d8e3      	bhi.n	80095f8 <RegionCommonChanVerifyDr+0x18>
 8009630:	e7df      	b.n	80095f2 <RegionCommonChanVerifyDr+0x12>
 8009632:	2400      	movs	r4, #0
 8009634:	f04f 0c0c 	mov.w	ip, #12
 8009638:	e7f6      	b.n	8009628 <RegionCommonChanVerifyDr+0x48>
                    return true;
 800963a:	2001      	movs	r0, #1
 800963c:	e7da      	b.n	80095f4 <RegionCommonChanVerifyDr+0x14>

0800963e <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 800963e:	4288      	cmp	r0, r1
 8009640:	db04      	blt.n	800964c <RegionCommonValueInRange+0xe>
 8009642:	4290      	cmp	r0, r2
 8009644:	bfcc      	ite	gt
 8009646:	2000      	movgt	r0, #0
 8009648:	2001      	movle	r0, #1
 800964a:	4770      	bx	lr
    {
        return 1;
    }
    return 0;
 800964c:	2000      	movs	r0, #0
}
 800964e:	4770      	bx	lr

08009650 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8009650:	4603      	mov	r3, r0
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8009652:	0910      	lsrs	r0, r2, #4
 8009654:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
{
 8009658:	b510      	push	{r4, lr}
    uint8_t index = id / 16;
 800965a:	ea4f 1411 	mov.w	r4, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800965e:	d30d      	bcc.n	800967c <RegionCommonChanDisable+0x2c>
 8009660:	4291      	cmp	r1, r2
 8009662:	d20b      	bcs.n	800967c <RegionCommonChanDisable+0x2c>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8009664:	2001      	movs	r0, #1
 8009666:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800966a:	f001 010f 	and.w	r1, r1, #15
 800966e:	fa00 f101 	lsl.w	r1, r0, r1
 8009672:	ea22 0201 	bic.w	r2, r2, r1
 8009676:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

    return true;
}
 800967a:	bd10      	pop	{r4, pc}
        return false;
 800967c:	2000      	movs	r0, #0
 800967e:	e7fc      	b.n	800967a <RegionCommonChanDisable+0x2a>

08009680 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8009680:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8009682:	b128      	cbz	r0, 8009690 <RegionCommonCountChannels+0x10>
 8009684:	eb00 0541 	add.w	r5, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8009688:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
 800968a:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800968c:	4291      	cmp	r1, r2
 800968e:	d300      	bcc.n	8009692 <RegionCommonCountChannels+0x12>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 8009690:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 8009692:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 8009694:	4623      	mov	r3, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 8009696:	f835 cb02 	ldrh.w	ip, [r5], #2
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800969a:	fa07 f604 	lsl.w	r6, r7, r4
 800969e:	ea36 060c 	bics.w	r6, r6, ip
            nbActiveBits++;
 80096a2:	bf08      	it	eq
 80096a4:	3301      	addeq	r3, #1
    for( uint8_t j = 0; j < nbBits; j++ )
 80096a6:	f104 0401 	add.w	r4, r4, #1
            nbActiveBits++;
 80096aa:	bf08      	it	eq
 80096ac:	b2db      	uxtbeq	r3, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 80096ae:	2c10      	cmp	r4, #16
 80096b0:	d1f3      	bne.n	800969a <RegionCommonCountChannels+0x1a>
        nbChannels += CountChannels( channelsMask[i], 16 );
 80096b2:	4418      	add	r0, r3
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80096b4:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 80096b6:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80096b8:	b2c9      	uxtb	r1, r1
 80096ba:	e7e7      	b.n	800968c <RegionCommonCountChannels+0xc>

080096bc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80096bc:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80096be:	b100      	cbz	r0, 80096c2 <RegionCommonChanMaskCopy+0x6>
 80096c0:	b949      	cbnz	r1, 80096d6 <RegionCommonChanMaskCopy+0x1a>
        for( uint8_t i = 0; i < len; i++ )
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 80096c2:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 80096c4:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 80096c8:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 80096cc:	3301      	adds	r3, #1
 80096ce:	b2dc      	uxtb	r4, r3
 80096d0:	42a2      	cmp	r2, r4
 80096d2:	d8f7      	bhi.n	80096c4 <RegionCommonChanMaskCopy+0x8>
 80096d4:	e7f5      	b.n	80096c2 <RegionCommonChanMaskCopy+0x6>
 80096d6:	2300      	movs	r3, #0
 80096d8:	e7f9      	b.n	80096ce <RegionCommonChanMaskCopy+0x12>

080096da <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80096da:	b082      	sub	sp, #8
 80096dc:	b530      	push	{r4, r5, lr}
 80096de:	8804      	ldrh	r4, [r0, #0]
 80096e0:	9304      	str	r3, [sp, #16]
    if( joined == false )
 80096e2:	b9d2      	cbnz	r2, 800971a <RegionCommonSetBandTxDone+0x40>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80096e4:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80096e8:	d315      	bcc.n	8009716 <RegionCommonSetBandTxDone+0x3c>
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80096ea:	f649 25af 	movw	r5, #39599	@ 0x9aaf
 80096ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80096f2:	42ab      	cmp	r3, r5
 80096f4:	bf98      	it	ls
 80096f6:	f44f 727a 	movls.w	r2, #1000	@ 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80096fa:	4294      	cmp	r4, r2
 80096fc:	bf38      	it	cc
 80096fe:	4614      	movcc	r4, r2
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8009700:	4361      	muls	r1, r4
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8009702:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8009706:	68c3      	ldr	r3, [r0, #12]
}
 8009708:	b002      	add	sp, #8
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800970a:	428b      	cmp	r3, r1
        band->TimeCredits = 0;
 800970c:	bf94      	ite	ls
 800970e:	2300      	movls	r3, #0
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8009710:	1a5b      	subhi	r3, r3, r1
 8009712:	60c3      	str	r3, [r0, #12]
}
 8009714:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8009716:	2264      	movs	r2, #100	@ 0x64
 8009718:	e7ef      	b.n	80096fa <RegionCommonSetBandTxDone+0x20>
    if( dutyCycle == 0 )
 800971a:	2c01      	cmp	r4, #1
 800971c:	bf38      	it	cc
 800971e:	2401      	movcc	r4, #1
 8009720:	e7ee      	b.n	8009700 <RegionCommonSetBandTxDone+0x26>
	...

08009724 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8009724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	b08f      	sub	sp, #60	@ 0x3c
 800972a:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800972c:	9303      	str	r3, [sp, #12]
 800972e:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 8009732:	4615      	mov	r5, r2
 8009734:	460c      	mov	r4, r1
 8009736:	9307      	str	r3, [sp, #28]
 8009738:	4680      	mov	r8, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800973a:	f002 fdfd 	bl	800c338 <UTIL_TIMER_GetCurrentTime>
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800973e:	4a6a      	ldr	r2, [pc, #424]	@ (80098e8 <RegionCommonUpdateBandTimeOff+0x1c4>)
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8009740:	f5a7 33f6 	sub.w	r3, r7, #125952	@ 0x1ec00
 8009744:	3b30      	subs	r3, #48	@ 0x30
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8009746:	fbb3 f3f2 	udiv	r3, r3, r2
 800974a:	4353      	muls	r3, r2
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800974c:	f503 3bf6 	add.w	fp, r3, #125952	@ 0x1ec00
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	2318      	movs	r3, #24
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8009754:	f04f 3aff 	mov.w	sl, #4294967295
 8009758:	fb03 4305 	mla	r3, r3, r5, r4
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800975c:	2500      	movs	r5, #0
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800975e:	9005      	str	r0, [sp, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8009760:	f10b 0b30 	add.w	fp, fp, #48	@ 0x30
 8009764:	9306      	str	r3, [sp, #24]

    for( uint8_t i = 0; i < nbBands; i++ )
 8009766:	9b06      	ldr	r3, [sp, #24]
 8009768:	429c      	cmp	r4, r3
 800976a:	d107      	bne.n	800977c <RegionCommonUpdateBandTimeOff+0x58>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800976c:	2d00      	cmp	r5, #0
    }
    return minTimeToWait;
}
 800976e:	bf14      	ite	ne
 8009770:	4650      	movne	r0, sl
 8009772:	f04f 30ff 	moveq.w	r0, #4294967295
 8009776:	b00f      	add	sp, #60	@ 0x3c
 8009778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800977c:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8009780:	4638      	mov	r0, r7
 8009782:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009786:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009788:	9719      	str	r7, [sp, #100]	@ 0x64
 800978a:	9708      	str	r7, [sp, #32]
 800978c:	f002 fd66 	bl	800c25c <SysTimeToMs>
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8009790:	8826      	ldrh	r6, [r4, #0]
    if( joined == false )
 8009792:	f1b8 0f00 	cmp.w	r8, #0
 8009796:	d15f      	bne.n	8009858 <RegionCommonUpdateBandTimeOff+0x134>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8009798:	f5b7 6f61 	cmp.w	r7, #3600	@ 0xe10
 800979c:	d35a      	bcc.n	8009854 <RegionCommonUpdateBandTimeOff+0x130>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800979e:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80097a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80097a6:	4297      	cmp	r7, r2
 80097a8:	bf98      	it	ls
 80097aa:	f44f 737a 	movls.w	r3, #1000	@ 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80097ae:	429e      	cmp	r6, r3
 80097b0:	bf38      	it	cc
 80097b2:	461e      	movcc	r6, r3
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80097b4:	2e64      	cmp	r6, #100	@ 0x64
 80097b6:	d159      	bne.n	800986c <RegionCommonUpdateBandTimeOff+0x148>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80097b8:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 80098ec <RegionCommonUpdateBandTimeOff+0x1c8>
            band->LastMaxCreditAssignTime = elapsedTime;
 80097bc:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80097be:	68a1      	ldr	r1, [r4, #8]
 80097c0:	a80c      	add	r0, sp, #48	@ 0x30
 80097c2:	f002 fd6b 	bl	800c29c <SysTimeFromMs>
 80097c6:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80097ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097cc:	a80a      	add	r0, sp, #40	@ 0x28
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097d2:	f002 fcc4 	bl	800c15e <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80097d6:	9a03      	ldr	r2, [sp, #12]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80097d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80097da:	b90a      	cbnz	r2, 80097e0 <RegionCommonUpdateBandTimeOff+0xbc>
 80097dc:	9a07      	ldr	r2, [sp, #28]
 80097de:	b12a      	cbz	r2, 80097ec <RegionCommonUpdateBandTimeOff+0xc8>
 80097e0:	6922      	ldr	r2, [r4, #16]
 80097e2:	454a      	cmp	r2, r9
 80097e4:	d102      	bne.n	80097ec <RegionCommonUpdateBandTimeOff+0xc8>
            ( band->MaxTimeCredits != maxCredits ) ||
 80097e6:	4a42      	ldr	r2, [pc, #264]	@ (80098f0 <RegionCommonUpdateBandTimeOff+0x1cc>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d90e      	bls.n	800980a <RegionCommonUpdateBandTimeOff+0xe6>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80097ec:	4b41      	ldr	r3, [pc, #260]	@ (80098f4 <RegionCommonUpdateBandTimeOff+0x1d0>)
            band->TimeCredits = maxCredits;
 80097ee:	f8c4 900c 	str.w	r9, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80097f2:	429f      	cmp	r7, r3
 80097f4:	d909      	bls.n	800980a <RegionCommonUpdateBandTimeOff+0xe6>
                timeDiff.SubSeconds = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80097fc:	4658      	mov	r0, fp
 80097fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009800:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009804:	f002 fd2a 	bl	800c25c <SysTimeToMs>
 8009808:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 800980a:	6860      	ldr	r0, [r4, #4]
 800980c:	b908      	cbnz	r0, 8009812 <RegionCommonUpdateBandTimeOff+0xee>
        band->TimeCredits = maxCredits;
 800980e:	f8c4 900c 	str.w	r9, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 8009812:	f8c4 9010 	str.w	r9, [r4, #16]
    if( joined == true )
 8009816:	f1b8 0f00 	cmp.w	r8, #0
 800981a:	d004      	beq.n	8009826 <RegionCommonUpdateBandTimeOff+0x102>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800981c:	f002 fd96 	bl	800c34c <UTIL_TIMER_GetElapsedTime>
 8009820:	68e3      	ldr	r3, [r4, #12]
 8009822:	4403      	add	r3, r0
 8009824:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 8009826:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800982a:	4293      	cmp	r3, r2
    band->LastBandUpdateTime = currentTime;
 800982c:	9b05      	ldr	r3, [sp, #20]
        band->TimeCredits = band->MaxTimeCredits;
 800982e:	bf88      	it	hi
 8009830:	60e2      	strhi	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 8009832:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8009834:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8009836:	68e1      	ldr	r1, [r4, #12]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8009838:	4373      	muls	r3, r6
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800983a:	4299      	cmp	r1, r3
 800983c:	d804      	bhi.n	8009848 <RegionCommonUpdateBandTimeOff+0x124>
 800983e:	9803      	ldr	r0, [sp, #12]
 8009840:	b9e8      	cbnz	r0, 800987e <RegionCommonUpdateBandTimeOff+0x15a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8009842:	f1b8 0f00 	cmp.w	r8, #0
 8009846:	d01a      	beq.n	800987e <RegionCommonUpdateBandTimeOff+0x15a>
            bands[i].ReadyForTransmission = true;
 8009848:	2301      	movs	r3, #1
            validBands++;
 800984a:	441d      	add	r5, r3
            bands[i].ReadyForTransmission = true;
 800984c:	7523      	strb	r3, [r4, #20]
            validBands++;
 800984e:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < nbBands; i++ )
 8009850:	3418      	adds	r4, #24
 8009852:	e788      	b.n	8009766 <RegionCommonUpdateBandTimeOff+0x42>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8009854:	2364      	movs	r3, #100	@ 0x64
 8009856:	e7aa      	b.n	80097ae <RegionCommonUpdateBandTimeOff+0x8a>
        if( dutyCycleEnabled == false )
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	b90b      	cbnz	r3, 8009860 <RegionCommonUpdateBandTimeOff+0x13c>
            band->TimeCredits = maxCredits;
 800985c:	4b23      	ldr	r3, [pc, #140]	@ (80098ec <RegionCommonUpdateBandTimeOff+0x1c8>)
 800985e:	60e3      	str	r3, [r4, #12]
 8009860:	2e01      	cmp	r6, #1
 8009862:	bf38      	it	cc
 8009864:	2601      	movcc	r6, #1
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8009866:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 80098ec <RegionCommonUpdateBandTimeOff+0x1c8>
 800986a:	e7ce      	b.n	800980a <RegionCommonUpdateBandTimeOff+0xe6>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800986c:	f5b6 7f7a 	cmp.w	r6, #1000	@ 0x3e8
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8009870:	bf0a      	itet	eq
 8009872:	f8df 9084 	ldreq.w	r9, [pc, #132]	@ 80098f8 <RegionCommonUpdateBandTimeOff+0x1d4>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8009876:	f8df 9084 	ldrne.w	r9, [pc, #132]	@ 80098fc <RegionCommonUpdateBandTimeOff+0x1d8>
            band->LastMaxCreditAssignTime = elapsedTime;
 800987a:	60a0      	streq	r0, [r4, #8]
 800987c:	e79f      	b.n	80097be <RegionCommonUpdateBandTimeOff+0x9a>
            bands[i].ReadyForTransmission = false;
 800987e:	2000      	movs	r0, #0
            if( bands[i].MaxTimeCredits > creditCosts )
 8009880:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
 8009882:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 8009884:	d205      	bcs.n	8009892 <RegionCommonUpdateBandTimeOff+0x16e>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8009886:	1a5b      	subs	r3, r3, r1
 8009888:	459a      	cmp	sl, r3
 800988a:	bf28      	it	cs
 800988c:	469a      	movcs	sl, r3
                validBands++;
 800988e:	3501      	adds	r5, #1
 8009890:	b2ed      	uxtb	r5, r5
            if( joined == false )
 8009892:	f1b8 0f00 	cmp.w	r8, #0
 8009896:	d1db      	bne.n	8009850 <RegionCommonUpdateBandTimeOff+0x12c>
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8009898:	2e64      	cmp	r6, #100	@ 0x64
 800989a:	4a19      	ldr	r2, [pc, #100]	@ (8009900 <RegionCommonUpdateBandTimeOff+0x1dc>)
                SysTime_t backoffTimeRange = {
 800989c:	f8ad 802c 	strh.w	r8, [sp, #44]	@ 0x2c
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80098a0:	d01e      	beq.n	80098e0 <RegionCommonUpdateBandTimeOff+0x1bc>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80098a2:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80098a6:	f5b6 7f7a 	cmp.w	r6, #1000	@ 0x3e8
 80098aa:	bf18      	it	ne
 80098ac:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80098ae:	4297      	cmp	r7, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80098b0:	bf88      	it	hi
 80098b2:	9a04      	ldrhi	r2, [sp, #16]
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80098b4:	ae0a      	add	r6, sp, #40	@ 0x28
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80098b6:	bf82      	ittt	hi
 80098b8:	f502 32a8 	addhi.w	r2, r2, #86016	@ 0x15000
 80098bc:	f502 72c0 	addhi.w	r2, r2, #384	@ 0x180
 80098c0:	189b      	addhi	r3, r3, r2
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80098c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80098c4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80098c6:	4630      	mov	r0, r6
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	e896 0006 	ldmia.w	r6, {r1, r2}
 80098ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098d0:	f002 fc45 	bl	800c15e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80098d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80098d8:	f002 fcc0 	bl	800c25c <SysTimeToMs>
 80098dc:	4682      	mov	sl, r0
 80098de:	e7b7      	b.n	8009850 <RegionCommonUpdateBandTimeOff+0x12c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80098e0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80098e4:	e7e3      	b.n	80098ae <RegionCommonUpdateBandTimeOff+0x18a>
 80098e6:	bf00      	nop
 80098e8:	00015180 	.word	0x00015180
 80098ec:	001b7740 	.word	0x001b7740
 80098f0:	0001517f 	.word	0x0001517f
 80098f4:	0001ec2f 	.word	0x0001ec2f
 80098f8:	0112a880 	.word	0x0112a880
 80098fc:	02932e00 	.word	0x02932e00
 8009900:	0001ec30 	.word	0x0001ec30

08009904 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8009904:	7803      	ldrb	r3, [r0, #0]
 8009906:	2b03      	cmp	r3, #3
 8009908:	d114      	bne.n	8009934 <RegionCommonParseLinkAdrReq+0x30>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800990a:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800990c:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8009910:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8009912:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8009914:	704b      	strb	r3, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8009916:	7883      	ldrb	r3, [r0, #2]
 8009918:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800991a:	78c2      	ldrb	r2, [r0, #3]
 800991c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009920:	808b      	strh	r3, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8009922:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
        linkAdrParams->NbRep &= 0x0F;

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8009924:	2005      	movs	r0, #5
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8009926:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 800992a:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800992e:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8009930:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8009932:	4770      	bx	lr
    uint8_t retIndex = 0;
 8009934:	2000      	movs	r0, #0
    }
    return retIndex;
}
 8009936:	4770      	bx	lr

08009938 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8009938:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	4698      	mov	r8, r3
    int8_t datarate = verifyParams->Datarate;
    int8_t txPower = verifyParams->TxPower;
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800993e:	7943      	ldrb	r3, [r0, #5]
{
 8009940:	4691      	mov	r9, r2
 8009942:	4604      	mov	r4, r0
 8009944:	468a      	mov	sl, r1
    uint8_t status = verifyParams->Status;
 8009946:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8009948:	f990 2006 	ldrsb.w	r2, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800994c:	f990 7007 	ldrsb.w	r7, [r0, #7]
    if( verifyParams->AdrEnabled == false )
 8009950:	b323      	cbz	r3, 800999c <RegionCommonLinkAdrReqVerifyParams+0x64>
    int8_t nbRepetitions = verifyParams->NbRep;
 8009952:	f990 6008 	ldrsb.w	r6, [r0, #8]
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 8009956:	b1bd      	cbz	r5, 8009988 <RegionCommonLinkAdrReqVerifyParams+0x50>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8009958:	69a3      	ldr	r3, [r4, #24]
 800995a:	9301      	str	r3, [sp, #4]
 800995c:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009966:	6921      	ldr	r1, [r4, #16]
 8009968:	7b20      	ldrb	r0, [r4, #12]
 800996a:	f7ff fe39 	bl	80095e0 <RegionCommonChanVerifyDr>
 800996e:	b908      	cbnz	r0, 8009974 <RegionCommonLinkAdrReqVerifyParams+0x3c>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 8009970:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8009974:	f994 301d 	ldrsb.w	r3, [r4, #29]
    if( ( value >= min ) && ( value <= max ) )
 8009978:	42bb      	cmp	r3, r7
 800997a:	dc16      	bgt.n	80099aa <RegionCommonLinkAdrReqVerifyParams+0x72>
 800997c:	f994 301c 	ldrsb.w	r3, [r4, #28]
 8009980:	42bb      	cmp	r3, r7
 8009982:	da13      	bge.n	80099ac <RegionCommonLinkAdrReqVerifyParams+0x74>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8009984:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 8009988:	4628      	mov	r0, r5
    *dr = datarate;
 800998a:	f88a 2000 	strb.w	r2, [sl]
    *txPow = txPower;
 800998e:	f889 7000 	strb.w	r7, [r9]
    *nbRep = nbRepetitions;
 8009992:	f888 6000 	strb.w	r6, [r8]
}
 8009996:	b002      	add	sp, #8
 8009998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nbRepetitions = verifyParams->CurrentNbRep;
 800999c:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 80099a0:	f990 2009 	ldrsb.w	r2, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 80099a4:	f990 700a 	ldrsb.w	r7, [r0, #10]
 80099a8:	e7d5      	b.n	8009956 <RegionCommonLinkAdrReqVerifyParams+0x1e>
 80099aa:	461f      	mov	r7, r3
    if( status == 0x07 )
 80099ac:	2d07      	cmp	r5, #7
 80099ae:	d1eb      	bne.n	8009988 <RegionCommonLinkAdrReqVerifyParams+0x50>
            nbRepetitions = 1;
 80099b0:	2e00      	cmp	r6, #0
 80099b2:	bf08      	it	eq
 80099b4:	2601      	moveq	r6, #1
 80099b6:	e7e7      	b.n	8009988 <RegionCommonLinkAdrReqVerifyParams+0x50>

080099b8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80099b8:	4b02      	ldr	r3, [pc, #8]	@ (80099c4 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 80099ba:	fa03 f000 	lsl.w	r0, r3, r0
}
 80099be:	fbb0 f0f1 	udiv	r0, r0, r1
 80099c2:	4770      	bx	lr
 80099c4:	000f4240 	.word	0x000f4240

080099c8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 80099c8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80099cc:	fbb3 f0f0 	udiv	r0, r3, r0
 80099d0:	4770      	bx	lr

080099d2 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80099d2:	b530      	push	{r4, r5, lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80099d4:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 80099d8:	436a      	muls	r2, r5
 80099da:	1f0c      	subs	r4, r1, #4
 80099dc:	fb00 2204 	mla	r2, r0, r4, r2
 80099e0:	0052      	lsls	r2, r2, #1
 80099e2:	bf1e      	ittt	ne
 80099e4:	f100 34ff 	addne.w	r4, r0, #4294967295
 80099e8:	1912      	addne	r2, r2, r4
 80099ea:	fbb2 f2f0 	udivne	r2, r2, r0
 80099ee:	4291      	cmp	r1, r2
 80099f0:	bf38      	it	cc
 80099f2:	4611      	movcc	r1, r2
 80099f4:	9a03      	ldr	r2, [sp, #12]
 80099f6:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80099f8:	0082      	lsls	r2, r0, #2
 80099fa:	4348      	muls	r0, r1
 80099fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009a00:	bf1c      	itt	ne
 8009a02:	3001      	addne	r0, #1
 8009a04:	0840      	lsrne	r0, r0, #1
 8009a06:	1a12      	subs	r2, r2, r0
 8009a08:	fb01 2313 	mls	r3, r1, r3, r2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bfc6      	itte	gt
 8009a10:	f203 33e7 	addwgt	r3, r3, #999	@ 0x3e7
 8009a14:	fbb3 f1f1 	udivgt	r1, r3, r1
 8009a18:	fb93 f1f1 	sdivle	r1, r3, r1
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	6019      	str	r1, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8009a20:	bd30      	pop	{r4, r5, pc}

08009a22 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8009a22:	b538      	push	{r3, r4, r5, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8009a24:	0040      	lsls	r0, r0, #1
{
 8009a26:	4614      	mov	r4, r2
 8009a28:	460d      	mov	r5, r1
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8009a2a:	f7f6 fed3 	bl	80007d4 <__aeabi_ui2f>
 8009a2e:	4601      	mov	r1, r0
 8009a30:	4628      	mov	r0, r5
 8009a32:	f7f6 fe1d 	bl	8000670 <__aeabi_fsub>
 8009a36:	4621      	mov	r1, r4
 8009a38:	f7f6 fe1a 	bl	8000670 <__aeabi_fsub>
 8009a3c:	f7f6 fd0c 	bl	8000458 <__aeabi_f2d>
 8009a40:	f002 fefe 	bl	800c840 <floor>
 8009a44:	f7f6 fde8 	bl	8000618 <__aeabi_d2iz>

    return phyTxPower;
}
 8009a48:	b240      	sxtb	r0, r0
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}

08009a4c <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8009a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	e9cd 2300 	strd	r2, r3, [sp]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8009a54:	2300      	movs	r3, #0
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8009a56:	f04f 0918 	mov.w	r9, #24
    uint8_t nbRestrictedChannelsCount = 0;
 8009a5a:	461d      	mov	r5, r3
    uint8_t nbChannelCount = 0;
 8009a5c:	461f      	mov	r7, r3
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8009a5e:	8a02      	ldrh	r2, [r0, #16]
 8009a60:	011e      	lsls	r6, r3, #4
 8009a62:	b2f6      	uxtb	r6, r6
 8009a64:	42b2      	cmp	r2, r6
 8009a66:	d941      	bls.n	8009aec <RegionCommonCountNbOfEnabledChannels+0xa0>
        for( uint8_t j = 0; j < 16; j++ )
 8009a68:	220c      	movs	r2, #12
 8009a6a:	fb02 fc06 	mul.w	ip, r2, r6
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8009a6e:	2200      	movs	r2, #0
 8009a70:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8009a74:	6844      	ldr	r4, [r0, #4]
 8009a76:	f834 4008 	ldrh.w	r4, [r4, r8]
 8009a7a:	4114      	asrs	r4, r2
 8009a7c:	07e4      	lsls	r4, r4, #31
 8009a7e:	d526      	bpl.n	8009ace <RegionCommonCountNbOfEnabledChannels+0x82>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8009a80:	6884      	ldr	r4, [r0, #8]
 8009a82:	eb04 0a0c 	add.w	sl, r4, ip
 8009a86:	f854 400c 	ldr.w	r4, [r4, ip]
 8009a8a:	b304      	cbz	r4, 8009ace <RegionCommonCountNbOfEnabledChannels+0x82>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8009a8c:	7804      	ldrb	r4, [r0, #0]
 8009a8e:	b934      	cbnz	r4, 8009a9e <RegionCommonCountNbOfEnabledChannels+0x52>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8009a90:	6944      	ldr	r4, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8009a92:	b124      	cbz	r4, 8009a9e <RegionCommonCountNbOfEnabledChannels+0x52>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8009a94:	f834 4008 	ldrh.w	r4, [r4, r8]
 8009a98:	4114      	asrs	r4, r2
 8009a9a:	07e4      	lsls	r4, r4, #31
 8009a9c:	d517      	bpl.n	8009ace <RegionCommonCountNbOfEnabledChannels+0x82>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8009a9e:	f89a 4008 	ldrb.w	r4, [sl, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8009aa2:	f990 b001 	ldrsb.w	fp, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8009aa6:	f344 0e03 	sbfx	lr, r4, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 8009aaa:	fa4f fe8e 	sxtb.w	lr, lr
 8009aae:	45de      	cmp	lr, fp
 8009ab0:	dc0d      	bgt.n	8009ace <RegionCommonCountNbOfEnabledChannels+0x82>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8009ab2:	f344 1403 	sbfx	r4, r4, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 8009ab6:	b264      	sxtb	r4, r4
 8009ab8:	455c      	cmp	r4, fp
 8009aba:	db08      	blt.n	8009ace <RegionCommonCountNbOfEnabledChannels+0x82>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8009abc:	f89a e009 	ldrb.w	lr, [sl, #9]
 8009ac0:	68c4      	ldr	r4, [r0, #12]
 8009ac2:	fb09 440e 	mla	r4, r9, lr, r4
 8009ac6:	7d24      	ldrb	r4, [r4, #20]
 8009ac8:	b94c      	cbnz	r4, 8009ade <RegionCommonCountNbOfEnabledChannels+0x92>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8009aca:	3501      	adds	r5, #1
 8009acc:	b2ed      	uxtb	r5, r5
        for( uint8_t j = 0; j < 16; j++ )
 8009ace:	3201      	adds	r2, #1
 8009ad0:	2a10      	cmp	r2, #16
 8009ad2:	f10c 0c0c 	add.w	ip, ip, #12
 8009ad6:	d1cd      	bne.n	8009a74 <RegionCommonCountNbOfEnabledChannels+0x28>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8009ad8:	3301      	adds	r3, #1
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	e7bf      	b.n	8009a5e <RegionCommonCountNbOfEnabledChannels+0x12>
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 8009ade:	1c7c      	adds	r4, r7, #1
 8009ae0:	eb06 0e02 	add.w	lr, r6, r2
 8009ae4:	f801 e007 	strb.w	lr, [r1, r7]
 8009ae8:	b2e7      	uxtb	r7, r4
 8009aea:	e7f0      	b.n	8009ace <RegionCommonCountNbOfEnabledChannels+0x82>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8009aec:	9b00      	ldr	r3, [sp, #0]
 8009aee:	701f      	strb	r7, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8009af0:	9b01      	ldr	r3, [sp, #4]
 8009af2:	701d      	strb	r5, [r3, #0]
}
 8009af4:	b003      	add	sp, #12
 8009af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009afa <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8009afa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009afe:	4604      	mov	r4, r0
 8009b00:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	@ 0x30
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8009b04:	6840      	ldr	r0, [r0, #4]
{
 8009b06:	461d      	mov	r5, r3
 8009b08:	468a      	mov	sl, r1
 8009b0a:	4691      	mov	r9, r2
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8009b0c:	f002 fc1e 	bl	800c34c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8009b10:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
    *nbEnabledChannels = 0;
 8009b12:	f04f 0800 	mov.w	r8, #0
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8009b16:	1a1b      	subs	r3, r3, r0
 8009b18:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	7033      	strb	r3, [r6, #0]
    *nbEnabledChannels = 0;
 8009b1e:	f885 8000 	strb.w	r8, [r5]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8009b22:	6863      	ldr	r3, [r4, #4]
 8009b24:	b113      	cbz	r3, 8009b2c <RegionCommonIdentifyChannels+0x32>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	4283      	cmp	r3, r0
 8009b2a:	d824      	bhi.n	8009b76 <RegionCommonIdentifyChannels+0x7c>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8009b2c:	f8ca 8000 	str.w	r8, [sl]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8009b30:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8009b34:	69a3      	ldr	r3, [r4, #24]
 8009b36:	f89c e000 	ldrb.w	lr, [ip]
 8009b3a:	9303      	str	r3, [sp, #12]
 8009b3c:	ab01      	add	r3, sp, #4
 8009b3e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8009b42:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b46:	7d23      	ldrb	r3, [r4, #20]
 8009b48:	4670      	mov	r0, lr
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009b50:	7a23      	ldrb	r3, [r4, #8]
 8009b52:	7a62      	ldrb	r2, [r4, #9]
 8009b54:	f7ff fde6 	bl	8009724 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8009b58:	4633      	mov	r3, r6
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8009b5a:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8009b5c:	462a      	mov	r2, r5
 8009b5e:	4649      	mov	r1, r9
 8009b60:	69e0      	ldr	r0, [r4, #28]
 8009b62:	f7ff ff73 	bl	8009a4c <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8009b66:	782b      	ldrb	r3, [r5, #0]
 8009b68:	b12b      	cbz	r3, 8009b76 <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
 8009b6a:	2000      	movs	r0, #0
        *nextTxDelay = 0;
 8009b6c:	f8c7 8000 	str.w	r8, [r7]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8009b70:	b004      	add	sp, #16
 8009b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( *nbRestrictedChannels > 0 )
 8009b76:	7833      	ldrb	r3, [r6, #0]
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	bf0c      	ite	eq
 8009b7c:	200c      	moveq	r0, #12
 8009b7e:	200b      	movne	r0, #11
 8009b80:	e7f6      	b.n	8009b70 <RegionCommonIdentifyChannels+0x76>

08009b82 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8009b82:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t drLocal = params->CurrentDr;
 8009b84:	f990 2000 	ldrsb.w	r2, [r0]

    if( params->CurrentDr == params->MinDr )
 8009b88:	f990 5002 	ldrsb.w	r5, [r0, #2]
{
 8009b8c:	4604      	mov	r4, r0
    if( params->CurrentDr == params->MinDr )
 8009b8e:	4295      	cmp	r5, r2
 8009b90:	d00f      	beq.n	8009bb2 <RegionCommonGetNextLowerTxDr+0x30>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8009b92:	3a01      	subs	r2, #1
 8009b94:	b252      	sxtb	r2, r2
        } while( ( drLocal != params->MinDr ) &&
 8009b96:	4295      	cmp	r5, r2
 8009b98:	d00b      	beq.n	8009bb2 <RegionCommonGetNextLowerTxDr+0x30>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8009b9a:	68a3      	ldr	r3, [r4, #8]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	6861      	ldr	r1, [r4, #4]
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	78e0      	ldrb	r0, [r4, #3]
 8009baa:	f7ff fd19 	bl	80095e0 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d0ef      	beq.n	8009b92 <RegionCommonGetNextLowerTxDr+0x10>

        return drLocal;
    }
}
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	b003      	add	sp, #12
 8009bb6:	bd30      	pop	{r4, r5, pc}

08009bb8 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 8009bb8:	4288      	cmp	r0, r1
 8009bba:	bfb8      	it	lt
 8009bbc:	4608      	movlt	r0, r1
 8009bbe:	4770      	bx	lr

08009bc0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8009bc0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009bc4:	4b05      	ldr	r3, [pc, #20]	@ (8009bdc <RegionCommonGetBandwidth+0x1c>)
 8009bc6:	4298      	cmp	r0, r3
 8009bc8:	d005      	beq.n	8009bd6 <RegionCommonGetBandwidth+0x16>
 8009bca:	4b05      	ldr	r3, [pc, #20]	@ (8009be0 <RegionCommonGetBandwidth+0x20>)
 8009bcc:	1ac3      	subs	r3, r0, r3
 8009bce:	4258      	negs	r0, r3
 8009bd0:	4158      	adcs	r0, r3
 8009bd2:	0040      	lsls	r0, r0, #1
 8009bd4:	4770      	bx	lr
 8009bd6:	2001      	movs	r0, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	0003d090 	.word	0x0003d090
 8009be0:	0007a120 	.word	0x0007a120

08009be4 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8009be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009be6:	4606      	mov	r6, r0
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8009be8:	4d12      	ldr	r5, [pc, #72]	@ (8009c34 <RegionCommonRxConfigPrint+0x50>)
{
 8009bea:	b08b      	sub	sp, #44	@ 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8009bec:	ac04      	add	r4, sp, #16
{
 8009bee:	460f      	mov	r7, r1
 8009bf0:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8009bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bf6:	e895 0003 	ldmia.w	r5, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8009bfa:	2e05      	cmp	r6, #5
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8009bfc:	e884 0003 	stmia.w	r4, {r0, r1}
    if ( rxSlot < RX_SLOT_NONE )
 8009c00:	d80f      	bhi.n	8009c22 <RegionCommonRxConfigPrint+0x3e>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8009c02:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 8009c06:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c08:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8009c0c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8009c10:	2201      	movs	r2, #1
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	2100      	movs	r1, #0
 8009c16:	2002      	movs	r0, #2
 8009c18:	4b07      	ldr	r3, [pc, #28]	@ (8009c38 <RegionCommonRxConfigPrint+0x54>)
 8009c1a:	f002 f8ad 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8009c1e:	b00b      	add	sp, #44	@ 0x2c
 8009c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8009c22:	2201      	movs	r2, #1
 8009c24:	2100      	movs	r1, #0
 8009c26:	e9cd 7c00 	strd	r7, ip, [sp]
 8009c2a:	4b04      	ldr	r3, [pc, #16]	@ (8009c3c <RegionCommonRxConfigPrint+0x58>)
 8009c2c:	2002      	movs	r0, #2
 8009c2e:	f002 f8a3 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
}
 8009c32:	e7f4      	b.n	8009c1e <RegionCommonRxConfigPrint+0x3a>
 8009c34:	0800cd64 	.word	0x0800cd64
 8009c38:	0800d420 	.word	0x0800d420
 8009c3c:	0800d43f 	.word	0x0800d43f

08009c40 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8009c40:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8009c42:	4b05      	ldr	r3, [pc, #20]	@ (8009c58 <RegionCommonTxConfigPrint+0x18>)
 8009c44:	e9cd 0100 	strd	r0, r1, [sp]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	2002      	movs	r0, #2
 8009c4e:	f002 f893 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
}
 8009c52:	b003      	add	sp, #12
 8009c54:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c58:	0800d45b 	.word	0x0800d45b

08009c5c <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8009c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5e:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 8009c60:	4910      	ldr	r1, [pc, #64]	@ (8009ca4 <GetTimeOnAir+0x48>)
{
 8009c62:	b085      	sub	sp, #20
    int8_t phyDr = DataratesEU868[datarate];
 8009c64:	560f      	ldrsb	r7, [r1, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8009c66:	3108      	adds	r1, #8
{
 8009c68:	4605      	mov	r5, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8009c6a:	f7ff ffa9 	bl	8009bc0 <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8009c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca8 <GetTimeOnAir+0x4c>)
 8009c70:	b2e4      	uxtb	r4, r4
 8009c72:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8009c74:	2301      	movs	r3, #1
    if( datarate == DR_7 )
 8009c76:	2d07      	cmp	r5, #7
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8009c78:	4601      	mov	r1, r0
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8009c7a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    if( datarate == DR_7 )
 8009c7e:	d10a      	bne.n	8009c96 <GetTimeOnAir+0x3a>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8009c80:	2205      	movs	r2, #5
 8009c82:	2300      	movs	r3, #0
 8009c84:	e9cd 2300 	strd	r2, r3, [sp]
 8009c88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009c8c:	437a      	muls	r2, r7
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8009c8e:	4618      	mov	r0, r3
 8009c90:	47b0      	blx	r6
    }
    return timeOnAir;
}
 8009c92:	b005      	add	sp, #20
 8009c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8009c96:	2208      	movs	r2, #8
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e9cd 2000 	strd	r2, r0, [sp]
 8009c9e:	463a      	mov	r2, r7
 8009ca0:	e7f5      	b.n	8009c8e <GetTimeOnAir+0x32>
 8009ca2:	bf00      	nop
 8009ca4:	0800cd7c 	.word	0x0800cd7c
 8009ca8:	0800cec4 	.word	0x0800cec4

08009cac <VerifyRfFreq>:
{
 8009cac:	b538      	push	{r3, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 8009cae:	4b19      	ldr	r3, [pc, #100]	@ (8009d14 <VerifyRfFreq+0x68>)
{
 8009cb0:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
{
 8009cb4:	460d      	mov	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 8009cb6:	4798      	blx	r3
 8009cb8:	b158      	cbz	r0, 8009cd2 <VerifyRfFreq+0x26>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8009cba:	4b17      	ldr	r3, [pc, #92]	@ (8009d18 <VerifyRfFreq+0x6c>)
 8009cbc:	4a17      	ldr	r2, [pc, #92]	@ (8009d1c <VerifyRfFreq+0x70>)
 8009cbe:	4423      	add	r3, r4
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d907      	bls.n	8009cd4 <VerifyRfFreq+0x28>
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8009cc4:	4b16      	ldr	r3, [pc, #88]	@ (8009d20 <VerifyRfFreq+0x74>)
 8009cc6:	4a17      	ldr	r2, [pc, #92]	@ (8009d24 <VerifyRfFreq+0x78>)
 8009cc8:	4423      	add	r3, r4
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d80c      	bhi.n	8009ce8 <VerifyRfFreq+0x3c>
 8009cce:	2300      	movs	r3, #0
        *band = 0;
 8009cd0:	702b      	strb	r3, [r5, #0]
}
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	e7fb      	b.n	8009cd0 <VerifyRfFreq+0x24>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e7f9      	b.n	8009cd0 <VerifyRfFreq+0x24>
 8009cdc:	2305      	movs	r3, #5
 8009cde:	e7f7      	b.n	8009cd0 <VerifyRfFreq+0x24>
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e7f5      	b.n	8009cd0 <VerifyRfFreq+0x24>
 8009ce4:	2304      	movs	r3, #4
 8009ce6:	e7f3      	b.n	8009cd0 <VerifyRfFreq+0x24>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8009d28 <VerifyRfFreq+0x7c>)
 8009cea:	4a10      	ldr	r2, [pc, #64]	@ (8009d2c <VerifyRfFreq+0x80>)
 8009cec:	4423      	add	r3, r4
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d9f2      	bls.n	8009cd8 <VerifyRfFreq+0x2c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8009cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8009d30 <VerifyRfFreq+0x84>)
 8009cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8009d34 <VerifyRfFreq+0x88>)
 8009cf6:	4423      	add	r3, r4
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d9ef      	bls.n	8009cdc <VerifyRfFreq+0x30>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8009cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8009d38 <VerifyRfFreq+0x8c>)
 8009cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8009d3c <VerifyRfFreq+0x90>)
 8009d00:	4423      	add	r3, r4
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d9ec      	bls.n	8009ce0 <VerifyRfFreq+0x34>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8009d06:	4b0e      	ldr	r3, [pc, #56]	@ (8009d40 <VerifyRfFreq+0x94>)
 8009d08:	4a0e      	ldr	r2, [pc, #56]	@ (8009d44 <VerifyRfFreq+0x98>)
 8009d0a:	4423      	add	r3, r4
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d9e9      	bls.n	8009ce4 <VerifyRfFreq+0x38>
        return false;
 8009d10:	2000      	movs	r0, #0
 8009d12:	e7de      	b.n	8009cd2 <VerifyRfFreq+0x26>
 8009d14:	0800cec4 	.word	0x0800cec4
 8009d18:	cc8faa40 	.word	0xcc8faa40
 8009d1c:	001e847f 	.word	0x001e847f
 8009d20:	cc7125c0 	.word	0xcc7125c0
 8009d24:	002dc6c0 	.word	0x002dc6c0
 8009d28:	cc435eff 	.word	0xcc435eff
 8009d2c:	000927bf 	.word	0x000927bf
 8009d30:	cc38b0a0 	.word	0xcc38b0a0
 8009d34:	0007a120 	.word	0x0007a120
 8009d38:	cc2e0240 	.word	0xcc2e0240
 8009d3c:	0003d090 	.word	0x0003d090
 8009d40:	cc296e60 	.word	0xcc296e60
 8009d44:	000493e0 	.word	0x000493e0

08009d48 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8009d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	9300      	str	r3, [sp, #0]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8009d4e:	7803      	ldrb	r3, [r0, #0]
 8009d50:	3b0b      	subs	r3, #11
 8009d52:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d54:	d86f      	bhi.n	8009e36 <RegionEU868GetPhyParam+0xee>
 8009d56:	e8df f003 	tbb	[pc, r3]
 8009d5a:	302d      	.short	0x302d
 8009d5c:	42403932 	.word	0x42403932
 8009d60:	4e4b4845 	.word	0x4e4b4845
 8009d64:	5c6e5451 	.word	0x5c6e5451
 8009d68:	66625e6e 	.word	0x66625e6e
 8009d6c:	6b6e6e68 	.word	0x6b6e6e68
 8009d70:	6e6e1872 	.word	0x6e6e1872
 8009d74:	6e6e6e6e 	.word	0x6e6e6e6e
 8009d78:	6e6e6e6e 	.word	0x6e6e6e6e
 8009d7c:	5c6e6e6e 	.word	0x5c6e6e6e
 8009d80:	6e6e7974 	.word	0x6e6e7974
 8009d84:	7b6e795c 	.word	0x7b6e795c
 8009d88:	80          	.byte	0x80
 8009d89:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009d8a:	7843      	ldrb	r3, [r0, #1]
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8009d8c:	a801      	add	r0, sp, #4
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009d8e:	f88d 3004 	strb.w	r3, [sp, #4]
 8009d92:	2307      	movs	r3, #7
 8009d94:	f88d 3005 	strb.w	r3, [sp, #5]
 8009d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d9c:	f8ad 3006 	strh.w	r3, [sp, #6]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8009da0:	4b31      	ldr	r3, [pc, #196]	@ (8009e68 <RegionEU868GetPhyParam+0x120>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009da8:	e9cd 2302 	strd	r2, r3, [sp, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8009dac:	f7ff fee9 	bl	8009b82 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8009db0:	9000      	str	r0, [sp, #0]
            break;
 8009db2:	e040      	b.n	8009e36 <RegionEU868GetPhyParam+0xee>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8009db4:	2340      	movs	r3, #64	@ 0x40
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8009db6:	9300      	str	r3, [sp, #0]
            break;
 8009db8:	e03d      	b.n	8009e36 <RegionEU868GetPhyParam+0xee>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8009dba:	2320      	movs	r3, #32
 8009dbc:	e7fb      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8009dbe:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8009dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8009e6c <RegionEU868GetPhyParam+0x124>)
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dca:	e7f4      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8009dcc:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8009dd0:	4b26      	ldr	r3, [pc, #152]	@ (8009e6c <RegionEU868GetPhyParam+0x124>)
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009dd8:	e7ed      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e7eb      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8009dde:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009de2:	e7e8      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8009de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009de8:	e7e5      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8009dea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8009dee:	e7e2      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8009df0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009df4:	e7df      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8009df6:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009dfa:	e7dc      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8009dfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009e00:	e7d9      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8009e02:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009e06:	481a      	ldr	r0, [pc, #104]	@ (8009e70 <RegionEU868GetPhyParam+0x128>)
 8009e08:	f000 fc96 	bl	800a738 <randr>
 8009e0c:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8009e10:	e7ce      	b.n	8009db0 <RegionEU868GetPhyParam+0x68>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8009e12:	4b18      	ldr	r3, [pc, #96]	@ (8009e74 <RegionEU868GetPhyParam+0x12c>)
 8009e14:	e7cf      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009e16:	4b14      	ldr	r3, [pc, #80]	@ (8009e68 <RegionEU868GetPhyParam+0x120>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	33c0      	adds	r3, #192	@ 0xc0
 8009e1c:	e7cb      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8009e1e:	4b12      	ldr	r3, [pc, #72]	@ (8009e68 <RegionEU868GetPhyParam+0x120>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	33c2      	adds	r3, #194	@ 0xc2
 8009e24:	e7c7      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8009e26:	2310      	movs	r3, #16
 8009e28:	e7c5      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e68 <RegionEU868GetPhyParam+0x120>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	e7c2      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8009e30:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8009e34:	9300      	str	r3, [sp, #0]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 8009e36:	9800      	ldr	r0, [sp, #0]
 8009e38:	b005      	add	sp, #20
 8009e3a:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8009e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e78 <RegionEU868GetPhyParam+0x130>)
 8009e40:	e7f8      	b.n	8009e34 <RegionEU868GetPhyParam+0xec>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8009e42:	f240 2311 	movw	r3, #529	@ 0x211
 8009e46:	f8ad 3000 	strh.w	r3, [sp]
            break;
 8009e4a:	e7f4      	b.n	8009e36 <RegionEU868GetPhyParam+0xee>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e7b2      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8009e50:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8009e54:	4a05      	ldr	r2, [pc, #20]	@ (8009e6c <RegionEU868GetPhyParam+0x124>)
 8009e56:	5cd3      	ldrb	r3, [r2, r3]
 8009e58:	e7ad      	b.n	8009db6 <RegionEU868GetPhyParam+0x6e>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8009e5a:	4908      	ldr	r1, [pc, #32]	@ (8009e7c <RegionEU868GetPhyParam+0x134>)
 8009e5c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8009e60:	f7ff feae 	bl	8009bc0 <RegionCommonGetBandwidth>
 8009e64:	e7a4      	b.n	8009db0 <RegionEU868GetPhyParam+0x68>
 8009e66:	bf00      	nop
 8009e68:	20000f88 	.word	0x20000f88
 8009e6c:	0800cd7c 	.word	0x0800cd7c
 8009e70:	fffffc18 	.word	0xfffffc18
 8009e74:	33d3e608 	.word	0x33d3e608
 8009e78:	4009999a 	.word	0x4009999a
 8009e7c:	0800cd84 	.word	0x0800cd84

08009e80 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8009e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8009e82:	240c      	movs	r4, #12
 8009e84:	4a09      	ldr	r2, [pc, #36]	@ (8009eac <RegionEU868SetBandTxDone+0x2c>)
 8009e86:	7801      	ldrb	r1, [r0, #0]
 8009e88:	6813      	ldr	r3, [r2, #0]
 8009e8a:	fb04 3301 	mla	r3, r4, r1, r3
 8009e8e:	7a5d      	ldrb	r5, [r3, #9]
 8009e90:	6903      	ldr	r3, [r0, #16]
 8009e92:	6854      	ldr	r4, [r2, #4]
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	68c3      	ldr	r3, [r0, #12]
 8009e98:	7842      	ldrb	r2, [r0, #1]
 8009e9a:	6881      	ldr	r1, [r0, #8]
 8009e9c:	2018      	movs	r0, #24
 8009e9e:	fb00 4005 	mla	r0, r0, r5, r4
 8009ea2:	f7ff fc1a 	bl	80096da <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8009ea6:	b003      	add	sp, #12
 8009ea8:	bd30      	pop	{r4, r5, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000f88 	.word	0x20000f88

08009eb0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8009eb0:	b530      	push	{r4, r5, lr}
 8009eb2:	b0a5      	sub	sp, #148	@ 0x94
 8009eb4:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8009eb6:	228e      	movs	r2, #142	@ 0x8e
 8009eb8:	2100      	movs	r1, #0
 8009eba:	f10d 0002 	add.w	r0, sp, #2
 8009ebe:	f002 fc85 	bl	800c7cc <memset>
 8009ec2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009ec6:	2364      	movs	r3, #100	@ 0x64
 8009ec8:	210a      	movs	r1, #10
 8009eca:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8009ece:	f8ad 2078 	strh.w	r2, [sp, #120]	@ 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8009ed2:	7a22      	ldrb	r2, [r4, #8]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8009ed4:	f8ad 3000 	strh.w	r3, [sp]
    switch( params->Type )
 8009ed8:	2a01      	cmp	r2, #1
    Band_t bands[EU868_MAX_NB_BANDS] =
 8009eda:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009ede:	f8ad 1048 	strh.w	r1, [sp, #72]	@ 0x48
 8009ee2:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
    switch( params->Type )
 8009ee6:	d02c      	beq.n	8009f42 <RegionEU868InitDefaults+0x92>
 8009ee8:	2a02      	cmp	r2, #2
 8009eea:	d034      	beq.n	8009f56 <RegionEU868InitDefaults+0xa6>
 8009eec:	bb3a      	cbnz	r2, 8009f3e <RegionEU868InitDefaults+0x8e>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8009eee:	6820      	ldr	r0, [r4, #0]
 8009ef0:	b328      	cbz	r0, 8009f3e <RegionEU868InitDefaults+0x8e>
 8009ef2:	6863      	ldr	r3, [r4, #4]
 8009ef4:	b31b      	cbz	r3, 8009f3e <RegionEU868InitDefaults+0x8e>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8009ef6:	4c1d      	ldr	r4, [pc, #116]	@ (8009f6c <RegionEU868InitDefaults+0xbc>)
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8009ef8:	2290      	movs	r2, #144	@ 0x90
 8009efa:	4669      	mov	r1, sp
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8009efc:	e9c4 3000 	strd	r3, r0, [r4]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8009f00:	f000 fc36 	bl	800a770 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8009f04:	6824      	ldr	r4, [r4, #0]
 8009f06:	4b1a      	ldr	r3, [pc, #104]	@ (8009f70 <RegionEU868InitDefaults+0xc0>)
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8009f08:	f104 050c 	add.w	r5, r4, #12
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8009f0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8009f14:	f103 020c 	add.w	r2, r3, #12
 8009f18:	ca07      	ldmia	r2, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8009f1a:	3318      	adds	r3, #24
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8009f1c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8009f20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f24:	f104 0518 	add.w	r5, r4, #24
 8009f28:	e885 0007 	stmia.w	r5, {r0, r1, r2}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8009f2c:	2307      	movs	r3, #7
 8009f2e:	4621      	mov	r1, r4

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009f30:	2201      	movs	r2, #1
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8009f32:	f821 3fc2 	strh.w	r3, [r1, #194]!
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009f36:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009f3a:	f7ff fbbf 	bl	80096bc <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 8009f3e:	b025      	add	sp, #148	@ 0x94
 8009f40:	bd30      	pop	{r4, r5, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8009f42:	4b0a      	ldr	r3, [pc, #40]	@ (8009f6c <RegionEU868InitDefaults+0xbc>)
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	2300      	movs	r3, #0
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009f48:	f100 01c2 	add.w	r1, r0, #194	@ 0xc2
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8009f4c:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8009f4e:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8009f50:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009f52:	30c0      	adds	r0, #192	@ 0xc0
 8009f54:	e7f1      	b.n	8009f3a <RegionEU868InitDefaults+0x8a>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8009f56:	4b05      	ldr	r3, [pc, #20]	@ (8009f6c <RegionEU868InitDefaults+0xbc>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8009f5e:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	@ 0xc2
 8009f62:	430a      	orrs	r2, r1
 8009f64:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
            break;
 8009f68:	e7e9      	b.n	8009f3e <RegionEU868InitDefaults+0x8e>
 8009f6a:	bf00      	nop
 8009f6c:	20000f88 	.word	0x20000f88
 8009f70:	0800cdb4 	.word	0x0800cdb4

08009f74 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8009f74:	b507      	push	{r0, r1, r2, lr}
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8009f76:	290f      	cmp	r1, #15
 8009f78:	d81f      	bhi.n	8009fba <RegionEU868Verify+0x46>
 8009f7a:	e8df f001 	tbb	[pc, r1]
 8009f7e:	1e0c      	.short	0x1e0c
 8009f80:	1c1e1e1e 	.word	0x1c1e1e1e
 8009f84:	1c1e1c12 	.word	0x1c1e1c12
 8009f88:	1e1e1e1c 	.word	0x1e1e1e1c
 8009f8c:	081e      	.short	0x081e
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8009f8e:	2001      	movs	r0, #1
            return false;
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8009f90:	b003      	add	sp, #12
 8009f92:	f85d fb04 	ldr.w	pc, [sp], #4
            return VerifyRfFreq( verify->Frequency, &band );
 8009f96:	f10d 0107 	add.w	r1, sp, #7
 8009f9a:	6800      	ldr	r0, [r0, #0]
 8009f9c:	f7ff fe86 	bl	8009cac <VerifyRfFreq>
 8009fa0:	e7f6      	b.n	8009f90 <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8009fa2:	2205      	movs	r2, #5
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	f990 0000 	ldrsb.w	r0, [r0]
 8009faa:	f7ff fb48 	bl	800963e <RegionCommonValueInRange>
 8009fae:	3800      	subs	r0, #0
 8009fb0:	bf18      	it	ne
 8009fb2:	2001      	movne	r0, #1
 8009fb4:	e7ec      	b.n	8009f90 <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8009fb6:	2207      	movs	r2, #7
 8009fb8:	e7f4      	b.n	8009fa4 <RegionEU868Verify+0x30>
    switch( phyAttribute )
 8009fba:	2000      	movs	r0, #0
 8009fbc:	e7e8      	b.n	8009f90 <RegionEU868Verify+0x1c>
	...

08009fc0 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8009fc0:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8009fc2:	7902      	ldrb	r2, [r0, #4]
 8009fc4:	b11a      	cbz	r2, 8009fce <RegionEU868ChanMaskSet+0xe>
 8009fc6:	2a01      	cmp	r2, #1
 8009fc8:	d00b      	beq.n	8009fe2 <RegionEU868ChanMaskSet+0x22>
 8009fca:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8009fcc:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8009fce:	2201      	movs	r2, #1
 8009fd0:	4b07      	ldr	r3, [pc, #28]	@ (8009ff0 <RegionEU868ChanMaskSet+0x30>)
 8009fd2:	6801      	ldr	r1, [r0, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8009fda:	f7ff fb6f 	bl	80096bc <RegionCommonChanMaskCopy>
    return true;
 8009fde:	2001      	movs	r0, #1
 8009fe0:	e7f4      	b.n	8009fcc <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8009fe2:	4b03      	ldr	r3, [pc, #12]	@ (8009ff0 <RegionEU868ChanMaskSet+0x30>)
 8009fe4:	6801      	ldr	r1, [r0, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f103 00c2 	add.w	r0, r3, #194	@ 0xc2
 8009fec:	e7f5      	b.n	8009fda <RegionEU868ChanMaskSet+0x1a>
 8009fee:	bf00      	nop
 8009ff0:	20000f88 	.word	0x20000f88

08009ff4 <RegionEU868ComputeRxWindowParameters>:
{
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8009ff4:	2807      	cmp	r0, #7
{
 8009ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8009ff8:	bfa8      	it	ge
 8009ffa:	2007      	movge	r0, #7
{
 8009ffc:	461c      	mov	r4, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8009ffe:	4d14      	ldr	r5, [pc, #80]	@ (800a050 <RegionEU868ComputeRxWindowParameters+0x5c>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800a000:	7058      	strb	r0, [r3, #1]
{
 800a002:	460e      	mov	r6, r1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800a004:	f105 0108 	add.w	r1, r5, #8
{
 800a008:	4617      	mov	r7, r2
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800a00a:	f7ff fdd9 	bl	8009bc0 <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
 800a00e:	f994 3001 	ldrsb.w	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800a012:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
 800a014:	2b07      	cmp	r3, #7
 800a016:	d113      	bne.n	800a040 <RegionEU868ComputeRxWindowParameters+0x4c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800a018:	2032      	movs	r0, #50	@ 0x32
 800a01a:	f7ff fcd5 	bl	80099c8 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800a01e:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <RegionEU868ComputeRxWindowParameters+0x60>)
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800a020:	4605      	mov	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800a022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a024:	4798      	blx	r3
 800a026:	f104 020c 	add.w	r2, r4, #12
 800a02a:	3408      	adds	r4, #8
 800a02c:	4603      	mov	r3, r0
 800a02e:	9201      	str	r2, [sp, #4]
 800a030:	4631      	mov	r1, r6
 800a032:	463a      	mov	r2, r7
 800a034:	4628      	mov	r0, r5
 800a036:	9400      	str	r4, [sp, #0]
 800a038:	f7ff fccb 	bl	80099d2 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800a03c:	b003      	add	sp, #12
 800a03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800a040:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800a044:	6891      	ldr	r1, [r2, #8]
 800a046:	5ce8      	ldrb	r0, [r5, r3]
 800a048:	f7ff fcb6 	bl	80099b8 <RegionCommonComputeSymbolTimeLoRa>
 800a04c:	e7e7      	b.n	800a01e <RegionEU868ComputeRxWindowParameters+0x2a>
 800a04e:	bf00      	nop
 800a050:	0800cd7c 	.word	0x0800cd7c
 800a054:	0800cec4 	.word	0x0800cec4

0800a058 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t dr = rxConfig->Datarate;
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800a05c:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 800a138 <RegionEU868RxConfig+0xe0>
{
 800a060:	b08b      	sub	sp, #44	@ 0x2c
    if( Radio.GetStatus( ) != RF_IDLE )
 800a062:	f8d9 3004 	ldr.w	r3, [r9, #4]
{
 800a066:	4604      	mov	r4, r0
 800a068:	468a      	mov	sl, r1
    int8_t dr = rxConfig->Datarate;
 800a06a:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint32_t frequency = rxConfig->Frequency;
 800a06e:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800a072:	4798      	blx	r3
 800a074:	4605      	mov	r5, r0
 800a076:	2800      	cmp	r0, #0
 800a078:	d15c      	bne.n	800a134 <RegionEU868RxConfig+0xdc>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800a07a:	7ce3      	ldrb	r3, [r4, #19]
 800a07c:	b963      	cbnz	r3, 800a098 <RegionEU868RxConfig+0x40>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800a07e:	220c      	movs	r2, #12
 800a080:	7823      	ldrb	r3, [r4, #0]
 800a082:	4353      	muls	r3, r2
 800a084:	4a2d      	ldr	r2, [pc, #180]	@ (800a13c <RegionEU868RxConfig+0xe4>)
 800a086:	6812      	ldr	r2, [r2, #0]
 800a088:	18d1      	adds	r1, r2, r3
 800a08a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800a08e:	f1b8 0f00 	cmp.w	r8, #0
 800a092:	d101      	bne.n	800a098 <RegionEU868RxConfig+0x40>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800a094:	f852 8003 	ldr.w	r8, [r2, r3]
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800a098:	4e29      	ldr	r6, [pc, #164]	@ (800a140 <RegionEU868RxConfig+0xe8>)

    Radio.SetChannel( frequency );
 800a09a:	4640      	mov	r0, r8
 800a09c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    phyDr = DataratesEU868[dr];
 800a0a0:	f916 b007 	ldrsb.w	fp, [r6, r7]
    Radio.SetChannel( frequency );
 800a0a4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800a0a6:	f8d9 3018 	ldr.w	r3, [r9, #24]
    if( dr == DR_7 )
 800a0aa:	2f07      	cmp	r7, #7
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800a0ac:	469c      	mov	ip, r3
 800a0ae:	7ca3      	ldrb	r3, [r4, #18]
 800a0b0:	8920      	ldrh	r0, [r4, #8]
 800a0b2:	9309      	str	r3, [sp, #36]	@ 0x24
    if( dr == DR_7 )
 800a0b4:	d12a      	bne.n	800a10c <RegionEU868RxConfig+0xb4>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	2205      	movs	r2, #5
 800a0bc:	e9cd 3104 	strd	r3, r1, [sp, #16]
 800a0c0:	4920      	ldr	r1, [pc, #128]	@ (800a144 <RegionEU868RxConfig+0xec>)
 800a0c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a0c6:	e9cd 1200 	strd	r1, r2, [sp]
 800a0ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a0ce:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	fb02 f20b 	mul.w	r2, r2, fp
 800a0d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a0dc:	9306      	str	r3, [sp, #24]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a0de:	47e0      	blx	ip
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800a0e0:	7c63      	ldrb	r3, [r4, #17]
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800a0e2:	443e      	add	r6, r7
    if( rxConfig->RepeaterSupport == true )
 800a0e4:	b31b      	cbz	r3, 800a12e <RegionEU868RxConfig+0xd6>
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800a0e6:	f896 1030 	ldrb.w	r1, [r6, #48]	@ 0x30
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800a0ea:	310d      	adds	r1, #13
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f8d9 3054 	ldr.w	r3, [r9, #84]	@ 0x54
 800a0f2:	b2c9      	uxtb	r1, r1
 800a0f4:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800a0f6:	7ce0      	ldrb	r0, [r4, #19]
 800a0f8:	463a      	mov	r2, r7
 800a0fa:	4641      	mov	r1, r8
 800a0fc:	f7ff fd72 	bl	8009be4 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
    return true;
 800a100:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 800a102:	f88a 7000 	strb.w	r7, [sl]
#else
    return false;
#endif /* REGION_EU868 */
}
 800a106:	b00b      	add	sp, #44	@ 0x2c
 800a108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a10c:	2100      	movs	r1, #0
 800a10e:	2501      	movs	r5, #1
 800a110:	2308      	movs	r3, #8
 800a112:	e9cd 1507 	strd	r1, r5, [sp, #28]
 800a116:	e9cd 1300 	strd	r1, r3, [sp]
 800a11a:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800a11e:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800a122:	9002      	str	r0, [sp, #8]
 800a124:	462b      	mov	r3, r5
 800a126:	465a      	mov	r2, fp
 800a128:	4628      	mov	r0, r5
 800a12a:	78a1      	ldrb	r1, [r4, #2]
 800a12c:	e7d7      	b.n	800a0de <RegionEU868RxConfig+0x86>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800a12e:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 800a132:	e7da      	b.n	800a0ea <RegionEU868RxConfig+0x92>
        return false;
 800a134:	2000      	movs	r0, #0
 800a136:	e7e6      	b.n	800a106 <RegionEU868RxConfig+0xae>
 800a138:	0800cec4 	.word	0x0800cec4
 800a13c:	20000f88 	.word	0x20000f88
 800a140:	0800cd7c 	.word	0x0800cd7c
 800a144:	00014585 	.word	0x00014585

0800a148 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800a14c:	250c      	movs	r5, #12
{
 800a14e:	b08d      	sub	sp, #52	@ 0x34
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800a150:	f990 3001 	ldrsb.w	r3, [r0, #1]
{
 800a154:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800a158:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 800a244 <RegionEU868TxConfig+0xfc>
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800a15c:	7801      	ldrb	r1, [r0, #0]
 800a15e:	4f3a      	ldr	r7, [pc, #232]	@ (800a248 <RegionEU868TxConfig+0x100>)
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800a160:	f918 b003 	ldrsb.w	fp, [r8, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800a164:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a168:	fb05 2201 	mla	r2, r5, r1, r2
 800a16c:	2118      	movs	r1, #24
 800a16e:	7a52      	ldrb	r2, [r2, #9]
{
 800a170:	4604      	mov	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800a172:	fb01 3302 	mla	r3, r1, r2, r3
 800a176:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800a17a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800a17e:	f7ff fd1b 	bl	8009bb8 <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800a182:	f108 0108 	add.w	r1, r8, #8
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800a186:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800a188:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800a18c:	f7ff fd18 	bl	8009bc0 <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800a190:	68a2      	ldr	r2, [r4, #8]
 800a192:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800a194:	4681      	mov	r9, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800a196:	4630      	mov	r0, r6
 800a198:	f7ff fc43 	bl	8009a22 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800a19c:	7821      	ldrb	r1, [r4, #0]
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	4369      	muls	r1, r5
 800a1a2:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 800a24c <RegionEU868TxConfig+0x104>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800a1a6:	4680      	mov	r8, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800a1a8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a1ac:	5850      	ldr	r0, [r2, r1]
 800a1ae:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800a1b0:	f8da 301c 	ldr.w	r3, [sl, #28]
 800a1b4:	2500      	movs	r5, #0
 800a1b6:	469c      	mov	ip, r3
    if( txConfig->Datarate == DR_7 )
 800a1b8:	f994 3001 	ldrsb.w	r3, [r4, #1]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800a1bc:	e9cd 5505 	strd	r5, r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800a1c0:	2b07      	cmp	r3, #7
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800a1c2:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800a1c6:	e9cd 5307 	strd	r5, r3, [sp, #28]
    if( txConfig->Datarate == DR_7 )
 800a1ca:	d12b      	bne.n	800a224 <RegionEU868TxConfig+0xdc>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800a1d2:	2305      	movs	r3, #5
 800a1d4:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800a1d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a1dc:	fb03 f30b 	mul.w	r3, r3, fp
 800a1e0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	47e0      	blx	ip
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800a1ee:	210c      	movs	r1, #12
 800a1f0:	7823      	ldrb	r3, [r4, #0]
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	434b      	muls	r3, r1
 800a1f6:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800a1fa:	58d0      	ldr	r0, [r2, r3]
 800a1fc:	f7ff fd20 	bl	8009c40 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800a200:	89a1      	ldrh	r1, [r4, #12]
 800a202:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800a206:	f7ff fd29 	bl	8009c5c <GetTimeOnAir>
 800a20a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800a20c:	7b21      	ldrb	r1, [r4, #12]
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800a20e:	6018      	str	r0, [r3, #0]
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800a210:	4628      	mov	r0, r5
 800a212:	f8da 3054 	ldr.w	r3, [sl, #84]	@ 0x54
 800a216:	4798      	blx	r3
    *txPower = txPowerLimited;
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800a218:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800a21a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a21c:	701e      	strb	r6, [r3, #0]
}
 800a21e:	b00d      	add	sp, #52	@ 0x34
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800a224:	2001      	movs	r0, #1
 800a226:	2308      	movs	r3, #8
 800a228:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800a22c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800a230:	462a      	mov	r2, r5
 800a232:	464b      	mov	r3, r9
 800a234:	4665      	mov	r5, ip
 800a236:	4641      	mov	r1, r8
 800a238:	f8cd b000 	str.w	fp, [sp]
 800a23c:	47a8      	blx	r5
        modem = MODEM_LORA;
 800a23e:	2001      	movs	r0, #1
 800a240:	4605      	mov	r5, r0
 800a242:	e7d4      	b.n	800a1ee <RegionEU868TxConfig+0xa6>
 800a244:	0800cd7c 	.word	0x0800cd7c
 800a248:	20000f88 	.word	0x20000f88
 800a24c:	0800cec4 	.word	0x0800cec4

0800a250 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800a254:	2400      	movs	r4, #0
{
 800a256:	4605      	mov	r5, r0
 800a258:	468a      	mov	sl, r1
 800a25a:	4691      	mov	r9, r2
 800a25c:	4698      	mov	r8, r3
    uint8_t status = 0x07;
 800a25e:	2607      	movs	r6, #7
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
                    {
                        chMask |= 1 << i;
 800a260:	f04f 0b01 	mov.w	fp, #1
{
 800a264:	b08d      	sub	sp, #52	@ 0x34
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800a266:	9402      	str	r4, [sp, #8]
 800a268:	f8ad 400c 	strh.w	r4, [sp, #12]
    uint16_t chMask = 0;
 800a26c:	f8ad 4006 	strh.w	r4, [sp, #6]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800a270:	7a2b      	ldrb	r3, [r5, #8]
 800a272:	42a3      	cmp	r3, r4
 800a274:	d906      	bls.n	800a284 <RegionEU868LinkAdrReq+0x34>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800a276:	6868      	ldr	r0, [r5, #4]
 800a278:	a902      	add	r1, sp, #8
 800a27a:	4420      	add	r0, r4
 800a27c:	f7ff fb42 	bl	8009904 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800a280:	2800      	cmp	r0, #0
 800a282:	d153      	bne.n	800a32c <RegionEU868LinkAdrReq+0xdc>
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800a284:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.Status = status;
 800a286:	f88d 6014 	strb.w	r6, [sp, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800a28a:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800a28e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = &chMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800a292:	4e45      	ldr	r6, [pc, #276]	@ (800a3a8 <RegionEU868LinkAdrReq+0x158>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800a294:	f88d 3016 	strb.w	r3, [sp, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800a298:	f89d 300a 	ldrb.w	r3, [sp, #10]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a29c:	f10d 020a 	add.w	r2, sp, #10
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800a2a0:	f88d 3017 	strb.w	r3, [sp, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800a2a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a2a8:	f10d 0109 	add.w	r1, sp, #9
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800a2ac:	f88d 3018 	strb.w	r3, [sp, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800a2b0:	7aeb      	ldrb	r3, [r5, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a2b2:	a804      	add	r0, sp, #16
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800a2b4:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800a2b8:	7b2b      	ldrb	r3, [r5, #12]
 800a2ba:	f88d 301a 	strb.w	r3, [sp, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800a2be:	7b6b      	ldrb	r3, [r5, #13]
 800a2c0:	f88d 301b 	strb.w	r3, [sp, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800a2c4:	2310      	movs	r3, #16
 800a2c6:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800a2ca:	f10d 0306 	add.w	r3, sp, #6
 800a2ce:	9308      	str	r3, [sp, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800a2d0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800a2d4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800a2d8:	6833      	ldr	r3, [r6, #0]
 800a2da:	930a      	str	r3, [sp, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800a2dc:	2307      	movs	r3, #7
 800a2de:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800a2e2:	682b      	ldr	r3, [r5, #0]
 800a2e4:	9304      	str	r3, [sp, #16]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a2e6:	ab02      	add	r3, sp, #8
 800a2e8:	f7ff fb26 	bl	8009938 <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800a2ec:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800a2ee:	4605      	mov	r5, r0
    if( status == 0x07 )
 800a2f0:	d10a      	bne.n	800a308 <RegionEU868LinkAdrReq+0xb8>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800a2f2:	6830      	ldr	r0, [r6, #0]
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	30c0      	adds	r0, #192	@ 0xc0
 800a2fa:	f000 fa4d 	bl	800a798 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800a2fe:	6833      	ldr	r3, [r6, #0]
 800a300:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a304:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

#endif /* REGION_EU868 */
    return status;
}
 800a308:	4628      	mov	r0, r5
    *drOut = linkAdrParams.Datarate;
 800a30a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a30e:	f88a 3000 	strb.w	r3, [sl]
    *txPowOut = linkAdrParams.TxPower;
 800a312:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a316:	f889 3000 	strb.w	r3, [r9]
    *nbRepOut = linkAdrParams.NbRep;
 800a31a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a31e:	f888 3000 	strb.w	r3, [r8]
    *nbBytesParsed = bytesProcessed;
 800a322:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a324:	701c      	strb	r4, [r3, #0]
}
 800a326:	b00d      	add	sp, #52	@ 0x34
 800a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chMask = linkAdrParams.ChMask;
 800a32c:	f8bd 700c 	ldrh.w	r7, [sp, #12]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800a330:	f89d 300b 	ldrb.w	r3, [sp, #11]
        bytesProcessed += nextIndex;
 800a334:	4420      	add	r0, r4
 800a336:	b2c4      	uxtb	r4, r0
        chMask = linkAdrParams.ChMask;
 800a338:	f8ad 7006 	strh.w	r7, [sp, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800a33c:	b9f3      	cbnz	r3, 800a37c <RegionEU868LinkAdrReq+0x12c>
 800a33e:	b317      	cbz	r7, 800a386 <RegionEU868LinkAdrReq+0x136>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800a340:	2000      	movs	r0, #0
 800a342:	4a19      	ldr	r2, [pc, #100]	@ (800a3a8 <RegionEU868LinkAdrReq+0x158>)
 800a344:	2607      	movs	r6, #7
 800a346:	6811      	ldr	r1, [r2, #0]
 800a348:	f04f 0c0c 	mov.w	ip, #12
 800a34c:	4602      	mov	r2, r0
                if( linkAdrParams.ChMaskCtrl == 6 )
 800a34e:	2b06      	cmp	r3, #6
 800a350:	d11b      	bne.n	800a38a <RegionEU868LinkAdrReq+0x13a>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800a352:	fb0c fe00 	mul.w	lr, ip, r0
 800a356:	f851 e00e 	ldr.w	lr, [r1, lr]
 800a35a:	f1be 0f00 	cmp.w	lr, #0
 800a35e:	d004      	beq.n	800a36a <RegionEU868LinkAdrReq+0x11a>
                        chMask |= 1 << i;
 800a360:	fa0b f200 	lsl.w	r2, fp, r0
 800a364:	433a      	orrs	r2, r7
 800a366:	b297      	uxth	r7, r2
 800a368:	2201      	movs	r2, #1
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800a36a:	3001      	adds	r0, #1
 800a36c:	2810      	cmp	r0, #16
 800a36e:	d1ee      	bne.n	800a34e <RegionEU868LinkAdrReq+0xfe>
 800a370:	2a00      	cmp	r2, #0
 800a372:	f43f af7d 	beq.w	800a270 <RegionEU868LinkAdrReq+0x20>
 800a376:	f8ad 7006 	strh.w	r7, [sp, #6]
 800a37a:	e779      	b.n	800a270 <RegionEU868LinkAdrReq+0x20>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800a37c:	1e5a      	subs	r2, r3, #1
 800a37e:	2a04      	cmp	r2, #4
 800a380:	d901      	bls.n	800a386 <RegionEU868LinkAdrReq+0x136>
 800a382:	2b06      	cmp	r3, #6
 800a384:	d0dc      	beq.n	800a340 <RegionEU868LinkAdrReq+0xf0>
            status &= 0xFE; // Channel mask KO
 800a386:	2606      	movs	r6, #6
 800a388:	e772      	b.n	800a270 <RegionEU868LinkAdrReq+0x20>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800a38a:	fa47 fe00 	asr.w	lr, r7, r0
 800a38e:	f01e 0f01 	tst.w	lr, #1
 800a392:	d0ea      	beq.n	800a36a <RegionEU868LinkAdrReq+0x11a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800a394:	fb0c fe00 	mul.w	lr, ip, r0
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800a398:	f851 e00e 	ldr.w	lr, [r1, lr]
                        status &= 0xFE; // Channel mask KO
 800a39c:	f1be 0f00 	cmp.w	lr, #0
 800a3a0:	bf08      	it	eq
 800a3a2:	2606      	moveq	r6, #6
 800a3a4:	e7e1      	b.n	800a36a <RegionEU868LinkAdrReq+0x11a>
 800a3a6:	bf00      	nop
 800a3a8:	20000f88 	.word	0x20000f88

0800a3ac <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800a3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ae:	4605      	mov	r5, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800a3b0:	f10d 0107 	add.w	r1, sp, #7
 800a3b4:	6840      	ldr	r0, [r0, #4]
 800a3b6:	f7ff fc79 	bl	8009cac <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800a3ba:	2207      	movs	r2, #7
 800a3bc:	1d84      	adds	r4, r0, #6
 800a3be:	2100      	movs	r1, #0
 800a3c0:	f995 0000 	ldrsb.w	r0, [r5]
 800a3c4:	b2e4      	uxtb	r4, r4
 800a3c6:	f7ff f93a 	bl	800963e <RegionCommonValueInRange>
 800a3ca:	b908      	cbnz	r0, 800a3d0 <RegionEU868RxParamSetupReq+0x24>
    {
        status &= 0xFD; // Datarate KO
 800a3cc:	f004 04fd 	and.w	r4, r4, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800a3d0:	2205      	movs	r2, #5
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800a3d8:	f7ff f931 	bl	800963e <RegionCommonValueInRange>
 800a3dc:	b908      	cbnz	r0, 800a3e2 <RegionEU868RxParamSetupReq+0x36>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800a3de:	f004 04fb 	and.w	r4, r4, #251	@ 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	b003      	add	sp, #12
 800a3e6:	bd30      	pop	{r4, r5, pc}

0800a3e8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	4770      	bx	lr
	...

0800a3f0 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800a3f0:	b513      	push	{r0, r1, r4, lr}
 800a3f2:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800a3f4:	f10d 0107 	add.w	r1, sp, #7
 800a3f8:	6840      	ldr	r0, [r0, #4]
 800a3fa:	f7ff fc57 	bl	8009cac <VerifyRfFreq>
 800a3fe:	210c      	movs	r1, #12
 800a400:	7822      	ldrb	r2, [r4, #0]
 800a402:	1c83      	adds	r3, r0, #2
 800a404:	434a      	muls	r2, r1
 800a406:	4908      	ldr	r1, [pc, #32]	@ (800a428 <RegionEU868DlChannelReq+0x38>)
 800a408:	b2db      	uxtb	r3, r3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800a40a:	6809      	ldr	r1, [r1, #0]
 800a40c:	1888      	adds	r0, r1, r2
 800a40e:	588a      	ldr	r2, [r1, r2]
 800a410:	b922      	cbnz	r2, 800a41c <RegionEU868DlChannelReq+0x2c>
    {
        status &= 0xFD;
 800a412:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800a416:	b258      	sxtb	r0, r3
 800a418:	b002      	add	sp, #8
 800a41a:	bd10      	pop	{r4, pc}
    if( status == 0x03 )
 800a41c:	2b03      	cmp	r3, #3
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800a41e:	bf0a      	itet	eq
 800a420:	6862      	ldreq	r2, [r4, #4]
 800a422:	2302      	movne	r3, #2
 800a424:	6042      	streq	r2, [r0, #4]
 800a426:	e7f6      	b.n	800a416 <RegionEU868DlChannelReq+0x26>
 800a428:	20000f88 	.word	0x20000f88

0800a42c <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800a42c:	4770      	bx	lr
	...

0800a430 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800a430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a434:	460e      	mov	r6, r1
 800a436:	461f      	mov	r7, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800a438:	2100      	movs	r1, #0
    uint8_t nbRestrictedChannels = 0;
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800a43a:	2307      	movs	r3, #7

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800a43c:	4d37      	ldr	r5, [pc, #220]	@ (800a51c <RegionEU868NextChannel+0xec>)
{
 800a43e:	4604      	mov	r4, r0
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800a440:	6828      	ldr	r0, [r5, #0]
{
 800a442:	b096      	sub	sp, #88	@ 0x58
 800a444:	4690      	mov	r8, r2
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800a446:	30c0      	adds	r0, #192	@ 0xc0
 800a448:	2201      	movs	r2, #1
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800a44a:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800a44e:	e9cd 1106 	strd	r1, r1, [sp, #24]
    uint8_t nbEnabledChannels = 0;
 800a452:	f88d 100c 	strb.w	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 800a456:	f88d 100d 	strb.w	r1, [sp, #13]
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800a45a:	f8ad 300e 	strh.w	r3, [sp, #14]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800a45e:	f7ff f90f 	bl	8009680 <RegionCommonCountChannels>
 800a462:	b930      	cbnz	r0, 800a472 <RegionEU868NextChannel+0x42>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800a464:	682a      	ldr	r2, [r5, #0]
 800a466:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	@ 0xc0
 800a46a:	f043 0307 	orr.w	r3, r3, #7
 800a46e:	f8a2 30c0 	strh.w	r3, [r2, #192]	@ 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800a472:	682a      	ldr	r2, [r5, #0]
    countChannelsParams.Joined = nextChanParams->Joined;
 800a474:	7a63      	ldrb	r3, [r4, #9]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800a476:	f102 01c0 	add.w	r1, r2, #192	@ 0xc0
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800a47a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800a47e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800a482:	686a      	ldr	r2, [r5, #4]
    countChannelsParams.Joined = nextChanParams->Joined;
 800a484:	f88d 3020 	strb.w	r3, [sp, #32]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800a488:	920b      	str	r2, [sp, #44]	@ 0x2c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800a48a:	2210      	movs	r2, #16
 800a48c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
    countChannelsParams.JoinChannels = &joinChannels;
 800a490:	f10d 020e 	add.w	r2, sp, #14
 800a494:	920d      	str	r2, [sp, #52]	@ 0x34
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a496:	6822      	ldr	r2, [r4, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800a498:	f994 3008 	ldrsb.w	r3, [r4, #8]
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a49c:	920e      	str	r2, [sp, #56]	@ 0x38
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800a49e:	6862      	ldr	r2, [r4, #4]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800a4a0:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800a4a4:	920f      	str	r2, [sp, #60]	@ 0x3c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800a4a6:	7aa2      	ldrb	r2, [r4, #10]
 800a4a8:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800a4ac:	2206      	movs	r2, #6
 800a4ae:	f88d 2041 	strb.w	r2, [sp, #65]	@ 0x41
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800a4b2:	aa11      	add	r2, sp, #68	@ 0x44
 800a4b4:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800a4b8:	7d22      	ldrb	r2, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800a4ba:	8ae1      	ldrh	r1, [r4, #22]
 800a4bc:	4618      	mov	r0, r3
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800a4be:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800a4c2:	f7ff fbcb 	bl	8009c5c <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800a4c6:	ab08      	add	r3, sp, #32
 800a4c8:	9315      	str	r3, [sp, #84]	@ 0x54

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800a4ca:	f10d 030d 	add.w	r3, sp, #13
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800a4ce:	9014      	str	r0, [sp, #80]	@ 0x50
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f8cd 8004 	str.w	r8, [sp, #4]
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	aa04      	add	r2, sp, #16
 800a4dc:	a80e      	add	r0, sp, #56	@ 0x38
 800a4de:	f7ff fb0c 	bl	8009afa <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	b978      	cbnz	r0, 800a506 <RegionEU868NextChannel+0xd6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800a4e6:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800a4ea:	3901      	subs	r1, #1
 800a4ec:	f000 f924 	bl	800a738 <randr>
 800a4f0:	f100 0358 	add.w	r3, r0, #88	@ 0x58
 800a4f4:	eb0d 0003 	add.w	r0, sp, r3
 800a4f8:	f810 3c48 	ldrb.w	r3, [r0, #-72]
 800a4fc:	7033      	strb	r3, [r6, #0]
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800a4fe:	4620      	mov	r0, r4
 800a500:	b016      	add	sp, #88	@ 0x58
 800a502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800a506:	280c      	cmp	r0, #12
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800a508:	bf01      	itttt	eq
 800a50a:	682a      	ldreq	r2, [r5, #0]
 800a50c:	f8b2 30c0 	ldrheq.w	r3, [r2, #192]	@ 0xc0
 800a510:	f043 0307 	orreq.w	r3, r3, #7
 800a514:	f8a2 30c0 	strheq.w	r3, [r2, #192]	@ 0xc0
 800a518:	e7f1      	b.n	800a4fe <RegionEU868NextChannel+0xce>
 800a51a:	bf00      	nop
 800a51c:	20000f88 	.word	0x20000f88

0800a520 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800a520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800a524:	2700      	movs	r7, #0
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800a526:	7906      	ldrb	r6, [r0, #4]
{
 800a528:	4605      	mov	r5, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800a52a:	2e02      	cmp	r6, #2
    uint8_t band = 0;
 800a52c:	f88d 7007 	strb.w	r7, [sp, #7]
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800a530:	d94e      	bls.n	800a5d0 <RegionEU868ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800a532:	2e0f      	cmp	r6, #15
 800a534:	d84e      	bhi.n	800a5d4 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800a536:	6803      	ldr	r3, [r0, #0]
 800a538:	2207      	movs	r2, #7
 800a53a:	7a18      	ldrb	r0, [r3, #8]
 800a53c:	4639      	mov	r1, r7
 800a53e:	f340 0003 	sbfx	r0, r0, #0, #4
 800a542:	b240      	sxtb	r0, r0
 800a544:	f7ff f87b 	bl	800963e <RegionCommonValueInRange>
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800a548:	682b      	ldr	r3, [r5, #0]
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800a54a:	4604      	mov	r4, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800a54c:	7a18      	ldrb	r0, [r3, #8]
 800a54e:	2207      	movs	r2, #7
 800a550:	f340 1003 	sbfx	r0, r0, #4, #4
 800a554:	4639      	mov	r1, r7
 800a556:	b240      	sxtb	r0, r0
 800a558:	f7ff f871 	bl	800963e <RegionCommonValueInRange>
 800a55c:	b1d8      	cbz	r0, 800a596 <RegionEU868ChannelAdd+0x76>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800a55e:	fab4 f484 	clz	r4, r4
 800a562:	0964      	lsrs	r4, r4, #5
    {
        drInvalid = true;
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800a564:	6828      	ldr	r0, [r5, #0]
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800a566:	f10d 0107 	add.w	r1, sp, #7
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800a56a:	7a03      	ldrb	r3, [r0, #8]
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800a56c:	6800      	ldr	r0, [r0, #0]
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800a56e:	f343 0203 	sbfx	r2, r3, #0, #4
 800a572:	f343 1303 	sbfx	r3, r3, #4, #4
 800a576:	b25b      	sxtb	r3, r3
 800a578:	b252      	sxtb	r2, r2
        drInvalid = true;
 800a57a:	429a      	cmp	r2, r3
 800a57c:	bfc8      	it	gt
 800a57e:	2401      	movgt	r4, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800a580:	f7ff fb94 	bl	8009cac <VerifyRfFreq>
 800a584:	f080 0301 	eor.w	r3, r0, #1
 800a588:	b2db      	uxtb	r3, r3
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800a58a:	b134      	cbz	r4, 800a59a <RegionEU868ChannelAdd+0x7a>
 800a58c:	3305      	adds	r3, #5
 800a58e:	b2d8      	uxtb	r0, r3
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800a590:	b002      	add	sp, #8
 800a592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        drInvalid = true;
 800a596:	2401      	movs	r4, #1
 800a598:	e7e4      	b.n	800a564 <RegionEU868ChannelAdd+0x44>
    if( freqInvalid == true )
 800a59a:	b9eb      	cbnz	r3, 800a5d8 <RegionEU868ChannelAdd+0xb8>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800a59c:	220c      	movs	r2, #12
 800a59e:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 800a5dc <RegionEU868ChannelAdd+0xbc>
 800a5a2:	fb02 f706 	mul.w	r7, r2, r6
 800a5a6:	f8d8 0000 	ldr.w	r0, [r8]
 800a5aa:	6829      	ldr	r1, [r5, #0]
 800a5ac:	4438      	add	r0, r7
 800a5ae:	f000 f8df 	bl	800a770 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800a5b2:	f8d8 2000 	ldr.w	r2, [r8]
 800a5b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a5ba:	4417      	add	r7, r2
 800a5bc:	727b      	strb	r3, [r7, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	@ 0xc0
 800a5c4:	40b3      	lsls	r3, r6
 800a5c6:	430b      	orrs	r3, r1
    return LORAMAC_STATUS_OK;
 800a5c8:	4620      	mov	r0, r4
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800a5ca:	f8a2 30c0 	strh.w	r3, [r2, #192]	@ 0xc0
    return LORAMAC_STATUS_OK;
 800a5ce:	e7df      	b.n	800a590 <RegionEU868ChannelAdd+0x70>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800a5d0:	2006      	movs	r0, #6
 800a5d2:	e7dd      	b.n	800a590 <RegionEU868ChannelAdd+0x70>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a5d4:	2003      	movs	r0, #3
 800a5d6:	e7db      	b.n	800a590 <RegionEU868ChannelAdd+0x70>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800a5d8:	2004      	movs	r0, #4
 800a5da:	e7d9      	b.n	800a590 <RegionEU868ChannelAdd+0x70>
 800a5dc:	20000f88 	.word	0x20000f88

0800a5e0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800a5e0:	b410      	push	{r4}
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800a5e2:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800a5e4:	2902      	cmp	r1, #2
 800a5e6:	d90d      	bls.n	800a604 <RegionEU868ChannelsRemove+0x24>
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800a5e8:	4b08      	ldr	r3, [pc, #32]	@ (800a60c <RegionEU868ChannelsRemove+0x2c>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	6818      	ldr	r0, [r3, #0]
 800a5ee:	230c      	movs	r3, #12
 800a5f0:	434b      	muls	r3, r1
 800a5f2:	18c4      	adds	r4, r0, r3
 800a5f4:	50c2      	str	r2, [r0, r3]
 800a5f6:	e9c4 2201 	strd	r2, r2, [r4, #4]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800a5fa:	30c0      	adds	r0, #192	@ 0xc0
 800a5fc:	2210      	movs	r2, #16
#else
    return false;
#endif /* REGION_EU868 */
}
 800a5fe:	bc10      	pop	{r4}
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800a600:	f7ff b826 	b.w	8009650 <RegionCommonChanDisable>
}
 800a604:	2000      	movs	r0, #0
 800a606:	bc10      	pop	{r4}
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	20000f88 	.word	0x20000f88

0800a610 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800a610:	2350      	movs	r3, #80	@ 0x50
{
 800a612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a616:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800a618:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800a61c:	7903      	ldrb	r3, [r0, #4]
{
 800a61e:	4607      	mov	r7, r0
    if( applyCFList->Size != 16 )
 800a620:	2b10      	cmp	r3, #16
 800a622:	d130      	bne.n	800a686 <RegionEU868ApplyCFList+0x76>
    if( applyCFList->Payload[15] != 0 )
 800a624:	6803      	ldr	r3, [r0, #0]
 800a626:	7bdd      	ldrb	r5, [r3, #15]
 800a628:	bb6d      	cbnz	r5, 800a686 <RegionEU868ApplyCFList+0x76>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800a62a:	2403      	movs	r4, #3
            newChannel.Frequency = 0;
 800a62c:	46a8      	mov	r8, r5
            newChannel.Frequency *= 100;
 800a62e:	2664      	movs	r6, #100	@ 0x64
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800a630:	2c07      	cmp	r4, #7
 800a632:	d814      	bhi.n	800a65e <RegionEU868ApplyCFList+0x4e>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	5d53      	ldrb	r3, [r2, r5]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800a638:	442a      	add	r2, r5
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800a63a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800a63c:	7851      	ldrb	r1, [r2, #1]
 800a63e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a642:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800a644:	7892      	ldrb	r2, [r2, #2]
 800a646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800a64a:	4373      	muls	r3, r6
            newChannel.Rx1Frequency = 0;
 800a64c:	e9cd 3803 	strd	r3, r8, [sp, #12]
        if( newChannel.Frequency != 0 )
 800a650:	b963      	cbnz	r3, 800a66c <RegionEU868ApplyCFList+0x5c>
            RegionEU868ChannelsRemove( &channelRemove );
 800a652:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800a654:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800a658:	f7ff ffc2 	bl	800a5e0 <RegionEU868ChannelsRemove>
 800a65c:	e00d      	b.n	800a67a <RegionEU868ApplyCFList+0x6a>
            newChannel.Frequency = 0;
 800a65e:	f8cd 800c 	str.w	r8, [sp, #12]
            newChannel.DrRange.Value = 0;
 800a662:	f88d 8014 	strb.w	r8, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800a666:	f8cd 8010 	str.w	r8, [sp, #16]
        if( newChannel.Frequency != 0 )
 800a66a:	e7f2      	b.n	800a652 <RegionEU868ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800a66c:	ab03      	add	r3, sp, #12
            RegionEU868ChannelAdd( &channelAdd );
 800a66e:	a801      	add	r0, sp, #4
            channelAdd.NewChannel = &newChannel;
 800a670:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800a672:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800a676:	f7ff ff53 	bl	800a520 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800a67a:	3401      	adds	r4, #1
 800a67c:	b2e4      	uxtb	r4, r4
 800a67e:	2c10      	cmp	r4, #16
 800a680:	f105 0503 	add.w	r5, r5, #3
 800a684:	d1d4      	bne.n	800a630 <RegionEU868ApplyCFList+0x20>
}
 800a686:	b006      	add	sp, #24
 800a688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a68c <RegionEU868NewChannelReq>:
{
 800a68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800a68e:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800a690:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
 800a692:	6811      	ldr	r1, [r2, #0]
 800a694:	b949      	cbnz	r1, 800a6aa <RegionEU868NewChannelReq+0x1e>
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800a696:	a801      	add	r0, sp, #4
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800a698:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800a69c:	f7ff ffa0 	bl	800a5e0 <RegionEU868ChannelsRemove>
 800a6a0:	b178      	cbz	r0, 800a6c2 <RegionEU868NewChannelReq+0x36>
    uint8_t status = 0x03;
 800a6a2:	2003      	movs	r0, #3
}
 800a6a4:	b005      	add	sp, #20
 800a6a6:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800a6aa:	a802      	add	r0, sp, #8
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800a6ac:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800a6ae:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800a6b2:	f7ff ff35 	bl	800a520 <RegionEU868ChannelAdd>
 800a6b6:	2804      	cmp	r0, #4
 800a6b8:	d005      	beq.n	800a6c6 <RegionEU868NewChannelReq+0x3a>
 800a6ba:	2805      	cmp	r0, #5
 800a6bc:	d005      	beq.n	800a6ca <RegionEU868NewChannelReq+0x3e>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d0ef      	beq.n	800a6a2 <RegionEU868NewChannelReq+0x16>
{
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	e7ee      	b.n	800a6a4 <RegionEU868NewChannelReq+0x18>
                status &= 0xFE;
 800a6c6:	2002      	movs	r0, #2
 800a6c8:	e7ec      	b.n	800a6a4 <RegionEU868NewChannelReq+0x18>
                status &= 0xFD;
 800a6ca:	2001      	movs	r0, #1
 800a6cc:	e7ea      	b.n	800a6a4 <RegionEU868NewChannelReq+0x18>
	...

0800a6d0 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800a6d0:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800a6d2:	260c      	movs	r6, #12
 800a6d4:	7801      	ldrb	r1, [r0, #0]
 800a6d6:	4d10      	ldr	r5, [pc, #64]	@ (800a718 <RegionEU868SetContinuousWave+0x48>)
{
 800a6d8:	4604      	mov	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800a6da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6de:	fb06 2201 	mla	r2, r6, r1, r2
 800a6e2:	2118      	movs	r1, #24
 800a6e4:	7a52      	ldrb	r2, [r2, #9]
 800a6e6:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800a6ea:	fb01 3302 	mla	r3, r1, r2, r3
 800a6ee:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800a6f2:	f7ff fa61 	bl	8009bb8 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800a6f6:	7823      	ldrb	r3, [r4, #0]
 800a6f8:	682a      	ldr	r2, [r5, #0]
 800a6fa:	4373      	muls	r3, r6

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800a6fc:	6861      	ldr	r1, [r4, #4]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800a6fe:	58d5      	ldr	r5, [r2, r3]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800a700:	68a2      	ldr	r2, [r4, #8]
 800a702:	f7ff f98e 	bl	8009a22 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800a706:	4b05      	ldr	r3, [pc, #20]	@ (800a71c <RegionEU868SetContinuousWave+0x4c>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800a708:	4601      	mov	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800a70a:	89a2      	ldrh	r2, [r4, #12]
 800a70c:	4628      	mov	r0, r5
#endif /* REGION_EU868 */
}
 800a70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800a712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a714:	4718      	bx	r3
 800a716:	bf00      	nop
 800a718:	20000f88 	.word	0x20000f88
 800a71c:	0800cec4 	.word	0x0800cec4

0800a720 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800a720:	1a88      	subs	r0, r1, r2

    if( datarate < 0 )
 800a722:	b240      	sxtb	r0, r0
 800a724:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800a728:	b2c0      	uxtb	r0, r0
 800a72a:	4770      	bx	lr

0800a72c <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800a72c:	4b01      	ldr	r3, [pc, #4]	@ (800a734 <srand1+0x8>)
 800a72e:	6018      	str	r0, [r3, #0]
}
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	200000cc 	.word	0x200000cc

0800a738 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800a738:	f243 0339 	movw	r3, #12345	@ 0x3039
 800a73c:	4a0a      	ldr	r2, [pc, #40]	@ (800a768 <randr+0x30>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800a73e:	b530      	push	{r4, r5, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800a740:	6814      	ldr	r4, [r2, #0]
 800a742:	4d0a      	ldr	r5, [pc, #40]	@ (800a76c <randr+0x34>)
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800a744:	1a09      	subs	r1, r1, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800a746:	fb05 3304 	mla	r3, r5, r4, r3
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a750:	fbb3 f2f2 	udiv	r2, r3, r2
 800a754:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800a758:	3101      	adds	r1, #1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800a75a:	1a9b      	subs	r3, r3, r2
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800a75c:	fb93 f2f1 	sdiv	r2, r3, r1
 800a760:	fb01 3312 	mls	r3, r1, r2, r3
}
 800a764:	4418      	add	r0, r3
 800a766:	bd30      	pop	{r4, r5, pc}
 800a768:	200000cc 	.word	0x200000cc
 800a76c:	41c64e6d 	.word	0x41c64e6d

0800a770 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800a770:	3801      	subs	r0, #1
 800a772:	440a      	add	r2, r1
 800a774:	4291      	cmp	r1, r2
 800a776:	d100      	bne.n	800a77a <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800a778:	4770      	bx	lr
        *dst++ = *src++;
 800a77a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a77e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a782:	e7f7      	b.n	800a774 <memcpy1+0x4>

0800a784 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
    while( size-- )
 800a784:	4410      	add	r0, r2
 800a786:	440a      	add	r2, r1
 800a788:	4291      	cmp	r1, r2
 800a78a:	d100      	bne.n	800a78e <memcpyr+0xa>
    {
        *dst-- = *src++;
    }
}
 800a78c:	4770      	bx	lr
        *dst-- = *src++;
 800a78e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a792:	f800 3d01 	strb.w	r3, [r0, #-1]!
 800a796:	e7f7      	b.n	800a788 <memcpyr+0x4>

0800a798 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
    {
        *dst++ = value;
 800a798:	f002 b818 	b.w	800c7cc <memset>

0800a79c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 800a79c:	b530      	push	{r4, r5, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800a79e:	b130      	cbz	r0, 800a7ae <Crc32+0x12>
    uint32_t crc = 0xFFFFFFFF;
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800a7a4:	4d09      	ldr	r5, [pc, #36]	@ (800a7cc <Crc32+0x30>)
 800a7a6:	4401      	add	r1, r0
    for( uint16_t i = 0; i < length; ++i )
 800a7a8:	4281      	cmp	r1, r0
 800a7aa:	d101      	bne.n	800a7b0 <Crc32+0x14>
        }
    }

    return ~crc;
 800a7ac:	43d8      	mvns	r0, r3
}
 800a7ae:	bd30      	pop	{r4, r5, pc}
        crc ^= ( uint32_t )buffer[i];
 800a7b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7b4:	4053      	eors	r3, r2
 800a7b6:	2208      	movs	r2, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800a7b8:	f343 0400 	sbfx	r4, r3, #0, #1
        for( uint16_t i = 0; i < 8; i++ )
 800a7bc:	3a01      	subs	r2, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800a7be:	402c      	ands	r4, r5
        for( uint16_t i = 0; i < 8; i++ )
 800a7c0:	b292      	uxth	r2, r2
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800a7c2:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800a7c6:	2a00      	cmp	r2, #0
 800a7c8:	d1f6      	bne.n	800a7b8 <Crc32+0x1c>
 800a7ca:	e7ed      	b.n	800a7a8 <Crc32+0xc>
 800a7cc:	edb88320 	.word	0xedb88320

0800a7d0 <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	4770      	bx	lr

0800a7d4 <RadioOnTxTimeoutIrq>:
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a7d4:	4b03      	ldr	r3, [pc, #12]	@ (800a7e4 <RadioOnTxTimeoutIrq+0x10>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	b113      	cbz	r3, 800a7e0 <RadioOnTxTimeoutIrq+0xc>
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	b103      	cbz	r3, 800a7e0 <RadioOnTxTimeoutIrq+0xc>
    {
        RadioEvents->TxTimeout( );
 800a7de:	4718      	bx	r3
    }
}
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20000f90 	.word	0x20000f90

0800a7e8 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a7e8:	4b03      	ldr	r3, [pc, #12]	@ (800a7f8 <RadioOnRxTimeoutIrq+0x10>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	b113      	cbz	r3, 800a7f4 <RadioOnRxTimeoutIrq+0xc>
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	b103      	cbz	r3, 800a7f4 <RadioOnRxTimeoutIrq+0xc>
    {
        RadioEvents->RxTimeout( );
 800a7f2:	4718      	bx	r3
    }
}
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	20000f90 	.word	0x20000f90

0800a7fc <RadioStandby>:
    SX126xSetStandby( STDBY_RC );
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	f000 bd61 	b.w	800b2c4 <SX126xSetStandby>
	...

0800a804 <RadioGetStatus>:
{
 800a804:	b508      	push	{r3, lr}
    switch( SX126xGetOperatingMode( ) )
 800a806:	f000 fcff 	bl	800b208 <SX126xGetOperatingMode>
 800a80a:	3804      	subs	r0, #4
 800a80c:	b2c0      	uxtb	r0, r0
 800a80e:	2803      	cmp	r0, #3
 800a810:	bf96      	itet	ls
 800a812:	4b02      	ldrls	r3, [pc, #8]	@ (800a81c <RadioGetStatus+0x18>)
 800a814:	2000      	movhi	r0, #0
 800a816:	5c18      	ldrbls	r0, [r3, r0]
}
 800a818:	bd08      	pop	{r3, pc}
 800a81a:	bf00      	nop
 800a81c:	0800cdd8 	.word	0x0800cdd8

0800a820 <RadioSetChannel>:
    SX126xSetRfFrequency( freq );
 800a820:	f000 be7a 	b.w	800b518 <SX126xSetRfFrequency>

0800a824 <RadioRead>:
    return SX126xReadRegister( addr );
 800a824:	b280      	uxth	r0, r0
 800a826:	f001 b8c9 	b.w	800b9bc <SX126xReadRegister>

0800a82a <RadioWrite>:
    SX126xWriteRegister( addr, data );
 800a82a:	b280      	uxth	r0, r0
 800a82c:	f001 b82c 	b.w	800b888 <SX126xWriteRegister>

0800a830 <RadioSend>:
{
 800a830:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800a832:	2300      	movs	r3, #0
{
 800a834:	460c      	mov	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800a836:	f240 2101 	movw	r1, #513	@ 0x201
 800a83a:	461a      	mov	r2, r3
{
 800a83c:	4606      	mov	r6, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800a83e:	4608      	mov	r0, r1
 800a840:	f000 fe0e 	bl	800b460 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 800a844:	f000 fcfe 	bl	800b244 <SX126xGetPacketType>
 800a848:	4d0a      	ldr	r5, [pc, #40]	@ (800a874 <RadioSend+0x44>)
 800a84a:	2801      	cmp	r0, #1
    SX126xSetPacketParams( &SX126x.PacketParams );
 800a84c:	480a      	ldr	r0, [pc, #40]	@ (800a878 <RadioSend+0x48>)
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 800a84e:	bf0c      	ite	eq
 800a850:	74ec      	strbeq	r4, [r5, #19]
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 800a852:	732c      	strbne	r4, [r5, #12]
    SX126xSetPacketParams( &SX126x.PacketParams );
 800a854:	f000 ffbc 	bl	800b7d0 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 800a858:	4621      	mov	r1, r4
 800a85a:	4630      	mov	r0, r6
 800a85c:	2200      	movs	r2, #0
 800a85e:	f001 f994 	bl	800bb8a <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 800a862:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800a864:	4805      	ldr	r0, [pc, #20]	@ (800a87c <RadioSend+0x4c>)
 800a866:	f001 fe33 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
}
 800a86a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TimerStart( &TxTimeoutTimer );
 800a86e:	4803      	ldr	r0, [pc, #12]	@ (800a87c <RadioSend+0x4c>)
 800a870:	f001 bdf4 	b.w	800c45c <UTIL_TIMER_Start>
 800a874:	20000f90 	.word	0x20000f90
 800a878:	20000f94 	.word	0x20000f94
 800a87c:	20000fd4 	.word	0x20000fd4

0800a880 <RadioSleep>:
{
 800a880:	b508      	push	{r3, lr}
    SX126xSetSleep( params );
 800a882:	f04f 0004 	mov.w	r0, #4
 800a886:	f000 fd01 	bl	800b28c <SX126xSetSleep>
}
 800a88a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RADIO_DELAY_MS( 2 );
 800a88e:	2002      	movs	r0, #2
 800a890:	f7f7 ba15 	b.w	8001cbe <HAL_Delay>

0800a894 <RadioSetRxDutyCycle>:
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 800a894:	f000 bd46 	b.w	800b324 <SX126xSetRxDutyCycle>

0800a898 <RadioReadBuffer>:
    SX126xReadRegisters( addr, buffer, size );
 800a898:	b280      	uxth	r0, r0
 800a89a:	f001 b86a 	b.w	800b972 <SX126xReadRegisters>

0800a89e <RadioWriteBuffer>:
    SX126xWriteRegisters( addr, buffer, size );
 800a89e:	b280      	uxth	r0, r0
 800a8a0:	f000 bf48 	b.w	800b734 <SX126xWriteRegisters>

0800a8a4 <RadioStartCad>:
{
 800a8a4:	b508      	push	{r3, lr}
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800a8a6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f000 fdd6 	bl	800b460 <SX126xSetDioIrqParams>
}
 800a8b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetCad( );
 800a8b8:	f000 bd50 	b.w	800b35c <SX126xSetCad>

0800a8bc <RadioSetTxContinuousWave>:
{
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	460d      	mov	r5, r1
 800a8c0:	4614      	mov	r4, r2
    SX126xSetRfFrequency( freq );
 800a8c2:	f000 fe29 	bl	800b518 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f001 f91b 	bl	800bb02 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 800a8cc:	f000 fd52 	bl	800b374 <SX126xSetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800a8d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a8d4:	4d04      	ldr	r5, [pc, #16]	@ (800a8e8 <RadioSetTxContinuousWave+0x2c>)
 800a8d6:	4361      	muls	r1, r4
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f001 fdf9 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800a8de:	4628      	mov	r0, r5
}
 800a8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TimerStart( &TxTimeoutTimer );
 800a8e4:	f001 bdba 	b.w	800c45c <UTIL_TIMER_Start>
 800a8e8:	20000fd4 	.word	0x20000fd4

0800a8ec <RadioRssi>:
{
 800a8ec:	b508      	push	{r3, lr}
    return SX126xGetRssiInst( );
 800a8ee:	f000 fed9 	bl	800b6a4 <SX126xGetRssiInst>
}
 800a8f2:	bd08      	pop	{r3, pc}

0800a8f4 <RadioGetWakeupTime>:
{
 800a8f4:	b508      	push	{r3, lr}
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800a8f6:	f7f7 fcdd 	bl	80022b4 <SX1262DVK1DAS_RADIO_GetWakeUpTime>
}
 800a8fa:	3003      	adds	r0, #3
 800a8fc:	bd08      	pop	{r3, pc}
	...

0800a900 <RadioGetFskBandwidthRegValue>:
    if( bandwidth == 0 )
 800a900:	b190      	cbz	r0, 800a928 <RadioGetFskBandwidthRegValue+0x28>
 800a902:	2301      	movs	r3, #1
 800a904:	4a09      	ldr	r2, [pc, #36]	@ (800a92c <RadioGetFskBandwidthRegValue+0x2c>)
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800a906:	6811      	ldr	r1, [r2, #0]
 800a908:	4288      	cmp	r0, r1
 800a90a:	d307      	bcc.n	800a91c <RadioGetFskBandwidthRegValue+0x1c>
 800a90c:	6891      	ldr	r1, [r2, #8]
 800a90e:	4288      	cmp	r0, r1
 800a910:	d204      	bcs.n	800a91c <RadioGetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i+1].RegValue;
 800a912:	4a07      	ldr	r2, [pc, #28]	@ (800a930 <RadioGetFskBandwidthRegValue+0x30>)
 800a914:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a918:	7a18      	ldrb	r0, [r3, #8]
 800a91a:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800a91c:	3301      	adds	r3, #1
 800a91e:	2b16      	cmp	r3, #22
 800a920:	f102 0208 	add.w	r2, r2, #8
 800a924:	d1ef      	bne.n	800a906 <RadioGetFskBandwidthRegValue+0x6>
    while( 1 );
 800a926:	e7fe      	b.n	800a926 <RadioGetFskBandwidthRegValue+0x26>
        return( 0x1F );
 800a928:	201f      	movs	r0, #31
}
 800a92a:	4770      	bx	lr
 800a92c:	0800cddc 	.word	0x0800cddc
 800a930:	0800cdd8 	.word	0x0800cdd8

0800a934 <RadioSetMaxPayloadLength>:
    if( modem == MODEM_LORA )
 800a934:	2801      	cmp	r0, #1
 800a936:	4808      	ldr	r0, [pc, #32]	@ (800a958 <RadioSetMaxPayloadLength+0x24>)
 800a938:	d105      	bne.n	800a946 <RadioSetMaxPayloadLength+0x12>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800a93a:	4b08      	ldr	r3, [pc, #32]	@ (800a95c <RadioSetMaxPayloadLength+0x28>)
 800a93c:	74c1      	strb	r1, [r0, #19]
 800a93e:	7019      	strb	r1, [r3, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 800a940:	3004      	adds	r0, #4
 800a942:	f000 bf45 	b.w	800b7d0 <SX126xSetPacketParams>
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800a946:	7ac3      	ldrb	r3, [r0, #11]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d103      	bne.n	800a954 <RadioSetMaxPayloadLength+0x20>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800a94c:	4b03      	ldr	r3, [pc, #12]	@ (800a95c <RadioSetMaxPayloadLength+0x28>)
 800a94e:	7301      	strb	r1, [r0, #12]
 800a950:	7019      	strb	r1, [r3, #0]
 800a952:	e7f5      	b.n	800a940 <RadioSetMaxPayloadLength+0xc>
}
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	20000f90 	.word	0x20000f90
 800a95c:	200000d0 	.word	0x200000d0

0800a960 <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800a960:	2300      	movs	r3, #0
 800a962:	f64f 71ff 	movw	r1, #65535	@ 0xffff
{
 800a966:	b510      	push	{r4, lr}
 800a968:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800a96a:	461a      	mov	r2, r3
 800a96c:	4608      	mov	r0, r1
 800a96e:	f000 fd77 	bl	800b460 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800a972:	b134      	cbz	r4, 800a982 <RadioRx+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a974:	4621      	mov	r1, r4
 800a976:	4809      	ldr	r0, [pc, #36]	@ (800a99c <RadioRx+0x3c>)
 800a978:	f001 fdaa 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a97c:	4807      	ldr	r0, [pc, #28]	@ (800a99c <RadioRx+0x3c>)
 800a97e:	f001 fd6d 	bl	800c45c <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800a982:	4b07      	ldr	r3, [pc, #28]	@ (800a9a0 <RadioRx+0x40>)
 800a984:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 800a988:	b12a      	cbz	r2, 800a996 <RadioRx+0x36>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800a98a:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
}
 800a98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRx( RxTimeout << 6 );
 800a992:	f000 bf85 	b.w	800b8a0 <SX126xSetRx>
 800a996:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a998:	0180      	lsls	r0, r0, #6
 800a99a:	e7f8      	b.n	800a98e <RadioRx+0x2e>
 800a99c:	20000fec 	.word	0x20000fec
 800a9a0:	20000f90 	.word	0x20000f90

0800a9a4 <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
{
 800a9aa:	b510      	push	{r4, lr}
 800a9ac:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	f000 fd55 	bl	800b460 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800a9b6:	b134      	cbz	r4, 800a9c6 <RadioRxBoosted+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4809      	ldr	r0, [pc, #36]	@ (800a9e0 <RadioRxBoosted+0x3c>)
 800a9bc:	f001 fd88 	bl	800c4d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a9c0:	4807      	ldr	r0, [pc, #28]	@ (800a9e0 <RadioRxBoosted+0x3c>)
 800a9c2:	f001 fd4b 	bl	800c45c <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800a9c6:	4b07      	ldr	r3, [pc, #28]	@ (800a9e4 <RadioRxBoosted+0x40>)
 800a9c8:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 800a9cc:	b12a      	cbz	r2, 800a9da <RadioRxBoosted+0x36>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800a9ce:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
}
 800a9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRxBoosted( RxTimeout << 6 );
 800a9d6:	f000 bf83 	b.w	800b8e0 <SX126xSetRxBoosted>
 800a9da:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a9dc:	0180      	lsls	r0, r0, #6
 800a9de:	e7f8      	b.n	800a9d2 <RadioRxBoosted+0x2e>
 800a9e0:	20000fec 	.word	0x20000fec
 800a9e4:	20000f90 	.word	0x20000f90

0800a9e8 <RadioIrqProcess>:

  RadioIrqProcess();
}

void RadioIrqProcess( void )
{
 800a9e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9ea:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a9ee:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN( );
    // Clear IRQ flag
    const bool isIrqFired = IrqFired;
    IrqFired = false;
 800a9f0:	2600      	movs	r6, #0
    const bool isIrqFired = IrqFired;
 800a9f2:	4c6a      	ldr	r4, [pc, #424]	@ (800ab9c <RadioIrqProcess+0x1b4>)
 800a9f4:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
    IrqFired = false;
 800a9f8:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9fc:	f382 8810 	msr	PRIMASK, r2
    CRITICAL_SECTION_END( );

    if( isIrqFired == true )
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 80c8 	beq.w	800ab96 <RadioIrqProcess+0x1ae>
    {
        uint16_t irqRegs = SX126xGetIrqStatus( );
 800aa06:	f000 fe40 	bl	800b68a <SX126xGetIrqStatus>
 800aa0a:	4605      	mov	r5, r0
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 800aa0c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800aa10:	f000 fe0f 	bl	800b632 <SX126xClearIrqStatus>

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800aa14:	07e9      	lsls	r1, r5, #31
 800aa16:	d50e      	bpl.n	800aa36 <RadioIrqProcess+0x4e>
        {
            TimerStop( &TxTimeoutTimer );
 800aa18:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 800aa1c:	f001 fcd0 	bl	800c3c0 <UTIL_TIMER_Stop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 800aa20:	2001      	movs	r0, #1
 800aa22:	f000 fbf7 	bl	800b214 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	b12b      	cbz	r3, 800aa36 <RadioIrqProcess+0x4e>
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	b11b      	cbz	r3, 800aa36 <RadioIrqProcess+0x4e>
            {
                RadioEvents->TxDone( );
 800aa2e:	4798      	blx	r3
                Sx_Board_SetLedTx(false);
 800aa30:	4630      	mov	r0, r6
 800aa32:	f7f7 fcaf 	bl	8002394 <SX1262DVK1DAS_RADIO_BoardSetLedTx>
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 800aa36:	07aa      	lsls	r2, r5, #30
 800aa38:	d513      	bpl.n	800aa62 <RadioIrqProcess+0x7a>
        {
            TimerStop( &RxTimeoutTimer );
 800aa3a:	4859      	ldr	r0, [pc, #356]	@ (800aba0 <RadioIrqProcess+0x1b8>)
 800aa3c:	f001 fcc0 	bl	800c3c0 <UTIL_TIMER_Stop>

            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800aa40:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800aa44:	f894 6074 	ldrb.w	r6, [r4, #116]	@ 0x74
 800aa48:	d064      	beq.n	800ab14 <RadioIrqProcess+0x12c>
            {
                if( RxContinuous == false )
 800aa4a:	b916      	cbnz	r6, 800aa52 <RadioIrqProcess+0x6a>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 800aa4c:	2001      	movs	r0, #1
 800aa4e:	f000 fbe1 	bl	800b214 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	b12b      	cbz	r3, 800aa62 <RadioIrqProcess+0x7a>
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	b11b      	cbz	r3, 800aa62 <RadioIrqProcess+0x7a>
                {
                    RadioEvents->RxError( );
 800aa5a:	4798      	blx	r3
                SX126xGetPayload( RadioRxPayload, &size , 255 );
                SX126xGetPacketStatus( &RadioPktStatus );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
                {
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                    Sx_Board_SetLedRx(false);
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	f7f7 fca3 	bl	80023a8 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800aa62:	062b      	lsls	r3, r5, #24
 800aa64:	d50c      	bpl.n	800aa80 <RadioIrqProcess+0x98>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 800aa66:	2001      	movs	r0, #1
 800aa68:	f000 fbd4 	bl	800b214 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	b13b      	cbz	r3, 800aa80 <RadioIrqProcess+0x98>
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	b12b      	cbz	r3, 800aa80 <RadioIrqProcess+0x98>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 800aa74:	f3c5 2000 	ubfx	r0, r5, #8, #1
 800aa78:	4798      	blx	r3
                Sx_Board_SetLedRx(false);
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	f7f7 fc94 	bl	80023a8 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800aa80:	05ae      	lsls	r6, r5, #22
 800aa82:	d511      	bpl.n	800aaa8 <RadioIrqProcess+0xc0>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 800aa84:	f000 fbc0 	bl	800b208 <SX126xGetOperatingMode>
 800aa88:	2804      	cmp	r0, #4
 800aa8a:	d16f      	bne.n	800ab6c <RadioIrqProcess+0x184>
            {
                TimerStop( &TxTimeoutTimer );
 800aa8c:	4845      	ldr	r0, [pc, #276]	@ (800aba4 <RadioIrqProcess+0x1bc>)
 800aa8e:	f001 fc97 	bl	800c3c0 <UTIL_TIMER_Stop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800aa92:	2001      	movs	r0, #1
 800aa94:	f000 fbbe 	bl	800b214 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	b12b      	cbz	r3, 800aaa8 <RadioIrqProcess+0xc0>
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	b11b      	cbz	r3, 800aaa8 <RadioIrqProcess+0xc0>
                {
                    RadioEvents->TxTimeout( );
 800aaa0:	4798      	blx	r3
                    Sx_Board_SetLedTx(false);
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	f7f7 fc76 	bl	8002394 <SX1262DVK1DAS_RADIO_BoardSetLedTx>
                    Sx_Board_SetLedRx(false);
                }
            }
        }

        if( ( irqRegs & IRQ_PREAMBLE_DETECTED ) == IRQ_PREAMBLE_DETECTED )
 800aaa8:	0768      	lsls	r0, r5, #29
 800aaaa:	d505      	bpl.n	800aab8 <RadioIrqProcess+0xd0>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY PRE OK\n\r" );
 800aaac:	2200      	movs	r2, #0
 800aaae:	2003      	movs	r0, #3
 800aab0:	4611      	mov	r1, r2
 800aab2:	4b3d      	ldr	r3, [pc, #244]	@ (800aba8 <RadioIrqProcess+0x1c0>)
 800aab4:	f001 f960 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 800aab8:	0729      	lsls	r1, r5, #28
 800aaba:	d505      	bpl.n	800aac8 <RadioIrqProcess+0xe0>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY SYNC OK\n\r" );
 800aabc:	2200      	movs	r2, #0
 800aabe:	2003      	movs	r0, #3
 800aac0:	4611      	mov	r1, r2
 800aac2:	4b3a      	ldr	r3, [pc, #232]	@ (800abac <RadioIrqProcess+0x1c4>)
 800aac4:	f001 f958 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800aac8:	06ea      	lsls	r2, r5, #27
 800aaca:	d505      	bpl.n	800aad8 <RadioIrqProcess+0xf0>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR OK\n\r" );
 800aacc:	2200      	movs	r2, #0
 800aace:	2003      	movs	r0, #3
 800aad0:	4611      	mov	r1, r2
 800aad2:	4b37      	ldr	r3, [pc, #220]	@ (800abb0 <RadioIrqProcess+0x1c8>)
 800aad4:	f001 f950 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 800aad8:	06ab      	lsls	r3, r5, #26
 800aada:	d55c      	bpl.n	800ab96 <RadioIrqProcess+0x1ae>
        {
            TimerStop( &RxTimeoutTimer );
 800aadc:	4830      	ldr	r0, [pc, #192]	@ (800aba0 <RadioIrqProcess+0x1b8>)
 800aade:	f001 fc6f 	bl	800c3c0 <UTIL_TIMER_Stop>
            if( RxContinuous == false )
 800aae2:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800aae6:	b913      	cbnz	r3, 800aaee <RadioIrqProcess+0x106>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800aae8:	2001      	movs	r0, #1
 800aaea:	f000 fb93 	bl	800b214 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d050      	beq.n	800ab96 <RadioIrqProcess+0x1ae>
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d04d      	beq.n	800ab96 <RadioIrqProcess+0x1ae>
            {
                RadioEvents->RxTimeout( );
 800aafa:	4798      	blx	r3
                MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR KO\n\r" );
 800aafc:	2200      	movs	r2, #0
 800aafe:	4b2d      	ldr	r3, [pc, #180]	@ (800abb4 <RadioIrqProcess+0x1cc>)
 800ab00:	4611      	mov	r1, r2
 800ab02:	2003      	movs	r0, #3
 800ab04:	f001 f938 	bl	800bd78 <UTIL_ADV_TRACE_COND_FSend>
                Sx_Board_SetLedRx(false);
 800ab08:	2000      	movs	r0, #0
            }
        }
    }
}
 800ab0a:	b002      	add	sp, #8
 800ab0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                Sx_Board_SetLedRx(false);
 800ab10:	f7f7 bc4a 	b.w	80023a8 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
                if( RxContinuous == false )
 800ab14:	b996      	cbnz	r6, 800ab3c <RadioIrqProcess+0x154>
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 800ab16:	2001      	movs	r0, #1
 800ab18:	f000 fb7c 	bl	800b214 <SX126xSetOperatingMode>
                    SX126xWriteRegister( REG_RTC_CTRL, 0x00 );
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	f640 1002 	movw	r0, #2306	@ 0x902
 800ab22:	f000 feb1 	bl	800b888 <SX126xWriteRegister>
                    SX126xWriteRegister( REG_EVT_CLR, SX126xReadRegister( REG_EVT_CLR ) | ( 1 << 1 ) );
 800ab26:	f640 1044 	movw	r0, #2372	@ 0x944
 800ab2a:	f000 ff47 	bl	800b9bc <SX126xReadRegister>
 800ab2e:	f040 0102 	orr.w	r1, r0, #2
 800ab32:	b2c9      	uxtb	r1, r1
 800ab34:	f640 1044 	movw	r0, #2372	@ 0x944
 800ab38:	f000 fea6 	bl	800b888 <SX126xWriteRegister>
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 800ab3c:	22ff      	movs	r2, #255	@ 0xff
 800ab3e:	f10d 0107 	add.w	r1, sp, #7
 800ab42:	481d      	ldr	r0, [pc, #116]	@ (800abb8 <RadioIrqProcess+0x1d0>)
 800ab44:	f001 f84c 	bl	800bbe0 <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 800ab48:	481c      	ldr	r0, [pc, #112]	@ (800abbc <RadioIrqProcess+0x1d4>)
 800ab4a:	f000 fdb9 	bl	800b6c0 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d086      	beq.n	800aa62 <RadioIrqProcess+0x7a>
 800ab54:	689e      	ldr	r6, [r3, #8]
 800ab56:	2e00      	cmp	r6, #0
 800ab58:	d083      	beq.n	800aa62 <RadioIrqProcess+0x7a>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 800ab5a:	f994 3189 	ldrsb.w	r3, [r4, #393]	@ 0x189
 800ab5e:	f994 2188 	ldrsb.w	r2, [r4, #392]	@ 0x188
 800ab62:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ab66:	4814      	ldr	r0, [pc, #80]	@ (800abb8 <RadioIrqProcess+0x1d0>)
 800ab68:	47b0      	blx	r6
 800ab6a:	e777      	b.n	800aa5c <RadioIrqProcess+0x74>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 800ab6c:	f000 fb4c 	bl	800b208 <SX126xGetOperatingMode>
 800ab70:	2805      	cmp	r0, #5
 800ab72:	d199      	bne.n	800aaa8 <RadioIrqProcess+0xc0>
                TimerStop( &RxTimeoutTimer );
 800ab74:	480a      	ldr	r0, [pc, #40]	@ (800aba0 <RadioIrqProcess+0x1b8>)
 800ab76:	f001 fc23 	bl	800c3c0 <UTIL_TIMER_Stop>
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	f000 fb4a 	bl	800b214 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d090      	beq.n	800aaa8 <RadioIrqProcess+0xc0>
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d08d      	beq.n	800aaa8 <RadioIrqProcess+0xc0>
                    RadioEvents->RxTimeout( );
 800ab8c:	4798      	blx	r3
                    Sx_Board_SetLedRx(false);
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f7f7 fc0a 	bl	80023a8 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
 800ab94:	e788      	b.n	800aaa8 <RadioIrqProcess+0xc0>
}
 800ab96:	b002      	add	sp, #8
 800ab98:	bd70      	pop	{r4, r5, r6, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20000f90 	.word	0x20000f90
 800aba0:	20000fec 	.word	0x20000fec
 800aba4:	20000fd4 	.word	0x20000fd4
 800aba8:	0800d487 	.word	0x0800d487
 800abac:	0800d494 	.word	0x0800d494
 800abb0:	0800d4a2 	.word	0x0800d4a2
 800abb4:	0800d4af 	.word	0x0800d4af
 800abb8:	2000100d 	.word	0x2000100d
 800abbc:	2000110c 	.word	0x2000110c

0800abc0 <RadioOnDioIrq>:
  IrqFired = true;
 800abc0:	2201      	movs	r2, #1
 800abc2:	4b02      	ldr	r3, [pc, #8]	@ (800abcc <RadioOnDioIrq+0xc>)
 800abc4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  RadioIrqProcess();
 800abc8:	f7ff bf0e 	b.w	800a9e8 <RadioIrqProcess>
 800abcc:	20000f90 	.word	0x20000f90

0800abd0 <RadioTimeOnAir>:
{
 800abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800abd6:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800abda:	f89d e01c 	ldrb.w	lr, [sp, #28]
 800abde:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
 800abe2:	b140      	cbz	r0, 800abf6 <RadioTimeOnAir+0x26>
 800abe4:	2801      	cmp	r0, #1
 800abe6:	d014      	beq.n	800ac12 <RadioTimeOnAir+0x42>
 800abe8:	2201      	movs	r2, #1
 800abea:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
 800abec:	1898      	adds	r0, r3, r2
 800abee:	3801      	subs	r0, #1
 800abf0:	fbb0 f0f2 	udiv	r0, r0, r2
}
 800abf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800abf6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
           ( ( fixLen == false ) ? 8 : 0 ) +
 800abfa:	f087 0701 	eor.w	r7, r7, #1
    return ( preambleLen << 3 ) +
 800abfe:	00e3      	lsls	r3, r4, #3
 800ac00:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800ac04:	3318      	adds	r3, #24
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 800ac06:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
             ( syncWordLength << 3 ) +
 800ac0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800ac0e:	434b      	muls	r3, r1
        break;
 800ac10:	e7ec      	b.n	800abec <RadioTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800ac12:	1f50      	subs	r0, r2, #5
 800ac14:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 800ac16:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800ac1a:	d802      	bhi.n	800ac22 <RadioTimeOnAir+0x52>
        if( preambleLen < 12 )
 800ac1c:	2c0c      	cmp	r4, #12
 800ac1e:	bf38      	it	cc
 800ac20:	240c      	movcc	r4, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ac22:	b9d9      	cbnz	r1, 800ac5c <RadioTimeOnAir+0x8c>
 800ac24:	f1a2 0c0b 	sub.w	ip, r2, #11
 800ac28:	f1bc 0f01 	cmp.w	ip, #1
 800ac2c:	bf8c      	ite	hi
 800ac2e:	f04f 0c00 	movhi.w	ip, #0
 800ac32:	f04f 0c01 	movls.w	ip, #1
                            ( fixLen ? 0 : 20 );
 800ac36:	2f00      	cmp	r7, #0
                            ( crcOn ? 16 : 0 ) -
 800ac38:	ea4f 1005 	mov.w	r0, r5, lsl #4
                            ( fixLen ? 0 : 20 );
 800ac3c:	bf0c      	ite	eq
 800ac3e:	2514      	moveq	r5, #20
 800ac40:	2500      	movne	r5, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800ac42:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800ac46:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
 800ac4a:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
 800ac4c:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800ac50:	4428      	add	r0, r5
            ceilDenominator = 4 * ( datarate - 2 );
 800ac52:	f1a2 0702 	sub.w	r7, r2, #2
    if( datarate <= 6 )
 800ac56:	d80d      	bhi.n	800ac74 <RadioTimeOnAir+0xa4>
            ceilDenominator = 4 * datarate;
 800ac58:	4635      	mov	r5, r6
 800ac5a:	e010      	b.n	800ac7e <RadioTimeOnAir+0xae>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ac5c:	2901      	cmp	r1, #1
 800ac5e:	d106      	bne.n	800ac6e <RadioTimeOnAir+0x9e>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ac60:	f1a2 000c 	sub.w	r0, r2, #12
 800ac64:	f1d0 0c00 	rsbs	ip, r0, #0
 800ac68:	eb4c 0c00 	adc.w	ip, ip, r0
 800ac6c:	e7e3      	b.n	800ac36 <RadioTimeOnAir+0x66>
    bool    lowDatareOptimize = false;
 800ac6e:	f04f 0c00 	mov.w	ip, #0
 800ac72:	e7e0      	b.n	800ac36 <RadioTimeOnAir+0x66>
        ceilNumerator += 8;
 800ac74:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 800ac76:	f1bc 0f00 	cmp.w	ip, #0
 800ac7a:	d0ed      	beq.n	800ac58 <RadioTimeOnAir+0x88>
            ceilDenominator = 4 * ( datarate - 2 );
 800ac7c:	00bd      	lsls	r5, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	bfac      	ite	ge
 800ac82:	182e      	addge	r6, r5, r0
 800ac84:	1c2e      	addlt	r6, r5, #0
 800ac86:	1e70      	subs	r0, r6, #1
 800ac88:	fb90 f0f5 	sdiv	r0, r0, r5
    if( datarate <= 6 )
 800ac8c:	2a06      	cmp	r2, #6
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800ac8e:	4a0b      	ldr	r2, [pc, #44]	@ (800acbc <RadioTimeOnAir+0xec>)
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800ac90:	fb03 4400 	mla	r4, r3, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800ac94:	4411      	add	r1, r2
 800ac96:	f891 10b4 	ldrb.w	r1, [r1, #180]	@ 0xb4
    int32_t intermediate =
 800ac9a:	bf8c      	ite	hi
 800ac9c:	340c      	addhi	r4, #12
        intermediate += 2;
 800ac9e:	340e      	addls	r4, #14
    switch( bw )
 800aca0:	290a      	cmp	r1, #10
 800aca2:	d80a      	bhi.n	800acba <RadioTimeOnAir+0xea>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800aca4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800aca8:	00a3      	lsls	r3, r4, #2
 800acaa:	3301      	adds	r3, #1
 800acac:	40bb      	lsls	r3, r7
 800acae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800acb2:	4343      	muls	r3, r0
 800acb4:	f8d2 20b8 	ldr.w	r2, [r2, #184]	@ 0xb8
 800acb8:	e798      	b.n	800abec <RadioTimeOnAir+0x1c>
    return ( numerator + denominator - 1 ) / denominator;
 800acba:	deff      	udf	#255	@ 0xff
 800acbc:	0800cdd8 	.word	0x0800cdd8

0800acc0 <RadioSetPublicNetwork>:
{
 800acc0:	b510      	push	{r4, lr}
 800acc2:	4604      	mov	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800acc4:	4b0d      	ldr	r3, [pc, #52]	@ (800acfc <RadioSetPublicNetwork+0x3c>)
 800acc6:	f883 0190 	strb.w	r0, [r3, #400]	@ 0x190
 800acca:	f883 0191 	strb.w	r0, [r3, #401]	@ 0x191
    switch( modem )
 800acce:	f000 f817 	bl	800ad00 <RadioSetModem.part.0>
    if( enable == true )
 800acd2:	b15c      	cbz	r4, 800acec <RadioSetPublicNetwork+0x2c>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800acd4:	2134      	movs	r1, #52	@ 0x34
 800acd6:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800acda:	f000 fdd5 	bl	800b888 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800acde:	2144      	movs	r1, #68	@ 0x44
}
 800ace0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800ace4:	f240 7041 	movw	r0, #1857	@ 0x741
 800ace8:	f000 bdce 	b.w	800b888 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800acec:	2114      	movs	r1, #20
 800acee:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800acf2:	f000 fdc9 	bl	800b888 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800acf6:	2124      	movs	r1, #36	@ 0x24
 800acf8:	e7f2      	b.n	800ace0 <RadioSetPublicNetwork+0x20>
 800acfa:	bf00      	nop
 800acfc:	20000f90 	.word	0x20000f90

0800ad00 <RadioSetModem.part.0>:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800ad00:	2001      	movs	r0, #1
void RadioSetModem( RadioModems_t modem )
 800ad02:	b508      	push	{r3, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800ad04:	f000 fc2c 	bl	800b560 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 800ad08:	4b06      	ldr	r3, [pc, #24]	@ (800ad24 <RadioSetModem.part.0+0x24>)
 800ad0a:	f893 0190 	ldrb.w	r0, [r3, #400]	@ 0x190
 800ad0e:	f893 2191 	ldrb.w	r2, [r3, #401]	@ 0x191
 800ad12:	4282      	cmp	r2, r0
 800ad14:	d005      	beq.n	800ad22 <RadioSetModem.part.0+0x22>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800ad16:	f883 0191 	strb.w	r0, [r3, #401]	@ 0x191
}
 800ad1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 800ad1e:	f7ff bfcf 	b.w	800acc0 <RadioSetPublicNetwork>
}
 800ad22:	bd08      	pop	{r3, pc}
 800ad24:	20000f90 	.word	0x20000f90

0800ad28 <RadioSetModem>:
    switch( modem )
 800ad28:	2801      	cmp	r0, #1
{
 800ad2a:	b508      	push	{r3, lr}
    switch( modem )
 800ad2c:	d007      	beq.n	800ad3e <RadioSetModem+0x16>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 800ad2e:	2000      	movs	r0, #0
 800ad30:	f000 fc16 	bl	800b560 <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 800ad34:	2200      	movs	r2, #0
 800ad36:	4b04      	ldr	r3, [pc, #16]	@ (800ad48 <RadioSetModem+0x20>)
 800ad38:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
}
 800ad3c:	bd08      	pop	{r3, pc}
 800ad3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad42:	f7ff bfdd 	b.w	800ad00 <RadioSetModem.part.0>
 800ad46:	bf00      	nop
 800ad48:	20000f90 	.word	0x20000f90

0800ad4c <RadioSetRxConfig>:
{
 800ad4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad50:	b085      	sub	sp, #20
 800ad52:	460f      	mov	r7, r1
 800ad54:	f89d 104c 	ldrb.w	r1, [sp, #76]	@ 0x4c
 800ad58:	f89d a044 	ldrb.w	sl, [sp, #68]	@ 0x44
 800ad5c:	9100      	str	r1, [sp, #0]
 800ad5e:	f89d 105c 	ldrb.w	r1, [sp, #92]	@ 0x5c
 800ad62:	f8bd 8040 	ldrh.w	r8, [sp, #64]	@ 0x40
        symbTimeout = 0;
 800ad66:	2900      	cmp	r1, #0
 800ad68:	bf18      	it	ne
 800ad6a:	f04f 0800 	movne.w	r8, #0
        MaxPayloadLength = 0xFF;
 800ad6e:	f1ba 0f00 	cmp.w	sl, #0
{
 800ad72:	4615      	mov	r5, r2
 800ad74:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
        MaxPayloadLength = 0xFF;
 800ad78:	bf08      	it	eq
 800ad7a:	22ff      	moveq	r2, #255	@ 0xff
    RxContinuous = rxContinuous;
 800ad7c:	4c5d      	ldr	r4, [pc, #372]	@ (800aef4 <RadioSetRxConfig+0x1a8>)
 800ad7e:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800aef8 <RadioSetRxConfig+0x1ac>
    switch( modem )
 800ad82:	4681      	mov	r9, r0
{
 800ad84:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
    RxContinuous = rxContinuous;
 800ad88:	f884 1074 	strb.w	r1, [r4, #116]	@ 0x74
    if( fixLen == true )
 800ad8c:	f88b 2000 	strb.w	r2, [fp]
    switch( modem )
 800ad90:	b120      	cbz	r0, 800ad9c <RadioSetRxConfig+0x50>
 800ad92:	2801      	cmp	r0, #1
 800ad94:	d04d      	beq.n	800ae32 <RadioSetRxConfig+0xe6>
}
 800ad96:	b005      	add	sp, #20
 800ad98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800ad9c:	f000 faf6 	bl	800b38c <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800ada0:	230b      	movs	r3, #11
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800ada2:	0078      	lsls	r0, r7, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800ada4:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ada8:	f884 902c 	strb.w	r9, [r4, #44]	@ 0x2c
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800adac:	6325      	str	r5, [r4, #48]	@ 0x30
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800adae:	f7ff fda7 	bl	800a900 <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800adb2:	f641 0304 	movw	r3, #6148	@ 0x1804
 800adb6:	8123      	strh	r3, [r4, #8]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800adb8:	f89b 3000 	ldrb.w	r3, [fp]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800adbc:	00f6      	lsls	r6, r6, #3
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800adbe:	7323      	strb	r3, [r4, #12]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800adc0:	9b00      	ldr	r3, [sp, #0]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800adc2:	f08a 0a01 	eor.w	sl, sl, #1
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	bf0c      	ite	eq
 800adca:	2301      	moveq	r3, #1
 800adcc:	23f2      	movne	r3, #242	@ 0xf2
 800adce:	7363      	strb	r3, [r4, #13]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800add0:	2301      	movs	r3, #1
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800add2:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800add6:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800add8:	f884 9004 	strb.w	r9, [r4, #4]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800addc:	80e6      	strh	r6, [r4, #6]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800adde:	f884 900a 	strb.w	r9, [r4, #10]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800ade2:	f884 a00b 	strb.w	sl, [r4, #11]
            RadioStandby( );
 800ade6:	f7ff fd09 	bl	800a7fc <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800adea:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800adee:	3800      	subs	r0, #0
 800adf0:	bf18      	it	ne
 800adf2:	2001      	movne	r0, #1
 800adf4:	f7ff ff98 	bl	800ad28 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800adf8:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800adfc:	f000 fbc0 	bl	800b580 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800ae00:	1d20      	adds	r0, r4, #4
 800ae02:	f000 fce5 	bl	800b7d0 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800ae06:	4a3d      	ldr	r2, [pc, #244]	@ (800aefc <RadioSetRxConfig+0x1b0>)
 800ae08:	ab02      	add	r3, sp, #8
 800ae0a:	f8d2 00e4 	ldr.w	r0, [r2, #228]	@ 0xe4
 800ae0e:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
 800ae12:	c303      	stmia	r3!, {r0, r1}
 800ae14:	a802      	add	r0, sp, #8
 800ae16:	f000 fcae 	bl	800b776 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 800ae1a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800ae1e:	f000 fdd9 	bl	800b9d4 <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800ae22:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800ae26:	fb03 f308 	mul.w	r3, r3, r8
 800ae2a:	fbb3 f3f5 	udiv	r3, r3, r5
 800ae2e:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800ae30:	e7b1      	b.n	800ad96 <RadioSetRxConfig+0x4a>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800ae32:	2000      	movs	r0, #0
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	f000 faa9 	bl	800b38c <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800ae3a:	4930      	ldr	r1, [pc, #192]	@ (800aefc <RadioSetRxConfig+0x1b0>)
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800ae3c:	b2ea      	uxtb	r2, r5
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800ae3e:	4439      	add	r1, r7
 800ae40:	f891 10b4 	ldrb.w	r1, [r1, #180]	@ 0xb4
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ae44:	9b01      	ldr	r3, [sp, #4]
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ae46:	f884 902c 	strb.w	r9, [r4, #44]	@ 0x2c
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800ae4a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ae4e:	2f00      	cmp	r7, #0
 800ae50:	d140      	bne.n	800aed4 <RadioSetRxConfig+0x188>
 800ae52:	3d0b      	subs	r5, #11
 800ae54:	2d01      	cmp	r5, #1
 800ae56:	bf8c      	ite	hi
 800ae58:	2500      	movhi	r5, #0
 800ae5a:	2501      	movls	r5, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800ae5c:	3a05      	subs	r2, #5
 800ae5e:	2a01      	cmp	r2, #1
 800ae60:	d802      	bhi.n	800ae68 <RadioSetRxConfig+0x11c>
                if( preambleLen < 12 )
 800ae62:	2e0c      	cmp	r6, #12
 800ae64:	bf38      	it	cc
 800ae66:	260c      	movcc	r6, #12
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800ae68:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	7123      	strb	r3, [r4, #4]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800ae70:	f89b 3000 	ldrb.w	r3, [fp]
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800ae74:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800ae78:	74e3      	strb	r3, [r4, #19]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800ae7a:	9b00      	ldr	r3, [sp, #0]
 800ae7c:	f884 503f 	strb.w	r5, [r4, #63]	@ 0x3f
 800ae80:	7523      	strb	r3, [r4, #20]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800ae82:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800ae86:	8226      	strh	r6, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800ae88:	7563      	strb	r3, [r4, #21]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800ae8a:	f884 a012 	strb.w	sl, [r4, #18]
            RadioStandby( );
 800ae8e:	f7ff fcb5 	bl	800a7fc <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800ae92:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ae96:	3800      	subs	r0, #0
 800ae98:	bf18      	it	ne
 800ae9a:	2001      	movne	r0, #1
 800ae9c:	f7ff ff44 	bl	800ad28 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800aea0:	4817      	ldr	r0, [pc, #92]	@ (800af00 <RadioSetRxConfig+0x1b4>)
 800aea2:	f000 fb6d 	bl	800b580 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800aea6:	4817      	ldr	r0, [pc, #92]	@ (800af04 <RadioSetRxConfig+0x1b8>)
 800aea8:	f000 fc92 	bl	800b7d0 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 800aeac:	fa5f f088 	uxtb.w	r0, r8
 800aeb0:	f000 fd32 	bl	800b918 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800aeb4:	7d63      	ldrb	r3, [r4, #21]
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 800aeb6:	f240 7036 	movw	r0, #1846	@ 0x736
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d113      	bne.n	800aee6 <RadioSetRxConfig+0x19a>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 800aebe:	f000 fd7d 	bl	800b9bc <SX126xReadRegister>
 800aec2:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 800aec6:	f240 7036 	movw	r0, #1846	@ 0x736
 800aeca:	f000 fcdd 	bl	800b888 <SX126xWriteRegister>
            break;
 800aece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aed2:	e7ac      	b.n	800ae2e <RadioSetRxConfig+0xe2>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800aed4:	2f01      	cmp	r7, #1
 800aed6:	d104      	bne.n	800aee2 <RadioSetRxConfig+0x196>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800aed8:	f1a5 000c 	sub.w	r0, r5, #12
 800aedc:	4245      	negs	r5, r0
 800aede:	4145      	adcs	r5, r0
 800aee0:	e7bc      	b.n	800ae5c <RadioSetRxConfig+0x110>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800aee2:	2500      	movs	r5, #0
 800aee4:	e7ba      	b.n	800ae5c <RadioSetRxConfig+0x110>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 800aee6:	f000 fd69 	bl	800b9bc <SX126xReadRegister>
 800aeea:	f040 0104 	orr.w	r1, r0, #4
 800aeee:	b2c9      	uxtb	r1, r1
 800aef0:	e7e9      	b.n	800aec6 <RadioSetRxConfig+0x17a>
 800aef2:	bf00      	nop
 800aef4:	20000f90 	.word	0x20000f90
 800aef8:	200000d0 	.word	0x200000d0
 800aefc:	0800cdd8 	.word	0x0800cdd8
 800af00:	20000fbc 	.word	0x20000fbc
 800af04:	20000f94 	.word	0x20000f94

0800af08 <RadioSetTxConfig>:
{
 800af08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800af0e:	4688      	mov	r8, r1
 800af10:	4693      	mov	fp, r2
    switch( modem )
 800af12:	4606      	mov	r6, r0
{
 800af14:	f8bd 7038 	ldrh.w	r7, [sp, #56]	@ 0x38
 800af18:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 800af1c:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 800af20:	4c52      	ldr	r4, [pc, #328]	@ (800b06c <RadioSetTxConfig+0x164>)
    switch( modem )
 800af22:	b148      	cbz	r0, 800af38 <RadioSetTxConfig+0x30>
 800af24:	2801      	cmp	r0, #1
 800af26:	d046      	beq.n	800afb6 <RadioSetTxConfig+0xae>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 800af28:	f640 0089 	movw	r0, #2185	@ 0x889
 800af2c:	f000 fd46 	bl	800b9bc <SX126xReadRegister>
 800af30:	f040 0104 	orr.w	r1, r0, #4
 800af34:	b2c9      	uxtb	r1, r1
 800af36:	e083      	b.n	800b040 <RadioSetTxConfig+0x138>
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800af38:	220b      	movs	r2, #11
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800af3a:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800af3e:	0058      	lsls	r0, r3, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800af40:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800af44:	6325      	str	r5, [r4, #48]	@ 0x30
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800af46:	f7ff fcdb 	bl	800a900 <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800af4a:	f641 0304 	movw	r3, #6148	@ 0x1804
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800af4e:	f1ba 0f00 	cmp.w	sl, #0
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800af52:	8123      	strh	r3, [r4, #8]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800af54:	bf0c      	ite	eq
 800af56:	2301      	moveq	r3, #1
 800af58:	23f2      	movne	r3, #242	@ 0xf2
 800af5a:	7363      	strb	r3, [r4, #13]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800af5c:	2301      	movs	r3, #1
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800af5e:	00ff      	lsls	r7, r7, #3
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800af60:	f089 0901 	eor.w	r9, r9, #1
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800af64:	73a3      	strb	r3, [r4, #14]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800af66:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 800af6a:	f8c4 b034 	str.w	fp, [r4, #52]	@ 0x34
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800af6e:	7126      	strb	r6, [r4, #4]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800af70:	80e7      	strh	r7, [r4, #6]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800af72:	72a6      	strb	r6, [r4, #10]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800af74:	f884 900b 	strb.w	r9, [r4, #11]
            RadioStandby( );
 800af78:	f7ff fc40 	bl	800a7fc <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800af7c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800af80:	3800      	subs	r0, #0
 800af82:	bf18      	it	ne
 800af84:	2001      	movne	r0, #1
 800af86:	f7ff fecf 	bl	800ad28 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800af8a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800af8e:	f000 faf7 	bl	800b580 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800af92:	1d20      	adds	r0, r4, #4
 800af94:	f000 fc1c 	bl	800b7d0 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800af98:	466b      	mov	r3, sp
 800af9a:	4a35      	ldr	r2, [pc, #212]	@ (800b070 <RadioSetTxConfig+0x168>)
 800af9c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	@ 0xe4
 800afa0:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
 800afa4:	c303      	stmia	r3!, {r0, r1}
 800afa6:	4668      	mov	r0, sp
 800afa8:	f000 fbe5 	bl	800b776 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 800afac:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800afb0:	f000 fd10 	bl	800b9d4 <SX126xSetWhiteningSeed>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800afb4:	e7b8      	b.n	800af28 <RadioSetTxConfig+0x20>
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800afb6:	492e      	ldr	r1, [pc, #184]	@ (800b070 <RadioSetTxConfig+0x168>)
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800afb8:	b2ea      	uxtb	r2, r5
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800afba:	4419      	add	r1, r3
 800afbc:	f891 10b4 	ldrb.w	r1, [r1, #180]	@ 0xb4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800afc0:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800afc4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d145      	bne.n	800b058 <RadioSetTxConfig+0x150>
 800afcc:	3d0b      	subs	r5, #11
 800afce:	2d01      	cmp	r5, #1
 800afd0:	bf8c      	ite	hi
 800afd2:	2500      	movhi	r5, #0
 800afd4:	2501      	movls	r5, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800afd6:	3a05      	subs	r2, #5
 800afd8:	2a01      	cmp	r2, #1
 800afda:	d802      	bhi.n	800afe2 <RadioSetTxConfig+0xda>
                if( preambleLen < 12 )
 800afdc:	2f0c      	cmp	r7, #12
 800afde:	bf38      	it	cc
 800afe0:	270c      	movcc	r7, #12
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800afe2:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800afe6:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800afea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800afee:	2301      	movs	r3, #1
 800aff0:	7123      	strb	r3, [r4, #4]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800aff2:	4b20      	ldr	r3, [pc, #128]	@ (800b074 <RadioSetTxConfig+0x16c>)
 800aff4:	f884 503f 	strb.w	r5, [r4, #63]	@ 0x3f
 800aff8:	781b      	ldrb	r3, [r3, #0]
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800affa:	8227      	strh	r7, [r4, #16]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800affc:	74e3      	strb	r3, [r4, #19]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800affe:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800b002:	f884 9012 	strb.w	r9, [r4, #18]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800b006:	7563      	strb	r3, [r4, #21]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800b008:	f884 a014 	strb.w	sl, [r4, #20]
            RadioStandby( );
 800b00c:	f7ff fbf6 	bl	800a7fc <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800b010:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800b014:	3800      	subs	r0, #0
 800b016:	bf18      	it	ne
 800b018:	2001      	movne	r0, #1
 800b01a:	f7ff fe85 	bl	800ad28 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800b01e:	4816      	ldr	r0, [pc, #88]	@ (800b078 <RadioSetTxConfig+0x170>)
 800b020:	f000 faae 	bl	800b580 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800b024:	4815      	ldr	r0, [pc, #84]	@ (800b07c <RadioSetTxConfig+0x174>)
 800b026:	f000 fbd3 	bl	800b7d0 <SX126xSetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800b02a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800b02e:	2b06      	cmp	r3, #6
 800b030:	f47f af7a 	bne.w	800af28 <RadioSetTxConfig+0x20>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) & ~( 1 << 2 ) );
 800b034:	f640 0089 	movw	r0, #2185	@ 0x889
 800b038:	f000 fcc0 	bl	800b9bc <SX126xReadRegister>
 800b03c:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 800b040:	f640 0089 	movw	r0, #2185	@ 0x889
 800b044:	f000 fc20 	bl	800b888 <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 800b048:	4640      	mov	r0, r8
 800b04a:	f000 fd5a 	bl	800bb02 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 800b04e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b050:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800b052:	b003      	add	sp, #12
 800b054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d104      	bne.n	800b066 <RadioSetTxConfig+0x15e>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800b05c:	f1a5 030c 	sub.w	r3, r5, #12
 800b060:	425d      	negs	r5, r3
 800b062:	415d      	adcs	r5, r3
 800b064:	e7b7      	b.n	800afd6 <RadioSetTxConfig+0xce>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800b066:	2500      	movs	r5, #0
 800b068:	e7b5      	b.n	800afd6 <RadioSetTxConfig+0xce>
 800b06a:	bf00      	nop
 800b06c:	20000f90 	.word	0x20000f90
 800b070:	0800cdd8 	.word	0x0800cdd8
 800b074:	200000d0 	.word	0x200000d0
 800b078:	20000fbc 	.word	0x20000fbc
 800b07c:	20000f94 	.word	0x20000f94

0800b080 <RadioIsChannelFree>:
{
 800b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	4604      	mov	r4, r0
 800b086:	b08a      	sub	sp, #40	@ 0x28
    RadioSetModem( MODEM_FSK );
 800b088:	2000      	movs	r0, #0
{
 800b08a:	460d      	mov	r5, r1
 800b08c:	4617      	mov	r7, r2
 800b08e:	461e      	mov	r6, r3
    RadioSetModem( MODEM_FSK );
 800b090:	f7ff fe4a 	bl	800ad28 <RadioSetModem>
    SX126xSetRfFrequency( freq );
 800b094:	4620      	mov	r0, r4
 800b096:	f000 fa3f 	bl	800b518 <SX126xSetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800b09a:	2400      	movs	r4, #0
 800b09c:	f04f 0801 	mov.w	r8, #1
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	e9cd 4808 	strd	r4, r8, [sp, #32]
 800b0ae:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800b0b2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800b0b6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800b0ba:	e9cd 5300 	strd	r5, r3, [sp]
 800b0be:	4623      	mov	r3, r4
 800b0c0:	f7ff fe44 	bl	800ad4c <RadioSetRxConfig>
    RadioRx( 0 );
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f7ff fc4b 	bl	800a960 <RadioRx>
    RADIO_DELAY_MS( 1 );
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	f7f6 fdf7 	bl	8001cbe <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800b0d0:	f001 f932 	bl	800c338 <UTIL_TIMER_GetCurrentTime>
 800b0d4:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f001 f938 	bl	800c34c <UTIL_TIMER_GetElapsedTime>
 800b0dc:	42b0      	cmp	r0, r6
 800b0de:	d306      	bcc.n	800b0ee <RadioIsChannelFree+0x6e>
    bool     status           = true;
 800b0e0:	2401      	movs	r4, #1
    RadioSleep( );
 800b0e2:	f7ff fbcd 	bl	800a880 <RadioSleep>
}
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	b00a      	add	sp, #40	@ 0x28
 800b0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SX126xGetRssiInst( );
 800b0ee:	f000 fad9 	bl	800b6a4 <SX126xGetRssiInst>
        if( rssi > rssiThresh )
 800b0f2:	4287      	cmp	r7, r0
 800b0f4:	daef      	bge.n	800b0d6 <RadioIsChannelFree+0x56>
            status = false;
 800b0f6:	2400      	movs	r4, #0
 800b0f8:	e7f3      	b.n	800b0e2 <RadioIsChannelFree+0x62>

0800b0fa <RadioRandom>:
{
 800b0fa:	b510      	push	{r4, lr}
 800b0fc:	f7ff fe00 	bl	800ad00 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800b100:	2300      	movs	r3, #0
 800b102:	461a      	mov	r2, r3
 800b104:	4619      	mov	r1, r3
 800b106:	4618      	mov	r0, r3
 800b108:	f000 f9aa 	bl	800b460 <SX126xSetDioIrqParams>
    rnd = SX126xGetRandom( );
 800b10c:	f000 fc7e 	bl	800ba0c <SX126xGetRandom>
 800b110:	4604      	mov	r4, r0
    Sx_Board_SetLedRx(false);
 800b112:	2000      	movs	r0, #0
 800b114:	f7f7 f948 	bl	80023a8 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
}
 800b118:	4620      	mov	r0, r4
 800b11a:	bd10      	pop	{r4, pc}

0800b11c <RadioAddRegisterToRetentionList>:
{
 800b11c:	b530      	push	{r4, r5, lr}
 800b11e:	b085      	sub	sp, #20
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800b120:	a901      	add	r1, sp, #4
{
 800b122:	4604      	mov	r4, r0
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800b124:	2209      	movs	r2, #9
 800b126:	f240 209f 	movw	r0, #671	@ 0x29f
 800b12a:	f000 fc22 	bl	800b972 <SX126xReadRegisters>
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 800b12e:	2100      	movs	r1, #0
    const uint8_t nbOfRegisters = buffer[0];
 800b130:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 800b134:	a801      	add	r0, sp, #4
 800b136:	b2ca      	uxtb	r2, r1
 800b138:	4293      	cmp	r3, r2
 800b13a:	d813      	bhi.n	800b164 <RadioAddRegisterToRetentionList+0x48>
    if( nbOfRegisters < MAX_NB_REG_IN_RETENTION )
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d81b      	bhi.n	800b178 <RadioAddRegisterToRetentionList+0x5c>
        buffer[0] += 1;
 800b140:	1c5a      	adds	r2, r3, #1
 800b142:	f88d 2004 	strb.w	r2, [sp, #4]
        registerList[2 * nbOfRegisters]     = ( uint8_t )( registerAddress >> 8 );
 800b146:	aa04      	add	r2, sp, #16
 800b148:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800b14c:	0a22      	lsrs	r2, r4, #8
 800b14e:	f803 2c0b 	strb.w	r2, [r3, #-11]
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800b152:	f240 209f 	movw	r0, #671	@ 0x29f
 800b156:	2209      	movs	r2, #9
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 800b158:	f803 4c0a 	strb.w	r4, [r3, #-10]
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800b15c:	a901      	add	r1, sp, #4
 800b15e:	f000 fae9 	bl	800b734 <SX126xWriteRegisters>
 800b162:	e009      	b.n	800b178 <RadioAddRegisterToRetentionList+0x5c>
        if( registerAddress == ( ( uint16_t ) registerList[2 * i] << 8 ) + registerList[2 * i + 1] )
 800b164:	4602      	mov	r2, r0
 800b166:	7845      	ldrb	r5, [r0, #1]
 800b168:	7892      	ldrb	r2, [r2, #2]
 800b16a:	3101      	adds	r1, #1
 800b16c:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 800b170:	4294      	cmp	r4, r2
 800b172:	f100 0002 	add.w	r0, r0, #2
 800b176:	d1de      	bne.n	800b136 <RadioAddRegisterToRetentionList+0x1a>
}
 800b178:	b005      	add	sp, #20
 800b17a:	bd30      	pop	{r4, r5, pc}

0800b17c <RadioInit>:
{
 800b17c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800b17e:	4d1e      	ldr	r5, [pc, #120]	@ (800b1f8 <RadioInit+0x7c>)
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800b180:	2400      	movs	r4, #0
    RadioEvents = events;
 800b182:	462e      	mov	r6, r5
 800b184:	f846 0b44 	str.w	r0, [r6], #68
    SX126xInit( RadioOnDioIrq );
 800b188:	481c      	ldr	r0, [pc, #112]	@ (800b1fc <RadioInit+0x80>)
 800b18a:	f000 f99f 	bl	800b4cc <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 800b18e:	2000      	movs	r0, #0
 800b190:	f000 f898 	bl	800b2c4 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 800b194:	2001      	movs	r0, #1
 800b196:	f000 f905 	bl	800b3a4 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 800b19a:	2100      	movs	r1, #0
 800b19c:	4608      	mov	r0, r1
 800b19e:	f000 fa3b 	bl	800b618 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 800b1a2:	2104      	movs	r1, #4
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	f000 fc68 	bl	800ba7a <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4608      	mov	r0, r1
 800b1b4:	f000 f954 	bl	800b460 <SX126xSetDioIrqParams>
    RadioAddRegisterToRetentionList( REG_RX_GAIN );
 800b1b8:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800b1bc:	f7ff ffae 	bl	800b11c <RadioAddRegisterToRetentionList>
    RadioAddRegisterToRetentionList( REG_TX_MODULATION );
 800b1c0:	f640 0089 	movw	r0, #2185	@ 0x889
 800b1c4:	f7ff ffaa 	bl	800b11c <RadioAddRegisterToRetentionList>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800b1c8:	4622      	mov	r2, r4
 800b1ca:	f04f 31ff 	mov.w	r1, #4294967295
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b200 <RadioInit+0x84>)
 800b1d2:	9400      	str	r4, [sp, #0]
 800b1d4:	f001 f896 	bl	800c304 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800b1d8:	4622      	mov	r2, r4
 800b1da:	f04f 31ff 	mov.w	r1, #4294967295
 800b1de:	4b09      	ldr	r3, [pc, #36]	@ (800b204 <RadioInit+0x88>)
 800b1e0:	9400      	str	r4, [sp, #0]
 800b1e2:	f105 005c 	add.w	r0, r5, #92	@ 0x5c
 800b1e6:	f001 f88d 	bl	800c304 <UTIL_TIMER_Create>
    IrqFired = false;
 800b1ea:	f885 407c 	strb.w	r4, [r5, #124]	@ 0x7c
}
 800b1ee:	b002      	add	sp, #8
 800b1f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return ( uint32_t )RadioGetWakeupTime( ) ;
 800b1f4:	f7ff bb7e 	b.w	800a8f4 <RadioGetWakeupTime>
 800b1f8:	20000f90 	.word	0x20000f90
 800b1fc:	0800abc1 	.word	0x0800abc1
 800b200:	0800a7d5 	.word	0x0800a7d5
 800b204:	0800a7e9 	.word	0x0800a7e9

0800b208 <SX126xGetOperatingMode>:
}

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
}
 800b208:	4b01      	ldr	r3, [pc, #4]	@ (800b210 <SX126xGetOperatingMode+0x8>)
 800b20a:	7818      	ldrb	r0, [r3, #0]
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	20001124 	.word	0x20001124

0800b214 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode( RadioOperatingModes_t mode )
{
    OperatingMode = mode;
 800b214:	4b01      	ldr	r3, [pc, #4]	@ (800b21c <SX126xSetOperatingMode+0x8>)
 800b216:	7018      	strb	r0, [r3, #0]
}
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	20001124 	.word	0x20001124

0800b220 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 800b220:	b508      	push	{r3, lr}
    return OperatingMode;
 800b222:	4b07      	ldr	r3, [pc, #28]	@ (800b240 <SX126xCheckDeviceReady+0x20>)
 800b224:	781b      	ldrb	r3, [r3, #0]
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 800b226:	b10b      	cbz	r3, 800b22c <SX126xCheckDeviceReady+0xc>
 800b228:	2b06      	cmp	r3, #6
 800b22a:	d104      	bne.n	800b236 <SX126xCheckDeviceReady+0x16>
    {
        Sx_Board_WakeUp( );
 800b22c:	f7f7 f8d8 	bl	80023e0 <SX1262DVK1DAS_RADIO_WakeUp>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        Sx_Board_SetAntSw( RFSW_ON );
 800b230:	2005      	movs	r0, #5
 800b232:	f7f7 f8a1 	bl	8002378 <SX1262DVK1DAS_RADIO_SetAntSw>
    }
    Sx_Board_WaitOnBusy( );
}
 800b236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Sx_Board_WaitOnBusy( );
 800b23a:	f7f7 b879 	b.w	8002330 <SX1262DVK1DAS_RADIO_WaitOnBusy>
 800b23e:	bf00      	nop
 800b240:	20001124 	.word	0x20001124

0800b244 <SX126xGetPacketType>:
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
}
 800b244:	4b01      	ldr	r3, [pc, #4]	@ (800b24c <SX126xGetPacketType+0x8>)
 800b246:	7858      	ldrb	r0, [r3, #1]
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	20001124 	.word	0x20001124

0800b250 <SX126xWriteCommand>:
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
             SX126X_PLL_STEP_SCALED );
}

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	4606      	mov	r6, r0
 800b254:	460c      	mov	r4, r1
 800b256:	4615      	mov	r5, r2
    SX126xCheckDeviceReady( );
 800b258:	f7ff ffe2 	bl	800b220 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800b25c:	2000      	movs	r0, #0
 800b25e:	f7f7 f873 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800b262:	4630      	mov	r0, r6
 800b264:	f7f7 f8ac 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>

    for( uint16_t i = 0; i < size; i++ )
 800b268:	4425      	add	r5, r4
 800b26a:	42ac      	cmp	r4, r5
 800b26c:	d108      	bne.n	800b280 <SX126xWriteCommand+0x30>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800b26e:	2001      	movs	r0, #1
 800b270:	f7f7 f86a 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    if( command != RADIO_SET_SLEEP )
 800b274:	2e84      	cmp	r6, #132	@ 0x84
 800b276:	d008      	beq.n	800b28a <SX126xWriteCommand+0x3a>
    {
        Sx_Board_WaitOnBusy( );
    }
}
 800b278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Sx_Board_WaitOnBusy( );
 800b27c:	f7f7 b858 	b.w	8002330 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        Sx_Board_SendRecv(  buffer[i] );
 800b280:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b284:	f7f7 f89c 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800b288:	e7ef      	b.n	800b26a <SX126xWriteCommand+0x1a>
}
 800b28a:	bd70      	pop	{r4, r5, r6, pc}

0800b28c <SX126xSetSleep>:
{
 800b28c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b28e:	4604      	mov	r4, r0
 800b290:	4d0b      	ldr	r5, [pc, #44]	@ (800b2c0 <SX126xSetSleep+0x34>)
    Sx_Board_SetAntSw( RFSW_OFF );
 800b292:	2000      	movs	r0, #0
 800b294:	f7f7 f870 	bl	8002378 <SX1262DVK1DAS_RADIO_SetAntSw>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b298:	f004 0307 	and.w	r3, r4, #7
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800b29c:	2201      	movs	r2, #1
    if( sleepConfig.Fields.WarmStart == 0 )
 800b29e:	f014 0404 	ands.w	r4, r4, #4
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800b2a2:	f04f 0084 	mov.w	r0, #132	@ 0x84
 800b2a6:	f10d 0107 	add.w	r1, sp, #7
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b2aa:	f88d 3007 	strb.w	r3, [sp, #7]
        ImageCalibrated = false;
 800b2ae:	bf08      	it	eq
 800b2b0:	70ac      	strbeq	r4, [r5, #2]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800b2b2:	f7ff ffcd 	bl	800b250 <SX126xWriteCommand>
    OperatingMode = mode;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	702b      	strb	r3, [r5, #0]
}
 800b2ba:	b003      	add	sp, #12
 800b2bc:	bd30      	pop	{r4, r5, pc}
 800b2be:	bf00      	nop
 800b2c0:	20001124 	.word	0x20001124

0800b2c4 <SX126xSetStandby>:
{
 800b2c4:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800b2c6:	2201      	movs	r2, #1
{
 800b2c8:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800b2cc:	f10d 0107 	add.w	r1, sp, #7
 800b2d0:	2080      	movs	r0, #128	@ 0x80
 800b2d2:	f7ff ffbd 	bl	800b250 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 800b2d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    OperatingMode = mode;
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	bf14      	ite	ne
 800b2de:	2202      	movne	r2, #2
 800b2e0:	2201      	moveq	r2, #1
 800b2e2:	4b02      	ldr	r3, [pc, #8]	@ (800b2ec <SX126xSetStandby+0x28>)
 800b2e4:	701a      	strb	r2, [r3, #0]
}
 800b2e6:	b003      	add	sp, #12
 800b2e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2ec:	20001124 	.word	0x20001124

0800b2f0 <SX126xSetTx>:
{
 800b2f0:	b507      	push	{r0, r1, r2, lr}
    OperatingMode = mode;
 800b2f2:	2204      	movs	r2, #4
 800b2f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b320 <SX126xSetTx+0x30>)
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b2f6:	f88d 0006 	strb.w	r0, [sp, #6]
    OperatingMode = mode;
 800b2fa:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b2fc:	0c03      	lsrs	r3, r0, #16
 800b2fe:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800b302:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b304:	0a03      	lsrs	r3, r0, #8
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800b306:	a901      	add	r1, sp, #4
 800b308:	2083      	movs	r0, #131	@ 0x83
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b30a:	f88d 3005 	strb.w	r3, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800b30e:	f7ff ff9f 	bl	800b250 <SX126xWriteCommand>
    Sx_Board_SetLedTx(true);
 800b312:	2001      	movs	r0, #1
}
 800b314:	b003      	add	sp, #12
 800b316:	f85d eb04 	ldr.w	lr, [sp], #4
    Sx_Board_SetLedTx(true);
 800b31a:	f7f7 b83b 	b.w	8002394 <SX1262DVK1DAS_RADIO_BoardSetLedTx>
 800b31e:	bf00      	nop
 800b320:	20001124 	.word	0x20001124

0800b324 <SX126xSetRxDutyCycle>:
{
 800b324:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b326:	0c03      	lsrs	r3, r0, #16
 800b328:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800b32c:	0a03      	lsrs	r3, r0, #8
 800b32e:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800b332:	0c0b      	lsrs	r3, r1, #16
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b334:	ba49      	rev16	r1, r1
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800b336:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b33a:	f8ad 1004 	strh.w	r1, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800b33e:	2206      	movs	r2, #6
 800b340:	4669      	mov	r1, sp
 800b342:	2094      	movs	r0, #148	@ 0x94
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800b344:	f88d 3003 	strb.w	r3, [sp, #3]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800b348:	f7ff ff82 	bl	800b250 <SX126xWriteCommand>
    OperatingMode = mode;
 800b34c:	2206      	movs	r2, #6
 800b34e:	4b02      	ldr	r3, [pc, #8]	@ (800b358 <SX126xSetRxDutyCycle+0x34>)
 800b350:	701a      	strb	r2, [r3, #0]
}
 800b352:	b003      	add	sp, #12
 800b354:	f85d fb04 	ldr.w	pc, [sp], #4
 800b358:	20001124 	.word	0x20001124

0800b35c <SX126xSetCad>:
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 800b35c:	2200      	movs	r2, #0
{
 800b35e:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 800b360:	4611      	mov	r1, r2
 800b362:	20c5      	movs	r0, #197	@ 0xc5
 800b364:	f7ff ff74 	bl	800b250 <SX126xWriteCommand>
    OperatingMode = mode;
 800b368:	2207      	movs	r2, #7
 800b36a:	4b01      	ldr	r3, [pc, #4]	@ (800b370 <SX126xSetCad+0x14>)
 800b36c:	701a      	strb	r2, [r3, #0]
}
 800b36e:	bd08      	pop	{r3, pc}
 800b370:	20001124 	.word	0x20001124

0800b374 <SX126xSetTxContinuousWave>:
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800b374:	2200      	movs	r2, #0
{
 800b376:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800b378:	4611      	mov	r1, r2
 800b37a:	20d1      	movs	r0, #209	@ 0xd1
 800b37c:	f7ff ff68 	bl	800b250 <SX126xWriteCommand>
    OperatingMode = mode;
 800b380:	2204      	movs	r2, #4
 800b382:	4b01      	ldr	r3, [pc, #4]	@ (800b388 <SX126xSetTxContinuousWave+0x14>)
 800b384:	701a      	strb	r2, [r3, #0]
}
 800b386:	bd08      	pop	{r3, pc}
 800b388:	20001124 	.word	0x20001124

0800b38c <SX126xSetStopRxTimerOnPreambleDetect>:
{
 800b38c:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800b38e:	2201      	movs	r2, #1
{
 800b390:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800b394:	f10d 0107 	add.w	r1, sp, #7
 800b398:	209f      	movs	r0, #159	@ 0x9f
 800b39a:	f7ff ff59 	bl	800b250 <SX126xWriteCommand>
}
 800b39e:	b003      	add	sp, #12
 800b3a0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b3a4 <SX126xSetRegulatorMode>:
{
 800b3a4:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800b3a6:	2201      	movs	r2, #1
{
 800b3a8:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800b3ac:	f10d 0107 	add.w	r1, sp, #7
 800b3b0:	2096      	movs	r0, #150	@ 0x96
 800b3b2:	f7ff ff4d 	bl	800b250 <SX126xWriteCommand>
}
 800b3b6:	b003      	add	sp, #12
 800b3b8:	f85d fb04 	ldr.w	pc, [sp], #4

0800b3bc <SX126xCalibrate>:
{
 800b3bc:	b507      	push	{r0, r1, r2, lr}
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b3be:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b3c2:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	2089      	movs	r0, #137	@ 0x89
 800b3ca:	f10d 0107 	add.w	r1, sp, #7
 800b3ce:	f7ff ff3f 	bl	800b250 <SX126xWriteCommand>
}
 800b3d2:	b003      	add	sp, #12
 800b3d4:	f85d fb04 	ldr.w	pc, [sp], #4

0800b3d8 <SX126xCalibrateImage>:
    if( freq > 900000000 )
 800b3d8:	4b13      	ldr	r3, [pc, #76]	@ (800b428 <SX126xCalibrateImage+0x50>)
{
 800b3da:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 800b3dc:	4298      	cmp	r0, r3
 800b3de:	d90b      	bls.n	800b3f8 <SX126xCalibrateImage+0x20>
        calFreq[0] = 0xE1;
 800b3e0:	f64e 13e1 	movw	r3, #59873	@ 0xe9e1
        calFreq[0] = 0x6B;
 800b3e4:	f8ad 3004 	strh.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	2098      	movs	r0, #152	@ 0x98
 800b3ec:	a901      	add	r1, sp, #4
 800b3ee:	f7ff ff2f 	bl	800b250 <SX126xWriteCommand>
}
 800b3f2:	b003      	add	sp, #12
 800b3f4:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800b3f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b42c <SX126xCalibrateImage+0x54>)
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	d902      	bls.n	800b404 <SX126xCalibrateImage+0x2c>
        calFreq[0] = 0xD7;
 800b3fe:	f64d 33d7 	movw	r3, #56279	@ 0xdbd7
 800b402:	e7ef      	b.n	800b3e4 <SX126xCalibrateImage+0xc>
    else if( freq > 770000000 )
 800b404:	4b0a      	ldr	r3, [pc, #40]	@ (800b430 <SX126xCalibrateImage+0x58>)
 800b406:	4298      	cmp	r0, r3
 800b408:	d902      	bls.n	800b410 <SX126xCalibrateImage+0x38>
        calFreq[0] = 0xC1;
 800b40a:	f24c 53c1 	movw	r3, #50625	@ 0xc5c1
 800b40e:	e7e9      	b.n	800b3e4 <SX126xCalibrateImage+0xc>
    else if( freq > 460000000 )
 800b410:	4b08      	ldr	r3, [pc, #32]	@ (800b434 <SX126xCalibrateImage+0x5c>)
 800b412:	4298      	cmp	r0, r3
 800b414:	d902      	bls.n	800b41c <SX126xCalibrateImage+0x44>
        calFreq[0] = 0x75;
 800b416:	f248 1375 	movw	r3, #33141	@ 0x8175
 800b41a:	e7e3      	b.n	800b3e4 <SX126xCalibrateImage+0xc>
    else if( freq > 425000000 )
 800b41c:	4b06      	ldr	r3, [pc, #24]	@ (800b438 <SX126xCalibrateImage+0x60>)
 800b41e:	4298      	cmp	r0, r3
 800b420:	d9e2      	bls.n	800b3e8 <SX126xCalibrateImage+0x10>
        calFreq[0] = 0x6B;
 800b422:	f646 736b 	movw	r3, #28523	@ 0x6f6b
 800b426:	e7dd      	b.n	800b3e4 <SX126xCalibrateImage+0xc>
 800b428:	35a4e900 	.word	0x35a4e900
 800b42c:	32a9f880 	.word	0x32a9f880
 800b430:	2de54480 	.word	0x2de54480
 800b434:	1b6b0b00 	.word	0x1b6b0b00
 800b438:	1954fc40 	.word	0x1954fc40

0800b43c <SX126xSetPaConfig>:
{
 800b43c:	b507      	push	{r0, r1, r2, lr}
    buf[2] = deviceSel;
 800b43e:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b442:	2204      	movs	r2, #4
    buf[0] = paDutyCycle;
 800b444:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800b448:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b44c:	2095      	movs	r0, #149	@ 0x95
 800b44e:	eb0d 0102 	add.w	r1, sp, r2
    buf[3] = paLut;
 800b452:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b456:	f7ff fefb 	bl	800b250 <SX126xWriteCommand>
}
 800b45a:	b003      	add	sp, #12
 800b45c:	f85d fb04 	ldr.w	pc, [sp], #4

0800b460 <SX126xSetDioIrqParams>:
{
 800b460:	b507      	push	{r0, r1, r2, lr}
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800b462:	ba52      	rev16	r2, r2
 800b464:	f8ad 2004 	strh.w	r2, [sp, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b468:	2208      	movs	r2, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b46a:	ba40      	rev16	r0, r0
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b46c:	ba49      	rev16	r1, r1
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b46e:	f8ad 0000 	strh.w	r0, [sp]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b472:	f8ad 1002 	strh.w	r1, [sp, #2]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b476:	ba5b      	rev16	r3, r3
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b478:	4669      	mov	r1, sp
 800b47a:	4610      	mov	r0, r2
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b47c:	f8ad 3006 	strh.w	r3, [sp, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b480:	f7ff fee6 	bl	800b250 <SX126xWriteCommand>
}
 800b484:	b003      	add	sp, #12
 800b486:	f85d fb04 	ldr.w	pc, [sp], #4

0800b48a <SX126xSetDio2AsRfSwitchCtrl>:
{
 800b48a:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800b48c:	2201      	movs	r2, #1
{
 800b48e:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800b492:	f10d 0107 	add.w	r1, sp, #7
 800b496:	209d      	movs	r0, #157	@ 0x9d
 800b498:	f7ff feda 	bl	800b250 <SX126xWriteCommand>
}
 800b49c:	b003      	add	sp, #12
 800b49e:	f85d fb04 	ldr.w	pc, [sp], #4

0800b4a2 <SX126xSetDio3AsTcxoCtrl>:
{
 800b4a2:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b4a4:	2204      	movs	r2, #4
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b4a6:	0c0b      	lsrs	r3, r1, #16
    buf[0] = tcxoVoltage & 0x07;
 800b4a8:	f000 0007 	and.w	r0, r0, #7
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b4ac:	ba49      	rev16	r1, r1
    buf[0] = tcxoVoltage & 0x07;
 800b4ae:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b4b2:	f8ad 1006 	strh.w	r1, [sp, #6]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b4b6:	2097      	movs	r0, #151	@ 0x97
 800b4b8:	eb0d 0102 	add.w	r1, sp, r2
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b4bc:	f88d 3005 	strb.w	r3, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b4c0:	f7ff fec6 	bl	800b250 <SX126xWriteCommand>
}
 800b4c4:	b003      	add	sp, #12
 800b4c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b4cc <SX126xInit>:
{
 800b4cc:	b507      	push	{r0, r1, r2, lr}
 800b4ce:	9001      	str	r0, [sp, #4]
    Sx_Board_Reset( );
 800b4d0:	f7f6 fef2 	bl	80022b8 <SX1262DVK1DAS_RADIO_Reset>
    Sx_Board_IoIrqInit( &dioIrq );
 800b4d4:	a801      	add	r0, sp, #4
 800b4d6:	f7f6 fed3 	bl	8002280 <SX1262DVK1DAS_RADIO_IoIrqInit>
    Sx_Board_WakeUp( );
 800b4da:	f7f6 ff81 	bl	80023e0 <SX1262DVK1DAS_RADIO_WakeUp>
    SX126xSetStandby( STDBY_RC );
 800b4de:	2000      	movs	r0, #0
 800b4e0:	f7ff fef0 	bl	800b2c4 <SX126xSetStandby>
    if (Sx_Board_IsTcxo()  == true )
 800b4e4:	f7f6 ff54 	bl	8002390 <SX1262DVK1DAS_RADIO_BoardIsTcxo>
 800b4e8:	b148      	cbz	r0, 800b4fe <SX126xInit+0x32>
      SX126xSetDio3AsTcxoCtrl( TCXO_CTRL_1_7V, Sx_Board_GetWakeUpTime( ) << 6 ); // convert from ms to SX126x time base
 800b4ea:	f7f6 fee3 	bl	80022b4 <SX1262DVK1DAS_RADIO_GetWakeUpTime>
 800b4ee:	0181      	lsls	r1, r0, #6
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	f7ff ffd6 	bl	800b4a2 <SX126xSetDio3AsTcxoCtrl>
      SX126xCalibrate( calibParam );
 800b4f6:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 800b4fa:	f7ff ff5f 	bl	800b3bc <SX126xCalibrate>
    SX126xSetDio2AsRfSwitchCtrl( true );
 800b4fe:	2001      	movs	r0, #1
 800b500:	f7ff ffc3 	bl	800b48a <SX126xSetDio2AsRfSwitchCtrl>
    ImageCalibrated = false;
 800b504:	2200      	movs	r2, #0
 800b506:	4b03      	ldr	r3, [pc, #12]	@ (800b514 <SX126xInit+0x48>)
 800b508:	709a      	strb	r2, [r3, #2]
    OperatingMode = mode;
 800b50a:	2201      	movs	r2, #1
 800b50c:	701a      	strb	r2, [r3, #0]
}
 800b50e:	b003      	add	sp, #12
 800b510:	f85d fb04 	ldr.w	pc, [sp], #4
 800b514:	20001124 	.word	0x20001124

0800b518 <SX126xSetRfFrequency>:
{
 800b518:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 800b51a:	4d10      	ldr	r5, [pc, #64]	@ (800b55c <SX126xSetRfFrequency+0x44>)
{
 800b51c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800b51e:	78ab      	ldrb	r3, [r5, #2]
 800b520:	b91b      	cbnz	r3, 800b52a <SX126xSetRfFrequency+0x12>
        SX126xCalibrateImage( frequency );
 800b522:	f7ff ff59 	bl	800b3d8 <SX126xCalibrateImage>
        ImageCalibrated = true;
 800b526:	2301      	movs	r3, #1
 800b528:	70ab      	strb	r3, [r5, #2]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800b52a:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800b52e:	fbb4 f1f2 	udiv	r1, r4, r2
 800b532:	f641 6384 	movw	r3, #7812	@ 0x1e84
 800b536:	fb02 4411 	mls	r4, r2, r1, r4
 800b53a:	eb03 3384 	add.w	r3, r3, r4, lsl #14
 800b53e:	fbb3 f3f2 	udiv	r3, r3, r2
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b542:	2204      	movs	r2, #4
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 800b544:	eb03 3381 	add.w	r3, r3, r1, lsl #14
 800b548:	ba1b      	rev	r3, r3
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b54a:	2086      	movs	r0, #134	@ 0x86
 800b54c:	eb0d 0102 	add.w	r1, sp, r2
    buf[0] = ( uint8_t )( ( freqInPllSteps >> 24 ) & 0xFF );
 800b550:	9301      	str	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b552:	f7ff fe7d 	bl	800b250 <SX126xWriteCommand>
}
 800b556:	b003      	add	sp, #12
 800b558:	bd30      	pop	{r4, r5, pc}
 800b55a:	bf00      	nop
 800b55c:	20001124 	.word	0x20001124

0800b560 <SX126xSetPacketType>:
{
 800b560:	b507      	push	{r0, r1, r2, lr}
    PacketType = packetType;
 800b562:	4b06      	ldr	r3, [pc, #24]	@ (800b57c <SX126xSetPacketType+0x1c>)
{
 800b564:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800b568:	7058      	strb	r0, [r3, #1]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800b56a:	2201      	movs	r2, #1
 800b56c:	208a      	movs	r0, #138	@ 0x8a
 800b56e:	f10d 0107 	add.w	r1, sp, #7
 800b572:	f7ff fe6d 	bl	800b250 <SX126xWriteCommand>
}
 800b576:	b003      	add	sp, #12
 800b578:	f85d fb04 	ldr.w	pc, [sp], #4
 800b57c:	20001124 	.word	0x20001124

0800b580 <SX126xSetModulationParams>:
{
 800b580:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b582:	466b      	mov	r3, sp
{
 800b584:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b586:	4a21      	ldr	r2, [pc, #132]	@ (800b60c <SX126xSetModulationParams+0x8c>)
 800b588:	6810      	ldr	r0, [r2, #0]
 800b58a:	6851      	ldr	r1, [r2, #4]
 800b58c:	c303      	stmia	r3!, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800b58e:	4b20      	ldr	r3, [pc, #128]	@ (800b610 <SX126xSetModulationParams+0x90>)
 800b590:	7820      	ldrb	r0, [r4, #0]
 800b592:	785b      	ldrb	r3, [r3, #1]
 800b594:	4283      	cmp	r3, r0
 800b596:	d001      	beq.n	800b59c <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 800b598:	f7ff ffe2 	bl	800b560 <SX126xSetPacketType>
    switch( modulationParams->PacketType )
 800b59c:	7823      	ldrb	r3, [r4, #0]
 800b59e:	b11b      	cbz	r3, 800b5a8 <SX126xSetModulationParams+0x28>
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d02e      	beq.n	800b602 <SX126xSetModulationParams+0x82>
}
 800b5a4:	b002      	add	sp, #8
 800b5a6:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t )( 32 * SX126X_XTAL_FREQ / modulationParams->Params.Gfsk.BitRate );
 800b5a8:	6862      	ldr	r2, [r4, #4]
 800b5aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b614 <SX126xSetModulationParams+0x94>)
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800b5ac:	f643 5109 	movw	r1, #15625	@ 0x3d09
        tempVal = ( uint32_t )( 32 * SX126X_XTAL_FREQ / modulationParams->Params.Gfsk.BitRate );
 800b5b0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b5b4:	0c1a      	lsrs	r2, r3, #16
 800b5b6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b5ba:	0a1a      	lsrs	r2, r3, #8
 800b5bc:	f88d 2001 	strb.w	r2, [sp, #1]
        tempVal = SX126xConvertFreqInHzToPllStep( modulationParams->Params.Gfsk.Fdev );
 800b5c0:	68a2      	ldr	r2, [r4, #8]
        buf[2] = tempVal & 0xFF;
 800b5c2:	f88d 3002 	strb.w	r3, [sp, #2]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800b5c6:	fbb2 f0f1 	udiv	r0, r2, r1
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b5ca:	7b23      	ldrb	r3, [r4, #12]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800b5cc:	fb01 2210 	mls	r2, r1, r0, r2
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b5d0:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b5d4:	7b63      	ldrb	r3, [r4, #13]
 800b5d6:	f88d 3004 	strb.w	r3, [sp, #4]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800b5da:	f641 6384 	movw	r3, #7812	@ 0x1e84
 800b5de:	eb03 3382 	add.w	r3, r3, r2, lsl #14
 800b5e2:	fbb3 f3f1 	udiv	r3, r3, r1
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 800b5e6:	eb03 3380 	add.w	r3, r3, r0, lsl #14
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800b5ea:	0c1a      	lsrs	r2, r3, #16
 800b5ec:	f88d 2005 	strb.w	r2, [sp, #5]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b5f0:	2208      	movs	r2, #8
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800b5f2:	ba5b      	rev16	r3, r3
 800b5f4:	f8ad 3006 	strh.w	r3, [sp, #6]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b5f8:	4669      	mov	r1, sp
 800b5fa:	208b      	movs	r0, #139	@ 0x8b
 800b5fc:	f7ff fe28 	bl	800b250 <SX126xWriteCommand>
        break;
 800b600:	e7d0      	b.n	800b5a4 <SX126xSetModulationParams+0x24>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800b602:	6923      	ldr	r3, [r4, #16]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b604:	2204      	movs	r2, #4
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800b606:	9300      	str	r3, [sp, #0]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b608:	e7f6      	b.n	800b5f8 <SX126xSetModulationParams+0x78>
 800b60a:	bf00      	nop
 800b60c:	0800cf30 	.word	0x0800cf30
 800b610:	20001124 	.word	0x20001124
 800b614:	3d090000 	.word	0x3d090000

0800b618 <SX126xSetBufferBaseAddress>:
{
 800b618:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b61a:	2202      	movs	r2, #2
    buf[0] = txBaseAddress;
 800b61c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800b620:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b624:	208f      	movs	r0, #143	@ 0x8f
 800b626:	a901      	add	r1, sp, #4
 800b628:	f7ff fe12 	bl	800b250 <SX126xWriteCommand>
}
 800b62c:	b003      	add	sp, #12
 800b62e:	f85d fb04 	ldr.w	pc, [sp], #4

0800b632 <SX126xClearIrqStatus>:
{
 800b632:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800b634:	2202      	movs	r2, #2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 800b636:	ba40      	rev16	r0, r0
 800b638:	f8ad 0004 	strh.w	r0, [sp, #4]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800b63c:	a901      	add	r1, sp, #4
 800b63e:	4610      	mov	r0, r2
 800b640:	f7ff fe06 	bl	800b250 <SX126xWriteCommand>
}
 800b644:	b003      	add	sp, #12
 800b646:	f85d fb04 	ldr.w	pc, [sp], #4

0800b64a <SX126xReadCommand>:

uint8_t SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800b64a:	b570      	push	{r4, r5, r6, lr}
 800b64c:	4606      	mov	r6, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	4615      	mov	r5, r2
    uint8_t status = 0;

    SX126xCheckDeviceReady( );
 800b652:	f7ff fde5 	bl	800b220 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800b656:	2000      	movs	r0, #0
 800b658:	f7f6 fe76 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7f6 feaf 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    status = Sx_Board_SendRecv(  0x00 );
 800b662:	2000      	movs	r0, #0
 800b664:	f7f6 feac 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
 800b668:	4425      	add	r5, r4
 800b66a:	b2c6      	uxtb	r6, r0
    for( uint16_t i = 0; i < size; i++ )
 800b66c:	42ac      	cmp	r4, r5
 800b66e:	d106      	bne.n	800b67e <SX126xReadCommand+0x34>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }

    Sx_Board_ChipSelect( 1 );
 800b670:	2001      	movs	r0, #1
 800b672:	f7f6 fe69 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800b676:	f7f6 fe5b 	bl	8002330 <SX1262DVK1DAS_RADIO_WaitOnBusy>

    return status;
}
 800b67a:	4630      	mov	r0, r6
 800b67c:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800b67e:	2000      	movs	r0, #0
 800b680:	f7f6 fe9e 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
 800b684:	f804 0b01 	strb.w	r0, [r4], #1
    for( uint16_t i = 0; i < size; i++ )
 800b688:	e7f0      	b.n	800b66c <SX126xReadCommand+0x22>

0800b68a <SX126xGetIrqStatus>:
{
 800b68a:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800b68c:	2202      	movs	r2, #2
 800b68e:	a901      	add	r1, sp, #4
 800b690:	2012      	movs	r0, #18
 800b692:	f7ff ffda 	bl	800b64a <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 800b696:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800b69a:	ba40      	rev16	r0, r0
}
 800b69c:	b280      	uxth	r0, r0
 800b69e:	b003      	add	sp, #12
 800b6a0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b6a4 <SX126xGetRssiInst>:
{
 800b6a4:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	a901      	add	r1, sp, #4
 800b6aa:	2015      	movs	r0, #21
 800b6ac:	f7ff ffcd 	bl	800b64a <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 800b6b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b6b4:	4240      	negs	r0, r0
}
 800b6b6:	1040      	asrs	r0, r0, #1
 800b6b8:	b003      	add	sp, #12
 800b6ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b6c0 <SX126xGetPacketStatus>:
{
 800b6c0:	b513      	push	{r0, r1, r4, lr}
 800b6c2:	4604      	mov	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800b6c4:	2203      	movs	r2, #3
 800b6c6:	a901      	add	r1, sp, #4
 800b6c8:	2014      	movs	r0, #20
 800b6ca:	f7ff ffbe 	bl	800b64a <SX126xReadCommand>
    return PacketType;
 800b6ce:	4918      	ldr	r1, [pc, #96]	@ (800b730 <SX126xGetPacketStatus+0x70>)
 800b6d0:	784a      	ldrb	r2, [r1, #1]
    pktStatus->packetType = SX126xGetPacketType( );
 800b6d2:	7022      	strb	r2, [r4, #0]
    switch( pktStatus->packetType )
 800b6d4:	b14a      	cbz	r2, 800b6ea <SX126xGetPacketStatus+0x2a>
 800b6d6:	2a01      	cmp	r2, #1
 800b6d8:	d017      	beq.n	800b70a <SX126xGetPacketStatus+0x4a>
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 800b6da:	2213      	movs	r2, #19
 800b6dc:	2100      	movs	r1, #0
 800b6de:	1c60      	adds	r0, r4, #1
 800b6e0:	f001 f874 	bl	800c7cc <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800b6e4:	230f      	movs	r3, #15
 800b6e6:	7023      	strb	r3, [r4, #0]
}
 800b6e8:	e00d      	b.n	800b706 <SX126xGetPacketStatus+0x46>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b6ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
            pktStatus->Params.Gfsk.FreqError = 0;
 800b6ee:	60a2      	str	r2, [r4, #8]
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b6f0:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b6f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b6f6:	425b      	negs	r3, r3
 800b6f8:	105b      	asrs	r3, r3, #1
 800b6fa:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b6fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b700:	425b      	negs	r3, r3
 800b702:	105b      	asrs	r3, r3, #1
 800b704:	7163      	strb	r3, [r4, #5]
}
 800b706:	b002      	add	sp, #8
 800b708:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b70a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b70e:	425b      	negs	r3, r3
 800b710:	105b      	asrs	r3, r3, #1
 800b712:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800b714:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800b718:	3302      	adds	r3, #2
 800b71a:	109b      	asrs	r3, r3, #2
 800b71c:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b71e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b722:	425b      	negs	r3, r3
 800b724:	105b      	asrs	r3, r3, #1
 800b726:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b728:	684b      	ldr	r3, [r1, #4]
 800b72a:	6123      	str	r3, [r4, #16]
            break;
 800b72c:	e7eb      	b.n	800b706 <SX126xGetPacketStatus+0x46>
 800b72e:	bf00      	nop
 800b730:	20001124 	.word	0x20001124

0800b734 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	4606      	mov	r6, r0
 800b738:	460c      	mov	r4, r1
 800b73a:	4615      	mov	r5, r2
    SX126xCheckDeviceReady( );
 800b73c:	f7ff fd70 	bl	800b220 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800b740:	2000      	movs	r0, #0
 800b742:	f7f6 fe01 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>
    
    Sx_Board_SendRecv(  RADIO_WRITE_REGISTER );
 800b746:	200d      	movs	r0, #13
 800b748:	f7f6 fe3a 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800b74c:	0a30      	lsrs	r0, r6, #8
 800b74e:	f7f6 fe37 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800b752:	b2f0      	uxtb	r0, r6
 800b754:	f7f6 fe34 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    
    for( uint16_t i = 0; i < size; i++ )
 800b758:	4425      	add	r5, r4
 800b75a:	42ac      	cmp	r4, r5
 800b75c:	d106      	bne.n	800b76c <SX126xWriteRegisters+0x38>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800b75e:	2001      	movs	r0, #1
 800b760:	f7f6 fdf2 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
}
 800b764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_WaitOnBusy( );
 800b768:	f7f6 bde2 	b.w	8002330 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        Sx_Board_SendRecv(  buffer[i] );
 800b76c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b770:	f7f6 fe26 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800b774:	e7f1      	b.n	800b75a <SX126xWriteRegisters+0x26>

0800b776 <SX126xSetSyncWord>:
{
 800b776:	b508      	push	{r3, lr}
 800b778:	4601      	mov	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800b77a:	2208      	movs	r2, #8
 800b77c:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800b780:	f7ff ffd8 	bl	800b734 <SX126xWriteRegisters>
}
 800b784:	2000      	movs	r0, #0
 800b786:	bd08      	pop	{r3, pc}

0800b788 <SX126xSetCrcSeed>:
{
 800b788:	b507      	push	{r0, r1, r2, lr}
    return PacketType;
 800b78a:	4b07      	ldr	r3, [pc, #28]	@ (800b7a8 <SX126xSetCrcSeed+0x20>)
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800b78c:	ba40      	rev16	r0, r0
    switch( SX126xGetPacketType( ) )
 800b78e:	785b      	ldrb	r3, [r3, #1]
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800b790:	f8ad 0004 	strh.w	r0, [sp, #4]
    switch( SX126xGetPacketType( ) )
 800b794:	b92b      	cbnz	r3, 800b7a2 <SX126xSetCrcSeed+0x1a>
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800b796:	2202      	movs	r2, #2
 800b798:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800b79c:	a901      	add	r1, sp, #4
 800b79e:	f7ff ffc9 	bl	800b734 <SX126xWriteRegisters>
}
 800b7a2:	b003      	add	sp, #12
 800b7a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7a8:	20001124 	.word	0x20001124

0800b7ac <SX126xSetCrcPolynomial>:
{
 800b7ac:	b507      	push	{r0, r1, r2, lr}
    return PacketType;
 800b7ae:	4b07      	ldr	r3, [pc, #28]	@ (800b7cc <SX126xSetCrcPolynomial+0x20>)
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800b7b0:	ba40      	rev16	r0, r0
    switch( SX126xGetPacketType( ) )
 800b7b2:	785b      	ldrb	r3, [r3, #1]
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800b7b4:	f8ad 0004 	strh.w	r0, [sp, #4]
    switch( SX126xGetPacketType( ) )
 800b7b8:	b92b      	cbnz	r3, 800b7c6 <SX126xSetCrcPolynomial+0x1a>
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	f240 60be 	movw	r0, #1726	@ 0x6be
 800b7c0:	a901      	add	r1, sp, #4
 800b7c2:	f7ff ffb7 	bl	800b734 <SX126xWriteRegisters>
}
 800b7c6:	b003      	add	sp, #12
 800b7c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7cc:	20001124 	.word	0x20001124

0800b7d0 <SX126xSetPacketParams>:
{
 800b7d0:	b530      	push	{r4, r5, lr}
 800b7d2:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b7d4:	4a2a      	ldr	r2, [pc, #168]	@ (800b880 <SX126xSetPacketParams+0xb0>)
{
 800b7d6:	b085      	sub	sp, #20
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b7d8:	6890      	ldr	r0, [r2, #8]
 800b7da:	68d1      	ldr	r1, [r2, #12]
 800b7dc:	ab01      	add	r3, sp, #4
 800b7de:	c303      	stmia	r3!, {r0, r1}
 800b7e0:	7c12      	ldrb	r2, [r2, #16]
    if( PacketType != packetParams->PacketType )
 800b7e2:	4d28      	ldr	r5, [pc, #160]	@ (800b884 <SX126xSetPacketParams+0xb4>)
 800b7e4:	7820      	ldrb	r0, [r4, #0]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b7e6:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800b7e8:	786b      	ldrb	r3, [r5, #1]
 800b7ea:	4283      	cmp	r3, r0
 800b7ec:	d001      	beq.n	800b7f2 <SX126xSetPacketParams+0x22>
        SX126xSetPacketType( packetParams->PacketType );
 800b7ee:	f7ff feb7 	bl	800b560 <SX126xSetPacketType>
    switch( packetParams->PacketType )
 800b7f2:	7823      	ldrb	r3, [r4, #0]
 800b7f4:	b11b      	cbz	r3, 800b7fe <SX126xSetPacketParams+0x2e>
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d031      	beq.n	800b85e <SX126xSetPacketParams+0x8e>
}
 800b7fa:	b005      	add	sp, #20
 800b7fc:	bd30      	pop	{r4, r5, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800b7fe:	7a63      	ldrb	r3, [r4, #9]
 800b800:	2bf1      	cmp	r3, #241	@ 0xf1
 800b802:	d120      	bne.n	800b846 <SX126xSetPacketParams+0x76>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 800b804:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b808:	f7ff ffbe 	bl	800b788 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800b80c:	f248 0005 	movw	r0, #32773	@ 0x8005
 800b810:	f7ff ffcc 	bl	800b7ac <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800b814:	2302      	movs	r3, #2
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b816:	8862      	ldrh	r2, [r4, #2]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b818:	88a1      	ldrh	r1, [r4, #4]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b81a:	ba52      	rev16	r2, r2
 800b81c:	f8ad 2004 	strh.w	r2, [sp, #4]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b820:	7a22      	ldrb	r2, [r4, #8]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b822:	f8ad 1006 	strh.w	r1, [sp, #6]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b826:	f88d 200a 	strb.w	r2, [sp, #10]
        n = 9;
 800b82a:	2209      	movs	r2, #9
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b82c:	88e1      	ldrh	r1, [r4, #6]
        buf[7] = crcVal;
 800b82e:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b832:	7aa3      	ldrb	r3, [r4, #10]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b834:	f8ad 1008 	strh.w	r1, [sp, #8]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b838:	f88d 300c 	strb.w	r3, [sp, #12]
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b83c:	208c      	movs	r0, #140	@ 0x8c
 800b83e:	a901      	add	r1, sp, #4
 800b840:	f7ff fd06 	bl	800b250 <SX126xWriteCommand>
 800b844:	e7d9      	b.n	800b7fa <SX126xSetPacketParams+0x2a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800b846:	2bf2      	cmp	r3, #242	@ 0xf2
 800b848:	d1e5      	bne.n	800b816 <SX126xSetPacketParams+0x46>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 800b84a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800b84e:	f7ff ff9b 	bl	800b788 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800b852:	f241 0021 	movw	r0, #4129	@ 0x1021
 800b856:	f7ff ffa9 	bl	800b7ac <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800b85a:	2306      	movs	r3, #6
 800b85c:	e7db      	b.n	800b816 <SX126xSetPacketParams+0x46>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b85e:	89a3      	ldrh	r3, [r4, #12]
        n = 6;
 800b860:	2206      	movs	r2, #6
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b862:	ba5b      	rev16	r3, r3
 800b864:	f8ad 3004 	strh.w	r3, [sp, #4]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b868:	7ba3      	ldrb	r3, [r4, #14]
 800b86a:	722b      	strb	r3, [r5, #8]
 800b86c:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b870:	7be3      	ldrb	r3, [r4, #15]
 800b872:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b876:	8a23      	ldrh	r3, [r4, #16]
 800b878:	f8ad 3008 	strh.w	r3, [sp, #8]
        break;
 800b87c:	e7de      	b.n	800b83c <SX126xSetPacketParams+0x6c>
 800b87e:	bf00      	nop
 800b880:	0800cf30 	.word	0x0800cf30
 800b884:	20001124 	.word	0x20001124

0800b888 <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 800b888:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteRegisters( address, &value, 1 );
 800b88a:	2201      	movs	r2, #1
{
 800b88c:	f88d 1007 	strb.w	r1, [sp, #7]
    SX126xWriteRegisters( address, &value, 1 );
 800b890:	f10d 0107 	add.w	r1, sp, #7
 800b894:	f7ff ff4e 	bl	800b734 <SX126xWriteRegisters>
}
 800b898:	b003      	add	sp, #12
 800b89a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b8a0 <SX126xSetRx>:
{
 800b8a0:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = mode;
 800b8a2:	2205      	movs	r2, #5
{
 800b8a4:	4604      	mov	r4, r0
    OperatingMode = mode;
 800b8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b8dc <SX126xSetRx+0x3c>)
    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 800b8a8:	2194      	movs	r1, #148	@ 0x94
 800b8aa:	f640 00ac 	movw	r0, #2220	@ 0x8ac
    OperatingMode = mode;
 800b8ae:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 800b8b0:	f7ff ffea 	bl	800b888 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b8b4:	0c23      	lsrs	r3, r4, #16
 800b8b6:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800b8ba:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b8bc:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800b8be:	2082      	movs	r0, #130	@ 0x82
 800b8c0:	a901      	add	r1, sp, #4
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b8c2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b8c6:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800b8ca:	f7ff fcc1 	bl	800b250 <SX126xWriteCommand>
    Sx_Board_SetLedRx(true);
 800b8ce:	2001      	movs	r0, #1
}
 800b8d0:	b002      	add	sp, #8
 800b8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Sx_Board_SetLedRx(true);
 800b8d6:	f7f6 bd67 	b.w	80023a8 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
 800b8da:	bf00      	nop
 800b8dc:	20001124 	.word	0x20001124

0800b8e0 <SX126xSetRxBoosted>:
{
 800b8e0:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = mode;
 800b8e2:	2205      	movs	r2, #5
{
 800b8e4:	4604      	mov	r4, r0
    OperatingMode = mode;
 800b8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b914 <SX126xSetRxBoosted+0x34>)
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800b8e8:	2196      	movs	r1, #150	@ 0x96
 800b8ea:	f640 00ac 	movw	r0, #2220	@ 0x8ac
    OperatingMode = mode;
 800b8ee:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800b8f0:	f7ff ffca 	bl	800b888 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b8f4:	0c23      	lsrs	r3, r4, #16
 800b8f6:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800b8fa:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b8fc:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800b8fe:	2082      	movs	r0, #130	@ 0x82
 800b900:	a901      	add	r1, sp, #4
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b902:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b906:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800b90a:	f7ff fca1 	bl	800b250 <SX126xWriteCommand>
}
 800b90e:	b002      	add	sp, #8
 800b910:	bd10      	pop	{r4, pc}
 800b912:	bf00      	nop
 800b914:	20001124 	.word	0x20001124

0800b918 <SX126xSetLoRaSymbNumTimeout>:
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 800b918:	28f8      	cmp	r0, #248	@ 0xf8
{
 800b91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 800b91c:	4604      	mov	r4, r0
 800b91e:	bf28      	it	cs
 800b920:	24f8      	movcs	r4, #248	@ 0xf8
                       symbNum ) + 1 ) >> 1;
 800b922:	3401      	adds	r4, #1
 800b924:	f3c4 0346 	ubfx	r3, r4, #1, #7
    while( mant > 31 )
 800b928:	2b1f      	cmp	r3, #31
    uint8_t mant = ( ( ( symbNum > SX126X_MAX_LORA_SYMB_NUM_TIMEOUT ) ?
 800b92a:	461c      	mov	r4, r3
        exp++;
 800b92c:	bfcc      	ite	gt
 800b92e:	2501      	movgt	r5, #1
    uint8_t exp  = 0;
 800b930:	2500      	movle	r5, #0
{
 800b932:	4606      	mov	r6, r0
        mant = ( mant + 3 ) >> 2;
 800b934:	bfc8      	it	gt
 800b936:	3403      	addgt	r4, #3
    reg = mant << ( 2 * exp + 1 );
 800b938:	ea4f 0345 	mov.w	r3, r5, lsl #1
        mant = ( mant + 3 ) >> 2;
 800b93c:	bfc8      	it	gt
 800b93e:	f3c4 0487 	ubfxgt	r4, r4, #2, #8
    reg = mant << ( 2 * exp + 1 );
 800b942:	3301      	adds	r3, #1
 800b944:	fa04 f303 	lsl.w	r3, r4, r3
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 800b948:	2201      	movs	r2, #1
 800b94a:	20a0      	movs	r0, #160	@ 0xa0
 800b94c:	f10d 0107 	add.w	r1, sp, #7
    reg = mant << ( 2 * exp + 1 );
 800b950:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 800b954:	f7ff fc7c 	bl	800b250 <SX126xWriteCommand>
    if( symbNum != 0 )
 800b958:	b14e      	cbz	r6, 800b96e <SX126xSetLoRaSymbNumTimeout+0x56>
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800b95a:	f240 7006 	movw	r0, #1798	@ 0x706
        reg = exp + ( mant << 3 );
 800b95e:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800b962:	b2c9      	uxtb	r1, r1
}
 800b964:	b002      	add	sp, #8
 800b966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800b96a:	f7ff bf8d 	b.w	800b888 <SX126xWriteRegister>
}
 800b96e:	b002      	add	sp, #8
 800b970:	bd70      	pop	{r4, r5, r6, pc}

0800b972 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b972:	b570      	push	{r4, r5, r6, lr}
 800b974:	4606      	mov	r6, r0
 800b976:	460c      	mov	r4, r1
 800b978:	4615      	mov	r5, r2
    SX126xCheckDeviceReady( );
 800b97a:	f7ff fc51 	bl	800b220 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800b97e:	2000      	movs	r0, #0
 800b980:	f7f6 fce2 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_REGISTER );
 800b984:	201d      	movs	r0, #29
 800b986:	f7f6 fd1b 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800b98a:	0a30      	lsrs	r0, r6, #8
 800b98c:	f7f6 fd18 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800b990:	b2f0      	uxtb	r0, r6
 800b992:	f7f6 fd15 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800b996:	2000      	movs	r0, #0
 800b998:	f7f6 fd12 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800b99c:	4425      	add	r5, r4
 800b99e:	42ac      	cmp	r4, r5
 800b9a0:	d106      	bne.n	800b9b0 <SX126xReadRegisters+0x3e>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	f7f6 fcd0 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
}
 800b9a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_WaitOnBusy( );
 800b9ac:	f7f6 bcc0 	b.w	8002330 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        buffer[i] = Sx_Board_SendRecv(  0 );
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	f7f6 fd05 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
 800b9b6:	f804 0b01 	strb.w	r0, [r4], #1
    for( uint16_t i = 0; i < size; i++ )
 800b9ba:	e7f0      	b.n	800b99e <SX126xReadRegisters+0x2c>

0800b9bc <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 800b9bc:	b507      	push	{r0, r1, r2, lr}
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f10d 0107 	add.w	r1, sp, #7
 800b9c4:	f7ff ffd5 	bl	800b972 <SX126xReadRegisters>
    return data;
}
 800b9c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b9cc:	b003      	add	sp, #12
 800b9ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b9d4 <SX126xSetWhiteningSeed>:
{
 800b9d4:	b510      	push	{r4, lr}
    return PacketType;
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800ba08 <SX126xSetWhiteningSeed+0x34>)
{
 800b9d8:	4604      	mov	r4, r0
    switch( SX126xGetPacketType( ) )
 800b9da:	785b      	ldrb	r3, [r3, #1]
 800b9dc:	b99b      	cbnz	r3, 800ba06 <SX126xSetWhiteningSeed+0x32>
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800b9de:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800b9e2:	f7ff ffeb 	bl	800b9bc <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800b9e6:	f3c4 2100 	ubfx	r1, r4, #8, #1
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800b9ea:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800b9ee:	4301      	orrs	r1, r0
 800b9f0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800b9f4:	f7ff ff48 	bl	800b888 <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 800b9f8:	b2e1      	uxtb	r1, r4
 800b9fa:	f240 60b9 	movw	r0, #1721	@ 0x6b9
}
 800b9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 800ba02:	f7ff bf41 	b.w	800b888 <SX126xWriteRegister>
}
 800ba06:	bd10      	pop	{r4, pc}
 800ba08:	20001124 	.word	0x20001124

0800ba0c <SX126xGetRandom>:
{
 800ba0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t number = 0;
 800ba0e:	2600      	movs	r6, #0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800ba10:	f640 00e2 	movw	r0, #2274	@ 0x8e2
    uint32_t number = 0;
 800ba14:	9601      	str	r6, [sp, #4]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800ba16:	f7ff ffd1 	bl	800b9bc <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800ba1a:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800ba1e:	4605      	mov	r5, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800ba20:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800ba24:	f7ff ff30 	bl	800b888 <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800ba28:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800ba2c:	f7ff ffc6 	bl	800b9bc <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800ba30:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800ba34:	4604      	mov	r4, r0
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800ba36:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800ba3a:	f7ff ff25 	bl	800b888 <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800ba3e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800ba42:	f7ff ff2d 	bl	800b8a0 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800ba46:	2204      	movs	r2, #4
 800ba48:	f640 0019 	movw	r0, #2073	@ 0x819
 800ba4c:	eb0d 0102 	add.w	r1, sp, r2
 800ba50:	f7ff ff8f 	bl	800b972 <SX126xReadRegisters>
    SX126xSetStandby( STDBY_RC );
 800ba54:	4630      	mov	r0, r6
 800ba56:	f7ff fc35 	bl	800b2c4 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800ba60:	f7ff ff12 	bl	800b888 <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 800ba64:	4621      	mov	r1, r4
 800ba66:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800ba6a:	f7ff ff0d 	bl	800b888 <SX126xWriteRegister>
    Sx_Board_SetLedRx(false);
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7f6 fc9a 	bl	80023a8 <SX1262DVK1DAS_RADIO_BoardSetLedRx>
}
 800ba74:	9801      	ldr	r0, [sp, #4]
 800ba76:	b002      	add	sp, #8
 800ba78:	bd70      	pop	{r4, r5, r6, pc}

0800ba7a <SX126xSetTxParams>:
{
 800ba7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba7c:	4604      	mov	r4, r0
    if( Sx_Board_GetPaSelect( 0 ) == SX1261 )
 800ba7e:	2000      	movs	r0, #0
{
 800ba80:	460d      	mov	r5, r1
    if( Sx_Board_GetPaSelect( 0 ) == SX1261 )
 800ba82:	f7f6 fc6d 	bl	8002360 <SX1262DVK1DAS_RADIO_GetPaSelect>
 800ba86:	2801      	cmp	r0, #1
 800ba88:	4603      	mov	r3, r0
 800ba8a:	d120      	bne.n	800bace <SX126xSetTxParams+0x54>
        if( power == 15 )
 800ba8c:	2c0f      	cmp	r4, #15
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800ba8e:	4602      	mov	r2, r0
 800ba90:	f04f 0100 	mov.w	r1, #0
        if( power == 15 )
 800ba94:	d10e      	bne.n	800bab4 <SX126xSetTxParams+0x3a>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800ba96:	2006      	movs	r0, #6
 800ba98:	f7ff fcd0 	bl	800b43c <SX126xSetPaConfig>
            power = 14;
 800ba9c:	240e      	movs	r4, #14
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800ba9e:	2202      	movs	r2, #2
 800baa0:	208e      	movs	r0, #142	@ 0x8e
 800baa2:	a901      	add	r1, sp, #4
    buf[0] = power;
 800baa4:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 800baa8:	f88d 5005 	strb.w	r5, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800baac:	f7ff fbd0 	bl	800b250 <SX126xWriteCommand>
}
 800bab0:	b003      	add	sp, #12
 800bab2:	bd30      	pop	{r4, r5, pc}
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800bab4:	2004      	movs	r0, #4
 800bab6:	f7ff fcc1 	bl	800b43c <SX126xSetPaConfig>
        if( power >= 14 )
 800baba:	f06f 0310 	mvn.w	r3, #16
 800babe:	42a3      	cmp	r3, r4
 800bac0:	bfb8      	it	lt
 800bac2:	4623      	movlt	r3, r4
 800bac4:	2b0e      	cmp	r3, #14
 800bac6:	bfa8      	it	ge
 800bac8:	230e      	movge	r3, #14
 800baca:	461c      	mov	r4, r3
 800bacc:	e7e7      	b.n	800ba9e <SX126xSetTxParams+0x24>
        SX126xWriteRegister( REG_TX_CLAMP_CFG, SX126xReadRegister( REG_TX_CLAMP_CFG ) | ( 0x0F << 1 ) );
 800bace:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800bad2:	f7ff ff73 	bl	800b9bc <SX126xReadRegister>
 800bad6:	f040 011e 	orr.w	r1, r0, #30
 800bada:	b2c9      	uxtb	r1, r1
 800badc:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800bae0:	f7ff fed2 	bl	800b888 <SX126xWriteRegister>
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800bae4:	2301      	movs	r3, #1
 800bae6:	2200      	movs	r2, #0
 800bae8:	2107      	movs	r1, #7
 800baea:	2004      	movs	r0, #4
 800baec:	f7ff fca6 	bl	800b43c <SX126xSetPaConfig>
        if( power > 22 )
 800baf0:	f06f 0308 	mvn.w	r3, #8
 800baf4:	429c      	cmp	r4, r3
 800baf6:	bfb8      	it	lt
 800baf8:	461c      	movlt	r4, r3
 800bafa:	2c16      	cmp	r4, #22
 800bafc:	bfa8      	it	ge
 800bafe:	2416      	movge	r4, #22
 800bb00:	e7cd      	b.n	800ba9e <SX126xSetTxParams+0x24>

0800bb02 <SX126xSetRfTxPower>:
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800bb02:	2102      	movs	r1, #2
 800bb04:	f7ff bfb9 	b.w	800ba7a <SX126xSetTxParams>

0800bb08 <SX126xGetRxBufferStatus>:
{
 800bb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800bb0a:	2202      	movs	r2, #2
{
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	460c      	mov	r4, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800bb10:	2013      	movs	r0, #19
 800bb12:	a901      	add	r1, sp, #4
 800bb14:	f7ff fd99 	bl	800b64a <SX126xReadCommand>
    return PacketType;
 800bb18:	4b09      	ldr	r3, [pc, #36]	@ (800bb40 <SX126xGetRxBufferStatus+0x38>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800bb1a:	785a      	ldrb	r2, [r3, #1]
 800bb1c:	2a01      	cmp	r2, #1
 800bb1e:	d10c      	bne.n	800bb3a <SX126xGetRxBufferStatus+0x32>
 800bb20:	7a1b      	ldrb	r3, [r3, #8]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d109      	bne.n	800bb3a <SX126xGetRxBufferStatus+0x32>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 800bb26:	f240 7002 	movw	r0, #1794	@ 0x702
 800bb2a:	f7ff ff47 	bl	800b9bc <SX126xReadRegister>
    *rxStartBufferPointer = status[1];
 800bb2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 800bb32:	7028      	strb	r0, [r5, #0]
    *rxStartBufferPointer = status[1];
 800bb34:	7023      	strb	r3, [r4, #0]
}
 800bb36:	b003      	add	sp, #12
 800bb38:	bd30      	pop	{r4, r5, pc}
        *payloadLength = status[0];
 800bb3a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800bb3e:	e7f6      	b.n	800bb2e <SX126xGetRxBufferStatus+0x26>
 800bb40:	20001124 	.word	0x20001124

0800bb44 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800bb44:	b570      	push	{r4, r5, r6, lr}
 800bb46:	4606      	mov	r6, r0
 800bb48:	460c      	mov	r4, r1
 800bb4a:	4615      	mov	r5, r2
    SX126xCheckDeviceReady( );
 800bb4c:	f7ff fb68 	bl	800b220 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800bb50:	2000      	movs	r0, #0
 800bb52:	f7f6 fbf9 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_WRITE_BUFFER );
 800bb56:	200e      	movs	r0, #14
 800bb58:	f7f6 fc32 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f7f6 fc2f 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800bb62:	4425      	add	r5, r4
 800bb64:	42ac      	cmp	r4, r5
 800bb66:	d106      	bne.n	800bb76 <SX126xWriteBuffer+0x32>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }
    Sx_Board_ChipSelect( 1 );
 800bb68:	2001      	movs	r0, #1
 800bb6a:	f7f6 fbed 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
}
 800bb6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_WaitOnBusy( );
 800bb72:	f7f6 bbdd 	b.w	8002330 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        Sx_Board_SendRecv(  buffer[i] );
 800bb76:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bb7a:	f7f6 fc21 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800bb7e:	e7f1      	b.n	800bb64 <SX126xWriteBuffer+0x20>

0800bb80 <SX126xSetPayload>:
{
 800bb80:	460a      	mov	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 800bb82:	4601      	mov	r1, r0
 800bb84:	2000      	movs	r0, #0
 800bb86:	f7ff bfdd 	b.w	800bb44 <SX126xWriteBuffer>

0800bb8a <SX126xSendPayload>:
{
 800bb8a:	b510      	push	{r4, lr}
 800bb8c:	4614      	mov	r4, r2
    SX126xSetPayload( payload, size );
 800bb8e:	f7ff fff7 	bl	800bb80 <SX126xSetPayload>
    SX126xSetTx( timeout );
 800bb92:	4620      	mov	r0, r4
}
 800bb94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX126xSetTx( timeout );
 800bb98:	f7ff bbaa 	b.w	800b2f0 <SX126xSetTx>

0800bb9c <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800bb9c:	b570      	push	{r4, r5, r6, lr}
 800bb9e:	4606      	mov	r6, r0
 800bba0:	460c      	mov	r4, r1
 800bba2:	4615      	mov	r5, r2
    SX126xCheckDeviceReady( );
 800bba4:	f7ff fb3c 	bl	800b220 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800bba8:	2000      	movs	r0, #0
 800bbaa:	f7f6 fbcd 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_BUFFER );
 800bbae:	201e      	movs	r0, #30
 800bbb0:	f7f6 fc06 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	f7f6 fc03 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800bbba:	2000      	movs	r0, #0
 800bbbc:	f7f6 fc00 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800bbc0:	4425      	add	r5, r4
 800bbc2:	42ac      	cmp	r4, r5
 800bbc4:	d106      	bne.n	800bbd4 <SX126xReadBuffer+0x38>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	f7f6 fbbe 	bl	8002348 <SX1262DVK1DAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
}
 800bbcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_WaitOnBusy( );
 800bbd0:	f7f6 bbae 	b.w	8002330 <SX1262DVK1DAS_RADIO_WaitOnBusy>
        buffer[i] = Sx_Board_SendRecv(  0 );
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	f7f6 fbf3 	bl	80023c0 <SX1262DVK1DAS_RADIO_SendRecv>
 800bbda:	f804 0b01 	strb.w	r0, [r4], #1
    for( uint16_t i = 0; i < size; i++ )
 800bbde:	e7f0      	b.n	800bbc2 <SX126xReadBuffer+0x26>

0800bbe0 <SX126xGetPayload>:
{
 800bbe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbe2:	460d      	mov	r5, r1
    uint8_t offset = 0;
 800bbe4:	2400      	movs	r4, #0
{
 800bbe6:	4617      	mov	r7, r2
 800bbe8:	4606      	mov	r6, r0
    SX126xGetRxBufferStatus( size, &offset );
 800bbea:	f10d 0107 	add.w	r1, sp, #7
 800bbee:	4628      	mov	r0, r5
    uint8_t offset = 0;
 800bbf0:	f88d 4007 	strb.w	r4, [sp, #7]
    SX126xGetRxBufferStatus( size, &offset );
 800bbf4:	f7ff ff88 	bl	800bb08 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 800bbf8:	782a      	ldrb	r2, [r5, #0]
 800bbfa:	42ba      	cmp	r2, r7
 800bbfc:	d807      	bhi.n	800bc0e <SX126xGetPayload+0x2e>
    SX126xReadBuffer( offset, buffer, *size );
 800bbfe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800bc02:	4631      	mov	r1, r6
 800bc04:	f7ff ffca 	bl	800bb9c <SX126xReadBuffer>
    return 0;
 800bc08:	4620      	mov	r0, r4
}
 800bc0a:	b003      	add	sp, #12
 800bc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 1;
 800bc0e:	2001      	movs	r0, #1
 800bc10:	e7fb      	b.n	800bc0a <SX126xGetPayload+0x2a>
	...

0800bc14 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800bc14:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc16:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bc1a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800bc1c:	4b14      	ldr	r3, [pc, #80]	@ (800bc70 <TRACE_AllocateBufer+0x5c>)
 800bc1e:	8a5c      	ldrh	r4, [r3, #18]
 800bc20:	8a1a      	ldrh	r2, [r3, #16]
 800bc22:	4294      	cmp	r4, r2
 800bc24:	d113      	bne.n	800bc4e <TRACE_AllocateBufer+0x3a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bc26:	f5c4 6280 	rsb	r2, r4, #1024	@ 0x400
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800bc2a:	b292      	uxth	r2, r2
 800bc2c:	4290      	cmp	r0, r2
 800bc2e:	d306      	bcc.n	800bc3e <TRACE_AllocateBufer+0x2a>
 800bc30:	4284      	cmp	r4, r0
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800bc32:	d918      	bls.n	800bc66 <TRACE_AllocateBufer+0x52>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bc34:	2201      	movs	r2, #1
 800bc36:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bc38:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bc3a:	801c      	strh	r4, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bc3c:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800bc3e:	8a5a      	ldrh	r2, [r3, #18]
 800bc40:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bc42:	4402      	add	r2, r0
 800bc44:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ret = 0;
 800bc48:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bc4a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800bc4c:	e00d      	b.n	800bc6a <TRACE_AllocateBufer+0x56>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bc4e:	d906      	bls.n	800bc5e <TRACE_AllocateBufer+0x4a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bc50:	f5c4 6580 	rsb	r5, r4, #1024	@ 0x400
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800bc54:	b2ad      	uxth	r5, r5
 800bc56:	4285      	cmp	r5, r0
 800bc58:	d8f1      	bhi.n	800bc3e <TRACE_AllocateBufer+0x2a>
 800bc5a:	4282      	cmp	r2, r0
 800bc5c:	e7e9      	b.n	800bc32 <TRACE_AllocateBufer+0x1e>
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800bc5e:	1b12      	subs	r2, r2, r4
  if(freesize > Size)
 800bc60:	b292      	uxth	r2, r2
 800bc62:	4282      	cmp	r2, r0
 800bc64:	d8eb      	bhi.n	800bc3e <TRACE_AllocateBufer+0x2a>
  int16_t ret = -1;
 800bc66:	f04f 30ff 	mov.w	r0, #4294967295
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc6a:	f386 8810 	msr	PRIMASK, r6
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	20001130 	.word	0x20001130

0800bc74 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc74:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bc78:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800bc7a:	4a03      	ldr	r2, [pc, #12]	@ (800bc88 <TRACE_Lock+0x14>)
 800bc7c:	8ad3      	ldrh	r3, [r2, #22]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc82:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bc86:	4770      	bx	lr
 800bc88:	20001130 	.word	0x20001130

0800bc8c <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc8c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bc90:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800bc92:	4a03      	ldr	r2, [pc, #12]	@ (800bca0 <TRACE_UnLock+0x14>)
 800bc94:	8ad3      	ldrh	r3, [r2, #22]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc9a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bc9e:	4770      	bx	lr
 800bca0:	20001130 	.word	0x20001130

0800bca4 <UTIL_ADV_TRACE_Init>:
{
 800bca4:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800bca6:	4c09      	ldr	r4, [pc, #36]	@ (800bccc <UTIL_ADV_TRACE_Init+0x28>)
 800bca8:	2218      	movs	r2, #24
 800bcaa:	4620      	mov	r0, r4
 800bcac:	2100      	movs	r1, #0
 800bcae:	f000 f981 	bl	800bfb4 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800bcb2:	f104 0018 	add.w	r0, r4, #24
 800bcb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bcba:	2100      	movs	r1, #0
 800bcbc:	f000 f97a 	bl	800bfb4 <UTIL_MEM_set_8>
}
 800bcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800bcc4:	4b02      	ldr	r3, [pc, #8]	@ (800bcd0 <UTIL_ADV_TRACE_Init+0x2c>)
 800bcc6:	4803      	ldr	r0, [pc, #12]	@ (800bcd4 <UTIL_ADV_TRACE_Init+0x30>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4718      	bx	r3
 800bccc:	20001130 	.word	0x20001130
 800bcd0:	0800c9e0 	.word	0x0800c9e0
 800bcd4:	0800be41 	.word	0x0800be41

0800bcd8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800bcd8:	4b01      	ldr	r3, [pc, #4]	@ (800bce0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800bcda:	6058      	str	r0, [r3, #4]
}
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	20001130 	.word	0x20001130

0800bce4 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800bce4:	4b01      	ldr	r3, [pc, #4]	@ (800bcec <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800bce6:	7218      	strb	r0, [r3, #8]
}
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	20001130 	.word	0x20001130

0800bcf0 <TRACE_Send>:
{
 800bcf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcf2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bcf6:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800bcf8:	4c1c      	ldr	r4, [pc, #112]	@ (800bd6c <TRACE_Send+0x7c>)
  if(TRACE_IsLocked() == 0u)
 800bcfa:	8ae0      	ldrh	r0, [r4, #22]
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d12f      	bne.n	800bd60 <TRACE_Send+0x70>
    TRACE_Lock();
 800bd00:	f7ff ffb8 	bl	800bc74 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800bd04:	8a21      	ldrh	r1, [r4, #16]
 800bd06:	8a62      	ldrh	r2, [r4, #18]
 800bd08:	4291      	cmp	r1, r2
 800bd0a:	d027      	beq.n	800bd5c <TRACE_Send+0x6c>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800bd0c:	78a3      	ldrb	r3, [r4, #2]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d112      	bne.n	800bd38 <TRACE_Send+0x48>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bd12:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bd14:	8020      	strh	r0, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bd16:	1a5b      	subs	r3, r3, r1
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bd18:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bd1e:	70a1      	strb	r1, [r4, #2]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bd20:	b963      	cbnz	r3, 800bd3c <TRACE_Send+0x4c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bd22:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bd24:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bd26:	8a23      	ldrh	r3, [r4, #16]
 800bd28:	429a      	cmp	r2, r3
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bd2a:	bf8b      	itete	hi
 800bd2c:	1ad2      	subhi	r2, r2, r3
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bd2e:	f5c3 6380 	rsbls	r3, r3, #1024	@ 0x400
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bd32:	82a2      	strhhi	r2, [r4, #20]
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bd34:	82a3      	strhls	r3, [r4, #20]
 800bd36:	e001      	b.n	800bd3c <TRACE_Send+0x4c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d0f4      	beq.n	800bd26 <TRACE_Send+0x36>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bd3c:	8a23      	ldrh	r3, [r4, #16]
 800bd3e:	4e0c      	ldr	r6, [pc, #48]	@ (800bd70 <TRACE_Send+0x80>)
 800bd40:	441e      	add	r6, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd42:	f385 8810 	msr	PRIMASK, r5
      UTIL_ADV_TRACE_PreSendHook();
 800bd46:	f7f5 ffae 	bl	8001ca6 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4b09      	ldr	r3, [pc, #36]	@ (800bd74 <TRACE_Send+0x84>)
 800bd4e:	8aa1      	ldrh	r1, [r4, #20]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	9301      	str	r3, [sp, #4]
}
 800bd54:	b002      	add	sp, #8
 800bd56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bd5a:	4718      	bx	r3
      TRACE_UnLock();
 800bd5c:	f7ff ff96 	bl	800bc8c <TRACE_UnLock>
 800bd60:	f385 8810 	msr	PRIMASK, r5
}
 800bd64:	2000      	movs	r0, #0
 800bd66:	b002      	add	sp, #8
 800bd68:	bd70      	pop	{r4, r5, r6, pc}
 800bd6a:	bf00      	nop
 800bd6c:	20001130 	.word	0x20001130
 800bd70:	20001148 	.word	0x20001148
 800bd74:	0800c9e0 	.word	0x0800c9e0

0800bd78 <UTIL_ADV_TRACE_COND_FSend>:
{
 800bd78:	b408      	push	{r3}
  uint16_t timestamp_size = 0u;
 800bd7a:	2300      	movs	r3, #0
{
 800bd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800bd7e:	4c2d      	ldr	r4, [pc, #180]	@ (800be34 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
{
 800bd80:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800bd82:	f8ad 3000 	strh.w	r3, [sp]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800bd86:	7a23      	ldrb	r3, [r4, #8]
{
 800bd88:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800bd8a:	4283      	cmp	r3, r0
 800bd8c:	d34c      	bcc.n	800be28 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800bd8e:	68e3      	ldr	r3, [r4, #12]
 800bd90:	4399      	bics	r1, r3
 800bd92:	d14c      	bne.n	800be2e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800bd94:	6863      	ldr	r3, [r4, #4]
 800bd96:	b11b      	cbz	r3, 800bda0 <UTIL_ADV_TRACE_COND_FSend+0x28>
 800bd98:	b112      	cbz	r2, 800bda0 <UTIL_ADV_TRACE_COND_FSend+0x28>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800bd9a:	4669      	mov	r1, sp
 800bd9c:	a802      	add	r0, sp, #8
 800bd9e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 800bda0:	ab0c      	add	r3, sp, #48	@ 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bda2:	462a      	mov	r2, r5
 800bda4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bda8:	4823      	ldr	r0, [pc, #140]	@ (800be38 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
  va_start( vaArgs, strFormat);
 800bdaa:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bdac:	f000 fbec 	bl	800c588 <tiny_vsnprintf_like>
  TRACE_Lock();
 800bdb0:	f7ff ff60 	bl	800bc74 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800bdb4:	f8bd 3000 	ldrh.w	r3, [sp]
 800bdb8:	f10d 0102 	add.w	r1, sp, #2
 800bdbc:	4418      	add	r0, r3
 800bdbe:	b280      	uxth	r0, r0
 800bdc0:	f7ff ff28 	bl	800bc14 <TRACE_AllocateBufer>
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	d02a      	beq.n	800be1e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 800bdc8:	2100      	movs	r1, #0
 800bdca:	460e      	mov	r6, r1
 800bdcc:	f8bd 2000 	ldrh.w	r2, [sp]
 800bdd0:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800bdd4:	f10d 0c08 	add.w	ip, sp, #8
 800bdd8:	b28f      	uxth	r7, r1
 800bdda:	19c3      	adds	r3, r0, r7
 800bddc:	42ba      	cmp	r2, r7
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	d816      	bhi.n	800be10 <UTIL_ADV_TRACE_COND_FSend+0x98>
 800bde2:	b116      	cbz	r6, 800bdea <UTIL_ADV_TRACE_COND_FSend+0x72>
 800bde4:	4402      	add	r2, r0
 800bde6:	f8ad 2002 	strh.w	r2, [sp, #2]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bdea:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800bdee:	4c13      	ldr	r4, [pc, #76]	@ (800be3c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800bdf0:	462a      	mov	r2, r5
 800bdf2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bdf6:	9b01      	ldr	r3, [sp, #4]
 800bdf8:	4420      	add	r0, r4
 800bdfa:	f000 fbc5 	bl	800c588 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800bdfe:	f7ff ff45 	bl	800bc8c <TRACE_UnLock>
    return TRACE_Send();
 800be02:	f7ff ff75 	bl	800bcf0 <TRACE_Send>
}
 800be06:	b006      	add	sp, #24
 800be08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800be0c:	b001      	add	sp, #4
 800be0e:	4770      	bx	lr
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800be10:	f81c 6b01 	ldrb.w	r6, [ip], #1
 800be14:	4423      	add	r3, r4
 800be16:	761e      	strb	r6, [r3, #24]
    for (idx = 0u; idx < timestamp_size; idx++)
 800be18:	3101      	adds	r1, #1
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800be1a:	2601      	movs	r6, #1
 800be1c:	e7dc      	b.n	800bdd8 <UTIL_ADV_TRACE_COND_FSend+0x60>
  TRACE_UnLock();
 800be1e:	f7ff ff35 	bl	800bc8c <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800be22:	f06f 0002 	mvn.w	r0, #2
 800be26:	e7ee      	b.n	800be06 <UTIL_ADV_TRACE_COND_FSend+0x8e>
    return UTIL_ADV_TRACE_GIVEUP;
 800be28:	f06f 0004 	mvn.w	r0, #4
 800be2c:	e7eb      	b.n	800be06 <UTIL_ADV_TRACE_COND_FSend+0x8e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800be2e:	f06f 0005 	mvn.w	r0, #5
 800be32:	e7e8      	b.n	800be06 <UTIL_ADV_TRACE_COND_FSend+0x8e>
 800be34:	20001130 	.word	0x20001130
 800be38:	20001548 	.word	0x20001548
 800be3c:	20001148 	.word	0x20001148

0800be40 <TRACE_TxCpltCallback>:
{
 800be40:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be42:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800be46:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800be48:	4b20      	ldr	r3, [pc, #128]	@ (800becc <TRACE_TxCpltCallback+0x8c>)
 800be4a:	789a      	ldrb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800be4c:	8a58      	ldrh	r0, [r3, #18]
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800be4e:	2a02      	cmp	r2, #2
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800be50:	bf0d      	iteet	eq
 800be52:	2200      	moveq	r2, #0
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800be54:	8a1a      	ldrhne	r2, [r3, #16]
 800be56:	8a99      	ldrhne	r1, [r3, #20]
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800be58:	709a      	strbeq	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800be5a:	bf1c      	itt	ne
 800be5c:	1852      	addne	r2, r2, r1
 800be5e:	f3c2 0209 	ubfxne	r2, r2, #0, #10
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800be62:	4290      	cmp	r0, r2
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800be64:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800be66:	d028      	beq.n	800beba <TRACE_TxCpltCallback+0x7a>
 800be68:	8ad9      	ldrh	r1, [r3, #22]
 800be6a:	2901      	cmp	r1, #1
 800be6c:	d125      	bne.n	800beba <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800be6e:	7899      	ldrb	r1, [r3, #2]
 800be70:	2901      	cmp	r1, #1
 800be72:	d113      	bne.n	800be9c <TRACE_TxCpltCallback+0x5c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800be74:	8819      	ldrh	r1, [r3, #0]
 800be76:	1a8a      	subs	r2, r1, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800be78:	2102      	movs	r1, #2
 800be7a:	7099      	strb	r1, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800be7c:	2100      	movs	r1, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800be7e:	b292      	uxth	r2, r2
 800be80:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800be82:	8019      	strh	r1, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800be84:	b962      	cbnz	r2, 800bea0 <TRACE_TxCpltCallback+0x60>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800be86:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800be88:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800be8a:	8a1a      	ldrh	r2, [r3, #16]
 800be8c:	4290      	cmp	r0, r2
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800be8e:	bf8b      	itete	hi
 800be90:	1a80      	subhi	r0, r0, r2
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800be92:	f5c2 6280 	rsbls	r2, r2, #1024	@ 0x400
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800be96:	8298      	strhhi	r0, [r3, #20]
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800be98:	829a      	strhls	r2, [r3, #20]
 800be9a:	e001      	b.n	800bea0 <TRACE_TxCpltCallback+0x60>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800be9c:	2900      	cmp	r1, #0
 800be9e:	d0f4      	beq.n	800be8a <TRACE_TxCpltCallback+0x4a>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bea0:	8a1a      	ldrh	r2, [r3, #16]
 800bea2:	480b      	ldr	r0, [pc, #44]	@ (800bed0 <TRACE_TxCpltCallback+0x90>)
 800bea4:	4410      	add	r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bea6:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800beaa:	4a0a      	ldr	r2, [pc, #40]	@ (800bed4 <TRACE_TxCpltCallback+0x94>)
 800beac:	8a99      	ldrh	r1, [r3, #20]
 800beae:	68d3      	ldr	r3, [r2, #12]
 800beb0:	9301      	str	r3, [sp, #4]
}
 800beb2:	b002      	add	sp, #8
 800beb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800beb8:	4718      	bx	r3
 800beba:	f384 8810 	msr	PRIMASK, r4
    UTIL_ADV_TRACE_PostSendHook();
 800bebe:	f7f5 fef6 	bl	8001cae <UTIL_ADV_TRACE_PostSendHook>
}
 800bec2:	b002      	add	sp, #8
 800bec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TRACE_UnLock();
 800bec8:	f7ff bee0 	b.w	800bc8c <TRACE_UnLock>
 800becc:	20001130 	.word	0x20001130
 800bed0:	20001148 	.word	0x20001148
 800bed4:	0800c9e0 	.word	0x0800c9e0

0800bed8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bed8:	2200      	movs	r2, #0
 800beda:	4b02      	ldr	r3, [pc, #8]	@ (800bee4 <UTIL_LPM_Init+0xc>)
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bedc:	e9c3 2200 	strd	r2, r2, [r3]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	20001748 	.word	0x20001748

0800bee8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bee8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800beee:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800bef0:	b141      	cbz	r1, 800bf04 <UTIL_LPM_SetStopMode+0x1c>
 800bef2:	2901      	cmp	r1, #1
 800bef4:	d103      	bne.n	800befe <UTIL_LPM_SetStopMode+0x16>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800bef6:	4a06      	ldr	r2, [pc, #24]	@ (800bf10 <UTIL_LPM_SetStopMode+0x28>)
 800bef8:	6813      	ldr	r3, [r2, #0]
 800befa:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800befc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800befe:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bf02:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800bf04:	4a02      	ldr	r2, [pc, #8]	@ (800bf10 <UTIL_LPM_SetStopMode+0x28>)
 800bf06:	6813      	ldr	r3, [r2, #0]
 800bf08:	ea23 0300 	bic.w	r3, r3, r0
 800bf0c:	e7f6      	b.n	800befc <UTIL_LPM_SetStopMode+0x14>
 800bf0e:	bf00      	nop
 800bf10:	20001748 	.word	0x20001748

0800bf14 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bf14:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf16:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf1a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800bf1c:	b141      	cbz	r1, 800bf30 <UTIL_LPM_SetOffMode+0x1c>
 800bf1e:	2901      	cmp	r1, #1
 800bf20:	d103      	bne.n	800bf2a <UTIL_LPM_SetOffMode+0x16>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bf22:	4a06      	ldr	r2, [pc, #24]	@ (800bf3c <UTIL_LPM_SetOffMode+0x28>)
 800bf24:	6853      	ldr	r3, [r2, #4]
 800bf26:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bf28:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf2a:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bf2e:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800bf30:	4a02      	ldr	r2, [pc, #8]	@ (800bf3c <UTIL_LPM_SetOffMode+0x28>)
 800bf32:	6853      	ldr	r3, [r2, #4]
 800bf34:	ea23 0300 	bic.w	r3, r3, r0
 800bf38:	e7f6      	b.n	800bf28 <UTIL_LPM_SetOffMode+0x14>
 800bf3a:	bf00      	nop
 800bf3c:	20001748 	.word	0x20001748

0800bf40 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf40:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf44:	b672      	cpsid	i
{
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800bf46:	4b06      	ldr	r3, [pc, #24]	@ (800bf60 <UTIL_LPM_GetMode+0x20>)
 800bf48:	6819      	ldr	r1, [r3, #0]
 800bf4a:	b939      	cbnz	r1, 800bf5c <UTIL_LPM_GetMode+0x1c>
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800bf4c:	685b      	ldr	r3, [r3, #4]
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bf0c      	ite	eq
 800bf52:	2002      	moveq	r0, #2
 800bf54:	2001      	movne	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf56:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800bf5a:	4770      	bx	lr
    mode_selected = UTIL_LPM_SLEEPMODE;
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	e7fa      	b.n	800bf56 <UTIL_LPM_GetMode+0x16>
 800bf60:	20001748 	.word	0x20001748

0800bf64 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800bf64:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf66:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf6a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800bf6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf98 <UTIL_LPM_EnterLowPower+0x34>)
 800bf6e:	4c0b      	ldr	r4, [pc, #44]	@ (800bf9c <UTIL_LPM_EnterLowPower+0x38>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	b132      	cbz	r2, 800bf82 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800bf78:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800bf7a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf7c:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800bf80:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	b11b      	cbz	r3, 800bf8e <UTIL_LPM_EnterLowPower+0x2a>
        UTIL_PowerDriver.EnterStopMode( );
 800bf86:	68a3      	ldr	r3, [r4, #8]
 800bf88:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800bf8a:	68e3      	ldr	r3, [r4, #12]
 800bf8c:	e7f5      	b.n	800bf7a <UTIL_LPM_EnterLowPower+0x16>
      UTIL_PowerDriver.EnterOffMode( );
 800bf8e:	6923      	ldr	r3, [r4, #16]
 800bf90:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800bf92:	6963      	ldr	r3, [r4, #20]
 800bf94:	e7f1      	b.n	800bf7a <UTIL_LPM_EnterLowPower+0x16>
 800bf96:	bf00      	nop
 800bf98:	20001748 	.word	0x20001748
 800bf9c:	0800c9c8 	.word	0x0800c9c8

0800bfa0 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800bfa0:	3801      	subs	r0, #1
 800bfa2:	440a      	add	r2, r1
 800bfa4:	4291      	cmp	r1, r2
 800bfa6:	d100      	bne.n	800bfaa <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800bfa8:	4770      	bx	lr
        *dst8++ = *src8++;
 800bfaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfae:	f800 3f01 	strb.w	r3, [r0, #1]!
 800bfb2:	e7f7      	b.n	800bfa4 <UTIL_MEM_cpy_8+0x4>

0800bfb4 <UTIL_MEM_set_8>:
void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 800bfb4:	f000 bc0a 	b.w	800c7cc <memset>

0800bfb8 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800bfb8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bfbe:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800bfc0:	4b06      	ldr	r3, [pc, #24]	@ (800bfdc <UTIL_SEQ_SetTask+0x24>)
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	4302      	orrs	r2, r0
 800bfc6:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bfc8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bfcc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800bfd0:	4302      	orrs	r2, r0
 800bfd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfd6:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800bfda:	bd10      	pop	{r4, pc}
 800bfdc:	20001750 	.word	0x20001750

0800bfe0 <UTIL_SEQ_PreIdle>:
__WEAK void UTIL_SEQ_Idle( void )
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
 800bfe0:	4770      	bx	lr

0800bfe2 <UTIL_SEQ_PostIdle>:
   * Unless specified by the application, there is nothing to be done
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
 800bfe2:	4770      	bx	lr

0800bfe4 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800bfe4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bfe8:	bf36      	itet	cc
 800bfea:	2310      	movcc	r3, #16
  uint8_t n = 0U;
 800bfec:	2300      	movcs	r3, #0
  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800bfee:	0400      	lslcc	r0, r0, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800bff0:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800bff4:	bf3e      	ittt	cc
 800bff6:	3308      	addcc	r3, #8
 800bff8:	0200      	lslcc	r0, r0, #8
 800bffa:	b2db      	uxtbcc	r3, r3
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800bffc:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800c000:	bf38      	it	cc
 800c002:	0100      	lslcc	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800c004:	4a06      	ldr	r2, [pc, #24]	@ (800c020 <SEQ_BitPosition+0x3c>)
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800c006:	bf38      	it	cc
 800c008:	3304      	addcc	r3, #4
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800c00a:	ea4f 7010 	mov.w	r0, r0, lsr #28
  return (uint8_t)(31U-n);
 800c00e:	5c12      	ldrb	r2, [r2, r0]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800c010:	bf38      	it	cc
 800c012:	b2db      	uxtbcc	r3, r3
  return (uint8_t)(31U-n);
 800c014:	f1c3 031f 	rsb	r3, r3, #31
 800c018:	1a98      	subs	r0, r3, r2
}
 800c01a:	b2c0      	uxtb	r0, r0
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	0800cf41 	.word	0x0800cf41

0800c024 <UTIL_SEQ_Run>:
{
 800c024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      counter++;
 800c028:	2601      	movs	r6, #1
  super_mask_backup = SuperMask;
 800c02a:	4f35      	ldr	r7, [pc, #212]	@ (800c100 <UTIL_SEQ_Run+0xdc>)
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800c02c:	4c35      	ldr	r4, [pc, #212]	@ (800c104 <UTIL_SEQ_Run+0xe0>)
  super_mask_backup = SuperMask;
 800c02e:	687d      	ldr	r5, [r7, #4]
  SuperMask &= Mask_bm;
 800c030:	4028      	ands	r0, r5
 800c032:	6078      	str	r0, [r7, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	e9d7 2100 	ldrd	r2, r1, [r7]
 800c03a:	4013      	ands	r3, r2
 800c03c:	420b      	tst	r3, r1
 800c03e:	d043      	beq.n	800c0c8 <UTIL_SEQ_Run+0xa4>
 800c040:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800c044:	4003      	ands	r3, r0
 800c046:	d13f      	bne.n	800c0c8 <UTIL_SEQ_Run+0xa4>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800c048:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800c04c:	400a      	ands	r2, r1
 800c04e:	4010      	ands	r0, r2
 800c050:	d103      	bne.n	800c05a <UTIL_SEQ_Run+0x36>
      counter++;
 800c052:	2301      	movs	r3, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800c054:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800c058:	4010      	ands	r0, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c05a:	00d9      	lsls	r1, r3, #3
 800c05c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c060:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c064:	4421      	add	r1, r4
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c066:	4210      	tst	r0, r2
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c068:	bf04      	itt	eq
 800c06a:	f04f 32ff 	moveq.w	r2, #4294967295
 800c06e:	f8c3 2094 	streq.w	r2, [r3, #148]	@ 0x94
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c072:	f8d1 8094 	ldr.w	r8, [r1, #148]	@ 0x94
 800c076:	ea08 0000 	and.w	r0, r8, r0
 800c07a:	f7ff ffb3 	bl	800bfe4 <SEQ_BitPosition>
 800c07e:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c080:	fa06 f000 	lsl.w	r0, r6, r0
 800c084:	ea28 0000 	bic.w	r0, r8, r0
 800c088:	f8c1 0094 	str.w	r0, [r1, #148]	@ 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c08c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c090:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c092:	68e3      	ldr	r3, [r4, #12]
 800c094:	6822      	ldr	r2, [r4, #0]
 800c096:	fa06 f303 	lsl.w	r3, r6, r3
 800c09a:	ea22 0203 	bic.w	r2, r2, r3
 800c09e:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c0a0:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800c0a4:	ea22 0203 	bic.w	r2, r2, r3
 800c0a8:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800c0ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800c0b0:	ea22 0203 	bic.w	r2, r2, r3
 800c0b4:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0b8:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800c0bc:	68e3      	ldr	r3, [r4, #12]
 800c0be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	4798      	blx	r3
 800c0c6:	e7b5      	b.n	800c034 <UTIL_SEQ_Run+0x10>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0cc:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800c0ce:	f7ff ff87 	bl	800bfe0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0d2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c0d6:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	4013      	ands	r3, r2
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800c0e6:	400a      	ands	r2, r1
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	d101      	bne.n	800c0f0 <UTIL_SEQ_Run+0xcc>
	UTIL_SEQ_Idle( );
 800c0ec:	f7f5 fd88 	bl	8001c00 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0f0:	f386 8810 	msr	PRIMASK, r6
  UTIL_SEQ_PostIdle( );
 800c0f4:	f7ff ff75 	bl	800bfe2 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800c0f8:	607d      	str	r5, [r7, #4]
}
 800c0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0fe:	bf00      	nop
 800c100:	200000d4 	.word	0x200000d4
 800c104:	20001750 	.word	0x20001750

0800c108 <UTIL_SEQ_RegTask>:
{
 800c108:	4611      	mov	r1, r2
 800c10a:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c10c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c110:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c112:	f7ff ff67 	bl	800bfe4 <SEQ_BitPosition>
 800c116:	4b03      	ldr	r3, [pc, #12]	@ (800c124 <UTIL_SEQ_RegTask+0x1c>)
 800c118:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c11c:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c11e:	f384 8810 	msr	PRIMASK, r4
}
 800c122:	bd10      	pop	{r4, pc}
 800c124:	20001750 	.word	0x20001750

0800c128 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800c128:	b082      	sub	sp, #8
 800c12a:	b082      	sub	sp, #8
 800c12c:	f10d 0c08 	add.w	ip, sp, #8
 800c130:	e90c 0006 	stmdb	ip, {r1, r2}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c134:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 800c138:	9303      	str	r3, [sp, #12]
  c.Seconds = a.Seconds + b.Seconds;
 800c13a:	440b      	add	r3, r1
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c13c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c140:	440a      	add	r2, r1
 800c142:	b291      	uxth	r1, r2
 800c144:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800c146:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800c14a:	bfa2      	ittt	ge
 800c14c:	f5a1 727a 	subge.w	r2, r1, #1000	@ 0x3e8
    c.Seconds++;
 800c150:	3301      	addge	r3, #1
    c.SubSeconds -= 1000;
 800c152:	b212      	sxthge	r2, r2
  }
  return c;
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	8082      	strh	r2, [r0, #4]
}
 800c158:	b002      	add	sp, #8
 800c15a:	b002      	add	sp, #8
 800c15c:	4770      	bx	lr

0800c15e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800c15e:	b082      	sub	sp, #8
 800c160:	b082      	sub	sp, #8
 800c162:	f10d 0c08 	add.w	ip, sp, #8
 800c166:	e90c 0006 	stmdb	ip, {r1, r2}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c16a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 800c16e:	9303      	str	r3, [sp, #12]
  c.Seconds = a.Seconds - b.Seconds;
 800c170:	1acb      	subs	r3, r1, r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c172:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c176:	1a52      	subs	r2, r2, r1
 800c178:	b291      	uxth	r1, r2
 800c17a:	b212      	sxth	r2, r2
  if( c.SubSeconds < 0 )
 800c17c:	2a00      	cmp	r2, #0
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800c17e:	bfbe      	ittt	lt
 800c180:	f501 727a 	addlt.w	r2, r1, #1000	@ 0x3e8
    c.Seconds--;
 800c184:	f103 33ff 	addlt.w	r3, r3, #4294967295
    c.SubSeconds += 1000;
 800c188:	b212      	sxthlt	r2, r2
  }
  return c;
 800c18a:	6003      	str	r3, [r0, #0]
 800c18c:	8082      	strh	r2, [r0, #4]
}
 800c18e:	b002      	add	sp, #8
 800c190:	b002      	add	sp, #8
 800c192:	4770      	bx	lr

0800c194 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800c194:	b530      	push	{r4, r5, lr}
 800c196:	b085      	sub	sp, #20
 800c198:	466b      	mov	r3, sp
 800c19a:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c19e:	2300      	movs	r3, #0

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c1a0:	4d0f      	ldr	r5, [pc, #60]	@ (800c1e0 <SysTimeSet+0x4c>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c1a2:	9302      	str	r3, [sp, #8]
 800c1a4:	f8ad 300c 	strh.w	r3, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c1a8:	a803      	add	r0, sp, #12
 800c1aa:	692b      	ldr	r3, [r5, #16]
 800c1ac:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800c1ae:	9b00      	ldr	r3, [sp, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c1b0:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c1b4:	9002      	str	r0, [sp, #8]
  c.Seconds = a.Seconds - b.Seconds;
 800c1b6:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c1b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c1bc:	1ae4      	subs	r4, r4, r3
 800c1be:	b2a3      	uxth	r3, r4
 800c1c0:	b224      	sxth	r4, r4
  if( c.SubSeconds < 0 )
 800c1c2:	2c00      	cmp	r4, #0
    c.SubSeconds += 1000;
 800c1c4:	bfbe      	ittt	lt
 800c1c6:	f503 737a 	addlt.w	r3, r3, #1000	@ 0x3e8
 800c1ca:	b21c      	sxthlt	r4, r3
    c.Seconds--;
 800c1cc:	f100 30ff 	addlt.w	r0, r0, #4294967295

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	68ab      	ldr	r3, [r5, #8]
 800c1d8:	4798      	blx	r3
}
 800c1da:	b005      	add	sp, #20
 800c1dc:	bd30      	pop	{r4, r5, pc}
 800c1de:	bf00      	nop
 800c1e0:	0800c988 	.word	0x0800c988

0800c1e4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c1e4:	2300      	movs	r3, #0
{
 800c1e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c1e8:	4e10      	ldr	r6, [pc, #64]	@ (800c22c <SysTimeGet+0x48>)
{
 800c1ea:	4605      	mov	r5, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	f8ad 3004 	strh.w	r3, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c1f2:	a801      	add	r0, sp, #4
 800c1f4:	6933      	ldr	r3, [r6, #16]
 800c1f6:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c1f8:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c1fa:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c1fc:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800c1fe:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c200:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800c202:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 800c204:	9b00      	ldr	r3, [sp, #0]
 800c206:	4418      	add	r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c208:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c20c:	4423      	add	r3, r4
 800c20e:	b29a      	uxth	r2, r3
 800c210:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800c212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
    c.Seconds++;
 800c216:	bfa8      	it	ge
 800c218:	3001      	addge	r0, #1

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800c21a:	6028      	str	r0, [r5, #0]
}
 800c21c:	4628      	mov	r0, r5
    c.SubSeconds -= 1000;
 800c21e:	bfa4      	itt	ge
 800c220:	f5a2 737a 	subge.w	r3, r2, #1000	@ 0x3e8
 800c224:	b21b      	sxthge	r3, r3
  return sysTime;
 800c226:	80ab      	strh	r3, [r5, #4]
}
 800c228:	b002      	add	sp, #8
 800c22a:	bd70      	pop	{r4, r5, r6, pc}
 800c22c:	0800c988 	.word	0x0800c988

0800c230 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c230:	2300      	movs	r3, #0
{
 800c232:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c23a:	4b07      	ldr	r3, [pc, #28]	@ (800c258 <SysTimeGetMcuTime+0x28>)
{
 800c23c:	4604      	mov	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	a801      	add	r0, sp, #4
 800c242:	4798      	blx	r3
 800c244:	466d      	mov	r5, sp
 800c246:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 800c248:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c24c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800c250:	4620      	mov	r0, r4
 800c252:	b003      	add	sp, #12
 800c254:	bd30      	pop	{r4, r5, pc}
 800c256:	bf00      	nop
 800c258:	0800c988 	.word	0x0800c988

0800c25c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800c25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c25e:	4d0e      	ldr	r5, [pc, #56]	@ (800c298 <SysTimeToMs+0x3c>)
{
 800c260:	ab02      	add	r3, sp, #8
 800c262:	e903 0003 	stmdb	r3, {r0, r1}
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c266:	68eb      	ldr	r3, [r5, #12]
 800c268:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800c26a:	686b      	ldr	r3, [r5, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c26c:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800c26e:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800c270:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c272:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  c.Seconds = a.Seconds - b.Seconds;
 800c276:	1a12      	subs	r2, r2, r0
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
}
 800c278:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c27c:	1b1b      	subs	r3, r3, r4
 800c27e:	b299      	uxth	r1, r3
 800c280:	b21b      	sxth	r3, r3
  if( c.SubSeconds < 0 )
 800c282:	2b00      	cmp	r3, #0
    c.SubSeconds += 1000;
 800c284:	bfbe      	ittt	lt
 800c286:	f501 717a 	addlt.w	r1, r1, #1000	@ 0x3e8
    c.Seconds--;
 800c28a:	f102 32ff 	addlt.w	r2, r2, #4294967295
    c.SubSeconds += 1000;
 800c28e:	b20b      	sxthlt	r3, r1
}
 800c290:	fb00 3002 	mla	r0, r0, r2, r3
 800c294:	b003      	add	sp, #12
 800c296:	bd30      	pop	{r4, r5, pc}
 800c298:	0800c988 	.word	0x0800c988

0800c29c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800c29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t seconds = timeMs / 1000;
 800c2a0:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 800c2a4:	fbb1 f5f5 	udiv	r5, r1, r5
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800c2a8:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c2ac:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 800c2ec <SysTimeFromMs+0x50>
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800c2b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c2b4:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 800c2b8:	b29c      	uxth	r4, r3
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c2ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
{
 800c2be:	4606      	mov	r6, r0
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c2c0:	4798      	blx	r3
 800c2c2:	4607      	mov	r7, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800c2c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c2c8:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c2ca:	19e3      	adds	r3, r4, r7
 800c2cc:	b299      	uxth	r1, r3
 800c2ce:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800c2d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
  c.Seconds = a.Seconds + b.Seconds;
 800c2d4:	4428      	add	r0, r5
    c.SubSeconds -= 1000;
 800c2d6:	bfa2      	ittt	ge
 800c2d8:	f5a1 737a 	subge.w	r3, r1, #1000	@ 0x3e8
    c.Seconds++;
 800c2dc:	3001      	addge	r0, #1
    c.SubSeconds -= 1000;
 800c2de:	b21b      	sxthge	r3, r3
  return c;
 800c2e0:	6030      	str	r0, [r6, #0]
 800c2e2:	80b3      	strh	r3, [r6, #4]
  return SysTimeAdd( sysTime, DeltaTime );
}
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ea:	bf00      	nop
 800c2ec:	0800c988 	.word	0x0800c988

0800c2f0 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4b02      	ldr	r3, [pc, #8]	@ (800c2fc <UTIL_TIMER_Init+0xc>)
 800c2f4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800c2f6:	4b02      	ldr	r3, [pc, #8]	@ (800c300 <UTIL_TIMER_Init+0x10>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4718      	bx	r3
 800c2fc:	200017f0 	.word	0x200017f0
 800c300:	0800c99c 	.word	0x0800c99c

0800c304 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c306:	4604      	mov	r4, r0
 800c308:	4617      	mov	r7, r2
 800c30a:	4608      	mov	r0, r1
 800c30c:	461e      	mov	r6, r3
  if((TimerObject != NULL) && (Callback != NULL))
 800c30e:	b17c      	cbz	r4, 800c330 <UTIL_TIMER_Create+0x2c>
 800c310:	b173      	cbz	r3, 800c330 <UTIL_TIMER_Create+0x2c>
  {
    TimerObject->Timestamp = 0U;
 800c312:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c314:	4b07      	ldr	r3, [pc, #28]	@ (800c334 <UTIL_TIMER_Create+0x30>)
    TimerObject->Timestamp = 0U;
 800c316:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c31a:	4798      	blx	r3
 800c31c:	6060      	str	r0, [r4, #4]
    TimerObject->IsReloadStopped = 0U;
    TimerObject->Callback = Callback;
    TimerObject->argument = Argument;
    TimerObject->Mode = Mode;
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
 800c31e:	4628      	mov	r0, r5
    TimerObject->argument = Argument;
 800c320:	9b06      	ldr	r3, [sp, #24]
    TimerObject->IsPending = 0U;
 800c322:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800c324:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800c326:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800c328:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800c32a:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800c32c:	6165      	str	r5, [r4, #20]
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 800c32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800c330:	2001      	movs	r0, #1
 800c332:	e7fc      	b.n	800c32e <UTIL_TIMER_Create+0x2a>
 800c334:	0800c99c 	.word	0x0800c99c

0800c338 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800c338:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800c33a:	4c03      	ldr	r4, [pc, #12]	@ (800c348 <UTIL_TIMER_GetCurrentTime+0x10>)
 800c33c:	69e3      	ldr	r3, [r4, #28]
 800c33e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800c340:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
}
 800c342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return  UTIL_TimerDriver.Tick2ms(now);
 800c346:	4718      	bx	r3
 800c348:	0800c99c 	.word	0x0800c99c

0800c34c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800c34c:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c34e:	4d06      	ldr	r5, [pc, #24]	@ (800c368 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800c350:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c352:	69eb      	ldr	r3, [r5, #28]
 800c354:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800c356:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c358:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800c35a:	4630      	mov	r0, r6
 800c35c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800c35e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800c360:	1a20      	subs	r0, r4, r0
}
 800c362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800c366:	4718      	bx	r3
 800c368:	0800c99c 	.word	0x0800c99c

0800c36c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c36c:	4b05      	ldr	r3, [pc, #20]	@ (800c384 <TimerExists+0x18>)
 800c36e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800c370:	b90b      	cbnz	r3, 800c376 <TimerExists+0xa>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 800c372:	4618      	mov	r0, r3
 800c374:	4770      	bx	lr
    if( cur == TimerObject )
 800c376:	4283      	cmp	r3, r0
 800c378:	d001      	beq.n	800c37e <TimerExists+0x12>
    cur = cur->Next;
 800c37a:	695b      	ldr	r3, [r3, #20]
 800c37c:	e7f8      	b.n	800c370 <TimerExists+0x4>
      return true;
 800c37e:	2001      	movs	r0, #1
}
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	200017f0 	.word	0x200017f0

0800c388 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800c388:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c38c:	4e0b      	ldr	r6, [pc, #44]	@ (800c3bc <TimerSetTimeout+0x34>)
{
 800c38e:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c390:	6a33      	ldr	r3, [r6, #32]
 800c392:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800c394:	2301      	movs	r3, #1

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c396:	69b7      	ldr	r7, [r6, #24]
  TimerObject->IsPending = 1;
 800c398:	7223      	strb	r3, [r4, #8]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c39a:	4605      	mov	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c39c:	f8d4 8000 	ldr.w	r8, [r4]
 800c3a0:	47b8      	blx	r7
 800c3a2:	4428      	add	r0, r5
 800c3a4:	4580      	cmp	r8, r0
 800c3a6:	d202      	bcs.n	800c3ae <TimerSetTimeout+0x26>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c3a8:	47b8      	blx	r7
 800c3aa:	4428      	add	r0, r5
 800c3ac:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c3ae:	68b3      	ldr	r3, [r6, #8]
 800c3b0:	6820      	ldr	r0, [r4, #0]
 800c3b2:	9301      	str	r3, [sp, #4]
}
 800c3b4:	b002      	add	sp, #8
 800c3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c3ba:	4718      	bx	r3
 800c3bc:	0800c99c 	.word	0x0800c99c

0800c3c0 <UTIL_TIMER_Stop>:
{
 800c3c0:	b570      	push	{r4, r5, r6, lr}
  if (NULL != TimerObject)
 800c3c2:	b320      	cbz	r0, 800c40e <UTIL_TIMER_Stop+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3c4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c3c8:	b672      	cpsid	i
    TimerObject->IsReloadStopped = 1U;
 800c3ca:	2201      	movs	r2, #1
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c3cc:	4d11      	ldr	r5, [pc, #68]	@ (800c414 <UTIL_TIMER_Stop+0x54>)
    TimerObject->IsReloadStopped = 1U;
 800c3ce:	7282      	strb	r2, [r0, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c3d0:	682b      	ldr	r3, [r5, #0]
    if(NULL != TimerListHead)
 800c3d2:	b153      	cbz	r3, 800c3ea <UTIL_TIMER_Stop+0x2a>
      TimerObject->IsRunning = 0U;
 800c3d4:	2200      	movs	r2, #0
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c3d6:	4298      	cmp	r0, r3
      TimerObject->IsRunning = 0U;
 800c3d8:	7242      	strb	r2, [r0, #9]
          if( TimerListHead->Next != NULL )
 800c3da:	695c      	ldr	r4, [r3, #20]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c3dc:	d10e      	bne.n	800c3fc <UTIL_TIMER_Stop+0x3c>
          TimerListHead->IsPending = 0;
 800c3de:	7202      	strb	r2, [r0, #8]
          if( TimerListHead->Next != NULL )
 800c3e0:	b13c      	cbz	r4, 800c3f2 <UTIL_TIMER_Stop+0x32>
            TimerSetTimeout( TimerListHead );
 800c3e2:	4620      	mov	r0, r4
            TimerListHead = TimerListHead->Next;
 800c3e4:	602c      	str	r4, [r5, #0]
            TimerSetTimeout( TimerListHead );
 800c3e6:	f7ff ffcf 	bl	800c388 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3ea:	f386 8810 	msr	PRIMASK, r6
}
 800c3ee:	2000      	movs	r0, #0
}
 800c3f0:	bd70      	pop	{r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800c3f2:	4b09      	ldr	r3, [pc, #36]	@ (800c418 <UTIL_TIMER_Stop+0x58>)
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	4798      	blx	r3
            TimerListHead = NULL;
 800c3f8:	602c      	str	r4, [r5, #0]
 800c3fa:	e7f6      	b.n	800c3ea <UTIL_TIMER_Stop+0x2a>
            cur = cur->Next;
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0f2      	beq.n	800c3ea <UTIL_TIMER_Stop+0x2a>
          if( cur == TimerObject )
 800c404:	4298      	cmp	r0, r3
 800c406:	d1f9      	bne.n	800c3fc <UTIL_TIMER_Stop+0x3c>
            if( cur->Next != NULL )
 800c408:	6943      	ldr	r3, [r0, #20]
              prev->Next = cur;
 800c40a:	6153      	str	r3, [r2, #20]
 800c40c:	e7ed      	b.n	800c3ea <UTIL_TIMER_Stop+0x2a>
    ret = UTIL_TIMER_INVALID_PARAM;
 800c40e:	2001      	movs	r0, #1
 800c410:	e7ee      	b.n	800c3f0 <UTIL_TIMER_Stop+0x30>
 800c412:	bf00      	nop
 800c414:	200017f0 	.word	0x200017f0
 800c418:	0800c99c 	.word	0x0800c99c

0800c41c <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c41c:	4b08      	ldr	r3, [pc, #32]	@ (800c440 <TimerInsertTimer+0x24>)
{
 800c41e:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c420:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800c422:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800c424:	6951      	ldr	r1, [r2, #20]
 800c426:	b911      	cbnz	r1, 800c42e <TimerInsertTimer+0x12>
        cur = next;
        next = next->Next;
    }
    else
    {
        cur->Next = TimerObject;
 800c428:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800c42a:	6141      	str	r1, [r0, #20]

    }
  }
  cur->Next = TimerObject;
  TimerObject->Next = NULL;
}
 800c42c:	bd10      	pop	{r4, pc}
    if( TimerObject->Timestamp  > next->Timestamp )
 800c42e:	6804      	ldr	r4, [r0, #0]
 800c430:	6819      	ldr	r1, [r3, #0]
 800c432:	428c      	cmp	r4, r1
 800c434:	d902      	bls.n	800c43c <TimerInsertTimer+0x20>
        next = next->Next;
 800c436:	461a      	mov	r2, r3
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	e7f3      	b.n	800c424 <TimerInsertTimer+0x8>
 800c43c:	4619      	mov	r1, r3
 800c43e:	e7f3      	b.n	800c428 <TimerInsertTimer+0xc>
 800c440:	200017f0 	.word	0x200017f0

0800c444 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c444:	4a04      	ldr	r2, [pc, #16]	@ (800c458 <TimerInsertNewHeadTimer+0x14>)
 800c446:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800c448:	b10b      	cbz	r3, 800c44e <TimerInsertNewHeadTimer+0xa>
  {
    cur->IsPending = 0;
 800c44a:	2100      	movs	r1, #0
 800c44c:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800c44e:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800c450:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800c452:	f7ff bf99 	b.w	800c388 <TimerSetTimeout>
 800c456:	bf00      	nop
 800c458:	200017f0 	.word	0x200017f0

0800c45c <UTIL_TIMER_Start>:
{
 800c45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c460:	4604      	mov	r4, r0
 800c462:	2800      	cmp	r0, #0
 800c464:	d02d      	beq.n	800c4c2 <UTIL_TIMER_Start+0x66>
 800c466:	f7ff ff81 	bl	800c36c <TimerExists>
 800c46a:	bb50      	cbnz	r0, 800c4c2 <UTIL_TIMER_Start+0x66>
 800c46c:	7a65      	ldrb	r5, [r4, #9]
 800c46e:	bb45      	cbnz	r5, 800c4c2 <UTIL_TIMER_Start+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c470:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c474:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c476:	4e14      	ldr	r6, [pc, #80]	@ (800c4c8 <UTIL_TIMER_Start+0x6c>)
    ticks = TimerObject->ReloadValue;
 800c478:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c47a:	6a33      	ldr	r3, [r6, #32]
 800c47c:	4798      	blx	r3
    TimerObject->IsPending = 0U;
 800c47e:	f44f 7380 	mov.w	r3, #256	@ 0x100
    TimerObject->Timestamp = ticks;
 800c482:	4287      	cmp	r7, r0
 800c484:	bf2c      	ite	cs
 800c486:	6027      	strcs	r7, [r4, #0]
 800c488:	6020      	strcc	r0, [r4, #0]
    if( TimerListHead == NULL )
 800c48a:	4f10      	ldr	r7, [pc, #64]	@ (800c4cc <UTIL_TIMER_Start+0x70>)
    TimerObject->IsPending = 0U;
 800c48c:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
 800c48e:	683b      	ldr	r3, [r7, #0]
    TimerObject->IsReloadStopped = 0U;
 800c490:	72a5      	strb	r5, [r4, #10]
    if( TimerListHead == NULL )
 800c492:	b94b      	cbnz	r3, 800c4a8 <UTIL_TIMER_Start+0x4c>
      UTIL_TimerDriver.SetTimerContext();
 800c494:	6933      	ldr	r3, [r6, #16]
 800c496:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800c498:	4620      	mov	r0, r4
        TimerInsertNewHeadTimer( TimerObject);
 800c49a:	f7ff ffd3 	bl	800c444 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c49e:	f388 8810 	msr	PRIMASK, r8
}
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c4a8:	69b3      	ldr	r3, [r6, #24]
 800c4aa:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	4418      	add	r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c4b0:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800c4b2:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4298      	cmp	r0, r3
        TimerInsertNewHeadTimer( TimerObject);
 800c4b8:	4620      	mov	r0, r4
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c4ba:	d3ee      	bcc.n	800c49a <UTIL_TIMER_Start+0x3e>
        TimerInsertTimer( TimerObject);
 800c4bc:	f7ff ffae 	bl	800c41c <TimerInsertTimer>
 800c4c0:	e7ed      	b.n	800c49e <UTIL_TIMER_Start+0x42>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800c4c2:	2501      	movs	r5, #1
 800c4c4:	e7ed      	b.n	800c4a2 <UTIL_TIMER_Start+0x46>
 800c4c6:	bf00      	nop
 800c4c8:	0800c99c 	.word	0x0800c99c
 800c4cc:	200017f0 	.word	0x200017f0

0800c4d0 <UTIL_TIMER_SetPeriod>:
{
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4608      	mov	r0, r1
  if(NULL == TimerObject)
 800c4d6:	b17c      	cbz	r4, 800c4f8 <UTIL_TIMER_SetPeriod+0x28>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800c4d8:	4b08      	ldr	r3, [pc, #32]	@ (800c4fc <UTIL_TIMER_SetPeriod+0x2c>)
 800c4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4dc:	4798      	blx	r3
 800c4de:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f7ff ff43 	bl	800c36c <TimerExists>
 800c4e6:	b140      	cbz	r0, 800c4fa <UTIL_TIMER_SetPeriod+0x2a>
      (void)UTIL_TIMER_Stop(TimerObject);
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f7ff ff69 	bl	800c3c0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800c4ee:	4620      	mov	r0, r4
}
 800c4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ret = UTIL_TIMER_Start(TimerObject);
 800c4f4:	f7ff bfb2 	b.w	800c45c <UTIL_TIMER_Start>
	  ret = UTIL_TIMER_INVALID_PARAM;
 800c4f8:	2001      	movs	r0, #1
}
 800c4fa:	bd10      	pop	{r4, pc}
 800c4fc:	0800c99c 	.word	0x0800c99c

0800c500 <UTIL_TIMER_IRQ_Handler>:
{
 800c500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c504:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c508:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c50a:	4e1d      	ldr	r6, [pc, #116]	@ (800c580 <UTIL_TIMER_IRQ_Handler+0x80>)
  if ( TimerListHead != NULL )
 800c50c:	4d1d      	ldr	r5, [pc, #116]	@ (800c584 <UTIL_TIMER_IRQ_Handler+0x84>)
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c50e:	6973      	ldr	r3, [r6, #20]
 800c510:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800c512:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c514:	4604      	mov	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800c516:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	b94b      	cbnz	r3, 800c530 <UTIL_TIMER_IRQ_Handler+0x30>
      cur->IsPending = 0;
 800c51c:	f04f 0800 	mov.w	r8, #0
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	b98b      	cbnz	r3, 800c548 <UTIL_TIMER_IRQ_Handler+0x48>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800c524:	6828      	ldr	r0, [r5, #0]
 800c526:	bb28      	cbnz	r0, 800c574 <UTIL_TIMER_IRQ_Handler+0x74>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c528:	f387 8810 	msr	PRIMASK, r7
}
 800c52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DeltaContext = now  - old; /*intentional wrap around */
 800c530:	1b01      	subs	r1, r0, r4
        cur->Timestamp -= DeltaContext;
 800c532:	1a24      	subs	r4, r4, r0
      if (cur->Timestamp > DeltaContext)
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	428a      	cmp	r2, r1
        cur->Timestamp = 0;
 800c538:	bf94      	ite	ls
 800c53a:	2200      	movls	r2, #0
        cur->Timestamp -= DeltaContext;
 800c53c:	1912      	addhi	r2, r2, r4
 800c53e:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800c540:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1f6      	bne.n	800c534 <UTIL_TIMER_IRQ_Handler+0x34>
 800c546:	e7e9      	b.n	800c51c <UTIL_TIMER_IRQ_Handler+0x1c>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800c548:	681c      	ldr	r4, [r3, #0]
 800c54a:	b11c      	cbz	r4, 800c554 <UTIL_TIMER_IRQ_Handler+0x54>
 800c54c:	69b3      	ldr	r3, [r6, #24]
 800c54e:	4798      	blx	r3
 800c550:	4284      	cmp	r4, r0
 800c552:	d2e7      	bcs.n	800c524 <UTIL_TIMER_IRQ_Handler+0x24>
      cur = TimerListHead;
 800c554:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800c556:	6963      	ldr	r3, [r4, #20]
      cur->IsPending = 0;
 800c558:	f8a4 8008 	strh.w	r8, [r4, #8]
      TimerListHead = TimerListHead->Next;
 800c55c:	602b      	str	r3, [r5, #0]
      cur->Callback(cur->argument);
 800c55e:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
 800c562:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800c564:	8963      	ldrh	r3, [r4, #10]
 800c566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c56a:	d1d9      	bne.n	800c520 <UTIL_TIMER_IRQ_Handler+0x20>
        (void)UTIL_TIMER_Start(cur);
 800c56c:	4620      	mov	r0, r4
 800c56e:	f7ff ff75 	bl	800c45c <UTIL_TIMER_Start>
 800c572:	e7d5      	b.n	800c520 <UTIL_TIMER_IRQ_Handler+0x20>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800c574:	7a03      	ldrb	r3, [r0, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1d6      	bne.n	800c528 <UTIL_TIMER_IRQ_Handler+0x28>
    TimerSetTimeout( TimerListHead );
 800c57a:	f7ff ff05 	bl	800c388 <TimerSetTimeout>
 800c57e:	e7d3      	b.n	800c528 <UTIL_TIMER_IRQ_Handler+0x28>
 800c580:	0800c99c 	.word	0x0800c99c
 800c584:	200017f0 	.word	0x200017f0

0800c588 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800c58c:	2900      	cmp	r1, #0
{
 800c58e:	4681      	mov	r9, r0
 800c590:	461e      	mov	r6, r3
 800c592:	b097      	sub	sp, #92	@ 0x5c
  if (size <= 0)
 800c594:	f340 8111 	ble.w	800c7ba <tiny_vsnprintf_like+0x232>
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c598:	4604      	mov	r4, r0
  {
    CHECK_STR_SIZE(buf, str, size);
 800c59a:	1e4f      	subs	r7, r1, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c59c:	7813      	ldrb	r3, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800c59e:	eba4 0009 	sub.w	r0, r4, r9
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c5a2:	b923      	cbnz	r3, 800c5ae <tiny_vsnprintf_like+0x26>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	7023      	strb	r3, [r4, #0]
  return str - buf;
}
 800c5a8:	b017      	add	sp, #92	@ 0x5c
 800c5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    CHECK_STR_SIZE(buf, str, size);
 800c5ae:	42b8      	cmp	r0, r7
 800c5b0:	daf8      	bge.n	800c5a4 <tiny_vsnprintf_like+0x1c>
    if (*fmt != '%')
 800c5b2:	2b25      	cmp	r3, #37	@ 0x25
 800c5b4:	d005      	beq.n	800c5c2 <tiny_vsnprintf_like+0x3a>
      continue;
 800c5b6:	4690      	mov	r8, r2
      *str++ = *fmt;
 800c5b8:	f804 3b01 	strb.w	r3, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c5bc:	f108 0201 	add.w	r2, r8, #1
 800c5c0:	e7ec      	b.n	800c59c <tiny_vsnprintf_like+0x14>
    if (*fmt == '0')
 800c5c2:	f892 e001 	ldrb.w	lr, [r2, #1]
    fmt++;
 800c5c6:	f102 0801 	add.w	r8, r2, #1
    if (*fmt == '0')
 800c5ca:	f1ae 0130 	sub.w	r1, lr, #48	@ 0x30
 800c5ce:	424a      	negs	r2, r1
    if (is_digit(*fmt))
 800c5d0:	f1ae 0330 	sub.w	r3, lr, #48	@ 0x30
    if (*fmt == '0')
 800c5d4:	414a      	adcs	r2, r1
    if (is_digit(*fmt))
 800c5d6:	2b09      	cmp	r3, #9
 800c5d8:	d82b      	bhi.n	800c632 <tiny_vsnprintf_like+0xaa>
 800c5da:	4641      	mov	r1, r8
  int i = 0;
 800c5dc:	2500      	movs	r5, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800c5de:	200a      	movs	r0, #10
 800c5e0:	4688      	mov	r8, r1
 800c5e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5e6:	f1a3 0c30 	sub.w	ip, r3, #48	@ 0x30
 800c5ea:	f1bc 0f09 	cmp.w	ip, #9
 800c5ee:	d91b      	bls.n	800c628 <tiny_vsnprintf_like+0xa0>
    switch (*fmt)
 800c5f0:	f898 3000 	ldrb.w	r3, [r8]
 800c5f4:	2b69      	cmp	r3, #105	@ 0x69
 800c5f6:	f000 809e 	beq.w	800c736 <tiny_vsnprintf_like+0x1ae>
 800c5fa:	d81d      	bhi.n	800c638 <tiny_vsnprintf_like+0xb0>
 800c5fc:	2b63      	cmp	r3, #99	@ 0x63
 800c5fe:	d029      	beq.n	800c654 <tiny_vsnprintf_like+0xcc>
 800c600:	2b64      	cmp	r3, #100	@ 0x64
 800c602:	f000 8098 	beq.w	800c736 <tiny_vsnprintf_like+0x1ae>
 800c606:	2b58      	cmp	r3, #88	@ 0x58
 800c608:	d05a      	beq.n	800c6c0 <tiny_vsnprintf_like+0x138>
        if (*fmt != '%') *str++ = '%';
 800c60a:	2b25      	cmp	r3, #37	@ 0x25
 800c60c:	d11a      	bne.n	800c644 <tiny_vsnprintf_like+0xbc>
        if (*fmt)
 800c60e:	f898 3000 	ldrb.w	r3, [r8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 8093 	beq.w	800c73e <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 800c618:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800c61c:	eba4 0309 	sub.w	r3, r4, r9
 800c620:	42bb      	cmp	r3, r7
 800c622:	f280 808a 	bge.w	800c73a <tiny_vsnprintf_like+0x1b2>
 800c626:	e7c9      	b.n	800c5bc <tiny_vsnprintf_like+0x34>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800c628:	fb00 3305 	mla	r3, r0, r5, r3
 800c62c:	f1a3 0530 	sub.w	r5, r3, #48	@ 0x30
 800c630:	e7d6      	b.n	800c5e0 <tiny_vsnprintf_like+0x58>
    field_width = -1;
 800c632:	f04f 35ff 	mov.w	r5, #4294967295
 800c636:	e7db      	b.n	800c5f0 <tiny_vsnprintf_like+0x68>
    switch (*fmt)
 800c638:	2b75      	cmp	r3, #117	@ 0x75
 800c63a:	d07e      	beq.n	800c73a <tiny_vsnprintf_like+0x1b2>
 800c63c:	2b78      	cmp	r3, #120	@ 0x78
 800c63e:	d041      	beq.n	800c6c4 <tiny_vsnprintf_like+0x13c>
 800c640:	2b73      	cmp	r3, #115	@ 0x73
 800c642:	d01c      	beq.n	800c67e <tiny_vsnprintf_like+0xf6>
        if (*fmt != '%') *str++ = '%';
 800c644:	2325      	movs	r3, #37	@ 0x25
 800c646:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800c64a:	eba4 0309 	sub.w	r3, r4, r9
 800c64e:	42bb      	cmp	r3, r7
 800c650:	da73      	bge.n	800c73a <tiny_vsnprintf_like+0x1b2>
 800c652:	e7dc      	b.n	800c60e <tiny_vsnprintf_like+0x86>
          while (--field_width > 0) *str++ = ' ';
 800c654:	2d00      	cmp	r5, #0
 800c656:	f105 3aff 	add.w	sl, r5, #4294967295
 800c65a:	bfd8      	it	le
 800c65c:	f04f 0a00 	movle.w	sl, #0
 800c660:	4620      	mov	r0, r4
 800c662:	4652      	mov	r2, sl
 800c664:	2120      	movs	r1, #32
 800c666:	f000 f8b1 	bl	800c7cc <memset>
 800c66a:	2d00      	cmp	r5, #0
 800c66c:	bfd8      	it	le
 800c66e:	2501      	movle	r5, #1
        *str++ = (unsigned char) va_arg(args, int);
 800c670:	f856 3b04 	ldr.w	r3, [r6], #4
 800c674:	44a2      	add	sl, r4
 800c676:	f88a 3000 	strb.w	r3, [sl]
          while (--field_width > 0) *str++ = ' ';
 800c67a:	442c      	add	r4, r5
        continue;
 800c67c:	e79e      	b.n	800c5bc <tiny_vsnprintf_like+0x34>
        if (!s) s = "<NULL>";
 800c67e:	4b50      	ldr	r3, [pc, #320]	@ (800c7c0 <tiny_vsnprintf_like+0x238>)
        s = va_arg(args, char *);
 800c680:	f856 bb04 	ldr.w	fp, [r6], #4
        if (!s) s = "<NULL>";
 800c684:	f1bb 0f00 	cmp.w	fp, #0
 800c688:	bf08      	it	eq
 800c68a:	469b      	moveq	fp, r3
        len = strlen(s);
 800c68c:	4658      	mov	r0, fp
 800c68e:	f7f3 fd77 	bl	8000180 <strlen>
          while (len < field_width--) *str++ = ' ';
 800c692:	1a2a      	subs	r2, r5, r0
 800c694:	4285      	cmp	r5, r0
 800c696:	bfb8      	it	lt
 800c698:	2200      	movlt	r2, #0
        len = strlen(s);
 800c69a:	4682      	mov	sl, r0
          while (len < field_width--) *str++ = ' ';
 800c69c:	2120      	movs	r1, #32
 800c69e:	4620      	mov	r0, r4
 800c6a0:	9201      	str	r2, [sp, #4]
 800c6a2:	f000 f893 	bl	800c7cc <memset>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	9a01      	ldr	r2, [sp, #4]
 800c6aa:	4422      	add	r2, r4
 800c6ac:	4553      	cmp	r3, sl
 800c6ae:	db02      	blt.n	800c6b6 <tiny_vsnprintf_like+0x12e>
 800c6b0:	eb02 040a 	add.w	r4, r2, sl
 800c6b4:	e782      	b.n	800c5bc <tiny_vsnprintf_like+0x34>
 800c6b6:	f81b 1003 	ldrb.w	r1, [fp, r3]
 800c6ba:	54d1      	strb	r1, [r2, r3]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	e7f5      	b.n	800c6ac <tiny_vsnprintf_like+0x124>
        flags |= UPPERCASE;
 800c6c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
    switch (*fmt)
 800c6c4:	2110      	movs	r1, #16
  if (type & UPPERCASE)  dig = upper_digits;
 800c6c6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800c7c4 <tiny_vsnprintf_like+0x23c>
 800c6ca:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800c6ce:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 800c7c8 <tiny_vsnprintf_like+0x240>
 800c6d2:	bf18      	it	ne
 800c6d4:	46da      	movne	sl, fp
  c = (type & ZEROPAD) ? '0' : ' ';
 800c6d6:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
  if (type & UPPERCASE)  dig = upper_digits;
 800c6da:	f8cd a008 	str.w	sl, [sp, #8]
  c = (type & ZEROPAD) ? '0' : ' ';
 800c6de:	bf0c      	ite	eq
 800c6e0:	f04f 0a30 	moveq.w	sl, #48	@ 0x30
 800c6e4:	f04f 0a20 	movne.w	sl, #32
      num = va_arg(args, int);
 800c6e8:	f856 cb04 	ldr.w	ip, [r6], #4
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800c6ec:	eba4 0309 	sub.w	r3, r4, r9
  if (type & SIGN)
 800c6f0:	0792      	lsls	r2, r2, #30
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800c6f2:	4660      	mov	r0, ip
 800c6f4:	eba7 0303 	sub.w	r3, r7, r3
  c = (type & ZEROPAD) ? '0' : ' ';
 800c6f8:	f8cd a00c 	str.w	sl, [sp, #12]
  if (type & SIGN)
 800c6fc:	d522      	bpl.n	800c744 <tiny_vsnprintf_like+0x1bc>
    if (num < 0)
 800c6fe:	2800      	cmp	r0, #0
 800c700:	da20      	bge.n	800c744 <tiny_vsnprintf_like+0x1bc>
      sign = '-';
 800c702:	f04f 0c2d 	mov.w	ip, #45	@ 0x2d
      num = -num;
 800c706:	4240      	negs	r0, r0
      size--;
 800c708:	3d01      	subs	r5, #1
    while (num != 0)
 800c70a:	aa05      	add	r2, sp, #20
 800c70c:	9201      	str	r2, [sp, #4]
  i = 0;
 800c70e:	2200      	movs	r2, #0
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800c710:	4682      	mov	sl, r0
 800c712:	fbb0 f0f1 	udiv	r0, r0, r1
 800c716:	fb01 ab10 	mls	fp, r1, r0, sl
 800c71a:	9802      	ldr	r0, [sp, #8]
    while (num != 0)
 800c71c:	4551      	cmp	r1, sl
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800c71e:	f810 b00b 	ldrb.w	fp, [r0, fp]
 800c722:	9801      	ldr	r0, [sp, #4]
 800c724:	f102 0201 	add.w	r2, r2, #1
 800c728:	f800 bb01 	strb.w	fp, [r0], #1
 800c72c:	9001      	str	r0, [sp, #4]
      num = ((unsigned long) num) / (unsigned) base;
 800c72e:	fbba f0f1 	udiv	r0, sl, r1
    while (num != 0)
 800c732:	d9ed      	bls.n	800c710 <tiny_vsnprintf_like+0x188>
 800c734:	e010      	b.n	800c758 <tiny_vsnprintf_like+0x1d0>
        flags |= SIGN;
 800c736:	f042 0202 	orr.w	r2, r2, #2
    base = 10;
 800c73a:	210a      	movs	r1, #10
 800c73c:	e7c3      	b.n	800c6c6 <tiny_vsnprintf_like+0x13e>
          --fmt;
 800c73e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c742:	e76b      	b.n	800c61c <tiny_vsnprintf_like+0x94>
  if (num == 0)
 800c744:	f1bc 0f00 	cmp.w	ip, #0
 800c748:	d002      	beq.n	800c750 <tiny_vsnprintf_like+0x1c8>
 800c74a:	f04f 0c00 	mov.w	ip, #0
 800c74e:	e7dc      	b.n	800c70a <tiny_vsnprintf_like+0x182>
    tmp[i++] = '0';
 800c750:	2230      	movs	r2, #48	@ 0x30
 800c752:	f88d 2014 	strb.w	r2, [sp, #20]
 800c756:	2201      	movs	r2, #1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800c758:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
  size -= precision;
 800c75c:	eba5 0502 	sub.w	r5, r5, r2
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800c760:	d004      	beq.n	800c76c <tiny_vsnprintf_like+0x1e4>
 800c762:	2020      	movs	r0, #32
 800c764:	2d00      	cmp	r5, #0
 800c766:	f105 35ff 	add.w	r5, r5, #4294967295
 800c76a:	dc0a      	bgt.n	800c782 <tiny_vsnprintf_like+0x1fa>
  if (sign) ASSIGN_STR(sign);
 800c76c:	f1bc 0f00 	cmp.w	ip, #0
 800c770:	d005      	beq.n	800c77e <tiny_vsnprintf_like+0x1f6>
 800c772:	212d      	movs	r1, #45	@ 0x2d
 800c774:	3b01      	subs	r3, #1
 800c776:	f804 1b01 	strb.w	r1, [r4], #1
 800c77a:	f43f af1f 	beq.w	800c5bc <tiny_vsnprintf_like+0x34>
 800c77e:	4425      	add	r5, r4
 800c780:	e00a      	b.n	800c798 <tiny_vsnprintf_like+0x210>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800c782:	3b01      	subs	r3, #1
 800c784:	f804 0b01 	strb.w	r0, [r4], #1
 800c788:	d1ec      	bne.n	800c764 <tiny_vsnprintf_like+0x1dc>
 800c78a:	e717      	b.n	800c5bc <tiny_vsnprintf_like+0x34>
  while (size-- > 0) ASSIGN_STR(c);
 800c78c:	9903      	ldr	r1, [sp, #12]
 800c78e:	3b01      	subs	r3, #1
 800c790:	f804 1b01 	strb.w	r1, [r4], #1
 800c794:	f43f af12 	beq.w	800c5bc <tiny_vsnprintf_like+0x34>
 800c798:	1b29      	subs	r1, r5, r4
 800c79a:	2900      	cmp	r1, #0
 800c79c:	dcf6      	bgt.n	800c78c <tiny_vsnprintf_like+0x204>
 800c79e:	a905      	add	r1, sp, #20
 800c7a0:	4411      	add	r1, r2
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800c7a2:	4423      	add	r3, r4
 800c7a4:	4422      	add	r2, r4
 800c7a6:	42a2      	cmp	r2, r4
 800c7a8:	f43f af08 	beq.w	800c5bc <tiny_vsnprintf_like+0x34>
 800c7ac:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 800c7b0:	f804 0b01 	strb.w	r0, [r4], #1
 800c7b4:	429c      	cmp	r4, r3
 800c7b6:	d1f6      	bne.n	800c7a6 <tiny_vsnprintf_like+0x21e>
 800c7b8:	e700      	b.n	800c5bc <tiny_vsnprintf_like+0x34>
    return 0;
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	e6f4      	b.n	800c5a8 <tiny_vsnprintf_like+0x20>
 800c7be:	bf00      	nop
 800c7c0:	0800d4bc 	.word	0x0800d4bc
 800c7c4:	0800d4e8 	.word	0x0800d4e8
 800c7c8:	0800d4c3 	.word	0x0800d4c3

0800c7cc <memset>:
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	4402      	add	r2, r0
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d100      	bne.n	800c7d6 <memset+0xa>
 800c7d4:	4770      	bx	lr
 800c7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c7da:	e7f9      	b.n	800c7d0 <memset+0x4>

0800c7dc <__libc_init_array>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	2600      	movs	r6, #0
 800c7e0:	4d0c      	ldr	r5, [pc, #48]	@ (800c814 <__libc_init_array+0x38>)
 800c7e2:	4c0d      	ldr	r4, [pc, #52]	@ (800c818 <__libc_init_array+0x3c>)
 800c7e4:	1b64      	subs	r4, r4, r5
 800c7e6:	10a4      	asrs	r4, r4, #2
 800c7e8:	42a6      	cmp	r6, r4
 800c7ea:	d109      	bne.n	800c800 <__libc_init_array+0x24>
 800c7ec:	f000 f8a8 	bl	800c940 <_init>
 800c7f0:	2600      	movs	r6, #0
 800c7f2:	4d0a      	ldr	r5, [pc, #40]	@ (800c81c <__libc_init_array+0x40>)
 800c7f4:	4c0a      	ldr	r4, [pc, #40]	@ (800c820 <__libc_init_array+0x44>)
 800c7f6:	1b64      	subs	r4, r4, r5
 800c7f8:	10a4      	asrs	r4, r4, #2
 800c7fa:	42a6      	cmp	r6, r4
 800c7fc:	d105      	bne.n	800c80a <__libc_init_array+0x2e>
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}
 800c800:	f855 3b04 	ldr.w	r3, [r5], #4
 800c804:	4798      	blx	r3
 800c806:	3601      	adds	r6, #1
 800c808:	e7ee      	b.n	800c7e8 <__libc_init_array+0xc>
 800c80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c80e:	4798      	blx	r3
 800c810:	3601      	adds	r6, #1
 800c812:	e7f2      	b.n	800c7fa <__libc_init_array+0x1e>
 800c814:	0800d518 	.word	0x0800d518
 800c818:	0800d518 	.word	0x0800d518
 800c81c:	0800d518 	.word	0x0800d518
 800c820:	0800d51c 	.word	0x0800d51c

0800c824 <memcpy>:
 800c824:	440a      	add	r2, r1
 800c826:	4291      	cmp	r1, r2
 800c828:	f100 33ff 	add.w	r3, r0, #4294967295
 800c82c:	d100      	bne.n	800c830 <memcpy+0xc>
 800c82e:	4770      	bx	lr
 800c830:	b510      	push	{r4, lr}
 800c832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c836:	4291      	cmp	r1, r2
 800c838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c83c:	d1f9      	bne.n	800c832 <memcpy+0xe>
 800c83e:	bd10      	pop	{r4, pc}

0800c840 <floor>:
 800c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c844:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c848:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800c84c:	2e13      	cmp	r6, #19
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	460c      	mov	r4, r1
 800c854:	4605      	mov	r5, r0
 800c856:	4680      	mov	r8, r0
 800c858:	dc35      	bgt.n	800c8c6 <floor+0x86>
 800c85a:	2e00      	cmp	r6, #0
 800c85c:	da17      	bge.n	800c88e <floor+0x4e>
 800c85e:	a334      	add	r3, pc, #208	@ (adr r3, 800c930 <floor+0xf0>)
 800c860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c864:	f7f3 fc9a 	bl	800019c <__adddf3>
 800c868:	2200      	movs	r2, #0
 800c86a:	2300      	movs	r3, #0
 800c86c:	f7f3 feca 	bl	8000604 <__aeabi_dcmpgt>
 800c870:	b150      	cbz	r0, 800c888 <floor+0x48>
 800c872:	2c00      	cmp	r4, #0
 800c874:	da57      	bge.n	800c926 <floor+0xe6>
 800c876:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c87a:	432c      	orrs	r4, r5
 800c87c:	2500      	movs	r5, #0
 800c87e:	42ac      	cmp	r4, r5
 800c880:	4c2d      	ldr	r4, [pc, #180]	@ (800c938 <floor+0xf8>)
 800c882:	bf08      	it	eq
 800c884:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c888:	4623      	mov	r3, r4
 800c88a:	462a      	mov	r2, r5
 800c88c:	e024      	b.n	800c8d8 <floor+0x98>
 800c88e:	4f2b      	ldr	r7, [pc, #172]	@ (800c93c <floor+0xfc>)
 800c890:	4137      	asrs	r7, r6
 800c892:	ea01 0c07 	and.w	ip, r1, r7
 800c896:	ea5c 0c00 	orrs.w	ip, ip, r0
 800c89a:	d01d      	beq.n	800c8d8 <floor+0x98>
 800c89c:	a324      	add	r3, pc, #144	@ (adr r3, 800c930 <floor+0xf0>)
 800c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a2:	f7f3 fc7b 	bl	800019c <__adddf3>
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	f7f3 feab 	bl	8000604 <__aeabi_dcmpgt>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d0ea      	beq.n	800c888 <floor+0x48>
 800c8b2:	2c00      	cmp	r4, #0
 800c8b4:	bfbe      	ittt	lt
 800c8b6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c8ba:	4133      	asrlt	r3, r6
 800c8bc:	18e4      	addlt	r4, r4, r3
 800c8be:	2500      	movs	r5, #0
 800c8c0:	ea24 0407 	bic.w	r4, r4, r7
 800c8c4:	e7e0      	b.n	800c888 <floor+0x48>
 800c8c6:	2e33      	cmp	r6, #51	@ 0x33
 800c8c8:	dd0a      	ble.n	800c8e0 <floor+0xa0>
 800c8ca:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c8ce:	d103      	bne.n	800c8d8 <floor+0x98>
 800c8d0:	f7f3 fc64 	bl	800019c <__adddf3>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4610      	mov	r0, r2
 800c8da:	4619      	mov	r1, r3
 800c8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e0:	f04f 3cff 	mov.w	ip, #4294967295
 800c8e4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800c8e8:	fa2c f707 	lsr.w	r7, ip, r7
 800c8ec:	4207      	tst	r7, r0
 800c8ee:	d0f3      	beq.n	800c8d8 <floor+0x98>
 800c8f0:	a30f      	add	r3, pc, #60	@ (adr r3, 800c930 <floor+0xf0>)
 800c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f6:	f7f3 fc51 	bl	800019c <__adddf3>
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f7f3 fe81 	bl	8000604 <__aeabi_dcmpgt>
 800c902:	2800      	cmp	r0, #0
 800c904:	d0c0      	beq.n	800c888 <floor+0x48>
 800c906:	2c00      	cmp	r4, #0
 800c908:	da0a      	bge.n	800c920 <floor+0xe0>
 800c90a:	2e14      	cmp	r6, #20
 800c90c:	d101      	bne.n	800c912 <floor+0xd2>
 800c90e:	3401      	adds	r4, #1
 800c910:	e006      	b.n	800c920 <floor+0xe0>
 800c912:	2301      	movs	r3, #1
 800c914:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c918:	40b3      	lsls	r3, r6
 800c91a:	441d      	add	r5, r3
 800c91c:	4545      	cmp	r5, r8
 800c91e:	d3f6      	bcc.n	800c90e <floor+0xce>
 800c920:	ea25 0507 	bic.w	r5, r5, r7
 800c924:	e7b0      	b.n	800c888 <floor+0x48>
 800c926:	2500      	movs	r5, #0
 800c928:	462c      	mov	r4, r5
 800c92a:	e7ad      	b.n	800c888 <floor+0x48>
 800c92c:	f3af 8000 	nop.w
 800c930:	8800759c 	.word	0x8800759c
 800c934:	7e37e43c 	.word	0x7e37e43c
 800c938:	bff00000 	.word	0xbff00000
 800c93c:	000fffff 	.word	0x000fffff

0800c940 <_init>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	bf00      	nop
 800c944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c946:	bc08      	pop	{r3}
 800c948:	469e      	mov	lr, r3
 800c94a:	4770      	bx	lr

0800c94c <_fini>:
 800c94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94e:	bf00      	nop
 800c950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c952:	bc08      	pop	{r3}
 800c954:	469e      	mov	lr, r3
 800c956:	4770      	bx	lr
